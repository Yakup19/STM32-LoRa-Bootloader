
NUC.G070_LORA_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab8  080000b8  080000b8  000010b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be0  08008b70  08008b70  00009b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009750  08009750  0000b0fc  2**0
                  CONTENTS
  4 .ARM          00000000  08009750  08009750  0000b0fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009750  08009750  0000b0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009750  08009750  0000a750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009754  08009754  0000a754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009758  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000011c4  20000100  08009854  0000b100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200012c4  08009854  0000b2c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016197  00000000  00000000  0000b124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000396b  00000000  00000000  000212bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00024c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df9  00000000  00000000  00025e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181c4  00000000  00000000  00026c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019638  00000000  00000000  0003eddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0cb  00000000  00000000  00058415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e44e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004434  00000000  00000000  000e4524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000e8958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000100 	.word	0x20000100
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08008b48 	.word	0x08008b48

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000104 	.word	0x20000104
 80000fc:	08008b48 	.word	0x08008b48

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <W25qxx_Spi>:


W25Q_HandleTypeDef w25qxx;


uint8_t W25qxx_Spi(uint8_t Data){
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b087      	sub	sp, #28
 8000404:	af02      	add	r7, sp, #8
 8000406:	0002      	movs	r2, r0
 8000408:	1dfb      	adds	r3, r7, #7
 800040a:	701a      	strb	r2, [r3, #0]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&W25Q_SPI, &Data, &ret, 1, 100);
 800040c:	240f      	movs	r4, #15
 800040e:	193a      	adds	r2, r7, r4
 8000410:	1df9      	adds	r1, r7, #7
 8000412:	4806      	ldr	r0, [pc, #24]	@ (800042c <W25qxx_Spi+0x2c>)
 8000414:	2364      	movs	r3, #100	@ 0x64
 8000416:	9300      	str	r3, [sp, #0]
 8000418:	2301      	movs	r3, #1
 800041a:	f005 ff69 	bl	80062f0 <HAL_SPI_TransmitReceive>
	return ret;
 800041e:	193b      	adds	r3, r7, r4
 8000420:	781b      	ldrb	r3, [r3, #0]
}
 8000422:	0018      	movs	r0, r3
 8000424:	46bd      	mov	sp, r7
 8000426:	b005      	add	sp, #20
 8000428:	bd90      	pop	{r4, r7, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	200002cc 	.word	0x200002cc

08000430 <W25qxx_WaitForWriteEnd>:

void W25qxx_WaitForWriteEnd(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
	uint32_t count=0;
 8000436:	2300      	movs	r3, #0
 8000438:	607b      	str	r3, [r7, #4]
	HAL_Delay(1);
 800043a:	2001      	movs	r0, #1
 800043c:	f002 fb98 	bl	8002b70 <HAL_Delay>
	Cs_Low;
 8000440:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <W25qxx_WaitForWriteEnd+0x60>)
 8000442:	2200      	movs	r2, #0
 8000444:	2101      	movs	r1, #1
 8000446:	0018      	movs	r0, r3
 8000448:	f003 ff4b 	bl	80042e2 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25Q_READ_SR1);
 800044c:	2005      	movs	r0, #5
 800044e:	f7ff ffd7 	bl	8000400 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(Dummy_Byte);
 8000452:	20a5      	movs	r0, #165	@ 0xa5
 8000454:	f7ff ffd4 	bl	8000400 <W25qxx_Spi>
 8000458:	0003      	movs	r3, r0
 800045a:	0019      	movs	r1, r3
 800045c:	4b0d      	ldr	r3, [pc, #52]	@ (8000494 <W25qxx_WaitForWriteEnd+0x64>)
 800045e:	222c      	movs	r2, #44	@ 0x2c
 8000460:	5499      	strb	r1, [r3, r2]
		HAL_Delay(1);
 8000462:	2001      	movs	r0, #1
 8000464:	f002 fb84 	bl	8002b70 <HAL_Delay>
		count++;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3301      	adds	r3, #1
 800046c:	607b      	str	r3, [r7, #4]
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <W25qxx_WaitForWriteEnd+0x64>)
 8000470:	222c      	movs	r2, #44	@ 0x2c
 8000472:	5c9b      	ldrb	r3, [r3, r2]
 8000474:	001a      	movs	r2, r3
 8000476:	2301      	movs	r3, #1
 8000478:	4013      	ands	r3, r2
 800047a:	d1ea      	bne.n	8000452 <W25qxx_WaitForWriteEnd+0x22>
	Cs_High;
 800047c:	4b04      	ldr	r3, [pc, #16]	@ (8000490 <W25qxx_WaitForWriteEnd+0x60>)
 800047e:	2201      	movs	r2, #1
 8000480:	2101      	movs	r1, #1
 8000482:	0018      	movs	r0, r3
 8000484:	f003 ff2d 	bl	80042e2 <HAL_GPIO_WritePin>
}
 8000488:	46c0      	nop			@ (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b002      	add	sp, #8
 800048e:	bd80      	pop	{r7, pc}
 8000490:	50000400 	.word	0x50000400
 8000494:	20000120 	.word	0x20000120

08000498 <W25Q_Write_Enable>:
	UID	|=(((uint64_t)Rdata[0]<<24) | ((uint64_t)Rdata[1]<<16) | ((uint64_t)Rdata[2]<<8) | ((uint64_t)Rdata[3]))<<32;
	UID |=((Rdata[4]<<24) | (Rdata[5]<<16) | (Rdata[6]<<8)  | (Rdata[7]));
	return	UID;
}
void W25Q_Write_Enable(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	Cs_Low;
 800049c:	4b08      	ldr	r3, [pc, #32]	@ (80004c0 <W25Q_Write_Enable+0x28>)
 800049e:	2200      	movs	r2, #0
 80004a0:	2101      	movs	r1, #1
 80004a2:	0018      	movs	r0, r3
 80004a4:	f003 ff1d 	bl	80042e2 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25Q_WRITE_ENABLE);
 80004a8:	2006      	movs	r0, #6
 80004aa:	f7ff ffa9 	bl	8000400 <W25qxx_Spi>
	Cs_High;
 80004ae:	4b04      	ldr	r3, [pc, #16]	@ (80004c0 <W25Q_Write_Enable+0x28>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	2101      	movs	r1, #1
 80004b4:	0018      	movs	r0, r3
 80004b6:	f003 ff14 	bl	80042e2 <HAL_GPIO_WritePin>
}
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	50000400 	.word	0x50000400

080004c4 <W25Q_Write_Disable>:

void W25Q_Write_Disable(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	Cs_Low;
 80004c8:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <W25Q_Write_Disable+0x28>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	2101      	movs	r1, #1
 80004ce:	0018      	movs	r0, r3
 80004d0:	f003 ff07 	bl	80042e2 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25Q_WRITE_DISABLE);
 80004d4:	2004      	movs	r0, #4
 80004d6:	f7ff ff93 	bl	8000400 <W25qxx_Spi>
	Cs_High;
 80004da:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <W25Q_Write_Disable+0x28>)
 80004dc:	2201      	movs	r2, #1
 80004de:	2101      	movs	r1, #1
 80004e0:	0018      	movs	r0, r3
 80004e2:	f003 fefe 	bl	80042e2 <HAL_GPIO_WritePin>
}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	50000400 	.word	0x50000400

080004f0 <W25Q_Buf_Program>:
	W25Q_Write_Disable();

}

void W25Q_Buf_Program(uint32_t Adress, uint8_t *Buffer, uint8_t len)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b0c9      	sub	sp, #292	@ 0x124
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	4b49      	ldr	r3, [pc, #292]	@ (8000620 <W25Q_Buf_Program+0x130>)
 80004fc:	2490      	movs	r4, #144	@ 0x90
 80004fe:	0064      	lsls	r4, r4, #1
 8000500:	191b      	adds	r3, r3, r4
 8000502:	19db      	adds	r3, r3, r7
 8000504:	701a      	strb	r2, [r3, #0]
	W25qxx_WaitForWriteEnd();
 8000506:	f7ff ff93 	bl	8000430 <W25qxx_WaitForWriteEnd>
	W25Q_Write_Enable();
 800050a:	f7ff ffc5 	bl	8000498 <W25Q_Write_Enable>

	uint8_t Datas[256] = { '\0' };
 800050e:	4b45      	ldr	r3, [pc, #276]	@ (8000624 <W25Q_Buf_Program+0x134>)
 8000510:	191b      	adds	r3, r3, r4
 8000512:	19db      	adds	r3, r3, r7
 8000514:	0018      	movs	r0, r3
 8000516:	2380      	movs	r3, #128	@ 0x80
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f007 fe97 	bl	8008250 <memset>
	uint8_t adres[3] = { '\0' };
 8000522:	4b41      	ldr	r3, [pc, #260]	@ (8000628 <W25Q_Buf_Program+0x138>)
 8000524:	191b      	adds	r3, r3, r4
 8000526:	19db      	adds	r3, r3, r7
 8000528:	0018      	movs	r0, r3
 800052a:	2303      	movs	r3, #3
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f007 fe8e 	bl	8008250 <memset>
	/*Gelen 24 bitlik Adres bilgisi 8 bit olarak parçalanıyor*/
	adres[0] = (Adress >> 16) & 0xFF;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	0c1b      	lsrs	r3, r3, #16
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b3b      	ldr	r3, [pc, #236]	@ (8000628 <W25Q_Buf_Program+0x138>)
 800053c:	0021      	movs	r1, r4
 800053e:	185b      	adds	r3, r3, r1
 8000540:	19db      	adds	r3, r3, r7
 8000542:	701a      	strb	r2, [r3, #0]
	adres[1] = (Adress >> 8) & 0xFF;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	0a1b      	lsrs	r3, r3, #8
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b37      	ldr	r3, [pc, #220]	@ (8000628 <W25Q_Buf_Program+0x138>)
 800054c:	185b      	adds	r3, r3, r1
 800054e:	19db      	adds	r3, r3, r7
 8000550:	705a      	strb	r2, [r3, #1]
	adres[2] = (Adress) & 0xFF;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b34      	ldr	r3, [pc, #208]	@ (8000628 <W25Q_Buf_Program+0x138>)
 8000558:	185b      	adds	r3, r3, r1
 800055a:	19db      	adds	r3, r3, r7
 800055c:	709a      	strb	r2, [r3, #2]

	for(int i=0; i<256;i++)
 800055e:	2300      	movs	r3, #0
 8000560:	228e      	movs	r2, #142	@ 0x8e
 8000562:	0052      	lsls	r2, r2, #1
 8000564:	18ba      	adds	r2, r7, r2
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	e015      	b.n	8000596 <W25Q_Buf_Program+0xa6>
	{
		Datas[i]= *Buffer;
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	7819      	ldrb	r1, [r3, #0]
 800056e:	4b2d      	ldr	r3, [pc, #180]	@ (8000624 <W25Q_Buf_Program+0x134>)
 8000570:	2290      	movs	r2, #144	@ 0x90
 8000572:	0052      	lsls	r2, r2, #1
 8000574:	189b      	adds	r3, r3, r2
 8000576:	19da      	adds	r2, r3, r7
 8000578:	208e      	movs	r0, #142	@ 0x8e
 800057a:	0040      	lsls	r0, r0, #1
 800057c:	183b      	adds	r3, r7, r0
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	18d3      	adds	r3, r2, r3
 8000582:	1c0a      	adds	r2, r1, #0
 8000584:	701a      	strb	r2, [r3, #0]
		Buffer+=1;
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	3301      	adds	r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
	for(int i=0; i<256;i++)
 800058c:	183b      	adds	r3, r7, r0
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	3301      	adds	r3, #1
 8000592:	183a      	adds	r2, r7, r0
 8000594:	6013      	str	r3, [r2, #0]
 8000596:	238e      	movs	r3, #142	@ 0x8e
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2bff      	cmp	r3, #255	@ 0xff
 80005a0:	dde3      	ble.n	800056a <W25Q_Buf_Program+0x7a>
	}

	Cs_Low;
 80005a2:	4b22      	ldr	r3, [pc, #136]	@ (800062c <W25Q_Buf_Program+0x13c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	2101      	movs	r1, #1
 80005a8:	0018      	movs	r0, r3
 80005aa:	f003 fe9a 	bl	80042e2 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25Q_PAGE_PROGRAM);
 80005ae:	2002      	movs	r0, #2
 80005b0:	f7ff ff26 	bl	8000400 <W25qxx_Spi>
	for (int i = 0; i < 3; i++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	228c      	movs	r2, #140	@ 0x8c
 80005b8:	0052      	lsls	r2, r2, #1
 80005ba:	18ba      	adds	r2, r7, r2
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	e012      	b.n	80005e6 <W25Q_Buf_Program+0xf6>
		W25qxx_Spi(adres[i]);
 80005c0:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <W25Q_Buf_Program+0x138>)
 80005c2:	2290      	movs	r2, #144	@ 0x90
 80005c4:	0052      	lsls	r2, r2, #1
 80005c6:	189b      	adds	r3, r3, r2
 80005c8:	19da      	adds	r2, r3, r7
 80005ca:	248c      	movs	r4, #140	@ 0x8c
 80005cc:	0064      	lsls	r4, r4, #1
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	18d3      	adds	r3, r2, r3
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ff12 	bl	8000400 <W25qxx_Spi>
	for (int i = 0; i < 3; i++)
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	193a      	adds	r2, r7, r4
 80005e4:	6013      	str	r3, [r2, #0]
 80005e6:	238c      	movs	r3, #140	@ 0x8c
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	18fb      	adds	r3, r7, r3
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	dde6      	ble.n	80005c0 <W25Q_Buf_Program+0xd0>
	HAL_SPI_Transmit(&W25Q_SPI, Datas, 256, HAL_MAX_DELAY);
 80005f2:	2301      	movs	r3, #1
 80005f4:	425b      	negs	r3, r3
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	0052      	lsls	r2, r2, #1
 80005fa:	2118      	movs	r1, #24
 80005fc:	1879      	adds	r1, r7, r1
 80005fe:	480c      	ldr	r0, [pc, #48]	@ (8000630 <W25Q_Buf_Program+0x140>)
 8000600:	f005 fbc4 	bl	8005d8c <HAL_SPI_Transmit>
	Cs_High;
 8000604:	4b09      	ldr	r3, [pc, #36]	@ (800062c <W25Q_Buf_Program+0x13c>)
 8000606:	2201      	movs	r2, #1
 8000608:	2101      	movs	r1, #1
 800060a:	0018      	movs	r0, r3
 800060c:	f003 fe69 	bl	80042e2 <HAL_GPIO_WritePin>
	/*Pg. 66 Page Program Time Typ 0,7ms Max 3ms*/
	W25qxx_WaitForWriteEnd();
 8000610:	f7ff ff0e 	bl	8000430 <W25qxx_WaitForWriteEnd>
	W25Q_Write_Disable();
 8000614:	f7ff ff56 	bl	80004c4 <W25Q_Write_Disable>
}
 8000618:	46c0      	nop			@ (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	b049      	add	sp, #292	@ 0x124
 800061e:	bd90      	pop	{r4, r7, pc}
 8000620:	fffffee7 	.word	0xfffffee7
 8000624:	fffffef8 	.word	0xfffffef8
 8000628:	fffffef4 	.word	0xfffffef4
 800062c:	50000400 	.word	0x50000400
 8000630:	200002cc 	.word	0x200002cc

08000634 <W25Q_Read_Fast>:
	Cs_High;

	return status;
}
uint8_t W25Q_Read_Fast(uint32_t Adress, uint8_t *Buffer)
{
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	W25qxx_WaitForWriteEnd();
 800063e:	f7ff fef7 	bl	8000430 <W25qxx_WaitForWriteEnd>

	int8_t Adresses[3] = { '\0' };
 8000642:	2408      	movs	r4, #8
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	2303      	movs	r3, #3
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f007 fdff 	bl	8008250 <memset>
	HAL_StatusTypeDef status = HAL_OK;
 8000652:	230b      	movs	r3, #11
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
	Adresses[0] = (Adress >> 16) & 0xFF;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	0c1b      	lsrs	r3, r3, #16
 800065e:	b25a      	sxtb	r2, r3
 8000660:	193b      	adds	r3, r7, r4
 8000662:	701a      	strb	r2, [r3, #0]
	Adresses[1] = (Adress >> 8) & 0xFF;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	b25a      	sxtb	r2, r3
 800066a:	193b      	adds	r3, r7, r4
 800066c:	705a      	strb	r2, [r3, #1]
	Adresses[2] = Adress & 0xFF;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	b25a      	sxtb	r2, r3
 8000672:	193b      	adds	r3, r7, r4
 8000674:	709a      	strb	r2, [r3, #2]
	Cs_Low;
 8000676:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <W25Q_Read_Fast+0xb0>)
 8000678:	2200      	movs	r2, #0
 800067a:	2101      	movs	r1, #1
 800067c:	0018      	movs	r0, r3
 800067e:	f003 fe30 	bl	80042e2 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25Q_FAST_READ);
 8000682:	200b      	movs	r0, #11
 8000684:	f7ff febc 	bl	8000400 <W25qxx_Spi>
	for (int i = 0; i < 3; i++)
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	e00c      	b.n	80006a8 <W25Q_Read_Fast+0x74>
		W25qxx_Spi(Adresses[i]);
 800068e:	2308      	movs	r3, #8
 8000690:	18fa      	adds	r2, r7, r3
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	18d3      	adds	r3, r2, r3
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b25b      	sxtb	r3, r3
 800069a:	b2db      	uxtb	r3, r3
 800069c:	0018      	movs	r0, r3
 800069e:	f7ff feaf 	bl	8000400 <W25qxx_Spi>
	for (int i = 0; i < 3; i++)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3301      	adds	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	ddef      	ble.n	800068e <W25Q_Read_Fast+0x5a>
	W25qxx_Spi(Dummy_Byte);
 80006ae:	20a5      	movs	r0, #165	@ 0xa5
 80006b0:	f7ff fea6 	bl	8000400 <W25qxx_Spi>
	status = HAL_SPI_Receive(&W25Q_SPI, Buffer, 256, HAL_MAX_DELAY);
 80006b4:	250b      	movs	r5, #11
 80006b6:	197c      	adds	r4, r7, r5
 80006b8:	2301      	movs	r3, #1
 80006ba:	425b      	negs	r3, r3
 80006bc:	2280      	movs	r2, #128	@ 0x80
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	6839      	ldr	r1, [r7, #0]
 80006c2:	4809      	ldr	r0, [pc, #36]	@ (80006e8 <W25Q_Read_Fast+0xb4>)
 80006c4:	f005 fcc2 	bl	800604c <HAL_SPI_Receive>
 80006c8:	0003      	movs	r3, r0
 80006ca:	7023      	strb	r3, [r4, #0]
	Cs_High;
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <W25Q_Read_Fast+0xb0>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	2101      	movs	r1, #1
 80006d2:	0018      	movs	r0, r3
 80006d4:	f003 fe05 	bl	80042e2 <HAL_GPIO_WritePin>

	return status;
 80006d8:	197b      	adds	r3, r7, r5
 80006da:	781b      	ldrb	r3, [r3, #0]
}
 80006dc:	0018      	movs	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	b004      	add	sp, #16
 80006e2:	bdb0      	pop	{r4, r5, r7, pc}
 80006e4:	50000400 	.word	0x50000400
 80006e8:	200002cc 	.word	0x200002cc

080006ec <W25Q_Chip_Erase>:


void W25Q_Chip_Erase(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
	W25Q_Write_Enable();
 80006f2:	f7ff fed1 	bl	8000498 <W25Q_Write_Enable>
	uint8_t Tdata=W25Q_CHIP_ERASE;
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	22c7      	movs	r2, #199	@ 0xc7
 80006fa:	701a      	strb	r2, [r3, #0]
	Cs_Low;
 80006fc:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <W25Q_Chip_Erase+0x40>)
 80006fe:	2200      	movs	r2, #0
 8000700:	2101      	movs	r1, #1
 8000702:	0018      	movs	r0, r3
 8000704:	f003 fded 	bl	80042e2 <HAL_GPIO_WritePin>
	W25qxx_Spi(Tdata);
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	0018      	movs	r0, r3
 800070e:	f7ff fe77 	bl	8000400 <W25qxx_Spi>
	Cs_High;
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <W25Q_Chip_Erase+0x40>)
 8000714:	2201      	movs	r2, #1
 8000716:	2101      	movs	r1, #1
 8000718:	0018      	movs	r0, r3
 800071a:	f003 fde2 	bl	80042e2 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800071e:	f7ff fe87 	bl	8000430 <W25qxx_WaitForWriteEnd>


}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	50000400 	.word	0x50000400

08000730 <send_ack_response>:
const uint32_t go_to_address = 0;
static uint8_t EXT_Flash_Buf[256]={'\0'};
static uint32_t EXT_Flash_Write_Start_Addr=0x00000000 ;


void send_ack_response(uint8_t payload_length, const uint8_t *payload, uint32_t payload_size) {
 8000730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000732:	46c6      	mov	lr, r8
 8000734:	b500      	push	{lr}
 8000736:	b08c      	sub	sp, #48	@ 0x30
 8000738:	af00      	add	r7, sp, #0
 800073a:	6239      	str	r1, [r7, #32]
 800073c:	61fa      	str	r2, [r7, #28]
 800073e:	230f      	movs	r3, #15
 8000740:	2118      	movs	r1, #24
 8000742:	185b      	adds	r3, r3, r1
 8000744:	19db      	adds	r3, r3, r7
 8000746:	1c02      	adds	r2, r0, #0
 8000748:	701a      	strb	r2, [r3, #0]
 800074a:	466b      	mov	r3, sp
 800074c:	4698      	mov	r8, r3
    uint8_t ack_buffer[5 + payload_size];
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3305      	adds	r3, #5
 8000752:	001a      	movs	r2, r3
 8000754:	3a01      	subs	r2, #1
 8000756:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	2200      	movs	r2, #0
 800075c:	60fa      	str	r2, [r7, #12]
 800075e:	68b8      	ldr	r0, [r7, #8]
 8000760:	68f9      	ldr	r1, [r7, #12]
 8000762:	0006      	movs	r6, r0
 8000764:	0f72      	lsrs	r2, r6, #29
 8000766:	000e      	movs	r6, r1
 8000768:	00f6      	lsls	r6, r6, #3
 800076a:	617e      	str	r6, [r7, #20]
 800076c:	697e      	ldr	r6, [r7, #20]
 800076e:	4316      	orrs	r6, r2
 8000770:	617e      	str	r6, [r7, #20]
 8000772:	0001      	movs	r1, r0
 8000774:	00c9      	lsls	r1, r1, #3
 8000776:	6139      	str	r1, [r7, #16]
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	2200      	movs	r2, #0
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	6838      	ldr	r0, [r7, #0]
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	0006      	movs	r6, r0
 8000784:	0f72      	lsrs	r2, r6, #29
 8000786:	000e      	movs	r6, r1
 8000788:	00f5      	lsls	r5, r6, #3
 800078a:	4315      	orrs	r5, r2
 800078c:	0001      	movs	r1, r0
 800078e:	00cc      	lsls	r4, r1, #3
 8000790:	3307      	adds	r3, #7
 8000792:	08db      	lsrs	r3, r3, #3
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	4669      	mov	r1, sp
 8000798:	1ac9      	subs	r1, r1, r3
 800079a:	468d      	mov	sp, r1
 800079c:	466b      	mov	r3, sp
 800079e:	3300      	adds	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    memcpy(ack_buffer, RESPONSE_HEADER, sizeof(RESPONSE_HEADER));
 80007a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007a4:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <send_ack_response+0xcc>)
 80007a6:	0010      	movs	r0, r2
 80007a8:	0019      	movs	r1, r3
 80007aa:	2303      	movs	r3, #3
 80007ac:	001a      	movs	r2, r3
 80007ae:	f007 fd83 	bl	80082b8 <memcpy>
    ack_buffer[3] = BL_ACK_VALUE;
 80007b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007b4:	22a5      	movs	r2, #165	@ 0xa5
 80007b6:	70da      	strb	r2, [r3, #3]
    ack_buffer[4] = payload_length;
 80007b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007ba:	220f      	movs	r2, #15
 80007bc:	2118      	movs	r1, #24
 80007be:	1852      	adds	r2, r2, r1
 80007c0:	19d2      	adds	r2, r2, r7
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	711a      	strb	r2, [r3, #4]
    if (payload_size > 0) {
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d006      	beq.n	80007da <send_ack_response+0xaa>
        memcpy(&ack_buffer[5], payload, payload_size);
 80007cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007ce:	3305      	adds	r3, #5
 80007d0:	69fa      	ldr	r2, [r7, #28]
 80007d2:	6a39      	ldr	r1, [r7, #32]
 80007d4:	0018      	movs	r0, r3
 80007d6:	f007 fd6f 	bl	80082b8 <memcpy>
    }
    HAL_UART_Transmit(&huart3, ack_buffer, sizeof(RESPONSE_HEADER) + 2 + payload_size, HAL_MAX_DELAY);
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	3305      	adds	r3, #5
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	2301      	movs	r3, #1
 80007e4:	425b      	negs	r3, r3
 80007e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80007e8:	4805      	ldr	r0, [pc, #20]	@ (8000800 <send_ack_response+0xd0>)
 80007ea:	f006 f98d 	bl	8006b08 <HAL_UART_Transmit>
 80007ee:	46c5      	mov	sp, r8
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b00c      	add	sp, #48	@ 0x30
 80007f6:	bc80      	pop	{r7}
 80007f8:	46b8      	mov	r8, r7
 80007fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007fc:	08008ee8 	.word	0x08008ee8
 8000800:	200003c4 	.word	0x200003c4

08000804 <assemble_crc_from_packet>:


uint32_t assemble_crc_from_packet(const uint8_t *packet, uint32_t packet_len) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
    // CRC located in last 4 bytes of packet, LSB first
    return ( (uint32_t)packet[packet_len - 4]        ) |
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	3b04      	subs	r3, #4
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	18d3      	adds	r3, r2, r3
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	0019      	movs	r1, r3
           (((uint32_t)packet[packet_len - 3]) << 8 ) |
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	3b03      	subs	r3, #3
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	18d3      	adds	r3, r2, r3
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	021b      	lsls	r3, r3, #8
    return ( (uint32_t)packet[packet_len - 4]        ) |
 8000826:	000a      	movs	r2, r1
 8000828:	431a      	orrs	r2, r3
           (((uint32_t)packet[packet_len - 2]) << 16) |
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	3b02      	subs	r3, #2
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	18cb      	adds	r3, r1, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	041b      	lsls	r3, r3, #16
           (((uint32_t)packet[packet_len - 3]) << 8 ) |
 8000836:	431a      	orrs	r2, r3
           (((uint32_t)packet[packet_len - 1]) << 24);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	3b01      	subs	r3, #1
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	18cb      	adds	r3, r1, r3
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	061b      	lsls	r3, r3, #24
           (((uint32_t)packet[packet_len - 2]) << 16) |
 8000844:	4313      	orrs	r3, r2
}
 8000846:	0018      	movs	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}

0800084e <assemble_crc_from_fixed_position>:

uint32_t assemble_crc_from_fixed_position(const uint8_t *packet) {
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
    // CRC located at packet[2]..packet[5], LSB first
    return ( (uint32_t)packet[2]        ) |
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3302      	adds	r3, #2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	001a      	movs	r2, r3
           (((uint32_t)packet[3]) << 8 ) |
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3303      	adds	r3, #3
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	021b      	lsls	r3, r3, #8
    return ( (uint32_t)packet[2]        ) |
 8000866:	431a      	orrs	r2, r3
           (((uint32_t)packet[4]) << 16) |
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3304      	adds	r3, #4
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	041b      	lsls	r3, r3, #16
           (((uint32_t)packet[3]) << 8 ) |
 8000870:	431a      	orrs	r2, r3
           (((uint32_t)packet[5]) << 24);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3305      	adds	r3, #5
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	061b      	lsls	r3, r3, #24
           (((uint32_t)packet[4]) << 16) |
 800087a:	4313      	orrs	r3, r2
}
 800087c:	0018      	movs	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	b002      	add	sp, #8
 8000882:	bd80      	pop	{r7, pc}

08000884 <bootloader_get_ver_cmd>:

void bootloader_get_ver_cmd(uint8_t *bl_rx_data) {
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	printMessage("Bootloaer_Get_Ver_Cmd");
 800088c:	4b1d      	ldr	r3, [pc, #116]	@ (8000904 <bootloader_get_ver_cmd+0x80>)
 800088e:	0018      	movs	r0, r3
 8000890:	f001 fa4c 	bl	8001d2c <printMessage>

	uint32_t command_packet_length = bl_rx_data[0] + 1;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	0018      	movs	r0, r3
 80008a0:	f7ff ffd5 	bl	800084e <assemble_crc_from_fixed_position>
 80008a4:	0003      	movs	r3, r0
 80008a6:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_length - 4, host_crc)) {
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	1f19      	subs	r1, r3, #4
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 fbd3 	bl	800105c <bootloader_verify_crc>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d119      	bne.n	80008ee <bootloader_get_ver_cmd+0x6a>
        uint8_t bl_Version = bootloader_get_version();
 80008ba:	f000 fc61 	bl	8001180 <bootloader_get_version>
 80008be:	0003      	movs	r3, r0
 80008c0:	001a      	movs	r2, r3
 80008c2:	210f      	movs	r1, #15
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	701a      	strb	r2, [r3, #0]

        send_ack_response(1, &bl_Version, sizeof(bl_Version));
 80008c8:	000c      	movs	r4, r1
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2201      	movs	r2, #1
 80008ce:	0019      	movs	r1, r3
 80008d0:	2001      	movs	r0, #1
 80008d2:	f7ff ff2d 	bl	8000730 <send_ack_response>
		printMessage(" BL_VER : %d %#x  ", bl_Version, bl_Version);
 80008d6:	0022      	movs	r2, r4
 80008d8:	18bb      	adds	r3, r7, r2
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	0019      	movs	r1, r3
 80008de:	18bb      	adds	r3, r7, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	001a      	movs	r2, r3
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <bootloader_get_ver_cmd+0x84>)
 80008e6:	0018      	movs	r0, r3
 80008e8:	f001 fa20 	bl	8001d2c <printMessage>

	} else {
		printMessage("Checksum fail ");
		bootloader_send_nack();
	}
}
 80008ec:	e005      	b.n	80008fa <bootloader_get_ver_cmd+0x76>
		printMessage("Checksum fail ");
 80008ee:	4b07      	ldr	r3, [pc, #28]	@ (800090c <bootloader_get_ver_cmd+0x88>)
 80008f0:	0018      	movs	r0, r3
 80008f2:	f001 fa1b 	bl	8001d2c <printMessage>
		bootloader_send_nack();
 80008f6:	f000 fc2b 	bl	8001150 <bootloader_send_nack>
}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b007      	add	sp, #28
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	08008b70 	.word	0x08008b70
 8000908:	08008b88 	.word	0x08008b88
 800090c:	08008b9c 	.word	0x08008b9c

08000910 <bootloader_get_help_cmd>:

void bootloader_get_help_cmd(uint8_t *bl_rx_data) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	printMessage("bootloader_get_help_cmd");
 8000918:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <bootloader_get_help_cmd+0x58>)
 800091a:	0018      	movs	r0, r3
 800091c:	f001 fa06 	bl	8001d2c <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
	uint32_t host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff ff8f 	bl	800084e <assemble_crc_from_fixed_position>
 8000930:	0003      	movs	r3, r0
 8000932:	60bb      	str	r3, [r7, #8]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	1f19      	subs	r1, r3, #4
 8000938:	68ba      	ldr	r2, [r7, #8]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	0018      	movs	r0, r3
 800093e:	f000 fb8d 	bl	800105c <bootloader_verify_crc>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d106      	bne.n	8000954 <bootloader_get_help_cmd+0x44>
		send_ack_response(SUPPORTED_COMMANDS_COUNT, supported_commands, SUPPORTED_COMMANDS_COUNT);
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <bootloader_get_help_cmd+0x5c>)
 8000948:	220f      	movs	r2, #15
 800094a:	0019      	movs	r1, r3
 800094c:	200f      	movs	r0, #15
 800094e:	f7ff feef 	bl	8000730 <send_ack_response>

	} else {
		printMessage("Checksum fail");
		bootloader_send_nack();
	}
}
 8000952:	e005      	b.n	8000960 <bootloader_get_help_cmd+0x50>
		printMessage("Checksum fail");
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <bootloader_get_help_cmd+0x60>)
 8000956:	0018      	movs	r0, r3
 8000958:	f001 f9e8 	bl	8001d2c <printMessage>
		bootloader_send_nack();
 800095c:	f000 fbf8 	bl	8001150 <bootloader_send_nack>
}
 8000960:	46c0      	nop			@ (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b004      	add	sp, #16
 8000966:	bd80      	pop	{r7, pc}
 8000968:	08008bac 	.word	0x08008bac
 800096c:	20000000 	.word	0x20000000
 8000970:	08008bc4 	.word	0x08008bc4

08000974 <bootloader_get_cid_cmd>:

void bootloader_get_cid_cmd(uint8_t *bl_rx_data) {
 8000974:	b5b0      	push	{r4, r5, r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	3301      	adds	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff ff61 	bl	800084e <assemble_crc_from_fixed_position>
 800098c:	0003      	movs	r3, r0
 800098e:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	1f19      	subs	r1, r3, #4
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	0018      	movs	r0, r3
 800099a:	f000 fb5f 	bl	800105c <bootloader_verify_crc>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d125      	bne.n	80009ee <bootloader_get_cid_cmd+0x7a>
		uint16_t val = get_mcu_chip_id();
 80009a2:	250e      	movs	r5, #14
 80009a4:	197c      	adds	r4, r7, r5
 80009a6:	f000 fbf1 	bl	800118c <get_mcu_chip_id>
 80009aa:	0003      	movs	r3, r0
 80009ac:	8023      	strh	r3, [r4, #0]
        uint8_t cID[2] = {val & 0xFF, /*High 8bit*/(val >> 8) & 0xFF};
 80009ae:	0028      	movs	r0, r5
 80009b0:	183b      	adds	r3, r7, r0
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	210c      	movs	r1, #12
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	183b      	adds	r3, r7, r0
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	000c      	movs	r4, r1
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	705a      	strb	r2, [r3, #1]

		printMessage("Chip Id: %#x ", cID[0], cID[1]);
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	0019      	movs	r1, r3
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	785b      	ldrb	r3, [r3, #1]
 80009d6:	001a      	movs	r2, r3
 80009d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <bootloader_get_cid_cmd+0x90>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 f9a6 	bl	8001d2c <printMessage>
		send_ack_response(2, cID, sizeof(cID));
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	2202      	movs	r2, #2
 80009e4:	0019      	movs	r1, r3
 80009e6:	2002      	movs	r0, #2
 80009e8:	f7ff fea2 	bl	8000730 <send_ack_response>
	} else {
		printMessage("Checksum fail ");
		bootloader_send_nack();
	}
}
 80009ec:	e005      	b.n	80009fa <bootloader_get_cid_cmd+0x86>
		printMessage("Checksum fail ");
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <bootloader_get_cid_cmd+0x94>)
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 f99b 	bl	8001d2c <printMessage>
		bootloader_send_nack();
 80009f6:	f000 fbab 	bl	8001150 <bootloader_send_nack>
}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b006      	add	sp, #24
 8000a00:	bdb0      	pop	{r4, r5, r7, pc}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	08008bd4 	.word	0x08008bd4
 8000a08:	08008b9c 	.word	0x08008b9c

08000a0c <bootloader_go_to_addr_cmd>:

void bootloader_go_to_addr_cmd(uint8_t *bl_rx_data) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	printMessage("bootlodaer_go_to_addr_cmd ");
 8000a14:	4b41      	ldr	r3, [pc, #260]	@ (8000b1c <bootloader_go_to_addr_cmd+0x110>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f001 f988 	bl	8001d2c <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t host_crc = assemble_crc_from_packet(bl_rx_data, command_packet_len);
 8000a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	0011      	movs	r1, r2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff feea 	bl	8000804 <assemble_crc_from_packet>
 8000a30:	0003      	movs	r3, r0
 8000a32:	623b      	str	r3, [r7, #32]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a36:	1f19      	subs	r1, r3, #4
 8000a38:	6a3a      	ldr	r2, [r7, #32]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 fb0d 	bl	800105c <bootloader_verify_crc>
 8000a42:	1e03      	subs	r3, r0, #0
 8000a44:	d15f      	bne.n	8000b06 <bootloader_go_to_addr_cmd+0xfa>

		uint32_t go_to_address =
			  ((uint32_t)bl_rx_data[2])
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3302      	adds	r3, #2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	001a      	movs	r2, r3
			| ((uint32_t)bl_rx_data[3] << 8)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3303      	adds	r3, #3
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	021b      	lsls	r3, r3, #8
 8000a56:	431a      	orrs	r2, r3
			| ((uint32_t)bl_rx_data[4] << 16)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	041b      	lsls	r3, r3, #16
 8000a60:	431a      	orrs	r2, r3
			| ((uint32_t)bl_rx_data[5] << 24);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3305      	adds	r3, #5
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	061b      	lsls	r3, r3, #24
		uint32_t go_to_address =
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	61fb      	str	r3, [r7, #28]

		if (bootloader_verify_address(go_to_address) == ADDR_VALID) {
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	0018      	movs	r0, r3
 8000a72:	f000 fbb1 	bl	80011d8 <bootloader_verify_address>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d136      	bne.n	8000ae8 <bootloader_go_to_addr_cmd+0xdc>
			send_ack_response(1, (uint8_t[]){ADDR_VALID}, 1);
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2201      	movs	r2, #1
 8000a86:	0019      	movs	r1, r3
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fe51 	bl	8000730 <send_ack_response>
			printMessage("Going to Address ");
 8000a8e:	4b24      	ldr	r3, [pc, #144]	@ (8000b20 <bootloader_go_to_addr_cmd+0x114>)
 8000a90:	0018      	movs	r0, r3
 8000a92:	f001 f94b 	bl	8001d2c <printMessage>

			/*JUMP öncesi herşey temizleniyor*/
			//__set_MSP(mspValue);	// Bu fonksiyon F407 De calisiyordu ama L053 de çalışmıyor
			SysTick->CTRL = 0;
 8000a96:	4b23      	ldr	r3, [pc, #140]	@ (8000b24 <bootloader_go_to_addr_cmd+0x118>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
			SysTick->LOAD = 0;
 8000a9c:	4b21      	ldr	r3, [pc, #132]	@ (8000b24 <bootloader_go_to_addr_cmd+0x118>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	605a      	str	r2, [r3, #4]
			SysTick->VAL = 0;
 8000aa2:	4b20      	ldr	r3, [pc, #128]	@ (8000b24 <bootloader_go_to_addr_cmd+0x118>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]

			HAL_DeInit();
 8000aa8:	f001 ffd0 	bl	8002a4c <HAL_DeInit>
			HAL_RCC_DeInit();
 8000aac:	f004 fa4c 	bl	8004f48 <HAL_RCC_DeInit>
			HAL_I2C_DeInit(&hi2c1);
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <bootloader_go_to_addr_cmd+0x11c>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f003 fcd8 	bl	8004468 <HAL_I2C_DeInit>
			HAL_UART_MspDeInit(&huart3);
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <bootloader_go_to_addr_cmd+0x120>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f001 fec6 	bl	800284c <HAL_UART_MspDeInit>
			HAL_DMA_DeInit(&hdma_usart3_rx);
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <bootloader_go_to_addr_cmd+0x124>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f002 fc2c 	bl	8003320 <HAL_DMA_DeInit>
			HAL_CRC_DeInit(&hcrc);
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <bootloader_go_to_addr_cmd+0x128>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f002 f9ea 	bl	8002ea4 <HAL_CRC_DeInit>

			SCB->VTOR = go_to_address;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <bootloader_go_to_addr_cmd+0x12c>)
 8000ad2:	69fa      	ldr	r2, [r7, #28]
 8000ad4:	609a      	str	r2, [r3, #8]
			uint32_t jump_address = *((volatile uint32_t*) (go_to_address + 4));
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	61bb      	str	r3, [r7, #24]
			void (*jump_to_app)(void) = (void *)jump_address;
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	617b      	str	r3, [r7, #20]
			jump_to_app();
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	4798      	blx	r3
		}
	} else {
		printMessage("Checksum fail ");
		bootloader_send_nack();
	}
}
 8000ae6:	e014      	b.n	8000b12 <bootloader_go_to_addr_cmd+0x106>
			printMessage("Go Address Invalid ");
 8000ae8:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <bootloader_go_to_addr_cmd+0x130>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f001 f91e 	bl	8001d2c <printMessage>
			send_ack_response(1, (uint8_t[]){ADDR_INVALID}, 1);
 8000af0:	210c      	movs	r1, #12
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2201      	movs	r2, #1
 8000afc:	0019      	movs	r1, r3
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff fe16 	bl	8000730 <send_ack_response>
}
 8000b04:	e005      	b.n	8000b12 <bootloader_go_to_addr_cmd+0x106>
		printMessage("Checksum fail ");
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <bootloader_go_to_addr_cmd+0x134>)
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f001 f90f 	bl	8001d2c <printMessage>
		bootloader_send_nack();
 8000b0e:	f000 fb1f 	bl	8001150 <bootloader_send_nack>
}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b00a      	add	sp, #40	@ 0x28
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	08008be4 	.word	0x08008be4
 8000b20:	08008c00 	.word	0x08008c00
 8000b24:	e000e010 	.word	0xe000e010
 8000b28:	20000278 	.word	0x20000278
 8000b2c:	200003c4 	.word	0x200003c4
 8000b30:	20000458 	.word	0x20000458
 8000b34:	20000254 	.word	0x20000254
 8000b38:	e000ed00 	.word	0xe000ed00
 8000b3c:	08008c14 	.word	0x08008c14
 8000b40:	08008b9c 	.word	0x08008b9c

08000b44 <bootloader_flash_erase_cmd>:

void bootloader_flash_erase_cmd(uint8_t *bl_rx_data) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	printMessage("bootloader_flash_erase_cmd ");
 8000b4c:	4b22      	ldr	r3, [pc, #136]	@ (8000bd8 <bootloader_flash_erase_cmd+0x94>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f001 f8ec 	bl	8001d2c <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = assemble_crc_from_packet(bl_rx_data, command_packet_len);
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	0011      	movs	r1, r2
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff fe4e 	bl	8000804 <assemble_crc_from_packet>
 8000b68:	0003      	movs	r3, r0
 8000b6a:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	1f19      	subs	r1, r3, #4
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 fa71 	bl	800105c <bootloader_verify_crc>
 8000b7a:	1e03      	subs	r3, r0, #0
 8000b7c:	d121      	bne.n	8000bc2 <bootloader_flash_erase_cmd+0x7e>
		printMessage("Initial Sector: %d Number Of Sectors: %d ", bl_rx_data[2], bl_rx_data[3]);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3302      	adds	r3, #2
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	0019      	movs	r1, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3303      	adds	r3, #3
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <bootloader_flash_erase_cmd+0x98>)
 8000b90:	0018      	movs	r0, r3
 8000b92:	f001 f8cb 	bl	8001d2c <printMessage>

		send_ack_response(1, (uint8_t[]){execute_flash_erase(bl_rx_data[2], bl_rx_data[3])}, 1);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3302      	adds	r3, #2
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3303      	adds	r3, #3
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	0010      	movs	r0, r2
 8000ba6:	f000 fb2d 	bl	8001204 <execute_flash_erase>
 8000baa:	0003      	movs	r3, r0
 8000bac:	001a      	movs	r2, r3
 8000bae:	210c      	movs	r1, #12
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	0019      	movs	r1, r3
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f7ff fdb8 	bl	8000730 <send_ack_response>
	}
	else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}
}
 8000bc0:	e005      	b.n	8000bce <bootloader_flash_erase_cmd+0x8a>
		printMessage(" Checksum fail ");
 8000bc2:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <bootloader_flash_erase_cmd+0x9c>)
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f001 f8b1 	bl	8001d2c <printMessage>
		bootloader_send_nack();
 8000bca:	f000 fac1 	bl	8001150 <bootloader_send_nack>
}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b006      	add	sp, #24
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	08008c28 	.word	0x08008c28
 8000bdc:	08008c44 	.word	0x08008c44
 8000be0:	08008c70 	.word	0x08008c70

08000be4 <bootloader_mem_write_cmd>:

void bootloader_mem_write_cmd(uint8_t *bl_rx_data) {
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b089      	sub	sp, #36	@ 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	printMessage(" bootloader_mem_write_cmd ");
 8000bec:	4b37      	ldr	r3, [pc, #220]	@ (8000ccc <bootloader_mem_write_cmd+0xe8>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f001 f89c 	bl	8001d2c <printMessage>
	uint8_t payloadLength = bl_rx_data[6];
 8000bf4:	241f      	movs	r4, #31
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	7992      	ldrb	r2, [r2, #6]
 8000bfc:	701a      	strb	r2, [r3, #0]

	uint32_t memAddress =
		  ((uint32_t)bl_rx_data[2])
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3302      	adds	r3, #2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	001a      	movs	r2, r3
		| ((uint32_t)bl_rx_data[3] << 8)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3303      	adds	r3, #3
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	021b      	lsls	r3, r3, #8
 8000c0e:	431a      	orrs	r2, r3
		| ((uint32_t)bl_rx_data[4] << 16)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3304      	adds	r3, #4
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	041b      	lsls	r3, r3, #16
 8000c18:	431a      	orrs	r2, r3
		| ((uint32_t)bl_rx_data[5] << 24);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3305      	adds	r3, #5
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	061b      	lsls	r3, r3, #24
	uint32_t memAddress =
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = assemble_crc_from_packet(bl_rx_data, command_packet_len);
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff fde5 	bl	8000804 <assemble_crc_from_packet>
 8000c3a:	0003      	movs	r3, r0
 8000c3c:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	1f19      	subs	r1, r3, #4
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 fa08 	bl	800105c <bootloader_verify_crc>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d132      	bne.n	8000cb6 <bootloader_mem_write_cmd+0xd2>
		printMessage(" Memory Write Address: %#x ", memAddress);
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <bootloader_mem_write_cmd+0xec>)
 8000c54:	0011      	movs	r1, r2
 8000c56:	0018      	movs	r0, r3
 8000c58:	f001 f868 	bl	8001d2c <printMessage>
		if (bootloader_verify_address(memAddress) == ADDR_VALID) {
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 faba 	bl	80011d8 <bootloader_verify_address>
 8000c64:	1e03      	subs	r3, r0, #0
 8000c66:	d117      	bne.n	8000c98 <bootloader_mem_write_cmd+0xb4>
			printMessage(" Valid Memory Write Address ");
 8000c68:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <bootloader_mem_write_cmd+0xf0>)
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f001 f85e 	bl	8001d2c <printMessage>
			send_ack_response(1, (uint8_t[]){execute_memory_write(&bl_rx_data[7], memAddress, payloadLength)}, 1);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	1dd8      	adds	r0, r3, #7
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	781a      	ldrb	r2, [r3, #0]
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	0019      	movs	r1, r3
 8000c7c:	f000 fb44 	bl	8001308 <execute_memory_write>
 8000c80:	0003      	movs	r3, r0
 8000c82:	001a      	movs	r2, r3
 8000c84:	210c      	movs	r1, #12
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	0019      	movs	r1, r3
 8000c90:	2001      	movs	r0, #1
 8000c92:	f7ff fd4d 	bl	8000730 <send_ack_response>
		}
	} else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}
}
 8000c96:	e014      	b.n	8000cc2 <bootloader_mem_write_cmd+0xde>
			printMessage(" Invalid Memory Write Address ");
 8000c98:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <bootloader_mem_write_cmd+0xf4>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f001 f846 	bl	8001d2c <printMessage>
			send_ack_response(1, (uint8_t[]){ADDR_INVALID}, 1);
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2201      	movs	r2, #1
 8000cac:	0019      	movs	r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f7ff fd3e 	bl	8000730 <send_ack_response>
}
 8000cb4:	e005      	b.n	8000cc2 <bootloader_mem_write_cmd+0xde>
		printMessage(" Checksum fail ");
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <bootloader_mem_write_cmd+0xf8>)
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f001 f837 	bl	8001d2c <printMessage>
		bootloader_send_nack();
 8000cbe:	f000 fa47 	bl	8001150 <bootloader_send_nack>
}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b009      	add	sp, #36	@ 0x24
 8000cc8:	bd90      	pop	{r4, r7, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	08008c80 	.word	0x08008c80
 8000cd0:	08008c9c 	.word	0x08008c9c
 8000cd4:	08008cb8 	.word	0x08008cb8
 8000cd8:	08008cd8 	.word	0x08008cd8
 8000cdc:	08008c70 	.word	0x08008c70

08000ce0 <bootloader_enable_read_write_protect_cmd>:

void bootloader_enable_read_write_protect_cmd(uint8_t *bl_rx_data) {
 8000ce0:	b5b0      	push	{r4, r5, r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8000ce8:	2417      	movs	r4, #23
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
	uint32_t host_crc = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
	printMessage(" bootloader_enable_read_write_protect_cmd ");
 8000cf4:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <bootloader_enable_read_write_protect_cmd+0x9c>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f001 f818 	bl	8001d2c <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]

	host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	0018      	movs	r0, r3
 8000d08:	f7ff fda1 	bl	800084e <assemble_crc_from_fixed_position>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	1f19      	subs	r1, r3, #4
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 f99f 	bl	800105c <bootloader_verify_crc>
 8000d1e:	1e03      	subs	r3, r0, #0
 8000d20:	d121      	bne.n	8000d66 <bootloader_enable_read_write_protect_cmd+0x86>
		status = configure_flash_sector_r_w_protection(bl_rx_data[2], bl_rx_data[3], 0);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3302      	adds	r3, #2
 8000d26:	7818      	ldrb	r0, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3303      	adds	r3, #3
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	0025      	movs	r5, r4
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	2200      	movs	r2, #0
 8000d34:	0019      	movs	r1, r3
 8000d36:	f000 fc61 	bl	80015fc <configure_flash_sector_r_w_protection>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	7023      	strb	r3, [r4, #0]
		printMessage(" Status: %d", status);
 8000d3e:	002c      	movs	r4, r5
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <bootloader_enable_read_write_protect_cmd+0xa0>)
 8000d46:	0011      	movs	r1, r2
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f000 ffef 	bl	8001d2c <printMessage>

		send_ack_response(1, (uint8_t[]){status}, 1);
 8000d4e:	2108      	movs	r1, #8
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	193a      	adds	r2, r7, r4
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff fce6 	bl	8000730 <send_ack_response>

	} else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}
}
 8000d64:	e005      	b.n	8000d72 <bootloader_enable_read_write_protect_cmd+0x92>
		printMessage(" Checksum fail ");
 8000d66:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <bootloader_enable_read_write_protect_cmd+0xa4>)
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f000 ffdf 	bl	8001d2c <printMessage>
		bootloader_send_nack();
 8000d6e:	f000 f9ef 	bl	8001150 <bootloader_send_nack>
}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b006      	add	sp, #24
 8000d78:	bdb0      	pop	{r4, r5, r7, pc}
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	08008cf8 	.word	0x08008cf8
 8000d80:	08008d24 	.word	0x08008d24
 8000d84:	08008c70 	.word	0x08008c70

08000d88 <bootloader_go_to_bootloader_cmd>:

void bootloader_go_to_bootloader_cmd(uint8_t *bl_rx_data)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = assemble_crc_from_packet(bl_rx_data, command_packet_len);
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f7ff fd30 	bl	8000804 <assemble_crc_from_packet>
 8000da4:	0003      	movs	r3, r0
 8000da6:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	1f19      	subs	r1, r3, #4
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 f953 	bl	800105c <bootloader_verify_crc>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d10e      	bne.n	8000dd8 <bootloader_go_to_bootloader_cmd+0x50>
		printMessage(" Bootloader already running  ");
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <bootloader_go_to_bootloader_cmd+0x64>)
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f000 ffb5 	bl	8001d2c <printMessage>
		send_ack_response(1, (uint8_t[]){BL_BOOTLOADER_ACTIVE}, 1);
 8000dc2:	210c      	movs	r1, #12
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	2201      	movs	r2, #1
 8000dce:	0019      	movs	r1, r3
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f7ff fcad 	bl	8000730 <send_ack_response>
		}
	else {
			printMessage("Checksum fail ");
			bootloader_send_nack();
		}
}
 8000dd6:	e005      	b.n	8000de4 <bootloader_go_to_bootloader_cmd+0x5c>
			printMessage("Checksum fail ");
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <bootloader_go_to_bootloader_cmd+0x68>)
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f000 ffa6 	bl	8001d2c <printMessage>
			bootloader_send_nack();
 8000de0:	f000 f9b6 	bl	8001150 <bootloader_send_nack>
}
 8000de4:	46c0      	nop			@ (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b006      	add	sp, #24
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	08008d30 	.word	0x08008d30
 8000df0:	08008b9c 	.word	0x08008b9c

08000df4 <bootloader_ext_mem_to_mem_write_cmd>:

void bootloader_ext_mem_to_mem_write_cmd(uint8_t *bl_rx_data)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	printMessage("bootloader_ext_to_mem_cmd");
 8000dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea8 <bootloader_ext_mem_to_mem_write_cmd+0xb4>)
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f000 ff94 	bl	8001d2c <printMessage>
	uint32_t command_packet_length = bl_rx_data[0] + 1;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f7ff fd1d 	bl	800084e <assemble_crc_from_fixed_position>
 8000e14:	0003      	movs	r3, r0
 8000e16:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_length - 4, host_crc)) {
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	1f19      	subs	r1, r3, #4
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	0018      	movs	r0, r3
 8000e22:	f000 f91b 	bl	800105c <bootloader_verify_crc>
 8000e26:	1e03      	subs	r3, r0, #0
 8000e28:	d134      	bne.n	8000e94 <bootloader_ext_mem_to_mem_write_cmd+0xa0>
		printMessage("MEM_WRITE_WORKING ");
 8000e2a:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <bootloader_ext_mem_to_mem_write_cmd+0xb8>)
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f000 ff7d 	bl	8001d2c <printMessage>
		send_ack_response(1, (uint8_t[]){0x20}, 1);/* BL_EXT_MEM_TO_MEM_WRITE working*/
 8000e32:	210c      	movs	r1, #12
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2220      	movs	r2, #32
 8000e38:	701a      	strb	r2, [r3, #0]
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	0019      	movs	r1, r3
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff fc75 	bl	8000730 <send_ack_response>

		EXT_Flash_Write_Start_Addr = 0x000000;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <bootloader_ext_mem_to_mem_write_cmd+0xbc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
		while (EXT_Flash_Buf[0] != 0xFF) {
 8000e4c:	e017      	b.n	8000e7e <bootloader_ext_mem_to_mem_write_cmd+0x8a>
			memset(EXT_Flash_Buf, '\0', 256);
 8000e4e:	2380      	movs	r3, #128	@ 0x80
 8000e50:	005a      	lsls	r2, r3, #1
 8000e52:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <bootloader_ext_mem_to_mem_write_cmd+0xc0>)
 8000e54:	2100      	movs	r1, #0
 8000e56:	0018      	movs	r0, r3
 8000e58:	f007 f9fa 	bl	8008250 <memset>
			W25Q_Read_Fast(EXT_Flash_Write_Start_Addr, EXT_Flash_Buf);
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <bootloader_ext_mem_to_mem_write_cmd+0xbc>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a14      	ldr	r2, [pc, #80]	@ (8000eb4 <bootloader_ext_mem_to_mem_write_cmd+0xc0>)
 8000e62:	0011      	movs	r1, r2
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff fbe5 	bl	8000634 <W25Q_Read_Fast>
			bootloader_mem_write_cmd(EXT_Flash_Buf);
 8000e6a:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <bootloader_ext_mem_to_mem_write_cmd+0xc0>)
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff feb9 	bl	8000be4 <bootloader_mem_write_cmd>

			// Yazılacak page öteleniyor
			EXT_Flash_Write_Start_Addr += 256;
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <bootloader_ext_mem_to_mem_write_cmd+0xbc>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	32ff      	adds	r2, #255	@ 0xff
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <bootloader_ext_mem_to_mem_write_cmd+0xbc>)
 8000e7c:	601a      	str	r2, [r3, #0]
		while (EXT_Flash_Buf[0] != 0xFF) {
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <bootloader_ext_mem_to_mem_write_cmd+0xc0>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2bff      	cmp	r3, #255	@ 0xff
 8000e84:	d1e3      	bne.n	8000e4e <bootloader_ext_mem_to_mem_write_cmd+0x5a>
		}
		printMessage("MEM_WRITE_DONE ");
 8000e86:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <bootloader_ext_mem_to_mem_write_cmd+0xc4>)
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f000 ff4f 	bl	8001d2c <printMessage>
		W25Q_Chip_Erase();
 8000e8e:	f7ff fc2d 	bl	80006ec <W25Q_Chip_Erase>
	} else {
		printMessage("Checksum fail ");
		bootloader_send_nack();
	}

}
 8000e92:	e005      	b.n	8000ea0 <bootloader_ext_mem_to_mem_write_cmd+0xac>
		printMessage("Checksum fail ");
 8000e94:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <bootloader_ext_mem_to_mem_write_cmd+0xc8>)
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 ff48 	bl	8001d2c <printMessage>
		bootloader_send_nack();
 8000e9c:	f000 f958 	bl	8001150 <bootloader_send_nack>
}
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b006      	add	sp, #24
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	08008d50 	.word	0x08008d50
 8000eac:	08008d6c 	.word	0x08008d6c
 8000eb0:	20000250 	.word	0x20000250
 8000eb4:	20000150 	.word	0x20000150
 8000eb8:	08008d80 	.word	0x08008d80
 8000ebc:	08008b9c 	.word	0x08008b9c

08000ec0 <bootloader_ext_mem_write_cmd>:

void bootloader_ext_mem_write_cmd(uint8_t *bl_rx_data)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b089      	sub	sp, #36	@ 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	printMessage(" bootloader_mem_write_cmd ");
 8000ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb8 <bootloader_ext_mem_write_cmd+0xf8>)
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f000 ff2e 	bl	8001d2c <printMessage>

	uint8_t payloadLength = bl_rx_data[6];
 8000ed0:	241f      	movs	r4, #31
 8000ed2:	193b      	adds	r3, r7, r4
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	7992      	ldrb	r2, [r2, #6]
 8000ed8:	701a      	strb	r2, [r3, #0]

	uint32_t memAddress =
		  ((uint32_t)bl_rx_data[2])
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3302      	adds	r3, #2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	001a      	movs	r2, r3
		| ((uint32_t)bl_rx_data[3] << 8)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3303      	adds	r3, #3
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	021b      	lsls	r3, r3, #8
 8000eea:	431a      	orrs	r2, r3
		| ((uint32_t)bl_rx_data[4] << 16)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3304      	adds	r3, #4
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	041b      	lsls	r3, r3, #16
 8000ef4:	431a      	orrs	r2, r3
		| ((uint32_t)bl_rx_data[5] << 24);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3305      	adds	r3, #5
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	061b      	lsls	r3, r3, #24
	uint32_t memAddress =
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	3301      	adds	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]

	uint32_t host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff fc9e 	bl	800084e <assemble_crc_from_fixed_position>
 8000f12:	0003      	movs	r3, r0
 8000f14:	613b      	str	r3, [r7, #16]
	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4,host_crc)) {
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	1f19      	subs	r1, r3, #4
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f000 f89c 	bl	800105c <bootloader_verify_crc>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d13c      	bne.n	8000fa2 <bootloader_ext_mem_write_cmd+0xe2>
		printMessage(" Memory Write Address: %#x ", memAddress);
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4b24      	ldr	r3, [pc, #144]	@ (8000fbc <bootloader_ext_mem_write_cmd+0xfc>)
 8000f2c:	0011      	movs	r1, r2
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f000 fefc 	bl	8001d2c <printMessage>
		memset(EXT_Flash_Buf, '\0', 256);
 8000f34:	2380      	movs	r3, #128	@ 0x80
 8000f36:	005a      	lsls	r2, r3, #1
 8000f38:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <bootloader_ext_mem_write_cmd+0x100>)
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f007 f987 	bl	8008250 <memset>
		if (bootloader_verify_address(memAddress) == ADDR_VALID) {
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	0018      	movs	r0, r3
 8000f46:	f000 f947 	bl	80011d8 <bootloader_verify_address>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d11a      	bne.n	8000f84 <bootloader_ext_mem_write_cmd+0xc4>
			W25Q_Write_Enable();
 8000f4e:	f7ff faa3 	bl	8000498 <W25Q_Write_Enable>
			send_ack_response(1, (uint8_t[]){execute_ext_mem_write(bl_rx_data, payloadLength)}, 1);
 8000f52:	193b      	adds	r3, r7, r4
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	0011      	movs	r1, r2
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 fb34 	bl	80015c8 <execute_ext_mem_write>
 8000f60:	0003      	movs	r3, r0
 8000f62:	001a      	movs	r2, r3
 8000f64:	210c      	movs	r1, #12
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	0019      	movs	r1, r3
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fbdd 	bl	8000730 <send_ack_response>

			W25Q_Write_Disable();
 8000f76:	f7ff faa5 	bl	80004c4 <W25Q_Write_Disable>

			SSD1306_GotoXY(0, 32);
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f001 f8ef 	bl	8002160 <SSD1306_GotoXY>
		}
	} else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}
}
 8000f82:	e014      	b.n	8000fae <bootloader_ext_mem_write_cmd+0xee>
			printMessage(" Invalid Memory Write Address ");
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <bootloader_ext_mem_write_cmd+0x104>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f000 fed0 	bl	8001d2c <printMessage>
			send_ack_response(1, (uint8_t[]){ADDR_INVALID}, 1);
 8000f8c:	2108      	movs	r1, #8
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2201      	movs	r2, #1
 8000f98:	0019      	movs	r1, r3
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f7ff fbc8 	bl	8000730 <send_ack_response>
}
 8000fa0:	e005      	b.n	8000fae <bootloader_ext_mem_write_cmd+0xee>
		printMessage(" Checksum fail ");
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <bootloader_ext_mem_write_cmd+0x108>)
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f000 fec1 	bl	8001d2c <printMessage>
		bootloader_send_nack();
 8000faa:	f000 f8d1 	bl	8001150 <bootloader_send_nack>
}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b009      	add	sp, #36	@ 0x24
 8000fb4:	bd90      	pop	{r4, r7, pc}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	08008c80 	.word	0x08008c80
 8000fbc:	08008c9c 	.word	0x08008c9c
 8000fc0:	20000150 	.word	0x20000150
 8000fc4:	08008cd8 	.word	0x08008cd8
 8000fc8:	08008c70 	.word	0x08008c70

08000fcc <bootloader_disable_read_write_protect_cmd>:
		bootloader_send_nack();
	}

}

void bootloader_disable_read_write_protect_cmd(uint8_t *bl_rx_data) {
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	printMessage(" bootloader_disable_read_write_protect_cmd ");
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001050 <bootloader_disable_read_write_protect_cmd+0x84>)
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f000 fea8 	bl	8001d2c <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f7ff fc31 	bl	800084e <assemble_crc_from_fixed_position>
 8000fec:	0003      	movs	r3, r0
 8000fee:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	1f19      	subs	r1, r3, #4
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f000 f82f 	bl	800105c <bootloader_verify_crc>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d11c      	bne.n	800103c <bootloader_disable_read_write_protect_cmd+0x70>
		uint8_t status = configure_flash_sector_r_w_protection(0, 0, 1);
 8001002:	250f      	movs	r5, #15
 8001004:	197c      	adds	r4, r7, r5
 8001006:	2201      	movs	r2, #1
 8001008:	2100      	movs	r1, #0
 800100a:	2000      	movs	r0, #0
 800100c:	f000 faf6 	bl	80015fc <configure_flash_sector_r_w_protection>
 8001010:	0003      	movs	r3, r0
 8001012:	7023      	strb	r3, [r4, #0]
		printMessage(" Status: %d", status);
 8001014:	002c      	movs	r4, r5
 8001016:	193b      	adds	r3, r7, r4
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <bootloader_disable_read_write_protect_cmd+0x88>)
 800101c:	0011      	movs	r1, r2
 800101e:	0018      	movs	r0, r3
 8001020:	f000 fe84 	bl	8001d2c <printMessage>
		send_ack_response(1, (uint8_t[]){status}, 1);
 8001024:	210c      	movs	r1, #12
 8001026:	187b      	adds	r3, r7, r1
 8001028:	193a      	adds	r2, r7, r4
 800102a:	7812      	ldrb	r2, [r2, #0]
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	187b      	adds	r3, r7, r1
 8001030:	2201      	movs	r2, #1
 8001032:	0019      	movs	r1, r3
 8001034:	2001      	movs	r0, #1
 8001036:	f7ff fb7b 	bl	8000730 <send_ack_response>

	} else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}
}
 800103a:	e005      	b.n	8001048 <bootloader_disable_read_write_protect_cmd+0x7c>
		printMessage(" Checksum fail ");
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <bootloader_disable_read_write_protect_cmd+0x8c>)
 800103e:	0018      	movs	r0, r3
 8001040:	f000 fe74 	bl	8001d2c <printMessage>
		bootloader_send_nack();
 8001044:	f000 f884 	bl	8001150 <bootloader_send_nack>
}
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b006      	add	sp, #24
 800104e:	bdb0      	pop	{r4, r5, r7, pc}
 8001050:	08008dd4 	.word	0x08008dd4
 8001054:	08008d24 	.word	0x08008d24
 8001058:	08008c70 	.word	0x08008c70

0800105c <bootloader_verify_crc>:

uint8_t bootloader_verify_crc(uint8_t* Buffer, uint32_t len, uint32_t crcHost) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
	uint32_t crcValue = 0xFF;
 8001068:	23ff      	movs	r3, #255	@ 0xff
 800106a:	61fb      	str	r3, [r7, #28]
	uint32_t data = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

	for (uint32_t i = 0; i < len; i++) {
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	e010      	b.n	8001098 <bootloader_verify_crc+0x3c>
		data = Buffer[i];
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	18d3      	adds	r3, r2, r3
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	617b      	str	r3, [r7, #20]
		crcValue = HAL_CRC_Accumulate(&hcrc, &data, 1);
 8001080:	2314      	movs	r3, #20
 8001082:	18f9      	adds	r1, r7, r3
 8001084:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <bootloader_verify_crc+0x6c>)
 8001086:	2201      	movs	r2, #1
 8001088:	0018      	movs	r0, r3
 800108a:	f001 ff39 	bl	8002f00 <HAL_CRC_Accumulate>
 800108e:	0003      	movs	r3, r0
 8001090:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < len; i++) {
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	3301      	adds	r3, #1
 8001096:	61bb      	str	r3, [r7, #24]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	429a      	cmp	r2, r3
 800109e:	d3ea      	bcc.n	8001076 <bootloader_verify_crc+0x1a>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <bootloader_verify_crc+0x6c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <bootloader_verify_crc+0x6c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2101      	movs	r1, #1
 80010ac:	430a      	orrs	r2, r1
 80010ae:	609a      	str	r2, [r3, #8]

	if (crcValue == crcHost) {
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d101      	bne.n	80010bc <bootloader_verify_crc+0x60>
		return CRC_SUCCESS;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e000      	b.n	80010be <bootloader_verify_crc+0x62>
	}
	return CRC_FAIL;
 80010bc:	2301      	movs	r3, #1
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b008      	add	sp, #32
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	20000254 	.word	0x20000254

080010cc <bootloader_get_rdp_cmd>:

void bootloader_get_rdp_cmd(uint8_t *bl_rx_data) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	printMessage(" bootloader_get_rdp_cmd ");
 80010d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <bootloader_get_rdp_cmd+0x74>)
 80010d6:	0018      	movs	r0, r3
 80010d8:	f000 fe28 	bl	8001d2c <printMessage>
	uint32_t command_packet_len = bl_rx_data[0] + 1;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]

	uint32_t host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff fbb1 	bl	800084e <assemble_crc_from_fixed_position>
 80010ec:	0003      	movs	r3, r0
 80010ee:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	1f19      	subs	r1, r3, #4
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff ffaf 	bl	800105c <bootloader_verify_crc>
 80010fe:	1e03      	subs	r3, r0, #0
 8001100:	d113      	bne.n	800112a <bootloader_get_rdp_cmd+0x5e>
		printMessage("RDP Level: %d", get_flash_rdp_level);
 8001102:	4a10      	ldr	r2, [pc, #64]	@ (8001144 <bootloader_get_rdp_cmd+0x78>)
 8001104:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <bootloader_get_rdp_cmd+0x7c>)
 8001106:	0011      	movs	r1, r2
 8001108:	0018      	movs	r0, r3
 800110a:	f000 fe0f 	bl	8001d2c <printMessage>
		send_ack_response(1, (uint8_t[]){get_flash_rdp_level()}, 1);
 800110e:	f000 f84f 	bl	80011b0 <get_flash_rdp_level>
 8001112:	0003      	movs	r3, r0
 8001114:	001a      	movs	r2, r3
 8001116:	210c      	movs	r1, #12
 8001118:	187b      	adds	r3, r7, r1
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2201      	movs	r2, #1
 8001120:	0019      	movs	r1, r3
 8001122:	2001      	movs	r0, #1
 8001124:	f7ff fb04 	bl	8000730 <send_ack_response>
	} else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}

}
 8001128:	e005      	b.n	8001136 <bootloader_get_rdp_cmd+0x6a>
		printMessage(" Checksum fail ");
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <bootloader_get_rdp_cmd+0x80>)
 800112c:	0018      	movs	r0, r3
 800112e:	f000 fdfd 	bl	8001d2c <printMessage>
		bootloader_send_nack();
 8001132:	f000 f80d 	bl	8001150 <bootloader_send_nack>
}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b006      	add	sp, #24
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	08008e00 	.word	0x08008e00
 8001144:	080011b1 	.word	0x080011b1
 8001148:	08008e1c 	.word	0x08008e1c
 800114c:	08008c70 	.word	0x08008c70

08001150 <bootloader_send_nack>:


void bootloader_send_nack() {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0

	uint8_t nackValue[5] = {
 8001156:	003b      	movs	r3, r7
 8001158:	4a07      	ldr	r2, [pc, #28]	@ (8001178 <bootloader_send_nack+0x28>)
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	711a      	strb	r2, [r3, #4]
		TARGET_LORA_HIGH,
		TARGET_LORA_LOW,
		TARGET_LORA_CHANNEL,
		BL_NACK_VALUE
	};
	HAL_UART_Transmit(&huart3, nackValue, 4, HAL_MAX_DELAY);
 8001160:	2301      	movs	r3, #1
 8001162:	425b      	negs	r3, r3
 8001164:	0039      	movs	r1, r7
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <bootloader_send_nack+0x2c>)
 8001168:	2204      	movs	r2, #4
 800116a:	f005 fccd 	bl	8006b08 <HAL_UART_Transmit>
}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b002      	add	sp, #8
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	7f136618 	.word	0x7f136618
 800117c:	200003c4 	.word	0x200003c4

08001180 <bootloader_get_version>:

uint8_t bootloader_get_version(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	return BL_VER;
 8001184:	2310      	movs	r3, #16
}
 8001186:	0018      	movs	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
	uint16_t cID;
	cID = (uint16_t) (DBG->IDCODE) & 0x0FFF;
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <get_mcu_chip_id+0x20>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	b29a      	uxth	r2, r3
 8001198:	1dbb      	adds	r3, r7, #6
 800119a:	0512      	lsls	r2, r2, #20
 800119c:	0d12      	lsrs	r2, r2, #20
 800119e:	801a      	strh	r2, [r3, #0]
	return cID;
 80011a0:	1dbb      	adds	r3, r7, #6
 80011a2:	881b      	ldrh	r3, [r3, #0]
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40015800 	.word	0x40015800

080011b0 <get_flash_rdp_level>:

uint8_t get_flash_rdp_level(void) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
	uint8_t rdp_status = 0;
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]

#if	1

	volatile uint32_t *OB_Addr = (uint32_t*) RDP_REG;
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <get_flash_rdp_level+0x24>)
 80011be:	603b      	str	r3, [r7, #0]
	rdp_status = (uint8_t) ((*OB_Addr )& 0x00000000FF);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	1dfb      	adds	r3, r7, #7
 80011c6:	701a      	strb	r2, [r3, #0]
	HAL_FLASHEx_OBGetConfig(&OB_InitStruct);
	rdp_level = (uint8_t) OB_InitStruct.RDPLevel;

#endif

	return rdp_status;
 80011c8:	1dfb      	adds	r3, r7, #7
 80011ca:	781b      	ldrb	r3, [r3, #0]
}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b002      	add	sp, #8
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	1fff7800 	.word	0x1fff7800

080011d8 <bootloader_verify_address>:

uint8_t bootloader_verify_address(uint32_t goAddress) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	if (goAddress >= FLASH_BASE && goAddress <= G0_FLASH_END)
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	2380      	movs	r3, #128	@ 0x80
 80011e4:	051b      	lsls	r3, r3, #20
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d305      	bcc.n	80011f6 <bootloader_verify_address+0x1e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <bootloader_verify_address+0x28>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d801      	bhi.n	80011f6 <bootloader_verify_address+0x1e>
		return ADDR_VALID;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <bootloader_verify_address+0x20>
	else
	return ADDR_INVALID;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	0801ffff 	.word	0x0801ffff

08001204 <execute_flash_erase>:
/*
 * sectorNumber Silinecek sektör numarası
 * numberOfSector sectorNumber'dan sonraki silinecek sektör sayısı
 *
 * */
uint8_t execute_flash_erase(uint8_t sectorNumber, uint8_t numberOfSector) {
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b089      	sub	sp, #36	@ 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	0002      	movs	r2, r0
 800120c:	1dfb      	adds	r3, r7, #7
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	1dbb      	adds	r3, r7, #6
 8001212:	1c0a      	adds	r2, r1, #0
 8001214:	701a      	strb	r2, [r3, #0]
	FLASH_EraseInitTypeDef FlashEraseInitStruct = { 0 };
 8001216:	230c      	movs	r3, #12
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	0018      	movs	r0, r3
 800121c:	2310      	movs	r3, #16
 800121e:	001a      	movs	r2, r3
 8001220:	2100      	movs	r1, #0
 8001222:	f007 f815 	bl	8008250 <memset>
	uint32_t SectorError = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
	HAL_StatusTypeDef status = HAL_ERROR;
 800122a:	231f      	movs	r3, #31
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]

	 if (sectorNumber > (64 - 1) && sectorNumber != 0xFF) {
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b3f      	cmp	r3, #63	@ 0x3f
 8001238:	d90c      	bls.n	8001254 <execute_flash_erase+0x50>
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2bff      	cmp	r3, #255	@ 0xff
 8001240:	d008      	beq.n	8001254 <execute_flash_erase+0x50>
		 printMessage("Invalid sector number: %d", sectorNumber);
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	4b2d      	ldr	r3, [pc, #180]	@ (80012fc <execute_flash_erase+0xf8>)
 8001248:	0011      	movs	r1, r2
 800124a:	0018      	movs	r0, r3
 800124c:	f000 fd6e 	bl	8001d2c <printMessage>
	     return INVALID_SECTOR;
 8001250:	2304      	movs	r3, #4
 8001252:	e04f      	b.n	80012f4 <execute_flash_erase+0xf0>
	}
	HAL_FLASH_Unlock();
 8001254:	f002 fc50 	bl	8003af8 <HAL_FLASH_Unlock>
	if (sectorNumber == 0xFF) {
 8001258:	1dfb      	adds	r3, r7, #7
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2bff      	cmp	r3, #255	@ 0xff
 800125e:	d12a      	bne.n	80012b6 <execute_flash_erase+0xb2>
		FlashEraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001260:	240c      	movs	r4, #12
 8001262:	193b      	adds	r3, r7, r4
 8001264:	2202      	movs	r2, #2
 8001266:	601a      	str	r2, [r3, #0]
		FlashEraseInitStruct.Page = ((FLASH_END_ADDRESS-FLASH_APP_BASE_ADDRESS) / FLASH_BANK_SIZE);
 8001268:	4b25      	ldr	r3, [pc, #148]	@ (8001300 <execute_flash_erase+0xfc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	029a      	lsls	r2, r3, #10
 800126e:	23ff      	movs	r3, #255	@ 0xff
 8001270:	029b      	lsls	r3, r3, #10
 8001272:	4013      	ands	r3, r2
 8001274:	0019      	movs	r1, r3
 8001276:	4823      	ldr	r0, [pc, #140]	@ (8001304 <execute_flash_erase+0x100>)
 8001278:	f7fe ff4c 	bl	8000114 <__udivsi3>
 800127c:	0003      	movs	r3, r0
 800127e:	001a      	movs	r2, r3
 8001280:	193b      	adds	r3, r7, r4
 8001282:	609a      	str	r2, [r3, #8]
		FlashEraseInitStruct.NbPages = FLASH_PAGE_NB;
 8001284:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <execute_flash_erase+0xfc>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	029a      	lsls	r2, r3, #10
 800128a:	23ff      	movs	r3, #255	@ 0xff
 800128c:	029b      	lsls	r3, r3, #10
 800128e:	4013      	ands	r3, r2
 8001290:	0ada      	lsrs	r2, r3, #11
 8001292:	193b      	adds	r3, r7, r4
 8001294:	60da      	str	r2, [r3, #12]
		FlashEraseInitStruct.Banks = FLASH_BANK_1;
 8001296:	0021      	movs	r1, r4
 8001298:	193b      	adds	r3, r7, r4
 800129a:	2204      	movs	r2, #4
 800129c:	605a      	str	r2, [r3, #4]

		status = (uint8_t) HAL_FLASHEx_Erase(&FlashEraseInitStruct, &SectorError);
 800129e:	231f      	movs	r3, #31
 80012a0:	18fc      	adds	r4, r7, r3
 80012a2:	2308      	movs	r3, #8
 80012a4:	18fa      	adds	r2, r7, r3
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	0011      	movs	r1, r2
 80012aa:	0018      	movs	r0, r3
 80012ac:	f002 fd24 	bl	8003cf8 <HAL_FLASHEx_Erase>
 80012b0:	0003      	movs	r3, r0
 80012b2:	7023      	strb	r3, [r4, #0]
 80012b4:	e019      	b.n	80012ea <execute_flash_erase+0xe6>

	} else {
		FlashEraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80012b6:	210c      	movs	r1, #12
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2202      	movs	r2, #2
 80012bc:	601a      	str	r2, [r3, #0]
		FlashEraseInitStruct.Page = sectorNumber;
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781a      	ldrb	r2, [r3, #0]
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	609a      	str	r2, [r3, #8]
		FlashEraseInitStruct.NbPages = numberOfSector;
 80012c6:	1dbb      	adds	r3, r7, #6
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	60da      	str	r2, [r3, #12]
		FlashEraseInitStruct.Banks = FLASH_BANK_1;
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	2204      	movs	r2, #4
 80012d2:	605a      	str	r2, [r3, #4]

		status = (uint8_t) HAL_FLASHEx_Erase(&FlashEraseInitStruct, &SectorError);
 80012d4:	231f      	movs	r3, #31
 80012d6:	18fc      	adds	r4, r7, r3
 80012d8:	2308      	movs	r3, #8
 80012da:	18fa      	adds	r2, r7, r3
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	0011      	movs	r1, r2
 80012e0:	0018      	movs	r0, r3
 80012e2:	f002 fd09 	bl	8003cf8 <HAL_FLASHEx_Erase>
 80012e6:	0003      	movs	r3, r0
 80012e8:	7023      	strb	r3, [r4, #0]
	}
	HAL_FLASH_Lock();
 80012ea:	f002 fc29 	bl	8003b40 <HAL_FLASH_Lock>

	return (uint8_t)status;
 80012ee:	231f      	movs	r3, #31
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	781b      	ldrb	r3, [r3, #0]
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b009      	add	sp, #36	@ 0x24
 80012fa:	bd90      	pop	{r4, r7, pc}
 80012fc:	08008e2c 	.word	0x08008e2c
 8001300:	1fff75e0 	.word	0x1fff75e0
 8001304:	0000efff 	.word	0x0000efff

08001308 <execute_memory_write>:

uint8_t execute_memory_write(uint8_t *Buffer, uint32_t memAddress, uint32_t len) {
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	b0b3      	sub	sp, #204	@ 0xcc
 800130c:	af00      	add	r7, sp, #0
 800130e:	23b4      	movs	r3, #180	@ 0xb4
 8001310:	18fb      	adds	r3, r7, r3
 8001312:	6018      	str	r0, [r3, #0]
 8001314:	23b0      	movs	r3, #176	@ 0xb0
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	6019      	str	r1, [r3, #0]
 800131a:	23ac      	movs	r3, #172	@ 0xac
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	601a      	str	r2, [r3, #0]
	uint8_t status = HAL_ERROR;
 8001320:	231b      	movs	r3, #27
 8001322:	22a8      	movs	r2, #168	@ 0xa8
 8001324:	189b      	adds	r3, r3, r2
 8001326:	19da      	adds	r2, r3, r7
 8001328:	2301      	movs	r3, #1
 800132a:	7013      	strb	r3, [r2, #0]
	__HAL_FLASH_CLEAR_FLAG(FLASH_ECCR_ECCC);
	__HAL_FLASH_CLEAR_FLAG(FLASH_ECCR_ECCCIE );
	__HAL_FLASH_CLEAR_FLAG(FLASH_ECCR_SYSF_ECC);
	__HAL_FLASH_CLEAR_FLAG(FLASH_ECCR_ADDR_ECC );

	while (HAL_FLASH_Lock() != HAL_OK){};
 800132c:	46c0      	nop			@ (mov r8, r8)
 800132e:	f002 fc07 	bl	8003b40 <HAL_FLASH_Lock>
 8001332:	1e03      	subs	r3, r0, #0
 8001334:	d1fb      	bne.n	800132e <execute_memory_write+0x26>
	for (uint32_t i = 0; i < len; i= i+8) {
 8001336:	2300      	movs	r3, #0
 8001338:	22c4      	movs	r2, #196	@ 0xc4
 800133a:	18ba      	adds	r2, r7, r2
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e12e      	b.n	800159e <execute_memory_write+0x296>
			//while ((FLASH->SR & FLASH_SR_BSY1)) {}
		while (HAL_FLASH_Unlock() != HAL_OK){};
 8001340:	46c0      	nop			@ (mov r8, r8)
 8001342:	f002 fbd9 	bl	8003af8 <HAL_FLASH_Unlock>
 8001346:	1e03      	subs	r3, r0, #0
 8001348:	d1fb      	bne.n	8001342 <execute_memory_write+0x3a>
	        data =
	        	   ((uint64_t)Buffer[i])
 800134a:	23b4      	movs	r3, #180	@ 0xb4
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	23c4      	movs	r3, #196	@ 0xc4
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	18d3      	adds	r3, r2, r3
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2290      	movs	r2, #144	@ 0x90
 800135c:	18ba      	adds	r2, r7, r2
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	2300      	movs	r3, #0
 8001362:	2294      	movs	r2, #148	@ 0x94
 8001364:	18ba      	adds	r2, r7, r2
 8001366:	6013      	str	r3, [r2, #0]
	             | (((uint64_t)Buffer[i+1]) << 8)
 8001368:	23c4      	movs	r3, #196	@ 0xc4
 800136a:	18fb      	adds	r3, r7, r3
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	23b4      	movs	r3, #180	@ 0xb4
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	189b      	adds	r3, r3, r2
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2288      	movs	r2, #136	@ 0x88
 800137c:	18ba      	adds	r2, r7, r2
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	2300      	movs	r3, #0
 8001382:	228c      	movs	r2, #140	@ 0x8c
 8001384:	18ba      	adds	r2, r7, r2
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	2388      	movs	r3, #136	@ 0x88
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	6819      	ldr	r1, [r3, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	000b      	movs	r3, r1
 8001392:	0e1b      	lsrs	r3, r3, #24
 8001394:	0010      	movs	r0, r2
 8001396:	0200      	lsls	r0, r0, #8
 8001398:	24a4      	movs	r4, #164	@ 0xa4
 800139a:	193c      	adds	r4, r7, r4
 800139c:	6020      	str	r0, [r4, #0]
 800139e:	20a4      	movs	r0, #164	@ 0xa4
 80013a0:	1838      	adds	r0, r7, r0
 80013a2:	6800      	ldr	r0, [r0, #0]
 80013a4:	4318      	orrs	r0, r3
 80013a6:	23a4      	movs	r3, #164	@ 0xa4
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	6018      	str	r0, [r3, #0]
 80013ac:	000b      	movs	r3, r1
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	22a0      	movs	r2, #160	@ 0xa0
 80013b2:	18ba      	adds	r2, r7, r2
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	2390      	movs	r3, #144	@ 0x90
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	6819      	ldr	r1, [r3, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	0008      	movs	r0, r1
 80013c0:	23a0      	movs	r3, #160	@ 0xa0
 80013c2:	18fb      	adds	r3, r7, r3
 80013c4:	685c      	ldr	r4, [r3, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	001d      	movs	r5, r3
 80013ca:	4328      	orrs	r0, r5
 80013cc:	2580      	movs	r5, #128	@ 0x80
 80013ce:	197d      	adds	r5, r7, r5
 80013d0:	6028      	str	r0, [r5, #0]
 80013d2:	0023      	movs	r3, r4
 80013d4:	431a      	orrs	r2, r3
 80013d6:	2384      	movs	r3, #132	@ 0x84
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	601a      	str	r2, [r3, #0]
	             | (((uint64_t)Buffer[i+2]) << 16)
 80013dc:	23c4      	movs	r3, #196	@ 0xc4
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	1c9a      	adds	r2, r3, #2
 80013e4:	23b4      	movs	r3, #180	@ 0xb4
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	189b      	adds	r3, r3, r2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80013f0:	2300      	movs	r3, #0
 80013f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80013f4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80013f6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80013f8:	000b      	movs	r3, r1
 80013fa:	0c1b      	lsrs	r3, r3, #16
 80013fc:	0010      	movs	r0, r2
 80013fe:	0400      	lsls	r0, r0, #16
 8001400:	249c      	movs	r4, #156	@ 0x9c
 8001402:	193c      	adds	r4, r7, r4
 8001404:	6020      	str	r0, [r4, #0]
 8001406:	209c      	movs	r0, #156	@ 0x9c
 8001408:	1838      	adds	r0, r7, r0
 800140a:	6800      	ldr	r0, [r0, #0]
 800140c:	4318      	orrs	r0, r3
 800140e:	239c      	movs	r3, #156	@ 0x9c
 8001410:	18fb      	adds	r3, r7, r3
 8001412:	6018      	str	r0, [r3, #0]
 8001414:	000b      	movs	r3, r1
 8001416:	041b      	lsls	r3, r3, #16
 8001418:	2298      	movs	r2, #152	@ 0x98
 800141a:	18ba      	adds	r2, r7, r2
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	2380      	movs	r3, #128	@ 0x80
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	6819      	ldr	r1, [r3, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	0008      	movs	r0, r1
 8001428:	2398      	movs	r3, #152	@ 0x98
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	685c      	ldr	r4, [r3, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	001d      	movs	r5, r3
 8001432:	4328      	orrs	r0, r5
 8001434:	6738      	str	r0, [r7, #112]	@ 0x70
 8001436:	0023      	movs	r3, r4
 8001438:	431a      	orrs	r2, r3
 800143a:	677a      	str	r2, [r7, #116]	@ 0x74
	             | (((uint64_t)Buffer[i+3]) << 24)
 800143c:	23c4      	movs	r3, #196	@ 0xc4
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	1cda      	adds	r2, r3, #3
 8001444:	23b4      	movs	r3, #180	@ 0xb4
 8001446:	18fb      	adds	r3, r7, r3
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	189b      	adds	r3, r3, r2
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001450:	2300      	movs	r3, #0
 8001452:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001454:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001456:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 8001458:	001a      	movs	r2, r3
 800145a:	0a12      	lsrs	r2, r2, #8
 800145c:	667a      	str	r2, [r7, #100]	@ 0x64
 800145e:	061b      	lsls	r3, r3, #24
 8001460:	663b      	str	r3, [r7, #96]	@ 0x60
 8001462:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001464:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001466:	0008      	movs	r0, r1
 8001468:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800146a:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 800146c:	001d      	movs	r5, r3
 800146e:	4328      	orrs	r0, r5
 8001470:	65b8      	str	r0, [r7, #88]	@ 0x58
 8001472:	0023      	movs	r3, r4
 8001474:	431a      	orrs	r2, r3
 8001476:	65fa      	str	r2, [r7, #92]	@ 0x5c
	             | (((uint64_t)Buffer[i+4]) << 32)
 8001478:	23c4      	movs	r3, #196	@ 0xc4
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	1d1a      	adds	r2, r3, #4
 8001480:	23b4      	movs	r3, #180	@ 0xb4
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	189b      	adds	r3, r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	653b      	str	r3, [r7, #80]	@ 0x50
 800148c:	2300      	movs	r3, #0
 800148e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001492:	001b      	movs	r3, r3
 8001494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001496:	2300      	movs	r3, #0
 8001498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800149a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800149c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800149e:	0008      	movs	r0, r1
 80014a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014a2:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 80014a4:	001d      	movs	r5, r3
 80014a6:	4328      	orrs	r0, r5
 80014a8:	6438      	str	r0, [r7, #64]	@ 0x40
 80014aa:	0023      	movs	r3, r4
 80014ac:	431a      	orrs	r2, r3
 80014ae:	647a      	str	r2, [r7, #68]	@ 0x44
	             | (((uint64_t)Buffer[i+5]) << 40)
 80014b0:	23c4      	movs	r3, #196	@ 0xc4
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	1d5a      	adds	r2, r3, #5
 80014b8:	23b4      	movs	r3, #180	@ 0xb4
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	189b      	adds	r3, r3, r2
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014c4:	2300      	movs	r3, #0
 80014c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80014ce:	2300      	movs	r3, #0
 80014d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80014d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80014d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80014d6:	0008      	movs	r0, r1
 80014d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014da:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 80014dc:	001d      	movs	r5, r3
 80014de:	4328      	orrs	r0, r5
 80014e0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80014e2:	0023      	movs	r3, r4
 80014e4:	431a      	orrs	r2, r3
 80014e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
	             | (((uint64_t)Buffer[i+6]) << 48)
 80014e8:	23c4      	movs	r3, #196	@ 0xc4
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	1d9a      	adds	r2, r3, #6
 80014f0:	23b4      	movs	r3, #180	@ 0xb4
 80014f2:	18fb      	adds	r3, r7, r3
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	189b      	adds	r3, r3, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	623b      	str	r3, [r7, #32]
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	041b      	lsls	r3, r3, #16
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800150c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800150e:	0008      	movs	r0, r1
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	69fc      	ldr	r4, [r7, #28]
 8001514:	001d      	movs	r5, r3
 8001516:	4328      	orrs	r0, r5
 8001518:	6138      	str	r0, [r7, #16]
 800151a:	0023      	movs	r3, r4
 800151c:	431a      	orrs	r2, r3
 800151e:	617a      	str	r2, [r7, #20]
	             | (((uint64_t)Buffer[i+7]) << 56);
 8001520:	23c4      	movs	r3, #196	@ 0xc4
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	1dda      	adds	r2, r3, #7
 8001528:	23b4      	movs	r3, #180	@ 0xb4
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	189b      	adds	r3, r3, r2
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	061b      	lsls	r3, r3, #24
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
	        data =
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	000b      	movs	r3, r1
 8001548:	693c      	ldr	r4, [r7, #16]
 800154a:	697d      	ldr	r5, [r7, #20]
 800154c:	0020      	movs	r0, r4
 800154e:	4303      	orrs	r3, r0
 8001550:	20b8      	movs	r0, #184	@ 0xb8
 8001552:	1838      	adds	r0, r7, r0
 8001554:	6003      	str	r3, [r0, #0]
 8001556:	0013      	movs	r3, r2
 8001558:	002a      	movs	r2, r5
 800155a:	4313      	orrs	r3, r2
 800155c:	22bc      	movs	r2, #188	@ 0xbc
 800155e:	18ba      	adds	r2, r7, r2
 8001560:	6013      	str	r3, [r2, #0]

	        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, memAddress+i, data);
 8001562:	23b0      	movs	r3, #176	@ 0xb0
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	23c4      	movs	r3, #196	@ 0xc4
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	18d1      	adds	r1, r2, r3
 8001570:	231b      	movs	r3, #27
 8001572:	22a8      	movs	r2, #168	@ 0xa8
 8001574:	189b      	adds	r3, r3, r2
 8001576:	19dc      	adds	r4, r3, r7
 8001578:	23b8      	movs	r3, #184	@ 0xb8
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2001      	movs	r0, #1
 8001582:	f002 f9d9 	bl	8003938 <HAL_FLASH_Program>
 8001586:	0003      	movs	r3, r0
 8001588:	7023      	strb	r3, [r4, #0]
	        HAL_Delay(3);
 800158a:	2003      	movs	r0, #3
 800158c:	f001 faf0 	bl	8002b70 <HAL_Delay>
	for (uint32_t i = 0; i < len; i= i+8) {
 8001590:	23c4      	movs	r3, #196	@ 0xc4
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3308      	adds	r3, #8
 8001598:	22c4      	movs	r2, #196	@ 0xc4
 800159a:	18ba      	adds	r2, r7, r2
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	23c4      	movs	r3, #196	@ 0xc4
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	23ac      	movs	r3, #172	@ 0xac
 80015a6:	18fb      	adds	r3, r7, r3
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d200      	bcs.n	80015b0 <execute_memory_write+0x2a8>
 80015ae:	e6c7      	b.n	8001340 <execute_memory_write+0x38>
	}
	HAL_FLASH_Lock();
 80015b0:	f002 fac6 	bl	8003b40 <HAL_FLASH_Lock>

	return status;
 80015b4:	231b      	movs	r3, #27
 80015b6:	22a8      	movs	r2, #168	@ 0xa8
 80015b8:	189b      	adds	r3, r3, r2
 80015ba:	19db      	adds	r3, r3, r7
 80015bc:	781b      	ldrb	r3, [r3, #0]
}
 80015be:	0018      	movs	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b033      	add	sp, #204	@ 0xcc
 80015c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080015c8 <execute_ext_mem_write>:
uint8_t execute_ext_mem_write(uint8_t *Buffer, uint32_t len)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
	W25Q_Buf_Program(EXT_Flash_Write_Start_Addr, Buffer, len);
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <execute_ext_mem_write+0x30>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	0018      	movs	r0, r3
 80015de:	f7fe ff87 	bl	80004f0 <W25Q_Buf_Program>
	EXT_Flash_Write_Start_Addr += 256;
 80015e2:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <execute_ext_mem_write+0x30>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	32ff      	adds	r2, #255	@ 0xff
 80015ea:	4b03      	ldr	r3, [pc, #12]	@ (80015f8 <execute_ext_mem_write+0x30>)
 80015ec:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b002      	add	sp, #8
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000250 	.word	0x20000250

080015fc <configure_flash_sector_r_w_protection>:

uint8_t configure_flash_sector_r_w_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t enableOrDisable) {
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	0004      	movs	r4, r0
 8001604:	0008      	movs	r0, r1
 8001606:	0011      	movs	r1, r2
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	1c22      	adds	r2, r4, #0
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	1dbb      	adds	r3, r7, #6
 8001610:	1c02      	adds	r2, r0, #0
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	1d7b      	adds	r3, r7, #5
 8001616:	1c0a      	adds	r2, r1, #0
 8001618:	701a      	strb	r2, [r3, #0]
	volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 800161a:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <configure_flash_sector_r_w_protection+0xd4>)
 800161c:	60fb      	str	r3, [r7, #12]


    while (HAL_FLASH_OB_Unlock() != HAL_OK) {};
 800161e:	46c0      	nop			@ (mov r8, r8)
 8001620:	f002 fab0 	bl	8003b84 <HAL_FLASH_OB_Unlock>
 8001624:	1e03      	subs	r3, r0, #0
 8001626:	d1fb      	bne.n	8001620 <configure_flash_sector_r_w_protection+0x24>

	if (enableOrDisable) {
 8001628:	1d7b      	adds	r3, r7, #5
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00e      	beq.n	800164e <configure_flash_sector_r_w_protection+0x52>
		*pOPTCR |= (0xFF << 16);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	22ff      	movs	r2, #255	@ 0xff
 8001636:	0412      	lsls	r2, r2, #16
 8001638:	431a      	orrs	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (1 << 1);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2202      	movs	r2, #2
 8001644:	431a      	orrs	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	601a      	str	r2, [r3, #0]

		return 0;
 800164a:	2300      	movs	r3, #0
 800164c:	e03c      	b.n	80016c8 <configure_flash_sector_r_w_protection+0xcc>
	}
	if (protection_mode == 1){	// write protection
 800164e:	1dbb      	adds	r3, r7, #6
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d10f      	bne.n	8001676 <configure_flash_sector_r_w_protection+0x7a>
		*pOPTCR &= ~(sector_details << 16);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	1dfa      	adds	r2, r7, #7
 800165c:	7812      	ldrb	r2, [r2, #0]
 800165e:	0412      	lsls	r2, r2, #16
 8001660:	43d2      	mvns	r2, r2
 8001662:	401a      	ands	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (1 << 1);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2202      	movs	r2, #2
 800166e:	431a      	orrs	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e01e      	b.n	80016b4 <configure_flash_sector_r_w_protection+0xb8>
	}
	else if (protection_mode == 2){ // read / write protection
 8001676:	1dbb      	adds	r3, r7, #6
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d11a      	bne.n	80016b4 <configure_flash_sector_r_w_protection+0xb8>
		*pOPTCR &= ~(0xFF << 16);				// write protecton all sector
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <configure_flash_sector_r_w_protection+0xd8>)
 8001684:	401a      	ands	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (sector_details << 16);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	1dfb      	adds	r3, r7, #7
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	041b      	lsls	r3, r3, #16
 8001694:	431a      	orrs	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (0xFF << 8);					// read protection all sector
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	22ff      	movs	r2, #255	@ 0xff
 80016a0:	0212      	lsls	r2, r2, #8
 80016a2:	431a      	orrs	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (1 << 1);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2202      	movs	r2, #2
 80016ae:	431a      	orrs	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	601a      	str	r2, [r3, #0]
	}
    while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET){};
 80016b4:	46c0      	nop			@ (mov r8, r8)
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <configure_flash_sector_r_w_protection+0xdc>)
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	2380      	movs	r3, #128	@ 0x80
 80016bc:	025b      	lsls	r3, r3, #9
 80016be:	4013      	ands	r3, r2
 80016c0:	d1f9      	bne.n	80016b6 <configure_flash_sector_r_w_protection+0xba>
	HAL_FLASH_OB_Lock();
 80016c2:	f002 fa87 	bl	8003bd4 <HAL_FLASH_OB_Lock>

	return 0;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b005      	add	sp, #20
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	40023c14 	.word	0x40023c14
 80016d4:	ff00ffff 	.word	0xff00ffff
 80016d8:	40022000 	.word	0x40022000

080016dc <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	000a      	movs	r2, r1
 80016e6:	1cbb      	adds	r3, r7, #2
 80016e8:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART3)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a08      	ldr	r2, [pc, #32]	@ (8001710 <HAL_UARTEx_RxEventCallback+0x34>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d109      	bne.n	8001708 <HAL_UARTEx_RxEventCallback+0x2c>
	{
		Boot_Receive_Flag =1;
 80016f4:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <HAL_UARTEx_RxEventCallback+0x38>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	701a      	strb	r2, [r3, #0]
		memcpy(Bootloader_Main_Buf, bootloader_rx_data,Size);
 80016fa:	1cbb      	adds	r3, r7, #2
 80016fc:	881a      	ldrh	r2, [r3, #0]
 80016fe:	4906      	ldr	r1, [pc, #24]	@ (8001718 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_UARTEx_RxEventCallback+0x40>)
 8001702:	0018      	movs	r0, r3
 8001704:	f006 fdd8 	bl	80082b8 <memcpy>

	}
}
 8001708:	46c0      	nop			@ (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40004800 	.word	0x40004800
 8001714:	20000d4c 	.word	0x20000d4c
 8001718:	200004b4 	.word	0x200004b4
 800171c:	2000057c 	.word	0x2000057c

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001724:	f001 f972 	bl	8002a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001728:	f000 f8d0 	bl	80018cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800172c:	f000 fa6a 	bl	8001c04 <MX_GPIO_Init>
  MX_DMA_Init();
 8001730:	f000 fa4a 	bl	8001bc8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001734:	f000 f9c6 	bl	8001ac4 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001738:	f000 f922 	bl	8001980 <MX_CRC_Init>
  MX_I2C1_Init();
 800173c:	f000 f944 	bl	80019c8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001740:	f000 fa0e 	bl	8001b60 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001744:	f000 f980 	bl	8001a48 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8001748:	f000 fb8a 	bl	8001e60 <SSD1306_Init>
  restart_RxDMA();
 800174c:	f000 fad4 	bl	8001cf8 <restart_RxDMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		printMessage("Bootloader");
 8001750:	4b56      	ldr	r3, [pc, #344]	@ (80018ac <main+0x18c>)
 8001752:	0018      	movs	r0, r3
 8001754:	f000 faea 	bl	8001d2c <printMessage>
	  if(Boot_Receive_Flag==1){
 8001758:	4b55      	ldr	r3, [pc, #340]	@ (80018b0 <main+0x190>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d000      	beq.n	8001762 <main+0x42>
 8001760:	e089      	b.n	8001876 <main+0x156>
		switch (bootloader_rx_data[1]) {
 8001762:	4b54      	ldr	r3, [pc, #336]	@ (80018b4 <main+0x194>)
 8001764:	785b      	ldrb	r3, [r3, #1]
 8001766:	3b51      	subs	r3, #81	@ 0x51
 8001768:	2b0e      	cmp	r3, #14
 800176a:	d900      	bls.n	800176e <main+0x4e>
 800176c:	e07c      	b.n	8001868 <main+0x148>
 800176e:	009a      	lsls	r2, r3, #2
 8001770:	4b51      	ldr	r3, [pc, #324]	@ (80018b8 <main+0x198>)
 8001772:	18d3      	adds	r3, r2, r3
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	469f      	mov	pc, r3
		case BL_GET_VER:/*TAMAMEN CALISIYOR*/
			bootloader_get_ver_cmd(bootloader_rx_data);
 8001778:	4b4e      	ldr	r3, [pc, #312]	@ (80018b4 <main+0x194>)
 800177a:	0018      	movs	r0, r3
 800177c:	f7ff f882 	bl	8000884 <bootloader_get_ver_cmd>
			restart_RxDMA();
 8001780:	f000 faba 	bl	8001cf8 <restart_RxDMA>
			Boot_Receive_Flag=0;
 8001784:	4b4a      	ldr	r3, [pc, #296]	@ (80018b0 <main+0x190>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
			break;
 800178a:	e06e      	b.n	800186a <main+0x14a>
		case BL_GET_HELP:/*TAMAMEN CALISIYOR*/
			bootloader_get_help_cmd(bootloader_rx_data);
 800178c:	4b49      	ldr	r3, [pc, #292]	@ (80018b4 <main+0x194>)
 800178e:	0018      	movs	r0, r3
 8001790:	f7ff f8be 	bl	8000910 <bootloader_get_help_cmd>
			restart_RxDMA();
 8001794:	f000 fab0 	bl	8001cf8 <restart_RxDMA>
			Boot_Receive_Flag=0;
 8001798:	4b45      	ldr	r3, [pc, #276]	@ (80018b0 <main+0x190>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
			break;
 800179e:	e064      	b.n	800186a <main+0x14a>
		case BL_GET_CID:/*TAMAMEN CALISIYOR */
			bootloader_get_cid_cmd(bootloader_rx_data); //calıisiyor
 80017a0:	4b44      	ldr	r3, [pc, #272]	@ (80018b4 <main+0x194>)
 80017a2:	0018      	movs	r0, r3
 80017a4:	f7ff f8e6 	bl	8000974 <bootloader_get_cid_cmd>
			restart_RxDMA();
 80017a8:	f000 faa6 	bl	8001cf8 <restart_RxDMA>
			Boot_Receive_Flag=0;
 80017ac:	4b40      	ldr	r3, [pc, #256]	@ (80018b0 <main+0x190>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
			break;
 80017b2:	e05a      	b.n	800186a <main+0x14a>
		case BL_GET_RDP_STATUS:/*TAMAMEN CALISIYOR*/
			bootloader_get_rdp_cmd(bootloader_rx_data);// calısiyor
 80017b4:	4b3f      	ldr	r3, [pc, #252]	@ (80018b4 <main+0x194>)
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff fc88 	bl	80010cc <bootloader_get_rdp_cmd>
			restart_RxDMA();
 80017bc:	f000 fa9c 	bl	8001cf8 <restart_RxDMA>
			Boot_Receive_Flag=0;
 80017c0:	4b3b      	ldr	r3, [pc, #236]	@ (80018b0 <main+0x190>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
			break;
 80017c6:	e050      	b.n	800186a <main+0x14a>
		case BL_GO_TO_ADDR:/*TAMAMEN CALISIYOR*/
			bootloader_go_to_addr_cmd(bootloader_rx_data);// calısiyor
 80017c8:	4b3a      	ldr	r3, [pc, #232]	@ (80018b4 <main+0x194>)
 80017ca:	0018      	movs	r0, r3
 80017cc:	f7ff f91e 	bl	8000a0c <bootloader_go_to_addr_cmd>
			restart_RxDMA();
 80017d0:	f000 fa92 	bl	8001cf8 <restart_RxDMA>
			Boot_Receive_Flag=0;
 80017d4:	4b36      	ldr	r3, [pc, #216]	@ (80018b0 <main+0x190>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
			break;
 80017da:	e046      	b.n	800186a <main+0x14a>
			/*	Once page sonra ondan sonraki kaç tane page silincek ise o girilecek  */
		case BL_FLASH_ERASE:/*TAMAMEN CALISIYOR*/
			bootloader_flash_erase_cmd(bootloader_rx_data);
 80017dc:	4b35      	ldr	r3, [pc, #212]	@ (80018b4 <main+0x194>)
 80017de:	0018      	movs	r0, r3
 80017e0:	f7ff f9b0 	bl	8000b44 <bootloader_flash_erase_cmd>
			restart_RxDMA();
 80017e4:	f000 fa88 	bl	8001cf8 <restart_RxDMA>
			Boot_Receive_Flag=0;
 80017e8:	4b31      	ldr	r3, [pc, #196]	@ (80018b0 <main+0x190>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
			break;
 80017ee:	e03c      	b.n	800186a <main+0x14a>
			/*	Yazma yapılmadan önce kullanılacak pageler flash erase yapılmalı*/
		case BL_MEM_WRITE:/*TAMAMEN CALISIYOR*/
			bootloader_mem_write_cmd(bootloader_rx_data);
 80017f0:	4b30      	ldr	r3, [pc, #192]	@ (80018b4 <main+0x194>)
 80017f2:	0018      	movs	r0, r3
 80017f4:	f7ff f9f6 	bl	8000be4 <bootloader_mem_write_cmd>
			restart_RxDMA();
 80017f8:	f000 fa7e 	bl	8001cf8 <restart_RxDMA>
			Boot_Receive_Flag=0;
 80017fc:	4b2c      	ldr	r3, [pc, #176]	@ (80018b0 <main+0x190>)
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
			break;
 8001802:	e032      	b.n	800186a <main+0x14a>
		case BL_EN_RW_PROTECT:
			bootloader_enable_read_write_protect_cmd(bootloader_rx_data);
 8001804:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <main+0x194>)
 8001806:	0018      	movs	r0, r3
 8001808:	f7ff fa6a 	bl	8000ce0 <bootloader_enable_read_write_protect_cmd>
			restart_RxDMA();
 800180c:	f000 fa74 	bl	8001cf8 <restart_RxDMA>
			Boot_Receive_Flag=0;
 8001810:	4b27      	ldr	r3, [pc, #156]	@ (80018b0 <main+0x190>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
			break;
 8001816:	e028      	b.n	800186a <main+0x14a>
		case BL_DIS_R_W_PROTECT:
			bootloader_disable_read_write_protect_cmd(bootloader_rx_data);
 8001818:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <main+0x194>)
 800181a:	0018      	movs	r0, r3
 800181c:	f7ff fbd6 	bl	8000fcc <bootloader_disable_read_write_protect_cmd>
			restart_RxDMA();
 8001820:	f000 fa6a 	bl	8001cf8 <restart_RxDMA>
			Boot_Receive_Flag=0;
 8001824:	4b22      	ldr	r3, [pc, #136]	@ (80018b0 <main+0x190>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
			break;
 800182a:	e01e      	b.n	800186a <main+0x14a>
		case BL_GO_TO_BOOTLOADER:
			bootloader_go_to_bootloader_cmd(bootloader_rx_data);
 800182c:	4b21      	ldr	r3, [pc, #132]	@ (80018b4 <main+0x194>)
 800182e:	0018      	movs	r0, r3
 8001830:	f7ff faaa 	bl	8000d88 <bootloader_go_to_bootloader_cmd>
			restart_RxDMA();
 8001834:	f000 fa60 	bl	8001cf8 <restart_RxDMA>
			Boot_Receive_Flag=0;
 8001838:	4b1d      	ldr	r3, [pc, #116]	@ (80018b0 <main+0x190>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
			break;
 800183e:	e014      	b.n	800186a <main+0x14a>
		case BL_EXT_MEM_WRITE:
			bootloader_ext_mem_write_cmd(bootloader_rx_data);
 8001840:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <main+0x194>)
 8001842:	0018      	movs	r0, r3
 8001844:	f7ff fb3c 	bl	8000ec0 <bootloader_ext_mem_write_cmd>
			restart_RxDMA();
 8001848:	f000 fa56 	bl	8001cf8 <restart_RxDMA>
			Boot_Receive_Flag=0;
 800184c:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <main+0x190>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
			break;
 8001852:	e00a      	b.n	800186a <main+0x14a>
		case BL_EXT_MEM_TO_MEM_WRITE:
			bootloader_ext_mem_to_mem_write_cmd(bootloader_rx_data);
 8001854:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <main+0x194>)
 8001856:	0018      	movs	r0, r3
 8001858:	f7ff facc 	bl	8000df4 <bootloader_ext_mem_to_mem_write_cmd>
			restart_RxDMA();
 800185c:	f000 fa4c 	bl	8001cf8 <restart_RxDMA>
			Boot_Receive_Flag=0;
 8001860:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <main+0x190>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
			break;
 8001866:	e000      	b.n	800186a <main+0x14a>
			default:
			break;
 8001868:	46c0      	nop			@ (mov r8, r8)
		}
		memset(bootloader_rx_data, '\0',200);
 800186a:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <main+0x194>)
 800186c:	22c8      	movs	r2, #200	@ 0xc8
 800186e:	2100      	movs	r1, #0
 8001870:	0018      	movs	r0, r3
 8001872:	f006 fced 	bl	8008250 <memset>

	  }
	  else{}

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {//bunu direk Set olarak yaptım
 8001876:	2380      	movs	r3, #128	@ 0x80
 8001878:	019b      	lsls	r3, r3, #6
 800187a:	4a10      	ldr	r2, [pc, #64]	@ (80018bc <main+0x19c>)
 800187c:	0019      	movs	r1, r3
 800187e:	0010      	movs	r0, r2
 8001880:	f002 fd12 	bl	80042a8 <HAL_GPIO_ReadPin>
 8001884:	0003      	movs	r3, r0
 8001886:	2b01      	cmp	r3, #1
 8001888:	d104      	bne.n	8001894 <main+0x174>
		  														   //tuş basılı değilse bootloaderda kalacak
		  		printMessage(" Going to bootloader mode.\n");
 800188a:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <main+0x1a0>)
 800188c:	0018      	movs	r0, r3
 800188e:	f000 fa4d 	bl	8001d2c <printMessage>
 8001892:	e005      	b.n	80018a0 <main+0x180>

		  	} else {
		  		printMessage(" Executing user application.\n");
 8001894:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <main+0x1a4>)
 8001896:	0018      	movs	r0, r3
 8001898:	f000 fa48 	bl	8001d2c <printMessage>

		  		bootloader_jump_to_user_application();
 800189c:	f000 fa70 	bl	8001d80 <bootloader_jump_to_user_application>
		  	}
		printMessage("Working");
 80018a0:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <main+0x1a8>)
 80018a2:	0018      	movs	r0, r3
 80018a4:	f000 fa42 	bl	8001d2c <printMessage>
		printMessage("Bootloader");
 80018a8:	e752      	b.n	8001750 <main+0x30>
 80018aa:	46c0      	nop			@ (mov r8, r8)
 80018ac:	08008e48 	.word	0x08008e48
 80018b0:	20000d4c 	.word	0x20000d4c
 80018b4:	200004b4 	.word	0x200004b4
 80018b8:	08009658 	.word	0x08009658
 80018bc:	50000800 	.word	0x50000800
 80018c0:	08008e54 	.word	0x08008e54
 80018c4:	08008e70 	.word	0x08008e70
 80018c8:	08008e90 	.word	0x08008e90

080018cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b093      	sub	sp, #76	@ 0x4c
 80018d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d2:	2414      	movs	r4, #20
 80018d4:	193b      	adds	r3, r7, r4
 80018d6:	0018      	movs	r0, r3
 80018d8:	2334      	movs	r3, #52	@ 0x34
 80018da:	001a      	movs	r2, r3
 80018dc:	2100      	movs	r1, #0
 80018de:	f006 fcb7 	bl	8008250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	0018      	movs	r0, r3
 80018e6:	2310      	movs	r3, #16
 80018e8:	001a      	movs	r2, r3
 80018ea:	2100      	movs	r1, #0
 80018ec:	f006 fcb0 	bl	8008250 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	0018      	movs	r0, r3
 80018f6:	f003 fadb 	bl	8004eb0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018fa:	193b      	adds	r3, r7, r4
 80018fc:	2202      	movs	r2, #2
 80018fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001900:	193b      	adds	r3, r7, r4
 8001902:	2280      	movs	r2, #128	@ 0x80
 8001904:	0052      	lsls	r2, r2, #1
 8001906:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001908:	0021      	movs	r1, r4
 800190a:	187b      	adds	r3, r7, r1
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001910:	187b      	adds	r3, r7, r1
 8001912:	2240      	movs	r2, #64	@ 0x40
 8001914:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001916:	187b      	adds	r3, r7, r1
 8001918:	2202      	movs	r2, #2
 800191a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800191c:	187b      	adds	r3, r7, r1
 800191e:	2202      	movs	r2, #2
 8001920:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001922:	187b      	adds	r3, r7, r1
 8001924:	2200      	movs	r2, #0
 8001926:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001928:	187b      	adds	r3, r7, r1
 800192a:	2208      	movs	r2, #8
 800192c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800192e:	187b      	adds	r3, r7, r1
 8001930:	2280      	movs	r2, #128	@ 0x80
 8001932:	0292      	lsls	r2, r2, #10
 8001934:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001936:	187b      	adds	r3, r7, r1
 8001938:	2280      	movs	r2, #128	@ 0x80
 800193a:	0592      	lsls	r2, r2, #22
 800193c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193e:	187b      	adds	r3, r7, r1
 8001940:	0018      	movs	r0, r3
 8001942:	f003 fb7d 	bl	8005040 <HAL_RCC_OscConfig>
 8001946:	1e03      	subs	r3, r0, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800194a:	f000 fa83 	bl	8001e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2202      	movs	r2, #2
 8001958:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2102      	movs	r1, #2
 800196a:	0018      	movs	r0, r3
 800196c:	f003 fe78 	bl	8005660 <HAL_RCC_ClockConfig>
 8001970:	1e03      	subs	r3, r0, #0
 8001972:	d001      	beq.n	8001978 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001974:	f000 fa6e 	bl	8001e54 <Error_Handler>
  }
}
 8001978:	46c0      	nop			@ (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	b013      	add	sp, #76	@ 0x4c
 800197e:	bd90      	pop	{r4, r7, pc}

08001980 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001984:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <MX_CRC_Init+0x40>)
 8001986:	4a0f      	ldr	r2, [pc, #60]	@ (80019c4 <MX_CRC_Init+0x44>)
 8001988:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800198a:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <MX_CRC_Init+0x40>)
 800198c:	2200      	movs	r2, #0
 800198e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001990:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <MX_CRC_Init+0x40>)
 8001992:	2200      	movs	r2, #0
 8001994:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001996:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <MX_CRC_Init+0x40>)
 8001998:	2200      	movs	r2, #0
 800199a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800199c:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <MX_CRC_Init+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 80019a2:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <MX_CRC_Init+0x40>)
 80019a4:	2203      	movs	r2, #3
 80019a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <MX_CRC_Init+0x40>)
 80019aa:	0018      	movs	r0, r3
 80019ac:	f001 fa14 	bl	8002dd8 <HAL_CRC_Init>
 80019b0:	1e03      	subs	r3, r0, #0
 80019b2:	d001      	beq.n	80019b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80019b4:	f000 fa4e 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80019b8:	46c0      	nop			@ (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	20000254 	.word	0x20000254
 80019c4:	40023000 	.word	0x40023000

080019c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001a40 <MX_I2C1_Init+0x78>)
 80019d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a44 <MX_I2C1_Init+0x7c>)
 80019d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019d8:	4b18      	ldr	r3, [pc, #96]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019de:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e4:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019ea:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a02:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <MX_I2C1_Init+0x74>)
 8001a04:	0018      	movs	r0, r3
 8001a06:	f002 fc89 	bl	800431c <HAL_I2C_Init>
 8001a0a:	1e03      	subs	r3, r0, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a0e:	f000 fa21 	bl	8001e54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a12:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <MX_I2C1_Init+0x74>)
 8001a14:	2100      	movs	r1, #0
 8001a16:	0018      	movs	r0, r3
 8001a18:	f003 f9b2 	bl	8004d80 <HAL_I2CEx_ConfigAnalogFilter>
 8001a1c:	1e03      	subs	r3, r0, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a20:	f000 fa18 	bl	8001e54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <MX_I2C1_Init+0x74>)
 8001a26:	2100      	movs	r1, #0
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f003 f9f5 	bl	8004e18 <HAL_I2CEx_ConfigDigitalFilter>
 8001a2e:	1e03      	subs	r3, r0, #0
 8001a30:	d001      	beq.n	8001a36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a32:	f000 fa0f 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000278 	.word	0x20000278
 8001a40:	40005400 	.word	0x40005400
 8001a44:	00c12166 	.word	0x00c12166

08001a48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <MX_SPI1_Init+0x74>)
 8001a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac0 <MX_SPI1_Init+0x78>)
 8001a50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <MX_SPI1_Init+0x74>)
 8001a54:	2282      	movs	r2, #130	@ 0x82
 8001a56:	0052      	lsls	r2, r2, #1
 8001a58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a5a:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <MX_SPI1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a60:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <MX_SPI1_Init+0x74>)
 8001a62:	22e0      	movs	r2, #224	@ 0xe0
 8001a64:	00d2      	lsls	r2, r2, #3
 8001a66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a68:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <MX_SPI1_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <MX_SPI1_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <MX_SPI1_Init+0x74>)
 8001a76:	2280      	movs	r2, #128	@ 0x80
 8001a78:	0092      	lsls	r2, r2, #2
 8001a7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <MX_SPI1_Init+0x74>)
 8001a7e:	2220      	movs	r2, #32
 8001a80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <MX_SPI1_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <MX_SPI1_Init+0x74>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <MX_SPI1_Init+0x74>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a94:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <MX_SPI1_Init+0x74>)
 8001a96:	2207      	movs	r2, #7
 8001a98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <MX_SPI1_Init+0x74>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <MX_SPI1_Init+0x74>)
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aa6:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <MX_SPI1_Init+0x74>)
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f004 f8b7 	bl	8005c1c <HAL_SPI_Init>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ab2:	f000 f9cf 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200002cc 	.word	0x200002cc
 8001ac0:	40013000 	.word	0x40013000

08001ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ac8:	4b23      	ldr	r3, [pc, #140]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001aca:	4a24      	ldr	r2, [pc, #144]	@ (8001b5c <MX_USART2_UART_Init+0x98>)
 8001acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ace:	4b22      	ldr	r3, [pc, #136]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001ad0:	22e1      	movs	r2, #225	@ 0xe1
 8001ad2:	0252      	lsls	r2, r2, #9
 8001ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8001ad6:	4b20      	ldr	r3, [pc, #128]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001ad8:	2280      	movs	r2, #128	@ 0x80
 8001ada:	0552      	lsls	r2, r2, #21
 8001adc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ade:	4b1e      	ldr	r3, [pc, #120]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aea:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001aec:	220c      	movs	r2, #12
 8001aee:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af0:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af6:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001afc:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b08:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001b10:	0018      	movs	r0, r3
 8001b12:	f004 ffa3 	bl	8006a5c <HAL_UART_Init>
 8001b16:	1e03      	subs	r3, r0, #0
 8001b18:	d001      	beq.n	8001b1e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001b1a:	f000 f99b 	bl	8001e54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001b20:	2100      	movs	r1, #0
 8001b22:	0018      	movs	r0, r3
 8001b24:	f006 fa2a 	bl	8007f7c <HAL_UARTEx_SetTxFifoThreshold>
 8001b28:	1e03      	subs	r3, r0, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001b2c:	f000 f992 	bl	8001e54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b30:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001b32:	2100      	movs	r1, #0
 8001b34:	0018      	movs	r0, r3
 8001b36:	f006 fa61 	bl	8007ffc <HAL_UARTEx_SetRxFifoThreshold>
 8001b3a:	1e03      	subs	r3, r0, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001b3e:	f000 f989 	bl	8001e54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b42:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001b44:	0018      	movs	r0, r3
 8001b46:	f006 f9df 	bl	8007f08 <HAL_UARTEx_DisableFifoMode>
 8001b4a:	1e03      	subs	r3, r0, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001b4e:	f000 f981 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000330 	.word	0x20000330
 8001b5c:	40004400 	.word	0x40004400

08001b60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b64:	4b16      	ldr	r3, [pc, #88]	@ (8001bc0 <MX_USART3_UART_Init+0x60>)
 8001b66:	4a17      	ldr	r2, [pc, #92]	@ (8001bc4 <MX_USART3_UART_Init+0x64>)
 8001b68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <MX_USART3_UART_Init+0x60>)
 8001b6c:	2296      	movs	r2, #150	@ 0x96
 8001b6e:	0192      	lsls	r2, r2, #6
 8001b70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b72:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <MX_USART3_UART_Init+0x60>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <MX_USART3_UART_Init+0x60>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <MX_USART3_UART_Init+0x60>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b84:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <MX_USART3_UART_Init+0x60>)
 8001b86:	220c      	movs	r2, #12
 8001b88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <MX_USART3_UART_Init+0x60>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <MX_USART3_UART_Init+0x60>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b96:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <MX_USART3_UART_Init+0x60>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <MX_USART3_UART_Init+0x60>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <MX_USART3_UART_Init+0x60>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ba8:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <MX_USART3_UART_Init+0x60>)
 8001baa:	0018      	movs	r0, r3
 8001bac:	f004 ff56 	bl	8006a5c <HAL_UART_Init>
 8001bb0:	1e03      	subs	r3, r0, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001bb4:	f000 f94e 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bb8:	46c0      	nop			@ (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			@ (mov r8, r8)
 8001bc0:	200003c4 	.word	0x200003c4
 8001bc4:	40004800 	.word	0x40004800

08001bc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bce:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <MX_DMA_Init+0x38>)
 8001bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <MX_DMA_Init+0x38>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bda:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <MX_DMA_Init+0x38>)
 8001bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bde:	2201      	movs	r2, #1
 8001be0:	4013      	ands	r3, r2
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	2009      	movs	r0, #9
 8001bec:	f001 f8b2 	bl	8002d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bf0:	2009      	movs	r0, #9
 8001bf2:	f001 f8c4 	bl	8002d7e <HAL_NVIC_EnableIRQ>

}
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b002      	add	sp, #8
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			@ (mov r8, r8)
 8001c00:	40021000 	.word	0x40021000

08001c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b08b      	sub	sp, #44	@ 0x2c
 8001c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0a:	2414      	movs	r4, #20
 8001c0c:	193b      	adds	r3, r7, r4
 8001c0e:	0018      	movs	r0, r3
 8001c10:	2314      	movs	r3, #20
 8001c12:	001a      	movs	r2, r3
 8001c14:	2100      	movs	r1, #0
 8001c16:	f006 fb1b 	bl	8008250 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <MX_GPIO_Init+0xe8>)
 8001c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c1e:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <MX_GPIO_Init+0xe8>)
 8001c20:	2104      	movs	r1, #4
 8001c22:	430a      	orrs	r2, r1
 8001c24:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c26:	4b31      	ldr	r3, [pc, #196]	@ (8001cec <MX_GPIO_Init+0xe8>)
 8001c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c32:	4b2e      	ldr	r3, [pc, #184]	@ (8001cec <MX_GPIO_Init+0xe8>)
 8001c34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c36:	4b2d      	ldr	r3, [pc, #180]	@ (8001cec <MX_GPIO_Init+0xe8>)
 8001c38:	2120      	movs	r1, #32
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cec <MX_GPIO_Init+0xe8>)
 8001c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c42:	2220      	movs	r2, #32
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	4b28      	ldr	r3, [pc, #160]	@ (8001cec <MX_GPIO_Init+0xe8>)
 8001c4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c4e:	4b27      	ldr	r3, [pc, #156]	@ (8001cec <MX_GPIO_Init+0xe8>)
 8001c50:	2101      	movs	r1, #1
 8001c52:	430a      	orrs	r2, r1
 8001c54:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c56:	4b25      	ldr	r3, [pc, #148]	@ (8001cec <MX_GPIO_Init+0xe8>)
 8001c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	4b22      	ldr	r3, [pc, #136]	@ (8001cec <MX_GPIO_Init+0xe8>)
 8001c64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c66:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <MX_GPIO_Init+0xe8>)
 8001c68:	2102      	movs	r1, #2
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <MX_GPIO_Init+0xe8>)
 8001c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <MX_GPIO_Init+0xe8>)
 8001c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <MX_GPIO_Init+0xe8>)
 8001c80:	2108      	movs	r1, #8
 8001c82:	430a      	orrs	r2, r1
 8001c84:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c86:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <MX_GPIO_Init+0xe8>)
 8001c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001c92:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <MX_GPIO_Init+0xec>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	2101      	movs	r1, #1
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f002 fb22 	bl	80042e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c9e:	193b      	adds	r3, r7, r4
 8001ca0:	2280      	movs	r2, #128	@ 0x80
 8001ca2:	0192      	lsls	r2, r2, #6
 8001ca4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca6:	193b      	adds	r3, r7, r4
 8001ca8:	2200      	movs	r2, #0
 8001caa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	193b      	adds	r3, r7, r4
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb2:	193b      	adds	r3, r7, r4
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf4 <MX_GPIO_Init+0xf0>)
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	0010      	movs	r0, r2
 8001cba:	f002 f8c1 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cbe:	0021      	movs	r1, r4
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	2201      	movs	r2, #1
 8001cca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	4a05      	ldr	r2, [pc, #20]	@ (8001cf0 <MX_GPIO_Init+0xec>)
 8001cdc:	0019      	movs	r1, r3
 8001cde:	0010      	movs	r0, r2
 8001ce0:	f002 f8ae 	bl	8003e40 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ce4:	46c0      	nop			@ (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b00b      	add	sp, #44	@ 0x2c
 8001cea:	bd90      	pop	{r4, r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	50000400 	.word	0x50000400
 8001cf4:	50000800 	.word	0x50000800

08001cf8 <restart_RxDMA>:

/* USER CODE BEGIN 4 */

void restart_RxDMA(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bootloader_rx_data, BL_RX_DATA_LENGTH);
 8001cfc:	4908      	ldr	r1, [pc, #32]	@ (8001d20 <restart_RxDMA+0x28>)
 8001cfe:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <restart_RxDMA+0x2c>)
 8001d00:	22c8      	movs	r2, #200	@ 0xc8
 8001d02:	0018      	movs	r0, r3
 8001d04:	f006 f9bc 	bl	8008080 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001d08:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <restart_RxDMA+0x30>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <restart_RxDMA+0x30>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2104      	movs	r1, #4
 8001d14:	438a      	bics	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
}
 8001d18:	46c0      	nop			@ (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			@ (mov r8, r8)
 8001d20:	200004b4 	.word	0x200004b4
 8001d24:	200003c4 	.word	0x200003c4
 8001d28:	20000458 	.word	0x20000458

08001d2c <printMessage>:
void printMessage(char *format, ...) {
 8001d2c:	b40f      	push	{r0, r1, r2, r3}
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b09a      	sub	sp, #104	@ 0x68
 8001d32:	af00      	add	r7, sp, #0
	char comingMessage[100] = { 0 };
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	0018      	movs	r0, r3
 8001d38:	2364      	movs	r3, #100	@ 0x64
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	f006 fa87 	bl	8008250 <memset>
	va_list vaList;
	va_start(vaList, format);
 8001d42:	2374      	movs	r3, #116	@ 0x74
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	603b      	str	r3, [r7, #0]
	vsprintf(comingMessage, format, vaList);
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f006 fa72 	bl	8008238 <vsiprintf>
	SSD1306_GotoXY(0, 0);
 8001d54:	2100      	movs	r1, #0
 8001d56:	2000      	movs	r0, #0
 8001d58:	f000 fa02 	bl	8002160 <SSD1306_GotoXY>
	SSD1306_Puts(comingMessage, &Font_7x10, 1);
 8001d5c:	4907      	ldr	r1, [pc, #28]	@ (8001d7c <printMessage+0x50>)
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	2201      	movs	r2, #1
 8001d62:	0018      	movs	r0, r3
 8001d64:	f000 fa96 	bl	8002294 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001d68:	f000 f93e 	bl	8001fe8 <SSD1306_UpdateScreen>
	va_end(vaList);
}
 8001d6c:	46c0      	nop			@ (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b01a      	add	sp, #104	@ 0x68
 8001d72:	bc80      	pop	{r7}
 8001d74:	bc08      	pop	{r3}
 8001d76:	b004      	add	sp, #16
 8001d78:	4718      	bx	r3
 8001d7a:	46c0      	nop			@ (mov r8, r8)
 8001d7c:	20000010 	.word	0x20000010

08001d80 <bootloader_jump_to_user_application>:

void bootloader_jump_to_user_application(void) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
	//  Kesmeleri kapa
	/*__disable_irq();// __disable_irq deyince hal_delay çalışmıyor unutma !!!!!*/

	printMessage("bootloader_jump_to_user_application() \n");
 8001d86:	4b26      	ldr	r3, [pc, #152]	@ (8001e20 <bootloader_jump_to_user_application+0xa0>)
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7ff ffcf 	bl	8001d2c <printMessage>

	//  MSP'nin değerini tut
	uint32_t mspValue = *(volatile uint32_t*) FLASH_APP_BASE_ADDRESS;
 8001d8e:	4b25      	ldr	r3, [pc, #148]	@ (8001e24 <bootloader_jump_to_user_application+0xa4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]
	printMessage("MSP Value: %#x \n", mspValue);
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4b24      	ldr	r3, [pc, #144]	@ (8001e28 <bootloader_jump_to_user_application+0xa8>)
 8001d98:	0011      	movs	r1, r2
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7ff ffc6 	bl	8001d2c <printMessage>

	// Sıfırlama işleyicisinin değerini tut
	uint32_t resetValue = *(volatile uint32_t*) (FLASH_APP_BASE_ADDRESS + 4);
 8001da0:	4b22      	ldr	r3, [pc, #136]	@ (8001e2c <bootloader_jump_to_user_application+0xac>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60bb      	str	r3, [r7, #8]
	printMessage("Reset Value: %#x \n", resetValue);
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	4b21      	ldr	r3, [pc, #132]	@ (8001e30 <bootloader_jump_to_user_application+0xb0>)
 8001daa:	0011      	movs	r1, r2
 8001dac:	0018      	movs	r0, r3
 8001dae:	f7ff ffbd 	bl	8001d2c <printMessage>

	//  Periferleri sıfırla ve devre dışı bırak

	SCB->VTOR = FLASH_APP_BASE_ADDRESS;
 8001db2:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <bootloader_jump_to_user_application+0xb4>)
 8001db4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e24 <bootloader_jump_to_user_application+0xa4>)
 8001db6:	609a      	str	r2, [r3, #8]
	//__set_MSP(mspValue);	// Bu fonksiyon F407 De calisiyordu ama
	//L053 de çalışmıyor
	SysTick->CTRL = 0;
 8001db8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e38 <bootloader_jump_to_user_application+0xb8>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001e38 <bootloader_jump_to_user_application+0xb8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e38 <bootloader_jump_to_user_application+0xb8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
	HAL_I2C_DeInit(&hi2c1);
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <bootloader_jump_to_user_application+0xbc>)
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f002 fb4b 	bl	8004468 <HAL_I2C_DeInit>
	HAL_UART_MspDeInit(&huart3);
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e40 <bootloader_jump_to_user_application+0xc0>)
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f000 fd39 	bl	800284c <HAL_UART_MspDeInit>
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 8001dda:	2380      	movs	r3, #128	@ 0x80
 8001ddc:	019b      	lsls	r3, r3, #6
 8001dde:	4a19      	ldr	r2, [pc, #100]	@ (8001e44 <bootloader_jump_to_user_application+0xc4>)
 8001de0:	0019      	movs	r1, r3
 8001de2:	0010      	movs	r0, r2
 8001de4:	f002 f990 	bl	8004108 <HAL_GPIO_DeInit>
	HAL_UART_MspDeInit(&huart2);
 8001de8:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <bootloader_jump_to_user_application+0xc8>)
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 fd2e 	bl	800284c <HAL_UART_MspDeInit>
	HAL_DMA_DeInit(&hdma_usart3_rx);
 8001df0:	4b16      	ldr	r3, [pc, #88]	@ (8001e4c <bootloader_jump_to_user_application+0xcc>)
 8001df2:	0018      	movs	r0, r3
 8001df4:	f001 fa94 	bl	8003320 <HAL_DMA_DeInit>
	HAL_CRC_DeInit(&hcrc);
 8001df8:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <bootloader_jump_to_user_application+0xd0>)
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f001 f852 	bl	8002ea4 <HAL_CRC_DeInit>
	HAL_RCC_DeInit();
 8001e00:	f003 f8a2 	bl	8004f48 <HAL_RCC_DeInit>

	HAL_DeInit();
 8001e04:	f000 fe22 	bl	8002a4c <HAL_DeInit>
	resetValue = *((volatile uint32_t*) (FLASH_APP_BASE_ADDRESS + 4));
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <bootloader_jump_to_user_application+0xac>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60bb      	str	r3, [r7, #8]
	void (*jump_to_app)(void) = (void *)resetValue;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	607b      	str	r3, [r7, #4]
	jump_to_app();
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4798      	blx	r3

}
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b004      	add	sp, #16
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			@ (mov r8, r8)
 8001e20:	08008e98 	.word	0x08008e98
 8001e24:	08011000 	.word	0x08011000
 8001e28:	08008ec0 	.word	0x08008ec0
 8001e2c:	08011004 	.word	0x08011004
 8001e30:	08008ed4 	.word	0x08008ed4
 8001e34:	e000ed00 	.word	0xe000ed00
 8001e38:	e000e010 	.word	0xe000e010
 8001e3c:	20000278 	.word	0x20000278
 8001e40:	200003c4 	.word	0x200003c4
 8001e44:	50000800 	.word	0x50000800
 8001e48:	20000330 	.word	0x20000330
 8001e4c:	20000458 	.word	0x20000458
 8001e50:	20000254 	.word	0x20000254

08001e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e58:	b672      	cpsid	i
}
 8001e5a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e5c:	46c0      	nop			@ (mov r8, r8)
 8001e5e:	e7fd      	b.n	8001e5c <Error_Handler+0x8>

08001e60 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001e66:	f000 fa3b 	bl	80022e0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001e6a:	4b5b      	ldr	r3, [pc, #364]	@ (8001fd8 <SSD1306_Init+0x178>)
 8001e6c:	485b      	ldr	r0, [pc, #364]	@ (8001fdc <SSD1306_Init+0x17c>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	2178      	movs	r1, #120	@ 0x78
 8001e72:	f002 fc53 	bl	800471c <HAL_I2C_IsDeviceReady>
 8001e76:	1e03      	subs	r3, r0, #0
 8001e78:	d001      	beq.n	8001e7e <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e0a8      	b.n	8001fd0 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001e7e:	4b58      	ldr	r3, [pc, #352]	@ (8001fe0 <SSD1306_Init+0x180>)
 8001e80:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e82:	e002      	b.n	8001e8a <SSD1306_Init+0x2a>
		p--;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f9      	bne.n	8001e84 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001e90:	22ae      	movs	r2, #174	@ 0xae
 8001e92:	2100      	movs	r1, #0
 8001e94:	2078      	movs	r0, #120	@ 0x78
 8001e96:	f000 faa3 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2078      	movs	r0, #120	@ 0x78
 8001ea0:	f000 fa9e 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2078      	movs	r0, #120	@ 0x78
 8001eaa:	f000 fa99 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001eae:	22b0      	movs	r2, #176	@ 0xb0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2078      	movs	r0, #120	@ 0x78
 8001eb4:	f000 fa94 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001eb8:	22c8      	movs	r2, #200	@ 0xc8
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2078      	movs	r0, #120	@ 0x78
 8001ebe:	f000 fa8f 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2078      	movs	r0, #120	@ 0x78
 8001ec8:	f000 fa8a 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001ecc:	2210      	movs	r2, #16
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2078      	movs	r0, #120	@ 0x78
 8001ed2:	f000 fa85 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001ed6:	2240      	movs	r2, #64	@ 0x40
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2078      	movs	r0, #120	@ 0x78
 8001edc:	f000 fa80 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001ee0:	2281      	movs	r2, #129	@ 0x81
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2078      	movs	r0, #120	@ 0x78
 8001ee6:	f000 fa7b 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001eea:	22ff      	movs	r2, #255	@ 0xff
 8001eec:	2100      	movs	r1, #0
 8001eee:	2078      	movs	r0, #120	@ 0x78
 8001ef0:	f000 fa76 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001ef4:	22a1      	movs	r2, #161	@ 0xa1
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2078      	movs	r0, #120	@ 0x78
 8001efa:	f000 fa71 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001efe:	22a6      	movs	r2, #166	@ 0xa6
 8001f00:	2100      	movs	r1, #0
 8001f02:	2078      	movs	r0, #120	@ 0x78
 8001f04:	f000 fa6c 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001f08:	22a8      	movs	r2, #168	@ 0xa8
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	2078      	movs	r0, #120	@ 0x78
 8001f0e:	f000 fa67 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001f12:	223f      	movs	r2, #63	@ 0x3f
 8001f14:	2100      	movs	r1, #0
 8001f16:	2078      	movs	r0, #120	@ 0x78
 8001f18:	f000 fa62 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001f1c:	22a4      	movs	r2, #164	@ 0xa4
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2078      	movs	r0, #120	@ 0x78
 8001f22:	f000 fa5d 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001f26:	22d3      	movs	r2, #211	@ 0xd3
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2078      	movs	r0, #120	@ 0x78
 8001f2c:	f000 fa58 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001f30:	2200      	movs	r2, #0
 8001f32:	2100      	movs	r1, #0
 8001f34:	2078      	movs	r0, #120	@ 0x78
 8001f36:	f000 fa53 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f3a:	22d5      	movs	r2, #213	@ 0xd5
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2078      	movs	r0, #120	@ 0x78
 8001f40:	f000 fa4e 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001f44:	22f0      	movs	r2, #240	@ 0xf0
 8001f46:	2100      	movs	r1, #0
 8001f48:	2078      	movs	r0, #120	@ 0x78
 8001f4a:	f000 fa49 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001f4e:	22d9      	movs	r2, #217	@ 0xd9
 8001f50:	2100      	movs	r1, #0
 8001f52:	2078      	movs	r0, #120	@ 0x78
 8001f54:	f000 fa44 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001f58:	2222      	movs	r2, #34	@ 0x22
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2078      	movs	r0, #120	@ 0x78
 8001f5e:	f000 fa3f 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001f62:	22da      	movs	r2, #218	@ 0xda
 8001f64:	2100      	movs	r1, #0
 8001f66:	2078      	movs	r0, #120	@ 0x78
 8001f68:	f000 fa3a 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001f6c:	2212      	movs	r2, #18
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2078      	movs	r0, #120	@ 0x78
 8001f72:	f000 fa35 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001f76:	22db      	movs	r2, #219	@ 0xdb
 8001f78:	2100      	movs	r1, #0
 8001f7a:	2078      	movs	r0, #120	@ 0x78
 8001f7c:	f000 fa30 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001f80:	2220      	movs	r2, #32
 8001f82:	2100      	movs	r1, #0
 8001f84:	2078      	movs	r0, #120	@ 0x78
 8001f86:	f000 fa2b 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001f8a:	228d      	movs	r2, #141	@ 0x8d
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2078      	movs	r0, #120	@ 0x78
 8001f90:	f000 fa26 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001f94:	2214      	movs	r2, #20
 8001f96:	2100      	movs	r1, #0
 8001f98:	2078      	movs	r0, #120	@ 0x78
 8001f9a:	f000 fa21 	bl	80023e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001f9e:	22af      	movs	r2, #175	@ 0xaf
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2078      	movs	r0, #120	@ 0x78
 8001fa4:	f000 fa1c 	bl	80023e0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001fa8:	222e      	movs	r2, #46	@ 0x2e
 8001faa:	2100      	movs	r1, #0
 8001fac:	2078      	movs	r0, #120	@ 0x78
 8001fae:	f000 fa17 	bl	80023e0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f000 f84c 	bl	8002050 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001fb8:	f000 f816 	bl	8001fe8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001fbc:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <SSD1306_Init+0x184>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001fc2:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <SSD1306_Init+0x184>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <SSD1306_Init+0x184>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001fce:	2301      	movs	r3, #1
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b002      	add	sp, #8
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	00004e20 	.word	0x00004e20
 8001fdc:	20000278 	.word	0x20000278
 8001fe0:	000009c4 	.word	0x000009c4
 8001fe4:	20001150 	.word	0x20001150

08001fe8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001fee:	1dfb      	adds	r3, r7, #7
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	e021      	b.n	800203a <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001ff6:	1dfb      	adds	r3, r7, #7
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	3b50      	subs	r3, #80	@ 0x50
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	001a      	movs	r2, r3
 8002000:	2100      	movs	r1, #0
 8002002:	2078      	movs	r0, #120	@ 0x78
 8002004:	f000 f9ec 	bl	80023e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002008:	2200      	movs	r2, #0
 800200a:	2100      	movs	r1, #0
 800200c:	2078      	movs	r0, #120	@ 0x78
 800200e:	f000 f9e7 	bl	80023e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002012:	2210      	movs	r2, #16
 8002014:	2100      	movs	r1, #0
 8002016:	2078      	movs	r0, #120	@ 0x78
 8002018:	f000 f9e2 	bl	80023e0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	01da      	lsls	r2, r3, #7
 8002022:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <SSD1306_UpdateScreen+0x64>)
 8002024:	18d2      	adds	r2, r2, r3
 8002026:	2380      	movs	r3, #128	@ 0x80
 8002028:	2140      	movs	r1, #64	@ 0x40
 800202a:	2078      	movs	r0, #120	@ 0x78
 800202c:	f000 f96c 	bl	8002308 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002030:	1dfb      	adds	r3, r7, #7
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	1dfb      	adds	r3, r7, #7
 8002036:	3201      	adds	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b07      	cmp	r3, #7
 8002040:	d9d9      	bls.n	8001ff6 <SSD1306_UpdateScreen+0xe>
	}
}
 8002042:	46c0      	nop			@ (mov r8, r8)
 8002044:	46c0      	nop			@ (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	b002      	add	sp, #8
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000d50 	.word	0x20000d50

08002050 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	0002      	movs	r2, r0
 8002058:	1dfb      	adds	r3, r7, #7
 800205a:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800205c:	1dfb      	adds	r3, r7, #7
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <SSD1306_Fill+0x18>
 8002064:	2300      	movs	r3, #0
 8002066:	e000      	b.n	800206a <SSD1306_Fill+0x1a>
 8002068:	23ff      	movs	r3, #255	@ 0xff
 800206a:	2280      	movs	r2, #128	@ 0x80
 800206c:	00d2      	lsls	r2, r2, #3
 800206e:	4804      	ldr	r0, [pc, #16]	@ (8002080 <SSD1306_Fill+0x30>)
 8002070:	0019      	movs	r1, r3
 8002072:	f006 f8ed 	bl	8008250 <memset>
}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b002      	add	sp, #8
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	20000d50 	.word	0x20000d50

08002084 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	0004      	movs	r4, r0
 800208c:	0008      	movs	r0, r1
 800208e:	0011      	movs	r1, r2
 8002090:	1dbb      	adds	r3, r7, #6
 8002092:	1c22      	adds	r2, r4, #0
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	1c02      	adds	r2, r0, #0
 800209a:	801a      	strh	r2, [r3, #0]
 800209c:	1cfb      	adds	r3, r7, #3
 800209e:	1c0a      	adds	r2, r1, #0
 80020a0:	701a      	strb	r2, [r3, #0]
	if (
 80020a2:	1dbb      	adds	r3, r7, #6
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80020a8:	d852      	bhi.n	8002150 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80020b0:	d84e      	bhi.n	8002150 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80020b2:	4b29      	ldr	r3, [pc, #164]	@ (8002158 <SSD1306_DrawPixel+0xd4>)
 80020b4:	791b      	ldrb	r3, [r3, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 80020ba:	1cfb      	adds	r3, r7, #3
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	425a      	negs	r2, r3
 80020c0:	4153      	adcs	r3, r2
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	1cfb      	adds	r3, r7, #3
 80020c6:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80020c8:	1cfb      	adds	r3, r7, #3
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d11e      	bne.n	800210e <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80020d0:	1dbb      	adds	r3, r7, #6
 80020d2:	881a      	ldrh	r2, [r3, #0]
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	08db      	lsrs	r3, r3, #3
 80020da:	b298      	uxth	r0, r3
 80020dc:	0003      	movs	r3, r0
 80020de:	01db      	lsls	r3, r3, #7
 80020e0:	18d3      	adds	r3, r2, r3
 80020e2:	4a1e      	ldr	r2, [pc, #120]	@ (800215c <SSD1306_DrawPixel+0xd8>)
 80020e4:	5cd3      	ldrb	r3, [r2, r3]
 80020e6:	b25a      	sxtb	r2, r3
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	2107      	movs	r1, #7
 80020ee:	400b      	ands	r3, r1
 80020f0:	2101      	movs	r1, #1
 80020f2:	4099      	lsls	r1, r3
 80020f4:	000b      	movs	r3, r1
 80020f6:	b25b      	sxtb	r3, r3
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b259      	sxtb	r1, r3
 80020fc:	1dbb      	adds	r3, r7, #6
 80020fe:	881a      	ldrh	r2, [r3, #0]
 8002100:	0003      	movs	r3, r0
 8002102:	01db      	lsls	r3, r3, #7
 8002104:	18d3      	adds	r3, r2, r3
 8002106:	b2c9      	uxtb	r1, r1
 8002108:	4a14      	ldr	r2, [pc, #80]	@ (800215c <SSD1306_DrawPixel+0xd8>)
 800210a:	54d1      	strb	r1, [r2, r3]
 800210c:	e021      	b.n	8002152 <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800210e:	1dbb      	adds	r3, r7, #6
 8002110:	881a      	ldrh	r2, [r3, #0]
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	08db      	lsrs	r3, r3, #3
 8002118:	b298      	uxth	r0, r3
 800211a:	0003      	movs	r3, r0
 800211c:	01db      	lsls	r3, r3, #7
 800211e:	18d3      	adds	r3, r2, r3
 8002120:	4a0e      	ldr	r2, [pc, #56]	@ (800215c <SSD1306_DrawPixel+0xd8>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	b25b      	sxtb	r3, r3
 8002126:	1d3a      	adds	r2, r7, #4
 8002128:	8812      	ldrh	r2, [r2, #0]
 800212a:	2107      	movs	r1, #7
 800212c:	400a      	ands	r2, r1
 800212e:	2101      	movs	r1, #1
 8002130:	4091      	lsls	r1, r2
 8002132:	000a      	movs	r2, r1
 8002134:	b252      	sxtb	r2, r2
 8002136:	43d2      	mvns	r2, r2
 8002138:	b252      	sxtb	r2, r2
 800213a:	4013      	ands	r3, r2
 800213c:	b259      	sxtb	r1, r3
 800213e:	1dbb      	adds	r3, r7, #6
 8002140:	881a      	ldrh	r2, [r3, #0]
 8002142:	0003      	movs	r3, r0
 8002144:	01db      	lsls	r3, r3, #7
 8002146:	18d3      	adds	r3, r2, r3
 8002148:	b2c9      	uxtb	r1, r1
 800214a:	4a04      	ldr	r2, [pc, #16]	@ (800215c <SSD1306_DrawPixel+0xd8>)
 800214c:	54d1      	strb	r1, [r2, r3]
 800214e:	e000      	b.n	8002152 <SSD1306_DrawPixel+0xce>
		return;
 8002150:	46c0      	nop			@ (mov r8, r8)
	}
}
 8002152:	46bd      	mov	sp, r7
 8002154:	b003      	add	sp, #12
 8002156:	bd90      	pop	{r4, r7, pc}
 8002158:	20001150 	.word	0x20001150
 800215c:	20000d50 	.word	0x20000d50

08002160 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	0002      	movs	r2, r0
 8002168:	1dbb      	adds	r3, r7, #6
 800216a:	801a      	strh	r2, [r3, #0]
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	1c0a      	adds	r2, r1, #0
 8002170:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <SSD1306_GotoXY+0x2c>)
 8002174:	1dba      	adds	r2, r7, #6
 8002176:	8812      	ldrh	r2, [r2, #0]
 8002178:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800217a:	4b04      	ldr	r3, [pc, #16]	@ (800218c <SSD1306_GotoXY+0x2c>)
 800217c:	1d3a      	adds	r2, r7, #4
 800217e:	8812      	ldrh	r2, [r2, #0]
 8002180:	805a      	strh	r2, [r3, #2]
}
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	46bd      	mov	sp, r7
 8002186:	b002      	add	sp, #8
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	20001150 	.word	0x20001150

08002190 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6039      	str	r1, [r7, #0]
 8002198:	0011      	movs	r1, r2
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	1c02      	adds	r2, r0, #0
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	1dbb      	adds	r3, r7, #6
 80021a2:	1c0a      	adds	r2, r1, #0
 80021a4:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80021a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002290 <SSD1306_Putc+0x100>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	001a      	movs	r2, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	18d3      	adds	r3, r2, r3
	if (
 80021b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80021b4:	dc07      	bgt.n	80021c6 <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80021b6:	4b36      	ldr	r3, [pc, #216]	@ (8002290 <SSD1306_Putc+0x100>)
 80021b8:	885b      	ldrh	r3, [r3, #2]
 80021ba:	001a      	movs	r2, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	785b      	ldrb	r3, [r3, #1]
 80021c0:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80021c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80021c4:	dd01      	ble.n	80021ca <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e05d      	b.n	8002286 <SSD1306_Putc+0xf6>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e04a      	b.n	8002266 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	1dfb      	adds	r3, r7, #7
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	3b20      	subs	r3, #32
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	7849      	ldrb	r1, [r1, #1]
 80021de:	434b      	muls	r3, r1
 80021e0:	0019      	movs	r1, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	18cb      	adds	r3, r1, r3
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	18d3      	adds	r3, r2, r3
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	e02f      	b.n	8002254 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	409a      	lsls	r2, r3
 80021fa:	2380      	movs	r3, #128	@ 0x80
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	4013      	ands	r3, r2
 8002200:	d011      	beq.n	8002226 <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002202:	4b23      	ldr	r3, [pc, #140]	@ (8002290 <SSD1306_Putc+0x100>)
 8002204:	881a      	ldrh	r2, [r3, #0]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	b29b      	uxth	r3, r3
 800220a:	18d3      	adds	r3, r2, r3
 800220c:	b298      	uxth	r0, r3
 800220e:	4b20      	ldr	r3, [pc, #128]	@ (8002290 <SSD1306_Putc+0x100>)
 8002210:	885a      	ldrh	r2, [r3, #2]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	b29b      	uxth	r3, r3
 8002216:	18d3      	adds	r3, r2, r3
 8002218:	b299      	uxth	r1, r3
 800221a:	1dbb      	adds	r3, r7, #6
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	001a      	movs	r2, r3
 8002220:	f7ff ff30 	bl	8002084 <SSD1306_DrawPixel>
 8002224:	e013      	b.n	800224e <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002226:	4b1a      	ldr	r3, [pc, #104]	@ (8002290 <SSD1306_Putc+0x100>)
 8002228:	881a      	ldrh	r2, [r3, #0]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	b29b      	uxth	r3, r3
 800222e:	18d3      	adds	r3, r2, r3
 8002230:	b298      	uxth	r0, r3
 8002232:	4b17      	ldr	r3, [pc, #92]	@ (8002290 <SSD1306_Putc+0x100>)
 8002234:	885a      	ldrh	r2, [r3, #2]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	b29b      	uxth	r3, r3
 800223a:	18d3      	adds	r3, r2, r3
 800223c:	b299      	uxth	r1, r3
 800223e:	1dbb      	adds	r3, r7, #6
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	425a      	negs	r2, r3
 8002244:	4153      	adcs	r3, r2
 8002246:	b2db      	uxtb	r3, r3
 8002248:	001a      	movs	r2, r3
 800224a:	f7ff ff1b 	bl	8002084 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	3301      	adds	r3, #1
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	001a      	movs	r2, r3
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4293      	cmp	r3, r2
 800225e:	d3c9      	bcc.n	80021f4 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	3301      	adds	r3, #1
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	785b      	ldrb	r3, [r3, #1]
 800226a:	001a      	movs	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	4293      	cmp	r3, r2
 8002270:	d3ae      	bcc.n	80021d0 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002272:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <SSD1306_Putc+0x100>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	189b      	adds	r3, r3, r2
 800227c:	b29a      	uxth	r2, r3
 800227e:	4b04      	ldr	r3, [pc, #16]	@ (8002290 <SSD1306_Putc+0x100>)
 8002280:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002282:	1dfb      	adds	r3, r7, #7
 8002284:	781b      	ldrb	r3, [r3, #0]
}
 8002286:	0018      	movs	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	b006      	add	sp, #24
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			@ (mov r8, r8)
 8002290:	20001150 	.word	0x20001150

08002294 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	1dfb      	adds	r3, r7, #7
 80022a0:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 80022a2:	e013      	b.n	80022cc <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	7818      	ldrb	r0, [r3, #0]
 80022a8:	1dfb      	adds	r3, r7, #7
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	0019      	movs	r1, r3
 80022b0:	f7ff ff6e 	bl	8002190 <SSD1306_Putc>
 80022b4:	0003      	movs	r3, r0
 80022b6:	001a      	movs	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d002      	beq.n	80022c6 <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	e008      	b.n	80022d8 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3301      	adds	r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1e7      	bne.n	80022a4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	781b      	ldrb	r3, [r3, #0]
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b004      	add	sp, #16
 80022de:	bd80      	pop	{r7, pc}

080022e0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80022e6:	4b07      	ldr	r3, [pc, #28]	@ (8002304 <ssd1306_I2C_Init+0x24>)
 80022e8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80022ea:	e002      	b.n	80022f2 <ssd1306_I2C_Init+0x12>
		p--;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f9      	bne.n	80022ec <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80022f8:	46c0      	nop			@ (mov r8, r8)
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b002      	add	sp, #8
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	0003d090 	.word	0x0003d090

08002308 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002308:	b5b0      	push	{r4, r5, r7, lr}
 800230a:	b0c6      	sub	sp, #280	@ 0x118
 800230c:	af02      	add	r7, sp, #8
 800230e:	0004      	movs	r4, r0
 8002310:	0008      	movs	r0, r1
 8002312:	603a      	str	r2, [r7, #0]
 8002314:	0019      	movs	r1, r3
 8002316:	4b2d      	ldr	r3, [pc, #180]	@ (80023cc <ssd1306_I2C_WriteMulti+0xc4>)
 8002318:	2588      	movs	r5, #136	@ 0x88
 800231a:	006d      	lsls	r5, r5, #1
 800231c:	195b      	adds	r3, r3, r5
 800231e:	19db      	adds	r3, r3, r7
 8002320:	1c22      	adds	r2, r4, #0
 8002322:	701a      	strb	r2, [r3, #0]
 8002324:	4b2a      	ldr	r3, [pc, #168]	@ (80023d0 <ssd1306_I2C_WriteMulti+0xc8>)
 8002326:	002c      	movs	r4, r5
 8002328:	191b      	adds	r3, r3, r4
 800232a:	19db      	adds	r3, r3, r7
 800232c:	1c02      	adds	r2, r0, #0
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	4b28      	ldr	r3, [pc, #160]	@ (80023d4 <ssd1306_I2C_WriteMulti+0xcc>)
 8002332:	0020      	movs	r0, r4
 8002334:	181b      	adds	r3, r3, r0
 8002336:	19db      	adds	r3, r3, r7
 8002338:	1c0a      	adds	r2, r1, #0
 800233a:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800233c:	4b26      	ldr	r3, [pc, #152]	@ (80023d8 <ssd1306_I2C_WriteMulti+0xd0>)
 800233e:	181b      	adds	r3, r3, r0
 8002340:	19db      	adds	r3, r3, r7
 8002342:	4a23      	ldr	r2, [pc, #140]	@ (80023d0 <ssd1306_I2C_WriteMulti+0xc8>)
 8002344:	1812      	adds	r2, r2, r0
 8002346:	19d2      	adds	r2, r2, r7
 8002348:	7812      	ldrb	r2, [r2, #0]
 800234a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800234c:	2310      	movs	r3, #16
 800234e:	33ff      	adds	r3, #255	@ 0xff
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	e014      	b.n	8002382 <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8002358:	2010      	movs	r0, #16
 800235a:	30ff      	adds	r0, #255	@ 0xff
 800235c:	183b      	adds	r3, r7, r0
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	18d2      	adds	r2, r2, r3
 8002364:	183b      	adds	r3, r7, r0
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	7811      	ldrb	r1, [r2, #0]
 800236c:	4a1a      	ldr	r2, [pc, #104]	@ (80023d8 <ssd1306_I2C_WriteMulti+0xd0>)
 800236e:	2488      	movs	r4, #136	@ 0x88
 8002370:	0064      	lsls	r4, r4, #1
 8002372:	1912      	adds	r2, r2, r4
 8002374:	19d2      	adds	r2, r2, r7
 8002376:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002378:	183b      	adds	r3, r7, r0
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	183b      	adds	r3, r7, r0
 800237e:	3201      	adds	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	2310      	movs	r3, #16
 8002384:	33ff      	adds	r3, #255	@ 0xff
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b29b      	uxth	r3, r3
 800238c:	4a11      	ldr	r2, [pc, #68]	@ (80023d4 <ssd1306_I2C_WriteMulti+0xcc>)
 800238e:	2188      	movs	r1, #136	@ 0x88
 8002390:	0049      	lsls	r1, r1, #1
 8002392:	1852      	adds	r2, r2, r1
 8002394:	19d2      	adds	r2, r2, r7
 8002396:	8812      	ldrh	r2, [r2, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d8dd      	bhi.n	8002358 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800239c:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <ssd1306_I2C_WriteMulti+0xc4>)
 800239e:	000a      	movs	r2, r1
 80023a0:	189b      	adds	r3, r3, r2
 80023a2:	19db      	adds	r3, r3, r7
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b299      	uxth	r1, r3
 80023a8:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <ssd1306_I2C_WriteMulti+0xcc>)
 80023aa:	189b      	adds	r3, r3, r2
 80023ac:	19db      	adds	r3, r3, r7
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	220c      	movs	r2, #12
 80023b6:	18ba      	adds	r2, r7, r2
 80023b8:	4808      	ldr	r0, [pc, #32]	@ (80023dc <ssd1306_I2C_WriteMulti+0xd4>)
 80023ba:	240a      	movs	r4, #10
 80023bc:	9400      	str	r4, [sp, #0]
 80023be:	f002 f883 	bl	80044c8 <HAL_I2C_Master_Transmit>
}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b044      	add	sp, #272	@ 0x110
 80023c8:	bdb0      	pop	{r4, r5, r7, pc}
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	fffffef7 	.word	0xfffffef7
 80023d0:	fffffef6 	.word	0xfffffef6
 80023d4:	fffffef4 	.word	0xfffffef4
 80023d8:	fffffefc 	.word	0xfffffefc
 80023dc:	20000278 	.word	0x20000278

080023e0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	0004      	movs	r4, r0
 80023e8:	0008      	movs	r0, r1
 80023ea:	0011      	movs	r1, r2
 80023ec:	1dfb      	adds	r3, r7, #7
 80023ee:	1c22      	adds	r2, r4, #0
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	1dbb      	adds	r3, r7, #6
 80023f4:	1c02      	adds	r2, r0, #0
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	1d7b      	adds	r3, r7, #5
 80023fa:	1c0a      	adds	r2, r1, #0
 80023fc:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 80023fe:	200c      	movs	r0, #12
 8002400:	183b      	adds	r3, r7, r0
 8002402:	1dba      	adds	r2, r7, #6
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8002408:	183b      	adds	r3, r7, r0
 800240a:	1d7a      	adds	r2, r7, #5
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002410:	1dfb      	adds	r3, r7, #7
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b299      	uxth	r1, r3
 8002416:	183a      	adds	r2, r7, r0
 8002418:	4804      	ldr	r0, [pc, #16]	@ (800242c <ssd1306_I2C_Write+0x4c>)
 800241a:	230a      	movs	r3, #10
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	2302      	movs	r3, #2
 8002420:	f002 f852 	bl	80044c8 <HAL_I2C_Master_Transmit>
}
 8002424:	46c0      	nop			@ (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b005      	add	sp, #20
 800242a:	bd90      	pop	{r4, r7, pc}
 800242c:	20000278 	.word	0x20000278

08002430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	4b13      	ldr	r3, [pc, #76]	@ (8002484 <HAL_MspInit+0x54>)
 8002438:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800243a:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <HAL_MspInit+0x54>)
 800243c:	2101      	movs	r1, #1
 800243e:	430a      	orrs	r2, r1
 8002440:	641a      	str	r2, [r3, #64]	@ 0x40
 8002442:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <HAL_MspInit+0x54>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	2201      	movs	r2, #1
 8002448:	4013      	ands	r3, r2
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	4b0d      	ldr	r3, [pc, #52]	@ (8002484 <HAL_MspInit+0x54>)
 8002450:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002452:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <HAL_MspInit+0x54>)
 8002454:	2180      	movs	r1, #128	@ 0x80
 8002456:	0549      	lsls	r1, r1, #21
 8002458:	430a      	orrs	r2, r1
 800245a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <HAL_MspInit+0x54>)
 800245e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002460:	2380      	movs	r3, #128	@ 0x80
 8002462:	055b      	lsls	r3, r3, #21
 8002464:	4013      	ands	r3, r2
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 1, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2101      	movs	r1, #1
 800246e:	2003      	movs	r0, #3
 8002470:	f000 fc70 	bl	8002d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002474:	2003      	movs	r0, #3
 8002476:	f000 fc82 	bl	8002d7e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	b002      	add	sp, #8
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	40021000 	.word	0x40021000

08002488 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0a      	ldr	r2, [pc, #40]	@ (80024c0 <HAL_CRC_MspInit+0x38>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d10d      	bne.n	80024b6 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800249a:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <HAL_CRC_MspInit+0x3c>)
 800249c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800249e:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <HAL_CRC_MspInit+0x3c>)
 80024a0:	2180      	movs	r1, #128	@ 0x80
 80024a2:	0149      	lsls	r1, r1, #5
 80024a4:	430a      	orrs	r2, r1
 80024a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80024a8:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_CRC_MspInit+0x3c>)
 80024aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024ac:	2380      	movs	r3, #128	@ 0x80
 80024ae:	015b      	lsls	r3, r3, #5
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80024b6:	46c0      	nop			@ (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b004      	add	sp, #16
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	40023000 	.word	0x40023000
 80024c4:	40021000 	.word	0x40021000

080024c8 <HAL_CRC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a06      	ldr	r2, [pc, #24]	@ (80024f0 <HAL_CRC_MspDeInit+0x28>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d105      	bne.n	80024e6 <HAL_CRC_MspDeInit+0x1e>
  {
    /* USER CODE BEGIN CRC_MspDeInit 0 */

    /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_CRC_MspDeInit+0x2c>)
 80024dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024de:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <HAL_CRC_MspDeInit+0x2c>)
 80024e0:	4905      	ldr	r1, [pc, #20]	@ (80024f8 <HAL_CRC_MspDeInit+0x30>)
 80024e2:	400a      	ands	r2, r1
 80024e4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* USER CODE BEGIN CRC_MspDeInit 1 */

    /* USER CODE END CRC_MspDeInit 1 */
  }

}
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b002      	add	sp, #8
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	40023000 	.word	0x40023000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	ffffefff 	.word	0xffffefff

080024fc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b091      	sub	sp, #68	@ 0x44
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	232c      	movs	r3, #44	@ 0x2c
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	0018      	movs	r0, r3
 800250a:	2314      	movs	r3, #20
 800250c:	001a      	movs	r2, r3
 800250e:	2100      	movs	r1, #0
 8002510:	f005 fe9e 	bl	8008250 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002514:	2410      	movs	r4, #16
 8002516:	193b      	adds	r3, r7, r4
 8002518:	0018      	movs	r0, r3
 800251a:	231c      	movs	r3, #28
 800251c:	001a      	movs	r2, r3
 800251e:	2100      	movs	r1, #0
 8002520:	f005 fe96 	bl	8008250 <memset>
  if(hi2c->Instance==I2C1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a22      	ldr	r2, [pc, #136]	@ (80025b4 <HAL_I2C_MspInit+0xb8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d13e      	bne.n	80025ac <HAL_I2C_MspInit+0xb0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800252e:	193b      	adds	r3, r7, r4
 8002530:	2220      	movs	r2, #32
 8002532:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002534:	193b      	adds	r3, r7, r4
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800253a:	193b      	adds	r3, r7, r4
 800253c:	0018      	movs	r0, r3
 800253e:	f003 fa39 	bl	80059b4 <HAL_RCCEx_PeriphCLKConfig>
 8002542:	1e03      	subs	r3, r0, #0
 8002544:	d001      	beq.n	800254a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002546:	f7ff fc85 	bl	8001e54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254a:	4b1b      	ldr	r3, [pc, #108]	@ (80025b8 <HAL_I2C_MspInit+0xbc>)
 800254c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800254e:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <HAL_I2C_MspInit+0xbc>)
 8002550:	2102      	movs	r1, #2
 8002552:	430a      	orrs	r2, r1
 8002554:	635a      	str	r2, [r3, #52]	@ 0x34
 8002556:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <HAL_I2C_MspInit+0xbc>)
 8002558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800255a:	2202      	movs	r2, #2
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002562:	212c      	movs	r1, #44	@ 0x2c
 8002564:	187b      	adds	r3, r7, r1
 8002566:	22c0      	movs	r2, #192	@ 0xc0
 8002568:	0092      	lsls	r2, r2, #2
 800256a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800256c:	187b      	adds	r3, r7, r1
 800256e:	2212      	movs	r2, #18
 8002570:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	187b      	adds	r3, r7, r1
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800257e:	187b      	adds	r3, r7, r1
 8002580:	2206      	movs	r2, #6
 8002582:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002584:	187b      	adds	r3, r7, r1
 8002586:	4a0d      	ldr	r2, [pc, #52]	@ (80025bc <HAL_I2C_MspInit+0xc0>)
 8002588:	0019      	movs	r1, r3
 800258a:	0010      	movs	r0, r2
 800258c:	f001 fc58 	bl	8003e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002590:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <HAL_I2C_MspInit+0xbc>)
 8002592:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002594:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <HAL_I2C_MspInit+0xbc>)
 8002596:	2180      	movs	r1, #128	@ 0x80
 8002598:	0389      	lsls	r1, r1, #14
 800259a:	430a      	orrs	r2, r1
 800259c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_I2C_MspInit+0xbc>)
 80025a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	039b      	lsls	r3, r3, #14
 80025a6:	4013      	ands	r3, r2
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80025ac:	46c0      	nop			@ (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b011      	add	sp, #68	@ 0x44
 80025b2:	bd90      	pop	{r4, r7, pc}
 80025b4:	40005400 	.word	0x40005400
 80025b8:	40021000 	.word	0x40021000
 80025bc:	50000400 	.word	0x50000400

080025c0 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002604 <HAL_I2C_MspDeInit+0x44>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d113      	bne.n	80025fa <HAL_I2C_MspDeInit+0x3a>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80025d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_I2C_MspDeInit+0x48>)
 80025d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <HAL_I2C_MspDeInit+0x48>)
 80025d8:	490c      	ldr	r1, [pc, #48]	@ (800260c <HAL_I2C_MspDeInit+0x4c>)
 80025da:	400a      	ands	r2, r1
 80025dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80025de:	2380      	movs	r3, #128	@ 0x80
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002610 <HAL_I2C_MspDeInit+0x50>)
 80025e4:	0019      	movs	r1, r3
 80025e6:	0010      	movs	r0, r2
 80025e8:	f001 fd8e 	bl	8004108 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80025ec:	2380      	movs	r3, #128	@ 0x80
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4a07      	ldr	r2, [pc, #28]	@ (8002610 <HAL_I2C_MspDeInit+0x50>)
 80025f2:	0019      	movs	r1, r3
 80025f4:	0010      	movs	r0, r2
 80025f6:	f001 fd87 	bl	8004108 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b002      	add	sp, #8
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	40005400 	.word	0x40005400
 8002608:	40021000 	.word	0x40021000
 800260c:	ffdfffff 	.word	0xffdfffff
 8002610:	50000400 	.word	0x50000400

08002614 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b08b      	sub	sp, #44	@ 0x2c
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	2414      	movs	r4, #20
 800261e:	193b      	adds	r3, r7, r4
 8002620:	0018      	movs	r0, r3
 8002622:	2314      	movs	r3, #20
 8002624:	001a      	movs	r2, r3
 8002626:	2100      	movs	r1, #0
 8002628:	f005 fe12 	bl	8008250 <memset>
  if(hspi->Instance==SPI1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1b      	ldr	r2, [pc, #108]	@ (80026a0 <HAL_SPI_MspInit+0x8c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d130      	bne.n	8002698 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002636:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <HAL_SPI_MspInit+0x90>)
 8002638:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800263a:	4b1a      	ldr	r3, [pc, #104]	@ (80026a4 <HAL_SPI_MspInit+0x90>)
 800263c:	2180      	movs	r1, #128	@ 0x80
 800263e:	0149      	lsls	r1, r1, #5
 8002640:	430a      	orrs	r2, r1
 8002642:	641a      	str	r2, [r3, #64]	@ 0x40
 8002644:	4b17      	ldr	r3, [pc, #92]	@ (80026a4 <HAL_SPI_MspInit+0x90>)
 8002646:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	015b      	lsls	r3, r3, #5
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <HAL_SPI_MspInit+0x90>)
 8002654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002656:	4b13      	ldr	r3, [pc, #76]	@ (80026a4 <HAL_SPI_MspInit+0x90>)
 8002658:	2101      	movs	r1, #1
 800265a:	430a      	orrs	r2, r1
 800265c:	635a      	str	r2, [r3, #52]	@ 0x34
 800265e:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <HAL_SPI_MspInit+0x90>)
 8002660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002662:	2201      	movs	r2, #1
 8002664:	4013      	ands	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800266a:	0021      	movs	r1, r4
 800266c:	187b      	adds	r3, r7, r1
 800266e:	22e0      	movs	r2, #224	@ 0xe0
 8002670:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	187b      	adds	r3, r7, r1
 8002674:	2202      	movs	r2, #2
 8002676:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	187b      	adds	r3, r7, r1
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267e:	187b      	adds	r3, r7, r1
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002684:	187b      	adds	r3, r7, r1
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268a:	187a      	adds	r2, r7, r1
 800268c:	23a0      	movs	r3, #160	@ 0xa0
 800268e:	05db      	lsls	r3, r3, #23
 8002690:	0011      	movs	r1, r2
 8002692:	0018      	movs	r0, r3
 8002694:	f001 fbd4 	bl	8003e40 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002698:	46c0      	nop			@ (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b00b      	add	sp, #44	@ 0x2c
 800269e:	bd90      	pop	{r4, r7, pc}
 80026a0:	40013000 	.word	0x40013000
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b093      	sub	sp, #76	@ 0x4c
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	2334      	movs	r3, #52	@ 0x34
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	0018      	movs	r0, r3
 80026b6:	2314      	movs	r3, #20
 80026b8:	001a      	movs	r2, r3
 80026ba:	2100      	movs	r1, #0
 80026bc:	f005 fdc8 	bl	8008250 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026c0:	2418      	movs	r4, #24
 80026c2:	193b      	adds	r3, r7, r4
 80026c4:	0018      	movs	r0, r3
 80026c6:	231c      	movs	r3, #28
 80026c8:	001a      	movs	r2, r3
 80026ca:	2100      	movs	r1, #0
 80026cc:	f005 fdc0 	bl	8008250 <memset>
  if(huart->Instance==USART2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a57      	ldr	r2, [pc, #348]	@ (8002834 <HAL_UART_MspInit+0x18c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d13f      	bne.n	800275a <HAL_UART_MspInit+0xb2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026da:	193b      	adds	r3, r7, r4
 80026dc:	2202      	movs	r2, #2
 80026de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80026e0:	193b      	adds	r3, r7, r4
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e6:	193b      	adds	r3, r7, r4
 80026e8:	0018      	movs	r0, r3
 80026ea:	f003 f963 	bl	80059b4 <HAL_RCCEx_PeriphCLKConfig>
 80026ee:	1e03      	subs	r3, r0, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80026f2:	f7ff fbaf 	bl	8001e54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026f6:	4b50      	ldr	r3, [pc, #320]	@ (8002838 <HAL_UART_MspInit+0x190>)
 80026f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002838 <HAL_UART_MspInit+0x190>)
 80026fc:	2180      	movs	r1, #128	@ 0x80
 80026fe:	0289      	lsls	r1, r1, #10
 8002700:	430a      	orrs	r2, r1
 8002702:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002704:	4b4c      	ldr	r3, [pc, #304]	@ (8002838 <HAL_UART_MspInit+0x190>)
 8002706:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002708:	2380      	movs	r3, #128	@ 0x80
 800270a:	029b      	lsls	r3, r3, #10
 800270c:	4013      	ands	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	4b49      	ldr	r3, [pc, #292]	@ (8002838 <HAL_UART_MspInit+0x190>)
 8002714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002716:	4b48      	ldr	r3, [pc, #288]	@ (8002838 <HAL_UART_MspInit+0x190>)
 8002718:	2101      	movs	r1, #1
 800271a:	430a      	orrs	r2, r1
 800271c:	635a      	str	r2, [r3, #52]	@ 0x34
 800271e:	4b46      	ldr	r3, [pc, #280]	@ (8002838 <HAL_UART_MspInit+0x190>)
 8002720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002722:	2201      	movs	r2, #1
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800272a:	2134      	movs	r1, #52	@ 0x34
 800272c:	187b      	adds	r3, r7, r1
 800272e:	220c      	movs	r2, #12
 8002730:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	187b      	adds	r3, r7, r1
 8002734:	2202      	movs	r2, #2
 8002736:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002738:	187b      	adds	r3, r7, r1
 800273a:	2201      	movs	r2, #1
 800273c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	187b      	adds	r3, r7, r1
 8002740:	2200      	movs	r2, #0
 8002742:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002744:	187b      	adds	r3, r7, r1
 8002746:	2201      	movs	r2, #1
 8002748:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	187a      	adds	r2, r7, r1
 800274c:	23a0      	movs	r3, #160	@ 0xa0
 800274e:	05db      	lsls	r3, r3, #23
 8002750:	0011      	movs	r1, r2
 8002752:	0018      	movs	r0, r3
 8002754:	f001 fb74 	bl	8003e40 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002758:	e067      	b.n	800282a <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a37      	ldr	r2, [pc, #220]	@ (800283c <HAL_UART_MspInit+0x194>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d162      	bne.n	800282a <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002764:	4b34      	ldr	r3, [pc, #208]	@ (8002838 <HAL_UART_MspInit+0x190>)
 8002766:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002768:	4b33      	ldr	r3, [pc, #204]	@ (8002838 <HAL_UART_MspInit+0x190>)
 800276a:	2180      	movs	r1, #128	@ 0x80
 800276c:	02c9      	lsls	r1, r1, #11
 800276e:	430a      	orrs	r2, r1
 8002770:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002772:	4b31      	ldr	r3, [pc, #196]	@ (8002838 <HAL_UART_MspInit+0x190>)
 8002774:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002776:	2380      	movs	r3, #128	@ 0x80
 8002778:	02db      	lsls	r3, r3, #11
 800277a:	4013      	ands	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002780:	4b2d      	ldr	r3, [pc, #180]	@ (8002838 <HAL_UART_MspInit+0x190>)
 8002782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002784:	4b2c      	ldr	r3, [pc, #176]	@ (8002838 <HAL_UART_MspInit+0x190>)
 8002786:	2108      	movs	r1, #8
 8002788:	430a      	orrs	r2, r1
 800278a:	635a      	str	r2, [r3, #52]	@ 0x34
 800278c:	4b2a      	ldr	r3, [pc, #168]	@ (8002838 <HAL_UART_MspInit+0x190>)
 800278e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002790:	2208      	movs	r2, #8
 8002792:	4013      	ands	r3, r2
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002798:	2134      	movs	r1, #52	@ 0x34
 800279a:	187b      	adds	r3, r7, r1
 800279c:	22c0      	movs	r2, #192	@ 0xc0
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	2202      	movs	r2, #2
 80027a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	2200      	movs	r2, #0
 80027b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80027b4:	187b      	adds	r3, r7, r1
 80027b6:	2200      	movs	r2, #0
 80027b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	4a20      	ldr	r2, [pc, #128]	@ (8002840 <HAL_UART_MspInit+0x198>)
 80027be:	0019      	movs	r1, r3
 80027c0:	0010      	movs	r0, r2
 80027c2:	f001 fb3d 	bl	8003e40 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 80027c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002844 <HAL_UART_MspInit+0x19c>)
 80027c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002848 <HAL_UART_MspInit+0x1a0>)
 80027ca:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80027cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002844 <HAL_UART_MspInit+0x19c>)
 80027ce:	2236      	movs	r2, #54	@ 0x36
 80027d0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002844 <HAL_UART_MspInit+0x19c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <HAL_UART_MspInit+0x19c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027de:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <HAL_UART_MspInit+0x19c>)
 80027e0:	2280      	movs	r2, #128	@ 0x80
 80027e2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027e4:	4b17      	ldr	r3, [pc, #92]	@ (8002844 <HAL_UART_MspInit+0x19c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ea:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <HAL_UART_MspInit+0x19c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80027f0:	4b14      	ldr	r3, [pc, #80]	@ (8002844 <HAL_UART_MspInit+0x19c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027f6:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <HAL_UART_MspInit+0x19c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80027fc:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <HAL_UART_MspInit+0x19c>)
 80027fe:	0018      	movs	r0, r3
 8002800:	f000 fd04 	bl	800320c <HAL_DMA_Init>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d001      	beq.n	800280c <HAL_UART_MspInit+0x164>
      Error_Handler();
 8002808:	f7ff fb24 	bl	8001e54 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2180      	movs	r1, #128	@ 0x80
 8002810:	4a0c      	ldr	r2, [pc, #48]	@ (8002844 <HAL_UART_MspInit+0x19c>)
 8002812:	505a      	str	r2, [r3, r1]
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <HAL_UART_MspInit+0x19c>)
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2100      	movs	r1, #0
 800281e:	201d      	movs	r0, #29
 8002820:	f000 fa98 	bl	8002d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002824:	201d      	movs	r0, #29
 8002826:	f000 faaa 	bl	8002d7e <HAL_NVIC_EnableIRQ>
}
 800282a:	46c0      	nop			@ (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	b013      	add	sp, #76	@ 0x4c
 8002830:	bd90      	pop	{r4, r7, pc}
 8002832:	46c0      	nop			@ (mov r8, r8)
 8002834:	40004400 	.word	0x40004400
 8002838:	40021000 	.word	0x40021000
 800283c:	40004800 	.word	0x40004800
 8002840:	50000c00 	.word	0x50000c00
 8002844:	20000458 	.word	0x20000458
 8002848:	40020008 	.word	0x40020008

0800284c <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a17      	ldr	r2, [pc, #92]	@ (80028b8 <HAL_UART_MspDeInit+0x6c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10c      	bne.n	8002878 <HAL_UART_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800285e:	4b17      	ldr	r3, [pc, #92]	@ (80028bc <HAL_UART_MspDeInit+0x70>)
 8002860:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002862:	4b16      	ldr	r3, [pc, #88]	@ (80028bc <HAL_UART_MspDeInit+0x70>)
 8002864:	4916      	ldr	r1, [pc, #88]	@ (80028c0 <HAL_UART_MspDeInit+0x74>)
 8002866:	400a      	ands	r2, r1
 8002868:	63da      	str	r2, [r3, #60]	@ 0x3c

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800286a:	23a0      	movs	r3, #160	@ 0xa0
 800286c:	05db      	lsls	r3, r3, #23
 800286e:	210c      	movs	r1, #12
 8002870:	0018      	movs	r0, r3
 8002872:	f001 fc49 	bl	8004108 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART3_MspDeInit 1 */

    /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8002876:	e01a      	b.n	80028ae <HAL_UART_MspDeInit+0x62>
  else if(huart->Instance==USART3)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a11      	ldr	r2, [pc, #68]	@ (80028c4 <HAL_UART_MspDeInit+0x78>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d115      	bne.n	80028ae <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART3_CLK_DISABLE();
 8002882:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <HAL_UART_MspDeInit+0x70>)
 8002884:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002886:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <HAL_UART_MspDeInit+0x70>)
 8002888:	490f      	ldr	r1, [pc, #60]	@ (80028c8 <HAL_UART_MspDeInit+0x7c>)
 800288a:	400a      	ands	r2, r1
 800288c:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9);
 800288e:	23c0      	movs	r3, #192	@ 0xc0
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4a0e      	ldr	r2, [pc, #56]	@ (80028cc <HAL_UART_MspDeInit+0x80>)
 8002894:	0019      	movs	r1, r3
 8002896:	0010      	movs	r0, r2
 8002898:	f001 fc36 	bl	8004108 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2280      	movs	r2, #128	@ 0x80
 80028a0:	589b      	ldr	r3, [r3, r2]
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 fd3c 	bl	8003320 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_4_IRQn);
 80028a8:	201d      	movs	r0, #29
 80028aa:	f000 fa78 	bl	8002d9e <HAL_NVIC_DisableIRQ>
}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b002      	add	sp, #8
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			@ (mov r8, r8)
 80028b8:	40004400 	.word	0x40004400
 80028bc:	40021000 	.word	0x40021000
 80028c0:	fffdffff 	.word	0xfffdffff
 80028c4:	40004800 	.word	0x40004800
 80028c8:	fffbffff 	.word	0xfffbffff
 80028cc:	50000c00 	.word	0x50000c00

080028d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d4:	46c0      	nop			@ (mov r8, r8)
 80028d6:	e7fd      	b.n	80028d4 <NMI_Handler+0x4>

080028d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028dc:	46c0      	nop			@ (mov r8, r8)
 80028de:	e7fd      	b.n	80028dc <HardFault_Handler+0x4>

080028e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80028e4:	46c0      	nop			@ (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028f8:	f000 f91e 	bl	8002b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028fc:	46c0      	nop			@ (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002906:	f001 f865 	bl	80039d4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002914:	4b03      	ldr	r3, [pc, #12]	@ (8002924 <DMA1_Channel1_IRQHandler+0x14>)
 8002916:	0018      	movs	r0, r3
 8002918:	f000 fecc 	bl	80036b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800291c:	46c0      	nop			@ (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	20000458 	.word	0x20000458

08002928 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800292c:	4b03      	ldr	r3, [pc, #12]	@ (800293c <USART3_4_IRQHandler+0x14>)
 800292e:	0018      	movs	r0, r3
 8002930:	f004 f98e 	bl	8006c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002934:	46c0      	nop			@ (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	200003c4 	.word	0x200003c4

08002940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002948:	4a14      	ldr	r2, [pc, #80]	@ (800299c <_sbrk+0x5c>)
 800294a:	4b15      	ldr	r3, [pc, #84]	@ (80029a0 <_sbrk+0x60>)
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002954:	4b13      	ldr	r3, [pc, #76]	@ (80029a4 <_sbrk+0x64>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d102      	bne.n	8002962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800295c:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <_sbrk+0x64>)
 800295e:	4a12      	ldr	r2, [pc, #72]	@ (80029a8 <_sbrk+0x68>)
 8002960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002962:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <_sbrk+0x64>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	18d3      	adds	r3, r2, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	429a      	cmp	r2, r3
 800296e:	d207      	bcs.n	8002980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002970:	f005 fc76 	bl	8008260 <__errno>
 8002974:	0003      	movs	r3, r0
 8002976:	220c      	movs	r2, #12
 8002978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800297a:	2301      	movs	r3, #1
 800297c:	425b      	negs	r3, r3
 800297e:	e009      	b.n	8002994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002980:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <_sbrk+0x64>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002986:	4b07      	ldr	r3, [pc, #28]	@ (80029a4 <_sbrk+0x64>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	18d2      	adds	r2, r2, r3
 800298e:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <_sbrk+0x64>)
 8002990:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002992:	68fb      	ldr	r3, [r7, #12]

}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	b006      	add	sp, #24
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20009000 	.word	0x20009000
 80029a0:	00000400 	.word	0x00000400
 80029a4:	20001158 	.word	0x20001158
 80029a8:	200012c8 	.word	0x200012c8

080029ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029b0:	46c0      	nop			@ (mov r8, r8)
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029b8:	480d      	ldr	r0, [pc, #52]	@ (80029f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029bc:	f7ff fff6 	bl	80029ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029c0:	480c      	ldr	r0, [pc, #48]	@ (80029f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80029c2:	490d      	ldr	r1, [pc, #52]	@ (80029f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029c4:	4a0d      	ldr	r2, [pc, #52]	@ (80029fc <LoopForever+0xe>)
  movs r3, #0
 80029c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c8:	e002      	b.n	80029d0 <LoopCopyDataInit>

080029ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ce:	3304      	adds	r3, #4

080029d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d4:	d3f9      	bcc.n	80029ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002a04 <LoopForever+0x16>)
  movs r3, #0
 80029da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029dc:	e001      	b.n	80029e2 <LoopFillZerobss>

080029de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e0:	3204      	adds	r2, #4

080029e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e4:	d3fb      	bcc.n	80029de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029e6:	f005 fc41 	bl	800826c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80029ea:	f7fe fe99 	bl	8001720 <main>

080029ee <LoopForever>:

LoopForever:
  b LoopForever
 80029ee:	e7fe      	b.n	80029ee <LoopForever>
  ldr   r0, =_estack
 80029f0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80029f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80029fc:	08009758 	.word	0x08009758
  ldr r2, =_sbss
 8002a00:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002a04:	200012c4 	.word	0x200012c4

08002a08 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a08:	e7fe      	b.n	8002a08 <ADC1_IRQHandler>
	...

08002a0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a12:	1dfb      	adds	r3, r7, #7
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <HAL_Init+0x3c>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <HAL_Init+0x3c>)
 8002a1e:	2180      	movs	r1, #128	@ 0x80
 8002a20:	0049      	lsls	r1, r1, #1
 8002a22:	430a      	orrs	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a26:	2000      	movs	r0, #0
 8002a28:	f000 f83c 	bl	8002aa4 <HAL_InitTick>
 8002a2c:	1e03      	subs	r3, r0, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002a30:	1dfb      	adds	r3, r7, #7
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e001      	b.n	8002a3c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002a38:	f7ff fcfa 	bl	8002430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a3c:	1dfb      	adds	r3, r7, #7
 8002a3e:	781b      	ldrb	r3, [r3, #0]
}
 8002a40:	0018      	movs	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b002      	add	sp, #8
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40022000 	.word	0x40022000

08002a4c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002a50:	4b10      	ldr	r3, [pc, #64]	@ (8002a94 <HAL_DeInit+0x48>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	4252      	negs	r2, r2
 8002a56:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_APB1_RELEASE_RESET();
 8002a58:	4b0e      	ldr	r3, [pc, #56]	@ (8002a94 <HAL_DeInit+0x48>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  __HAL_RCC_APB2_FORCE_RESET();
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a94 <HAL_DeInit+0x48>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	4252      	negs	r2, r2
 8002a64:	631a      	str	r2, [r3, #48]	@ 0x30
  __HAL_RCC_APB2_RELEASE_RESET();
 8002a66:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_DeInit+0x48>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30

  __HAL_RCC_AHB_FORCE_RESET();
 8002a6c:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <HAL_DeInit+0x48>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4252      	negs	r2, r2
 8002a72:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8002a74:	4b07      	ldr	r3, [pc, #28]	@ (8002a94 <HAL_DeInit+0x48>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	629a      	str	r2, [r3, #40]	@ 0x28

  __HAL_RCC_IOP_FORCE_RESET();
 8002a7a:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <HAL_DeInit+0x48>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4252      	negs	r2, r2
 8002a80:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_IOP_RELEASE_RESET();
 8002a82:	4b04      	ldr	r3, [pc, #16]	@ (8002a94 <HAL_DeInit+0x48>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002a88:	f000 f806 	bl	8002a98 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	0018      	movs	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000

08002a98 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8002a9c:	46c0      	nop			@ (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002aac:	230f      	movs	r3, #15
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b2c <HAL_InitTick+0x88>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d02b      	beq.n	8002b14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002abc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b30 <HAL_InitTick+0x8c>)
 8002abe:	681c      	ldr	r4, [r3, #0]
 8002ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b2c <HAL_InitTick+0x88>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	23fa      	movs	r3, #250	@ 0xfa
 8002ac8:	0098      	lsls	r0, r3, #2
 8002aca:	f7fd fb23 	bl	8000114 <__udivsi3>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	0020      	movs	r0, r4
 8002ad4:	f7fd fb1e 	bl	8000114 <__udivsi3>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	0018      	movs	r0, r3
 8002adc:	f000 f96f 	bl	8002dbe <HAL_SYSTICK_Config>
 8002ae0:	1e03      	subs	r3, r0, #0
 8002ae2:	d112      	bne.n	8002b0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d80a      	bhi.n	8002b00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	2301      	movs	r3, #1
 8002aee:	425b      	negs	r3, r3
 8002af0:	2200      	movs	r2, #0
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 f92e 	bl	8002d54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002af8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b34 <HAL_InitTick+0x90>)
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e00d      	b.n	8002b1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002b00:	230f      	movs	r3, #15
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e008      	b.n	8002b1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b0a:	230f      	movs	r3, #15
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	e003      	b.n	8002b1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b14:	230f      	movs	r3, #15
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002b1c:	230f      	movs	r3, #15
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	781b      	ldrb	r3, [r3, #0]
}
 8002b22:	0018      	movs	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b005      	add	sp, #20
 8002b28:	bd90      	pop	{r4, r7, pc}
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	20000020 	.word	0x20000020
 8002b30:	20000018 	.word	0x20000018
 8002b34:	2000001c 	.word	0x2000001c

08002b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b3c:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <HAL_IncTick+0x1c>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	001a      	movs	r2, r3
 8002b42:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_IncTick+0x20>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	18d2      	adds	r2, r2, r3
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <HAL_IncTick+0x20>)
 8002b4a:	601a      	str	r2, [r3, #0]
}
 8002b4c:	46c0      	nop			@ (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	20000020 	.word	0x20000020
 8002b58:	2000115c 	.word	0x2000115c

08002b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b60:	4b02      	ldr	r3, [pc, #8]	@ (8002b6c <HAL_GetTick+0x10>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	2000115c 	.word	0x2000115c

08002b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff fff0 	bl	8002b5c <HAL_GetTick>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3301      	adds	r3, #1
 8002b88:	d005      	beq.n	8002b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <HAL_Delay+0x44>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	001a      	movs	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	f7ff ffe0 	bl	8002b5c <HAL_GetTick>
 8002b9c:	0002      	movs	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d8f7      	bhi.n	8002b98 <HAL_Delay+0x28>
  {
  }
}
 8002ba8:	46c0      	nop			@ (mov r8, r8)
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b004      	add	sp, #16
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	20000020 	.word	0x20000020

08002bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	1dfb      	adds	r3, r7, #7
 8002bc2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bc4:	1dfb      	adds	r3, r7, #7
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bca:	d809      	bhi.n	8002be0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bcc:	1dfb      	adds	r3, r7, #7
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	231f      	movs	r3, #31
 8002bd4:	401a      	ands	r2, r3
 8002bd6:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <__NVIC_EnableIRQ+0x30>)
 8002bd8:	2101      	movs	r1, #1
 8002bda:	4091      	lsls	r1, r2
 8002bdc:	000a      	movs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002be0:	46c0      	nop			@ (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	e000e100 	.word	0xe000e100

08002bec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	1dfb      	adds	r3, r7, #7
 8002bf6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bf8:	1dfb      	adds	r3, r7, #7
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bfe:	d810      	bhi.n	8002c22 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c00:	1dfb      	adds	r3, r7, #7
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	001a      	movs	r2, r3
 8002c06:	231f      	movs	r3, #31
 8002c08:	4013      	ands	r3, r2
 8002c0a:	4908      	ldr	r1, [pc, #32]	@ (8002c2c <__NVIC_DisableIRQ+0x40>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	0013      	movs	r3, r2
 8002c12:	2280      	movs	r2, #128	@ 0x80
 8002c14:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c16:	f3bf 8f4f 	dsb	sy
}
 8002c1a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002c1c:	f3bf 8f6f 	isb	sy
}
 8002c20:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002c22:	46c0      	nop			@ (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b002      	add	sp, #8
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	e000e100 	.word	0xe000e100

08002c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c30:	b590      	push	{r4, r7, lr}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	0002      	movs	r2, r0
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	1dfb      	adds	r3, r7, #7
 8002c3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c3e:	1dfb      	adds	r3, r7, #7
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c44:	d828      	bhi.n	8002c98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c46:	4a2f      	ldr	r2, [pc, #188]	@ (8002d04 <__NVIC_SetPriority+0xd4>)
 8002c48:	1dfb      	adds	r3, r7, #7
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	b25b      	sxtb	r3, r3
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	33c0      	adds	r3, #192	@ 0xc0
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	589b      	ldr	r3, [r3, r2]
 8002c56:	1dfa      	adds	r2, r7, #7
 8002c58:	7812      	ldrb	r2, [r2, #0]
 8002c5a:	0011      	movs	r1, r2
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	400a      	ands	r2, r1
 8002c60:	00d2      	lsls	r2, r2, #3
 8002c62:	21ff      	movs	r1, #255	@ 0xff
 8002c64:	4091      	lsls	r1, r2
 8002c66:	000a      	movs	r2, r1
 8002c68:	43d2      	mvns	r2, r2
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	019b      	lsls	r3, r3, #6
 8002c72:	22ff      	movs	r2, #255	@ 0xff
 8002c74:	401a      	ands	r2, r3
 8002c76:	1dfb      	adds	r3, r7, #7
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	4003      	ands	r3, r0
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c84:	481f      	ldr	r0, [pc, #124]	@ (8002d04 <__NVIC_SetPriority+0xd4>)
 8002c86:	1dfb      	adds	r3, r7, #7
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	b25b      	sxtb	r3, r3
 8002c8c:	089b      	lsrs	r3, r3, #2
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	33c0      	adds	r3, #192	@ 0xc0
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c96:	e031      	b.n	8002cfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c98:	4a1b      	ldr	r2, [pc, #108]	@ (8002d08 <__NVIC_SetPriority+0xd8>)
 8002c9a:	1dfb      	adds	r3, r7, #7
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	230f      	movs	r3, #15
 8002ca2:	400b      	ands	r3, r1
 8002ca4:	3b08      	subs	r3, #8
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3306      	adds	r3, #6
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	18d3      	adds	r3, r2, r3
 8002cae:	3304      	adds	r3, #4
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	1dfa      	adds	r2, r7, #7
 8002cb4:	7812      	ldrb	r2, [r2, #0]
 8002cb6:	0011      	movs	r1, r2
 8002cb8:	2203      	movs	r2, #3
 8002cba:	400a      	ands	r2, r1
 8002cbc:	00d2      	lsls	r2, r2, #3
 8002cbe:	21ff      	movs	r1, #255	@ 0xff
 8002cc0:	4091      	lsls	r1, r2
 8002cc2:	000a      	movs	r2, r1
 8002cc4:	43d2      	mvns	r2, r2
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	22ff      	movs	r2, #255	@ 0xff
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	1dfb      	adds	r3, r7, #7
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	2303      	movs	r3, #3
 8002cda:	4003      	ands	r3, r0
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ce0:	4809      	ldr	r0, [pc, #36]	@ (8002d08 <__NVIC_SetPriority+0xd8>)
 8002ce2:	1dfb      	adds	r3, r7, #7
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	001c      	movs	r4, r3
 8002ce8:	230f      	movs	r3, #15
 8002cea:	4023      	ands	r3, r4
 8002cec:	3b08      	subs	r3, #8
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	3306      	adds	r3, #6
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	18c3      	adds	r3, r0, r3
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	601a      	str	r2, [r3, #0]
}
 8002cfc:	46c0      	nop			@ (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b003      	add	sp, #12
 8002d02:	bd90      	pop	{r4, r7, pc}
 8002d04:	e000e100 	.word	0xe000e100
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	1e5a      	subs	r2, r3, #1
 8002d18:	2380      	movs	r3, #128	@ 0x80
 8002d1a:	045b      	lsls	r3, r3, #17
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d301      	bcc.n	8002d24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d20:	2301      	movs	r3, #1
 8002d22:	e010      	b.n	8002d46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d24:	4b0a      	ldr	r3, [pc, #40]	@ (8002d50 <SysTick_Config+0x44>)
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	3a01      	subs	r2, #1
 8002d2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	425b      	negs	r3, r3
 8002d30:	2103      	movs	r1, #3
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7ff ff7c 	bl	8002c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <SysTick_Config+0x44>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3e:	4b04      	ldr	r3, [pc, #16]	@ (8002d50 <SysTick_Config+0x44>)
 8002d40:	2207      	movs	r2, #7
 8002d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	0018      	movs	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b002      	add	sp, #8
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	e000e010 	.word	0xe000e010

08002d54 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	210f      	movs	r1, #15
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	1c02      	adds	r2, r0, #0
 8002d64:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	b25b      	sxtb	r3, r3
 8002d6e:	0011      	movs	r1, r2
 8002d70:	0018      	movs	r0, r3
 8002d72:	f7ff ff5d 	bl	8002c30 <__NVIC_SetPriority>
}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b004      	add	sp, #16
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	0002      	movs	r2, r0
 8002d86:	1dfb      	adds	r3, r7, #7
 8002d88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8a:	1dfb      	adds	r3, r7, #7
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	b25b      	sxtb	r3, r3
 8002d90:	0018      	movs	r0, r3
 8002d92:	f7ff ff11 	bl	8002bb8 <__NVIC_EnableIRQ>
}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b002      	add	sp, #8
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	0002      	movs	r2, r0
 8002da6:	1dfb      	adds	r3, r7, #7
 8002da8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002daa:	1dfb      	adds	r3, r7, #7
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	b25b      	sxtb	r3, r3
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7ff ff1b 	bl	8002bec <__NVIC_DisableIRQ>
}
 8002db6:	46c0      	nop			@ (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b002      	add	sp, #8
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7ff ff9f 	bl	8002d0c <SysTick_Config>
 8002dce:	0003      	movs	r3, r0
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b002      	add	sp, #8
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e056      	b.n	8002e98 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	7f5b      	ldrb	r3, [r3, #29]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d106      	bne.n	8002e02 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7ff fb43 	bl	8002488 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2202      	movs	r2, #2
 8002e06:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	791b      	ldrb	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10c      	bne.n	8002e2a <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a22      	ldr	r2, [pc, #136]	@ (8002ea0 <HAL_CRC_Init+0xc8>)
 8002e16:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2118      	movs	r1, #24
 8002e24:	438a      	bics	r2, r1
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	e00b      	b.n	8002e42 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6899      	ldr	r1, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 f974 	bl	8003122 <HAL_CRCEx_Polynomial_Set>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e02a      	b.n	8002e98 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	795b      	ldrb	r3, [r3, #5]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d105      	bne.n	8002e56 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4252      	negs	r2, r2
 8002e52:	611a      	str	r2, [r3, #16]
 8002e54:	e004      	b.n	8002e60 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6912      	ldr	r2, [r2, #16]
 8002e5e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2260      	movs	r2, #96	@ 0x60
 8002e68:	4393      	bics	r3, r2
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2280      	movs	r2, #128	@ 0x80
 8002e80:	4393      	bics	r3, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699a      	ldr	r2, [r3, #24]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b002      	add	sp, #8
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	04c11db7 	.word	0x04c11db7

08002ea4 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e020      	b.n	8002ef8 <HAL_CRC_DeInit+0x54>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	7f5b      	ldrb	r3, [r3, #29]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d101      	bne.n	8002ec4 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e019      	b.n	8002ef8 <HAL_CRC_DeInit+0x54>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_REG(hcrc->Instance->IDR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7ff faef 	bl	80024c8 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b002      	add	sp, #8
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2202      	movs	r2, #2
 8002f14:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d005      	beq.n	8002f2a <HAL_CRC_Accumulate+0x2a>
 8002f1e:	d82d      	bhi.n	8002f7c <HAL_CRC_Accumulate+0x7c>
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d019      	beq.n	8002f58 <HAL_CRC_Accumulate+0x58>
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d020      	beq.n	8002f6a <HAL_CRC_Accumulate+0x6a>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8002f28:	e028      	b.n	8002f7c <HAL_CRC_Accumulate+0x7c>
      for (index = 0U; index < BufferLength; index++)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	e00a      	b.n	8002f46 <HAL_CRC_Accumulate+0x46>
        hcrc->Instance->DR = pBuffer[index];
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	18d2      	adds	r2, r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3301      	adds	r3, #1
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d3f0      	bcc.n	8002f30 <HAL_CRC_Accumulate+0x30>
      temp = hcrc->Instance->DR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	613b      	str	r3, [r7, #16]
      break;
 8002f56:	e012      	b.n	8002f7e <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f000 f815 	bl	8002f8e <CRC_Handle_8>
 8002f64:	0003      	movs	r3, r0
 8002f66:	613b      	str	r3, [r7, #16]
      break;
 8002f68:	e009      	b.n	8002f7e <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f000 f89f 	bl	80030b4 <CRC_Handle_16>
 8002f76:	0003      	movs	r3, r0
 8002f78:	613b      	str	r3, [r7, #16]
      break;
 8002f7a:	e000      	b.n	8002f7e <HAL_CRC_Accumulate+0x7e>
      break;
 8002f7c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002f84:	693b      	ldr	r3, [r7, #16]
}
 8002f86:	0018      	movs	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b006      	add	sp, #24
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b088      	sub	sp, #32
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	e023      	b.n	8002fe8 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	18d3      	adds	r3, r2, r3
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	18cb      	adds	r3, r1, r3
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002fba:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	18cb      	adds	r3, r1, r3
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002fca:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	3303      	adds	r3, #3
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	18cb      	adds	r3, r1, r3
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002fde:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002fe0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	61fb      	str	r3, [r7, #28]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	089b      	lsrs	r3, r3, #2
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d3d6      	bcc.n	8002fa0 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d055      	beq.n	80030a6 <CRC_Handle_8+0x118>
  {
    if ((BufferLength % 4U) == 1U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b01      	cmp	r3, #1
 8003002:	d107      	bne.n	8003014 <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	18d2      	adds	r2, r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	7812      	ldrb	r2, [r2, #0]
 8003012:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2203      	movs	r2, #3
 8003018:	4013      	ands	r3, r2
 800301a:	2b02      	cmp	r3, #2
 800301c:	d11a      	bne.n	8003054 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	18d3      	adds	r3, r2, r3
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	b21b      	sxth	r3, r3
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	b21a      	sxth	r2, r3
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	3301      	adds	r3, #1
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	18cb      	adds	r3, r1, r3
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	b21b      	sxth	r3, r3
 800303c:	4313      	orrs	r3, r2
 800303e:	b21a      	sxth	r2, r3
 8003040:	211a      	movs	r1, #26
 8003042:	187b      	adds	r3, r7, r1
 8003044:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	187a      	adds	r2, r7, r1
 8003050:	8812      	ldrh	r2, [r2, #0]
 8003052:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2203      	movs	r2, #3
 8003058:	4013      	ands	r3, r2
 800305a:	2b03      	cmp	r3, #3
 800305c:	d123      	bne.n	80030a6 <CRC_Handle_8+0x118>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	18d3      	adds	r3, r2, r3
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	b21b      	sxth	r3, r3
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	b21a      	sxth	r2, r3
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	3301      	adds	r3, #1
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	18cb      	adds	r3, r1, r3
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	b21b      	sxth	r3, r3
 800307c:	4313      	orrs	r3, r2
 800307e:	b21a      	sxth	r2, r3
 8003080:	211a      	movs	r1, #26
 8003082:	187b      	adds	r3, r7, r1
 8003084:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	187a      	adds	r2, r7, r1
 8003090:	8812      	ldrh	r2, [r2, #0]
 8003092:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	18d2      	adds	r2, r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
}
 80030ac:	0018      	movs	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b008      	add	sp, #32
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	e013      	b.n	80030ee <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	18d3      	adds	r3, r2, r3
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	041a      	lsls	r2, r3, #16
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	3302      	adds	r3, #2
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	18cb      	adds	r3, r1, r3
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	0019      	movs	r1, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	3301      	adds	r3, #1
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d3e6      	bcc.n	80030c6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	4013      	ands	r3, r2
 80030fe:	d009      	beq.n	8003114 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	18d3      	adds	r3, r2, r3
 800310e:	881a      	ldrh	r2, [r3, #0]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b006      	add	sp, #24
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b086      	sub	sp, #24
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800312e:	2117      	movs	r1, #23
 8003130:	187b      	adds	r3, r7, r1
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003136:	231f      	movs	r3, #31
 8003138:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2201      	movs	r2, #1
 800313e:	4013      	ands	r3, r2
 8003140:	d103      	bne.n	800314a <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8003142:	187b      	adds	r3, r7, r1
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e045      	b.n	80031d6 <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800314a:	46c0      	nop			@ (mov r8, r8)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1e5a      	subs	r2, r3, #1
 8003150:	613a      	str	r2, [r7, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_CRCEx_Polynomial_Set+0x46>
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	221f      	movs	r2, #31
 800315a:	4013      	ands	r3, r2
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	40da      	lsrs	r2, r3
 8003160:	0013      	movs	r3, r2
 8003162:	2201      	movs	r2, #1
 8003164:	4013      	ands	r3, r2
 8003166:	d0f1      	beq.n	800314c <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b18      	cmp	r3, #24
 800316c:	d00f      	beq.n	800318e <HAL_CRCEx_Polynomial_Set+0x6c>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b18      	cmp	r3, #24
 8003172:	d824      	bhi.n	80031be <HAL_CRCEx_Polynomial_Set+0x9c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b10      	cmp	r3, #16
 8003178:	d011      	beq.n	800319e <HAL_CRCEx_Polynomial_Set+0x7c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b10      	cmp	r3, #16
 800317e:	d81e      	bhi.n	80031be <HAL_CRCEx_Polynomial_Set+0x9c>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d020      	beq.n	80031c8 <HAL_CRCEx_Polynomial_Set+0xa6>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d010      	beq.n	80031ae <HAL_CRCEx_Polynomial_Set+0x8c>
 800318c:	e017      	b.n	80031be <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b06      	cmp	r3, #6
 8003192:	d91b      	bls.n	80031cc <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8003194:	2317      	movs	r3, #23
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800319c:	e016      	b.n	80031cc <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b07      	cmp	r3, #7
 80031a2:	d915      	bls.n	80031d0 <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 80031a4:	2317      	movs	r3, #23
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]
        }
        break;
 80031ac:	e010      	b.n	80031d0 <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b0f      	cmp	r3, #15
 80031b2:	d90f      	bls.n	80031d4 <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 80031b4:	2317      	movs	r3, #23
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
        }
        break;
 80031bc:	e00a      	b.n	80031d4 <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80031be:	2317      	movs	r3, #23
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
        break;
 80031c6:	e006      	b.n	80031d6 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80031c8:	46c0      	nop			@ (mov r8, r8)
 80031ca:	e004      	b.n	80031d6 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80031cc:	46c0      	nop			@ (mov r8, r8)
 80031ce:	e002      	b.n	80031d6 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80031d0:	46c0      	nop			@ (mov r8, r8)
 80031d2:	e000      	b.n	80031d6 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80031d4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 80031d6:	2317      	movs	r3, #23
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10e      	bne.n	80031fe <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2218      	movs	r2, #24
 80031f0:	4393      	bics	r3, r2
 80031f2:	0019      	movs	r1, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80031fe:	2317      	movs	r3, #23
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	781b      	ldrb	r3, [r3, #0]
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	b006      	add	sp, #24
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e077      	b.n	800330e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a3d      	ldr	r2, [pc, #244]	@ (8003318 <HAL_DMA_Init+0x10c>)
 8003224:	4694      	mov	ip, r2
 8003226:	4463      	add	r3, ip
 8003228:	2114      	movs	r1, #20
 800322a:	0018      	movs	r0, r3
 800322c:	f7fc ff72 	bl	8000114 <__udivsi3>
 8003230:	0003      	movs	r3, r0
 8003232:	009a      	lsls	r2, r3, #2
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2225      	movs	r2, #37	@ 0x25
 800323c:	2102      	movs	r1, #2
 800323e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4934      	ldr	r1, [pc, #208]	@ (800331c <HAL_DMA_Init+0x110>)
 800324c:	400a      	ands	r2, r1
 800324e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6819      	ldr	r1, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0018      	movs	r0, r3
 800328a:	f000 fb05 	bl	8003898 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	2380      	movs	r3, #128	@ 0x80
 8003294:	01db      	lsls	r3, r3, #7
 8003296:	429a      	cmp	r2, r3
 8003298:	d102      	bne.n	80032a0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a8:	213f      	movs	r1, #63	@ 0x3f
 80032aa:	400a      	ands	r2, r1
 80032ac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032b6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d011      	beq.n	80032e4 <HAL_DMA_Init+0xd8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d80d      	bhi.n	80032e4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	0018      	movs	r0, r3
 80032cc:	f000 fb10 	bl	80038f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	e008      	b.n	80032f6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2225      	movs	r2, #37	@ 0x25
 8003300:	2101      	movs	r1, #1
 8003302:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2224      	movs	r2, #36	@ 0x24
 8003308:	2100      	movs	r1, #0
 800330a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	0018      	movs	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	b002      	add	sp, #8
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	bffdfff8 	.word	0xbffdfff8
 800331c:	ffff800f 	.word	0xffff800f

08003320 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e066      	b.n	8003400 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2101      	movs	r1, #1
 800333e:	438a      	bics	r2, r1
 8003340:	601a      	str	r2, [r3, #0]
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a30      	ldr	r2, [pc, #192]	@ (8003408 <HAL_DMA_DeInit+0xe8>)
 8003348:	4694      	mov	ip, r2
 800334a:	4463      	add	r3, ip
 800334c:	2114      	movs	r1, #20
 800334e:	0018      	movs	r0, r3
 8003350:	f7fc fee0 	bl	8000114 <__udivsi3>
 8003354:	0003      	movs	r3, r0
 8003356:	009a      	lsls	r2, r3, #2
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003364:	4b29      	ldr	r3, [pc, #164]	@ (800340c <HAL_DMA_DeInit+0xec>)
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	221c      	movs	r2, #28
 800336e:	4013      	ands	r3, r2
 8003370:	2201      	movs	r2, #1
 8003372:	409a      	lsls	r2, r3
 8003374:	4b25      	ldr	r3, [pc, #148]	@ (800340c <HAL_DMA_DeInit+0xec>)
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	0018      	movs	r0, r3
 800337e:	f000 fa8b 	bl	8003898 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003392:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d010      	beq.n	80033be <HAL_DMA_DeInit+0x9e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d80c      	bhi.n	80033be <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 faa2 	bl	80038f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80033bc:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2225      	movs	r2, #37	@ 0x25
 80033f2:	2100      	movs	r1, #0
 80033f4:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2224      	movs	r2, #36	@ 0x24
 80033fa:	2100      	movs	r1, #0
 80033fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	b002      	add	sp, #8
 8003406:	bd80      	pop	{r7, pc}
 8003408:	bffdfff8 	.word	0xbffdfff8
 800340c:	40020000 	.word	0x40020000

08003410 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2317      	movs	r3, #23
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2224      	movs	r2, #36	@ 0x24
 800342a:	5c9b      	ldrb	r3, [r3, r2]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_DMA_Start_IT+0x24>
 8003430:	2302      	movs	r3, #2
 8003432:	e06f      	b.n	8003514 <HAL_DMA_Start_IT+0x104>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2224      	movs	r2, #36	@ 0x24
 8003438:	2101      	movs	r1, #1
 800343a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2225      	movs	r2, #37	@ 0x25
 8003440:	5c9b      	ldrb	r3, [r3, r2]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d157      	bne.n	80034f8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2225      	movs	r2, #37	@ 0x25
 800344c:	2102      	movs	r1, #2
 800344e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2101      	movs	r1, #1
 8003462:	438a      	bics	r2, r1
 8003464:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f9d3 	bl	8003818 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	210e      	movs	r1, #14
 8003486:	430a      	orrs	r2, r1
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	e00f      	b.n	80034ac <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2104      	movs	r1, #4
 8003498:	438a      	bics	r2, r1
 800349a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	210a      	movs	r1, #10
 80034a8:	430a      	orrs	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	2380      	movs	r3, #128	@ 0x80
 80034b4:	025b      	lsls	r3, r3, #9
 80034b6:	4013      	ands	r3, r2
 80034b8:	d008      	beq.n	80034cc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c4:	2180      	movs	r1, #128	@ 0x80
 80034c6:	0049      	lsls	r1, r1, #1
 80034c8:	430a      	orrs	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034de:	2180      	movs	r1, #128	@ 0x80
 80034e0:	0049      	lsls	r1, r1, #1
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2101      	movs	r1, #1
 80034f2:	430a      	orrs	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e00a      	b.n	800350e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2280      	movs	r2, #128	@ 0x80
 80034fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2224      	movs	r2, #36	@ 0x24
 8003502:	2100      	movs	r1, #0
 8003504:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003506:	2317      	movs	r3, #23
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	2201      	movs	r2, #1
 800350c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800350e:	2317      	movs	r3, #23
 8003510:	18fb      	adds	r3, r7, r3
 8003512:	781b      	ldrb	r3, [r3, #0]
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	b006      	add	sp, #24
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e050      	b.n	80035d0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2225      	movs	r2, #37	@ 0x25
 8003532:	5c9b      	ldrb	r3, [r3, r2]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d008      	beq.n	800354c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2204      	movs	r2, #4
 800353e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2224      	movs	r2, #36	@ 0x24
 8003544:	2100      	movs	r1, #0
 8003546:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e041      	b.n	80035d0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	210e      	movs	r1, #14
 8003558:	438a      	bics	r2, r1
 800355a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003566:	491c      	ldr	r1, [pc, #112]	@ (80035d8 <HAL_DMA_Abort+0xbc>)
 8003568:	400a      	ands	r2, r1
 800356a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2101      	movs	r1, #1
 8003578:	438a      	bics	r2, r1
 800357a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800357c:	4b17      	ldr	r3, [pc, #92]	@ (80035dc <HAL_DMA_Abort+0xc0>)
 800357e:	6859      	ldr	r1, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	221c      	movs	r2, #28
 8003586:	4013      	ands	r3, r2
 8003588:	2201      	movs	r2, #1
 800358a:	409a      	lsls	r2, r3
 800358c:	4b13      	ldr	r3, [pc, #76]	@ (80035dc <HAL_DMA_Abort+0xc0>)
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800359a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00c      	beq.n	80035be <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ae:	490a      	ldr	r1, [pc, #40]	@ (80035d8 <HAL_DMA_Abort+0xbc>)
 80035b0:	400a      	ands	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80035bc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2225      	movs	r2, #37	@ 0x25
 80035c2:	2101      	movs	r1, #1
 80035c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2224      	movs	r2, #36	@ 0x24
 80035ca:	2100      	movs	r1, #0
 80035cc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	0018      	movs	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b002      	add	sp, #8
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	fffffeff 	.word	0xfffffeff
 80035dc:	40020000 	.word	0x40020000

080035e0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e8:	210f      	movs	r1, #15
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2225      	movs	r2, #37	@ 0x25
 80035f4:	5c9b      	ldrb	r3, [r3, r2]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d006      	beq.n	800360a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2204      	movs	r2, #4
 8003600:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003602:	187b      	adds	r3, r7, r1
 8003604:	2201      	movs	r2, #1
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	e049      	b.n	800369e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	210e      	movs	r1, #14
 8003616:	438a      	bics	r2, r1
 8003618:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2101      	movs	r1, #1
 8003626:	438a      	bics	r2, r1
 8003628:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003634:	491d      	ldr	r1, [pc, #116]	@ (80036ac <HAL_DMA_Abort_IT+0xcc>)
 8003636:	400a      	ands	r2, r1
 8003638:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800363a:	4b1d      	ldr	r3, [pc, #116]	@ (80036b0 <HAL_DMA_Abort_IT+0xd0>)
 800363c:	6859      	ldr	r1, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	221c      	movs	r2, #28
 8003644:	4013      	ands	r3, r2
 8003646:	2201      	movs	r2, #1
 8003648:	409a      	lsls	r2, r3
 800364a:	4b19      	ldr	r3, [pc, #100]	@ (80036b0 <HAL_DMA_Abort_IT+0xd0>)
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003658:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00c      	beq.n	800367c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800366c:	490f      	ldr	r1, [pc, #60]	@ (80036ac <HAL_DMA_Abort_IT+0xcc>)
 800366e:	400a      	ands	r2, r1
 8003670:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800367a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2225      	movs	r2, #37	@ 0x25
 8003680:	2101      	movs	r1, #1
 8003682:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	@ 0x24
 8003688:	2100      	movs	r1, #0
 800368a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003690:	2b00      	cmp	r3, #0
 8003692:	d004      	beq.n	800369e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	0010      	movs	r0, r2
 800369c:	4798      	blx	r3
    }
  }
  return status;
 800369e:	230f      	movs	r3, #15
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	781b      	ldrb	r3, [r3, #0]
}
 80036a4:	0018      	movs	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b004      	add	sp, #16
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	fffffeff 	.word	0xfffffeff
 80036b0:	40020000 	.word	0x40020000

080036b4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80036bc:	4b55      	ldr	r3, [pc, #340]	@ (8003814 <HAL_DMA_IRQHandler+0x160>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	221c      	movs	r2, #28
 80036d0:	4013      	ands	r3, r2
 80036d2:	2204      	movs	r2, #4
 80036d4:	409a      	lsls	r2, r3
 80036d6:	0013      	movs	r3, r2
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4013      	ands	r3, r2
 80036dc:	d027      	beq.n	800372e <HAL_DMA_IRQHandler+0x7a>
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2204      	movs	r2, #4
 80036e2:	4013      	ands	r3, r2
 80036e4:	d023      	beq.n	800372e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2220      	movs	r2, #32
 80036ee:	4013      	ands	r3, r2
 80036f0:	d107      	bne.n	8003702 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2104      	movs	r1, #4
 80036fe:	438a      	bics	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003702:	4b44      	ldr	r3, [pc, #272]	@ (8003814 <HAL_DMA_IRQHandler+0x160>)
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	221c      	movs	r2, #28
 800370c:	4013      	ands	r3, r2
 800370e:	2204      	movs	r2, #4
 8003710:	409a      	lsls	r2, r3
 8003712:	4b40      	ldr	r3, [pc, #256]	@ (8003814 <HAL_DMA_IRQHandler+0x160>)
 8003714:	430a      	orrs	r2, r1
 8003716:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371c:	2b00      	cmp	r3, #0
 800371e:	d100      	bne.n	8003722 <HAL_DMA_IRQHandler+0x6e>
 8003720:	e073      	b.n	800380a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	0010      	movs	r0, r2
 800372a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800372c:	e06d      	b.n	800380a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	221c      	movs	r2, #28
 8003734:	4013      	ands	r3, r2
 8003736:	2202      	movs	r2, #2
 8003738:	409a      	lsls	r2, r3
 800373a:	0013      	movs	r3, r2
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4013      	ands	r3, r2
 8003740:	d02e      	beq.n	80037a0 <HAL_DMA_IRQHandler+0xec>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2202      	movs	r2, #2
 8003746:	4013      	ands	r3, r2
 8003748:	d02a      	beq.n	80037a0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2220      	movs	r2, #32
 8003752:	4013      	ands	r3, r2
 8003754:	d10b      	bne.n	800376e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	210a      	movs	r1, #10
 8003762:	438a      	bics	r2, r1
 8003764:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2225      	movs	r2, #37	@ 0x25
 800376a:	2101      	movs	r1, #1
 800376c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800376e:	4b29      	ldr	r3, [pc, #164]	@ (8003814 <HAL_DMA_IRQHandler+0x160>)
 8003770:	6859      	ldr	r1, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	221c      	movs	r2, #28
 8003778:	4013      	ands	r3, r2
 800377a:	2202      	movs	r2, #2
 800377c:	409a      	lsls	r2, r3
 800377e:	4b25      	ldr	r3, [pc, #148]	@ (8003814 <HAL_DMA_IRQHandler+0x160>)
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	@ 0x24
 8003788:	2100      	movs	r1, #0
 800378a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d03a      	beq.n	800380a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	0010      	movs	r0, r2
 800379c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800379e:	e034      	b.n	800380a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	221c      	movs	r2, #28
 80037a6:	4013      	ands	r3, r2
 80037a8:	2208      	movs	r2, #8
 80037aa:	409a      	lsls	r2, r3
 80037ac:	0013      	movs	r3, r2
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4013      	ands	r3, r2
 80037b2:	d02b      	beq.n	800380c <HAL_DMA_IRQHandler+0x158>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2208      	movs	r2, #8
 80037b8:	4013      	ands	r3, r2
 80037ba:	d027      	beq.n	800380c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	210e      	movs	r1, #14
 80037c8:	438a      	bics	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80037cc:	4b11      	ldr	r3, [pc, #68]	@ (8003814 <HAL_DMA_IRQHandler+0x160>)
 80037ce:	6859      	ldr	r1, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d4:	221c      	movs	r2, #28
 80037d6:	4013      	ands	r3, r2
 80037d8:	2201      	movs	r2, #1
 80037da:	409a      	lsls	r2, r3
 80037dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <HAL_DMA_IRQHandler+0x160>)
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2225      	movs	r2, #37	@ 0x25
 80037ec:	2101      	movs	r1, #1
 80037ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2224      	movs	r2, #36	@ 0x24
 80037f4:	2100      	movs	r1, #0
 80037f6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	0010      	movs	r0, r2
 8003808:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	46c0      	nop			@ (mov r8, r8)
}
 800380e:	46bd      	mov	sp, r7
 8003810:	b004      	add	sp, #16
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40020000 	.word	0x40020000

08003818 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800382e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003834:	2b00      	cmp	r3, #0
 8003836:	d004      	beq.n	8003842 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003840:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003842:	4b14      	ldr	r3, [pc, #80]	@ (8003894 <DMA_SetConfig+0x7c>)
 8003844:	6859      	ldr	r1, [r3, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	221c      	movs	r2, #28
 800384c:	4013      	ands	r3, r2
 800384e:	2201      	movs	r2, #1
 8003850:	409a      	lsls	r2, r3
 8003852:	4b10      	ldr	r3, [pc, #64]	@ (8003894 <DMA_SetConfig+0x7c>)
 8003854:	430a      	orrs	r2, r1
 8003856:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b10      	cmp	r3, #16
 8003866:	d108      	bne.n	800387a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003878:	e007      	b.n	800388a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	60da      	str	r2, [r3, #12]
}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	46bd      	mov	sp, r7
 800388e:	b004      	add	sp, #16
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	40020000 	.word	0x40020000

08003898 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a4:	089b      	lsrs	r3, r3, #2
 80038a6:	4a10      	ldr	r2, [pc, #64]	@ (80038e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80038a8:	4694      	mov	ip, r2
 80038aa:	4463      	add	r3, ip
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	001a      	movs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	001a      	movs	r2, r3
 80038ba:	23ff      	movs	r3, #255	@ 0xff
 80038bc:	4013      	ands	r3, r2
 80038be:	3b08      	subs	r3, #8
 80038c0:	2114      	movs	r1, #20
 80038c2:	0018      	movs	r0, r3
 80038c4:	f7fc fc26 	bl	8000114 <__udivsi3>
 80038c8:	0003      	movs	r3, r0
 80038ca:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a07      	ldr	r2, [pc, #28]	@ (80038ec <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80038d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	221f      	movs	r2, #31
 80038d6:	4013      	ands	r3, r2
 80038d8:	2201      	movs	r2, #1
 80038da:	409a      	lsls	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80038e0:	46c0      	nop			@ (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b004      	add	sp, #16
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	10008200 	.word	0x10008200
 80038ec:	40020880 	.word	0x40020880

080038f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	223f      	movs	r2, #63	@ 0x3f
 80038fe:	4013      	ands	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4a0a      	ldr	r2, [pc, #40]	@ (8003930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003906:	4694      	mov	ip, r2
 8003908:	4463      	add	r3, ip
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	001a      	movs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a07      	ldr	r2, [pc, #28]	@ (8003934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003916:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3b01      	subs	r3, #1
 800391c:	2203      	movs	r2, #3
 800391e:	4013      	ands	r3, r2
 8003920:	2201      	movs	r2, #1
 8003922:	409a      	lsls	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003928:	46c0      	nop			@ (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b004      	add	sp, #16
 800392e:	bd80      	pop	{r7, pc}
 8003930:	1000823f 	.word	0x1000823f
 8003934:	40020940 	.word	0x40020940

08003938 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003938:	b5b0      	push	{r4, r5, r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603a      	str	r2, [r7, #0]
 8003944:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003946:	4b21      	ldr	r3, [pc, #132]	@ (80039cc <HAL_FLASH_Program+0x94>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_FLASH_Program+0x1a>
 800394e:	2302      	movs	r3, #2
 8003950:	e038      	b.n	80039c4 <HAL_FLASH_Program+0x8c>
 8003952:	4b1e      	ldr	r3, [pc, #120]	@ (80039cc <HAL_FLASH_Program+0x94>)
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003958:	4b1c      	ldr	r3, [pc, #112]	@ (80039cc <HAL_FLASH_Program+0x94>)
 800395a:	2200      	movs	r2, #0
 800395c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800395e:	2517      	movs	r5, #23
 8003960:	197c      	adds	r4, r7, r5
 8003962:	23fa      	movs	r3, #250	@ 0xfa
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	0018      	movs	r0, r3
 8003968:	f000 f958 	bl	8003c1c <FLASH_WaitForLastOperation>
 800396c:	0003      	movs	r3, r0
 800396e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003970:	197b      	adds	r3, r7, r5
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d11f      	bne.n	80039b8 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d106      	bne.n	800398c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	0008      	movs	r0, r1
 8003986:	f000 f997 	bl	8003cb8 <FLASH_Program_DoubleWord>
 800398a:	e005      	b.n	8003998 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	0011      	movs	r1, r2
 8003992:	0018      	movs	r0, r3
 8003994:	f005 f8e4 	bl	8008b60 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003998:	2317      	movs	r3, #23
 800399a:	18fc      	adds	r4, r7, r3
 800399c:	23fa      	movs	r3, #250	@ 0xfa
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	0018      	movs	r0, r3
 80039a2:	f000 f93b 	bl	8003c1c <FLASH_WaitForLastOperation>
 80039a6:	0003      	movs	r3, r0
 80039a8:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80039aa:	4b09      	ldr	r3, [pc, #36]	@ (80039d0 <HAL_FLASH_Program+0x98>)
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	43d9      	mvns	r1, r3
 80039b2:	4b07      	ldr	r3, [pc, #28]	@ (80039d0 <HAL_FLASH_Program+0x98>)
 80039b4:	400a      	ands	r2, r1
 80039b6:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80039b8:	4b04      	ldr	r3, [pc, #16]	@ (80039cc <HAL_FLASH_Program+0x94>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80039be:	2317      	movs	r3, #23
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	781b      	ldrb	r3, [r3, #0]
}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b006      	add	sp, #24
 80039ca:	bdb0      	pop	{r4, r5, r7, pc}
 80039cc:	20001160 	.word	0x20001160
 80039d0:	40022000 	.word	0x40022000

080039d4 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
  uint32_t param;
  uint32_t error;

  /* Save flash errors. */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80039da:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac4 <HAL_FLASH_IRQHandler+0xf0>)
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	4a3a      	ldr	r2, [pc, #232]	@ (8003ac8 <HAL_FLASH_IRQHandler+0xf4>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	603b      	str	r3, [r7, #0]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & FLASH_TYPEERASE_MASS) != 0x00U)
 80039e4:	4b39      	ldr	r3, [pc, #228]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2204      	movs	r2, #4
 80039ea:	4013      	ands	r3, r2
 80039ec:	d003      	beq.n	80039f6 <HAL_FLASH_IRQHandler+0x22>
  {
    /* return bank number */
    param = pFlash.Banks;
 80039ee:	4b37      	ldr	r3, [pc, #220]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	607b      	str	r3, [r7, #4]
 80039f4:	e013      	b.n	8003a1e <HAL_FLASH_IRQHandler+0x4a>
  }
  else
  {
    /* Clear operation only for page erase or program */
    CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 80039f6:	4b33      	ldr	r3, [pc, #204]	@ (8003ac4 <HAL_FLASH_IRQHandler+0xf0>)
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	4b34      	ldr	r3, [pc, #208]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	43d9      	mvns	r1, r3
 8003a00:	4b30      	ldr	r3, [pc, #192]	@ (8003ac4 <HAL_FLASH_IRQHandler+0xf0>)
 8003a02:	400a      	ands	r2, r1
 8003a04:	615a      	str	r2, [r3, #20]

    if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0x00U)
 8003a06:	4b31      	ldr	r3, [pc, #196]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	4a31      	ldr	r2, [pc, #196]	@ (8003ad0 <HAL_FLASH_IRQHandler+0xfc>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <HAL_FLASH_IRQHandler+0x44>
    {
      /* return address being programmed */
      param = pFlash.Address;
 8003a10:	4b2e      	ldr	r3, [pc, #184]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	e002      	b.n	8003a1e <HAL_FLASH_IRQHandler+0x4a>
    }
    else
    {
      /* return page number being erased */
      param = pFlash.Page;
 8003a18:	4b2c      	ldr	r3, [pc, #176]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	607b      	str	r3, [r7, #4]
    }
  }

  /* B] Check errors */
  if (error != 0x00U)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00f      	beq.n	8003a44 <HAL_FLASH_IRQHandler+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003a24:	4b29      	ldr	r3, [pc, #164]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	4b27      	ldr	r3, [pc, #156]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a2e:	605a      	str	r2, [r3, #4]

    /* clear error flags */
    FLASH->SR = FLASH_SR_ERRORS;
 8003a30:	4b24      	ldr	r3, [pc, #144]	@ (8003ac4 <HAL_FLASH_IRQHandler+0xf0>)
 8003a32:	4a25      	ldr	r2, [pc, #148]	@ (8003ac8 <HAL_FLASH_IRQHandler+0xf4>)
 8003a34:	611a      	str	r2, [r3, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8003a36:	4b25      	ldr	r3, [pc, #148]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f000 f852 	bl	8003ae8 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if ((FLASH->SR & FLASH_SR_EOP) != 0x00U)
 8003a44:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac4 <HAL_FLASH_IRQHandler+0xf0>)
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d028      	beq.n	8003aa0 <HAL_FLASH_IRQHandler+0xcc>
  {
    /* Clear FLASH End of Operation pending bit */
    FLASH->SR = FLASH_SR_EOP;
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac4 <HAL_FLASH_IRQHandler+0xf0>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 8003a54:	4b1d      	ldr	r3, [pc, #116]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d11a      	bne.n	8003a92 <HAL_FLASH_IRQHandler+0xbe>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	1e5a      	subs	r2, r3, #1
 8003a62:	4b1a      	ldr	r3, [pc, #104]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a64:	619a      	str	r2, [r3, #24]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0x00U)
 8003a66:	4b19      	ldr	r3, [pc, #100]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <HAL_FLASH_IRQHandler+0xb6>
      {
        /* Increment page number */
        pFlash.Page++;
 8003a6e:	4b17      	ldr	r3, [pc, #92]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	4b15      	ldr	r3, [pc, #84]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a76:	615a      	str	r2, [r3, #20]
        FLASH_PageErase(pFlash.Banks, pFlash.Page);
 8003a78:	4b14      	ldr	r3, [pc, #80]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	4b13      	ldr	r3, [pc, #76]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	0019      	movs	r1, r3
 8003a82:	0010      	movs	r0, r2
 8003a84:	f000 f9c0 	bl	8003e08 <FLASH_PageErase>
 8003a88:	e006      	b.n	8003a98 <HAL_FLASH_IRQHandler+0xc4>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8003a8a:	4b10      	ldr	r3, [pc, #64]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	e002      	b.n	8003a98 <HAL_FLASH_IRQHandler+0xc4>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8003a92:	4b0e      	ldr	r3, [pc, #56]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f000 f81c 	bl	8003ad8 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d108      	bne.n	8003aba <HAL_FLASH_IRQHandler+0xe6>
  {
    /* Disable End of Operation and Error interrupts */
    FLASH->CR &= ~(FLASH_CR_EOPIE | FLASH_CR_ERRIE);
 8003aa8:	4b06      	ldr	r3, [pc, #24]	@ (8003ac4 <HAL_FLASH_IRQHandler+0xf0>)
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	4b05      	ldr	r3, [pc, #20]	@ (8003ac4 <HAL_FLASH_IRQHandler+0xf0>)
 8003aae:	4909      	ldr	r1, [pc, #36]	@ (8003ad4 <HAL_FLASH_IRQHandler+0x100>)
 8003ab0:	400a      	ands	r2, r1
 8003ab2:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003ab4:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <HAL_FLASH_IRQHandler+0xf8>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
  }
}
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b002      	add	sp, #8
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	46c0      	nop			@ (mov r8, r8)
 8003ac4:	40022000 	.word	0x40022000
 8003ac8:	000083fa 	.word	0x000083fa
 8003acc:	20001160 	.word	0x20001160
 8003ad0:	00040001 	.word	0x00040001
 8003ad4:	fcffffff 	.word	0xfcffffff

08003ad8 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8003ae0:	46c0      	nop			@ (mov r8, r8)
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b002      	add	sp, #8
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8003af0:	46c0      	nop			@ (mov r8, r8)
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b002      	add	sp, #8
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003afe:	1dfb      	adds	r3, r7, #7
 8003b00:	2200      	movs	r2, #0
 8003b02:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003b04:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <HAL_FLASH_Unlock+0x3c>)
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	da0c      	bge.n	8003b26 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003b0c:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <HAL_FLASH_Unlock+0x3c>)
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b38 <HAL_FLASH_Unlock+0x40>)
 8003b10:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003b12:	4b08      	ldr	r3, [pc, #32]	@ (8003b34 <HAL_FLASH_Unlock+0x3c>)
 8003b14:	4a09      	ldr	r2, [pc, #36]	@ (8003b3c <HAL_FLASH_Unlock+0x44>)
 8003b16:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003b18:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <HAL_FLASH_Unlock+0x3c>)
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	da02      	bge.n	8003b26 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8003b20:	1dfb      	adds	r3, r7, #7
 8003b22:	2201      	movs	r2, #1
 8003b24:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003b26:	1dfb      	adds	r3, r7, #7
 8003b28:	781b      	ldrb	r3, [r3, #0]
}
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b002      	add	sp, #8
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	40022000 	.word	0x40022000
 8003b38:	45670123 	.word	0x45670123
 8003b3c:	cdef89ab 	.word	0xcdef89ab

08003b40 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b46:	1dfb      	adds	r3, r7, #7
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b4c:	23fa      	movs	r3, #250	@ 0xfa
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	0018      	movs	r0, r3
 8003b52:	f000 f863 	bl	8003c1c <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003b56:	4b0a      	ldr	r3, [pc, #40]	@ (8003b80 <HAL_FLASH_Lock+0x40>)
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	4b09      	ldr	r3, [pc, #36]	@ (8003b80 <HAL_FLASH_Lock+0x40>)
 8003b5c:	2180      	movs	r1, #128	@ 0x80
 8003b5e:	0609      	lsls	r1, r1, #24
 8003b60:	430a      	orrs	r2, r1
 8003b62:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8003b64:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <HAL_FLASH_Lock+0x40>)
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	da02      	bge.n	8003b72 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8003b6c:	1dfb      	adds	r3, r7, #7
 8003b6e:	2200      	movs	r2, #0
 8003b70:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003b72:	1dfb      	adds	r3, r7, #7
 8003b74:	781b      	ldrb	r3, [r3, #0]
}
 8003b76:	0018      	movs	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b002      	add	sp, #8
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	40022000 	.word	0x40022000

08003b84 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b8a:	1dfb      	adds	r3, r7, #7
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 8003b90:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc8 <HAL_FLASH_OB_Unlock+0x44>)
 8003b92:	695a      	ldr	r2, [r3, #20]
 8003b94:	2380      	movs	r3, #128	@ 0x80
 8003b96:	05db      	lsls	r3, r3, #23
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d00e      	beq.n	8003bba <HAL_FLASH_OB_Unlock+0x36>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc8 <HAL_FLASH_OB_Unlock+0x44>)
 8003b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8003bcc <HAL_FLASH_OB_Unlock+0x48>)
 8003ba0:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8003ba2:	4b09      	ldr	r3, [pc, #36]	@ (8003bc8 <HAL_FLASH_OB_Unlock+0x44>)
 8003ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd0 <HAL_FLASH_OB_Unlock+0x4c>)
 8003ba6:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 8003ba8:	4b07      	ldr	r3, [pc, #28]	@ (8003bc8 <HAL_FLASH_OB_Unlock+0x44>)
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	2380      	movs	r3, #128	@ 0x80
 8003bae:	05db      	lsls	r3, r3, #23
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d102      	bne.n	8003bba <HAL_FLASH_OB_Unlock+0x36>
    {
      status = HAL_OK;
 8003bb4:	1dfb      	adds	r3, r7, #7
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003bba:	1dfb      	adds	r3, r7, #7
 8003bbc:	781b      	ldrb	r3, [r3, #0]
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	40022000 	.word	0x40022000
 8003bcc:	08192a3b 	.word	0x08192a3b
 8003bd0:	4c5d6e7f 	.word	0x4c5d6e7f

08003bd4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8003bda:	1dfb      	adds	r3, r7, #7
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003be0:	23fa      	movs	r3, #250	@ 0xfa
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	0018      	movs	r0, r3
 8003be6:	f000 f819 	bl	8003c1c <FLASH_WaitForLastOperation>

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8003bea:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <HAL_FLASH_OB_Lock+0x44>)
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	4b0a      	ldr	r3, [pc, #40]	@ (8003c18 <HAL_FLASH_OB_Lock+0x44>)
 8003bf0:	2180      	movs	r1, #128	@ 0x80
 8003bf2:	05c9      	lsls	r1, r1, #23
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	615a      	str	r2, [r3, #20]

  /* verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 8003bf8:	4b07      	ldr	r3, [pc, #28]	@ (8003c18 <HAL_FLASH_OB_Lock+0x44>)
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	2380      	movs	r3, #128	@ 0x80
 8003bfe:	05db      	lsls	r3, r3, #23
 8003c00:	4013      	ands	r3, r2
 8003c02:	d002      	beq.n	8003c0a <HAL_FLASH_OB_Lock+0x36>
  {
    status = HAL_OK;
 8003c04:	1dfb      	adds	r3, r7, #7
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003c0a:	1dfb      	adds	r3, r7, #7
 8003c0c:	781b      	ldrb	r3, [r3, #0]
}
 8003c0e:	0018      	movs	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b002      	add	sp, #8
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	40022000 	.word	0x40022000

08003c1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8003c24:	f7fe ff9a 	bl	8002b5c <HAL_GetTick>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8003c2c:	2380      	movs	r3, #128	@ 0x80
 8003c2e:	025b      	lsls	r3, r3, #9
 8003c30:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8003c32:	e00c      	b.n	8003c4e <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3301      	adds	r3, #1
 8003c38:	d009      	beq.n	8003c4e <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8003c3a:	f7fe ff8f 	bl	8002b5c <HAL_GetTick>
 8003c3e:	0002      	movs	r2, r0
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d801      	bhi.n	8003c4e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e028      	b.n	8003ca0 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8003c4e:	4b16      	ldr	r3, [pc, #88]	@ (8003ca8 <FLASH_WaitForLastOperation+0x8c>)
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	4013      	ands	r3, r2
 8003c56:	d1ed      	bne.n	8003c34 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8003c58:	4b13      	ldr	r3, [pc, #76]	@ (8003ca8 <FLASH_WaitForLastOperation+0x8c>)
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	4a13      	ldr	r2, [pc, #76]	@ (8003cac <FLASH_WaitForLastOperation+0x90>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8003c62:	4b11      	ldr	r3, [pc, #68]	@ (8003ca8 <FLASH_WaitForLastOperation+0x8c>)
 8003c64:	4a12      	ldr	r2, [pc, #72]	@ (8003cb0 <FLASH_WaitForLastOperation+0x94>)
 8003c66:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d011      	beq.n	8003c92 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8003c6e:	4b11      	ldr	r3, [pc, #68]	@ (8003cb4 <FLASH_WaitForLastOperation+0x98>)
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e013      	b.n	8003ca0 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	d009      	beq.n	8003c92 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8003c7e:	f7fe ff6d 	bl	8002b5c <HAL_GetTick>
 8003c82:	0002      	movs	r2, r0
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d801      	bhi.n	8003c92 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e006      	b.n	8003ca0 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8003c92:	4b05      	ldr	r3, [pc, #20]	@ (8003ca8 <FLASH_WaitForLastOperation+0x8c>)
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	2380      	movs	r3, #128	@ 0x80
 8003c98:	02db      	lsls	r3, r3, #11
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d1ec      	bne.n	8003c78 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b004      	add	sp, #16
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40022000 	.word	0x40022000
 8003cac:	000083fa 	.word	0x000083fa
 8003cb0:	000083fb 	.word	0x000083fb
 8003cb4:	20001160 	.word	0x20001160

08003cb8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003cb8:	b5b0      	push	{r4, r5, r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	603a      	str	r2, [r7, #0]
 8003cc2:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <FLASH_Program_DoubleWord+0x3c>)
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf4 <FLASH_Program_DoubleWord+0x3c>)
 8003cca:	2101      	movs	r1, #1
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003cd6:	f3bf 8f6f 	isb	sy
}
 8003cda:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	001c      	movs	r4, r3
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	001d      	movs	r5, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	0022      	movs	r2, r4
 8003cea:	601a      	str	r2, [r3, #0]
}
 8003cec:	46c0      	nop			@ (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b004      	add	sp, #16
 8003cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8003cf4:	40022000 	.word	0x40022000

08003cf8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003cf8:	b5b0      	push	{r4, r5, r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d02:	4b35      	ldr	r3, [pc, #212]	@ (8003dd8 <HAL_FLASHEx_Erase+0xe0>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_FLASHEx_Erase+0x16>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e05f      	b.n	8003dce <HAL_FLASHEx_Erase+0xd6>
 8003d0e:	4b32      	ldr	r3, [pc, #200]	@ (8003dd8 <HAL_FLASHEx_Erase+0xe0>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d14:	4b30      	ldr	r3, [pc, #192]	@ (8003dd8 <HAL_FLASHEx_Erase+0xe0>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d1a:	250f      	movs	r5, #15
 8003d1c:	197c      	adds	r4, r7, r5
 8003d1e:	23fa      	movs	r3, #250	@ 0xfa
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	0018      	movs	r0, r3
 8003d24:	f7ff ff7a 	bl	8003c1c <FLASH_WaitForLastOperation>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003d2c:	002c      	movs	r4, r5
 8003d2e:	193b      	adds	r3, r7, r4
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d145      	bne.n	8003dc2 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2204      	movs	r2, #4
 8003d3a:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d10d      	bne.n	8003d60 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f000 f849 	bl	8003de0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d4e:	193c      	adds	r4, r7, r4
 8003d50:	23fa      	movs	r3, #250	@ 0xfa
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7ff ff61 	bl	8003c1c <FLASH_WaitForLastOperation>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	7023      	strb	r3, [r4, #0]
 8003d5e:	e030      	b.n	8003dc2 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2201      	movs	r2, #1
 8003d64:	4252      	negs	r2, r2
 8003d66:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	e01a      	b.n	8003da6 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	0011      	movs	r1, r2
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f000 f845 	bl	8003e08 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d7e:	250f      	movs	r5, #15
 8003d80:	197c      	adds	r4, r7, r5
 8003d82:	23fa      	movs	r3, #250	@ 0xfa
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7ff ff48 	bl	8003c1c <FLASH_WaitForLastOperation>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8003d90:	197b      	adds	r3, r7, r5
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	601a      	str	r2, [r3, #0]
          break;
 8003d9e:	e00a      	b.n	8003db6 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	3301      	adds	r3, #1
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	18d3      	adds	r3, r2, r3
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d3dc      	bcc.n	8003d70 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003db6:	4b09      	ldr	r3, [pc, #36]	@ (8003ddc <HAL_FLASHEx_Erase+0xe4>)
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	4b08      	ldr	r3, [pc, #32]	@ (8003ddc <HAL_FLASHEx_Erase+0xe4>)
 8003dbc:	2102      	movs	r1, #2
 8003dbe:	438a      	bics	r2, r1
 8003dc0:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003dc2:	4b05      	ldr	r3, [pc, #20]	@ (8003dd8 <HAL_FLASHEx_Erase+0xe0>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003dc8:	230f      	movs	r3, #15
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b004      	add	sp, #16
 8003dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8003dd6:	46c0      	nop			@ (mov r8, r8)
 8003dd8:	20001160 	.word	0x20001160
 8003ddc:	40022000 	.word	0x40022000

08003de0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <FLASH_MassErase+0x24>)
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	4b04      	ldr	r3, [pc, #16]	@ (8003e04 <FLASH_MassErase+0x24>)
 8003df2:	2180      	movs	r1, #128	@ 0x80
 8003df4:	0249      	lsls	r1, r1, #9
 8003df6:	430a      	orrs	r2, r1
 8003df8:	615a      	str	r2, [r3, #20]
}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b002      	add	sp, #8
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	40022000 	.word	0x40022000

08003e08 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8003e12:	4b08      	ldr	r3, [pc, #32]	@ (8003e34 <FLASH_PageErase+0x2c>)
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	4a08      	ldr	r2, [pc, #32]	@ (8003e38 <FLASH_PageErase+0x30>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	00da      	lsls	r2, r3, #3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	4b03      	ldr	r3, [pc, #12]	@ (8003e34 <FLASH_PageErase+0x2c>)
 8003e26:	4905      	ldr	r1, [pc, #20]	@ (8003e3c <FLASH_PageErase+0x34>)
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	615a      	str	r2, [r3, #20]
}
 8003e2c:	46c0      	nop			@ (mov r8, r8)
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	b004      	add	sp, #16
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40022000 	.word	0x40022000
 8003e38:	ffffe007 	.word	0xffffe007
 8003e3c:	00010002 	.word	0x00010002

08003e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e4e:	e147      	b.n	80040e0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2101      	movs	r1, #1
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4091      	lsls	r1, r2
 8003e5a:	000a      	movs	r2, r1
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d100      	bne.n	8003e68 <HAL_GPIO_Init+0x28>
 8003e66:	e138      	b.n	80040da <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d005      	beq.n	8003e80 <HAL_GPIO_Init+0x40>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2203      	movs	r2, #3
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d130      	bne.n	8003ee2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	409a      	lsls	r2, r3
 8003e8e:	0013      	movs	r3, r2
 8003e90:	43da      	mvns	r2, r3
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	0013      	movs	r3, r2
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	0013      	movs	r3, r2
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	2201      	movs	r2, #1
 8003ece:	401a      	ands	r2, r3
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	0013      	movs	r3, r2
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	d017      	beq.n	8003f1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	2203      	movs	r2, #3
 8003efa:	409a      	lsls	r2, r3
 8003efc:	0013      	movs	r3, r2
 8003efe:	43da      	mvns	r2, r3
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4013      	ands	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	0013      	movs	r3, r2
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2203      	movs	r2, #3
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d123      	bne.n	8003f72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	08da      	lsrs	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3208      	adds	r2, #8
 8003f32:	0092      	lsls	r2, r2, #2
 8003f34:	58d3      	ldr	r3, [r2, r3]
 8003f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2207      	movs	r2, #7
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	220f      	movs	r2, #15
 8003f42:	409a      	lsls	r2, r3
 8003f44:	0013      	movs	r3, r2
 8003f46:	43da      	mvns	r2, r3
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2107      	movs	r1, #7
 8003f56:	400b      	ands	r3, r1
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	0013      	movs	r3, r2
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	08da      	lsrs	r2, r3, #3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3208      	adds	r2, #8
 8003f6c:	0092      	lsls	r2, r2, #2
 8003f6e:	6939      	ldr	r1, [r7, #16]
 8003f70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	0013      	movs	r3, r2
 8003f82:	43da      	mvns	r2, r3
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4013      	ands	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2203      	movs	r2, #3
 8003f90:	401a      	ands	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	409a      	lsls	r2, r3
 8003f98:	0013      	movs	r3, r2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	23c0      	movs	r3, #192	@ 0xc0
 8003fac:	029b      	lsls	r3, r3, #10
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d100      	bne.n	8003fb4 <HAL_GPIO_Init+0x174>
 8003fb2:	e092      	b.n	80040da <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003fb4:	4a50      	ldr	r2, [pc, #320]	@ (80040f8 <HAL_GPIO_Init+0x2b8>)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	089b      	lsrs	r3, r3, #2
 8003fba:	3318      	adds	r3, #24
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	589b      	ldr	r3, [r3, r2]
 8003fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	220f      	movs	r2, #15
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	0013      	movs	r3, r2
 8003fd0:	43da      	mvns	r2, r3
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	23a0      	movs	r3, #160	@ 0xa0
 8003fdc:	05db      	lsls	r3, r3, #23
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d013      	beq.n	800400a <HAL_GPIO_Init+0x1ca>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a45      	ldr	r2, [pc, #276]	@ (80040fc <HAL_GPIO_Init+0x2bc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00d      	beq.n	8004006 <HAL_GPIO_Init+0x1c6>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a44      	ldr	r2, [pc, #272]	@ (8004100 <HAL_GPIO_Init+0x2c0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d007      	beq.n	8004002 <HAL_GPIO_Init+0x1c2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a43      	ldr	r2, [pc, #268]	@ (8004104 <HAL_GPIO_Init+0x2c4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d101      	bne.n	8003ffe <HAL_GPIO_Init+0x1be>
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e006      	b.n	800400c <HAL_GPIO_Init+0x1cc>
 8003ffe:	2305      	movs	r3, #5
 8004000:	e004      	b.n	800400c <HAL_GPIO_Init+0x1cc>
 8004002:	2302      	movs	r3, #2
 8004004:	e002      	b.n	800400c <HAL_GPIO_Init+0x1cc>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <HAL_GPIO_Init+0x1cc>
 800400a:	2300      	movs	r3, #0
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	2103      	movs	r1, #3
 8004010:	400a      	ands	r2, r1
 8004012:	00d2      	lsls	r2, r2, #3
 8004014:	4093      	lsls	r3, r2
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800401c:	4936      	ldr	r1, [pc, #216]	@ (80040f8 <HAL_GPIO_Init+0x2b8>)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	089b      	lsrs	r3, r3, #2
 8004022:	3318      	adds	r3, #24
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800402a:	4b33      	ldr	r3, [pc, #204]	@ (80040f8 <HAL_GPIO_Init+0x2b8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	43da      	mvns	r2, r3
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	4013      	ands	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	2380      	movs	r3, #128	@ 0x80
 8004040:	035b      	lsls	r3, r3, #13
 8004042:	4013      	ands	r3, r2
 8004044:	d003      	beq.n	800404e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800404e:	4b2a      	ldr	r3, [pc, #168]	@ (80040f8 <HAL_GPIO_Init+0x2b8>)
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004054:	4b28      	ldr	r3, [pc, #160]	@ (80040f8 <HAL_GPIO_Init+0x2b8>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	43da      	mvns	r2, r3
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4013      	ands	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	2380      	movs	r3, #128	@ 0x80
 800406a:	039b      	lsls	r3, r3, #14
 800406c:	4013      	ands	r3, r2
 800406e:	d003      	beq.n	8004078 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004078:	4b1f      	ldr	r3, [pc, #124]	@ (80040f8 <HAL_GPIO_Init+0x2b8>)
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800407e:	4a1e      	ldr	r2, [pc, #120]	@ (80040f8 <HAL_GPIO_Init+0x2b8>)
 8004080:	2384      	movs	r3, #132	@ 0x84
 8004082:	58d3      	ldr	r3, [r2, r3]
 8004084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	43da      	mvns	r2, r3
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4013      	ands	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	2380      	movs	r3, #128	@ 0x80
 8004096:	029b      	lsls	r3, r3, #10
 8004098:	4013      	ands	r3, r2
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040a4:	4914      	ldr	r1, [pc, #80]	@ (80040f8 <HAL_GPIO_Init+0x2b8>)
 80040a6:	2284      	movs	r2, #132	@ 0x84
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80040ac:	4a12      	ldr	r2, [pc, #72]	@ (80040f8 <HAL_GPIO_Init+0x2b8>)
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	58d3      	ldr	r3, [r2, r3]
 80040b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	43da      	mvns	r2, r3
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4013      	ands	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	2380      	movs	r3, #128	@ 0x80
 80040c4:	025b      	lsls	r3, r3, #9
 80040c6:	4013      	ands	r3, r2
 80040c8:	d003      	beq.n	80040d2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040d2:	4909      	ldr	r1, [pc, #36]	@ (80040f8 <HAL_GPIO_Init+0x2b8>)
 80040d4:	2280      	movs	r2, #128	@ 0x80
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	3301      	adds	r3, #1
 80040de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	40da      	lsrs	r2, r3
 80040e8:	1e13      	subs	r3, r2, #0
 80040ea:	d000      	beq.n	80040ee <HAL_GPIO_Init+0x2ae>
 80040ec:	e6b0      	b.n	8003e50 <HAL_GPIO_Init+0x10>
  }
}
 80040ee:	46c0      	nop			@ (mov r8, r8)
 80040f0:	46c0      	nop			@ (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b006      	add	sp, #24
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021800 	.word	0x40021800
 80040fc:	50000400 	.word	0x50000400
 8004100:	50000800 	.word	0x50000800
 8004104:	50000c00 	.word	0x50000c00

08004108 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004116:	e0b4      	b.n	8004282 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004118:	2201      	movs	r2, #1
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	409a      	lsls	r2, r3
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	4013      	ands	r3, r2
 8004122:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d100      	bne.n	800412c <HAL_GPIO_DeInit+0x24>
 800412a:	e0a7      	b.n	800427c <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 800412c:	4a5a      	ldr	r2, [pc, #360]	@ (8004298 <HAL_GPIO_DeInit+0x190>)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	089b      	lsrs	r3, r3, #2
 8004132:	3318      	adds	r3, #24
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	589b      	ldr	r3, [r3, r2]
 8004138:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2203      	movs	r2, #3
 800413e:	4013      	ands	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	220f      	movs	r2, #15
 8004144:	409a      	lsls	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4013      	ands	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	23a0      	movs	r3, #160	@ 0xa0
 8004150:	05db      	lsls	r3, r3, #23
 8004152:	429a      	cmp	r2, r3
 8004154:	d013      	beq.n	800417e <HAL_GPIO_DeInit+0x76>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a50      	ldr	r2, [pc, #320]	@ (800429c <HAL_GPIO_DeInit+0x194>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00d      	beq.n	800417a <HAL_GPIO_DeInit+0x72>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a4f      	ldr	r2, [pc, #316]	@ (80042a0 <HAL_GPIO_DeInit+0x198>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <HAL_GPIO_DeInit+0x6e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a4e      	ldr	r2, [pc, #312]	@ (80042a4 <HAL_GPIO_DeInit+0x19c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <HAL_GPIO_DeInit+0x6a>
 800416e:	2303      	movs	r3, #3
 8004170:	e006      	b.n	8004180 <HAL_GPIO_DeInit+0x78>
 8004172:	2305      	movs	r3, #5
 8004174:	e004      	b.n	8004180 <HAL_GPIO_DeInit+0x78>
 8004176:	2302      	movs	r3, #2
 8004178:	e002      	b.n	8004180 <HAL_GPIO_DeInit+0x78>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <HAL_GPIO_DeInit+0x78>
 800417e:	2300      	movs	r3, #0
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	2103      	movs	r1, #3
 8004184:	400a      	ands	r2, r1
 8004186:	00d2      	lsls	r2, r2, #3
 8004188:	4093      	lsls	r3, r2
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	429a      	cmp	r2, r3
 800418e:	d136      	bne.n	80041fe <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004190:	4a41      	ldr	r2, [pc, #260]	@ (8004298 <HAL_GPIO_DeInit+0x190>)
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	58d3      	ldr	r3, [r2, r3]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	43d2      	mvns	r2, r2
 800419a:	493f      	ldr	r1, [pc, #252]	@ (8004298 <HAL_GPIO_DeInit+0x190>)
 800419c:	4013      	ands	r3, r2
 800419e:	2280      	movs	r2, #128	@ 0x80
 80041a0:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80041a2:	4a3d      	ldr	r2, [pc, #244]	@ (8004298 <HAL_GPIO_DeInit+0x190>)
 80041a4:	2384      	movs	r3, #132	@ 0x84
 80041a6:	58d3      	ldr	r3, [r2, r3]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	43d2      	mvns	r2, r2
 80041ac:	493a      	ldr	r1, [pc, #232]	@ (8004298 <HAL_GPIO_DeInit+0x190>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	2284      	movs	r2, #132	@ 0x84
 80041b2:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80041b4:	4b38      	ldr	r3, [pc, #224]	@ (8004298 <HAL_GPIO_DeInit+0x190>)
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	43d9      	mvns	r1, r3
 80041bc:	4b36      	ldr	r3, [pc, #216]	@ (8004298 <HAL_GPIO_DeInit+0x190>)
 80041be:	400a      	ands	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80041c2:	4b35      	ldr	r3, [pc, #212]	@ (8004298 <HAL_GPIO_DeInit+0x190>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	43d9      	mvns	r1, r3
 80041ca:	4b33      	ldr	r3, [pc, #204]	@ (8004298 <HAL_GPIO_DeInit+0x190>)
 80041cc:	400a      	ands	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2203      	movs	r2, #3
 80041d4:	4013      	ands	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	220f      	movs	r2, #15
 80041da:	409a      	lsls	r2, r3
 80041dc:	0013      	movs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80041e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004298 <HAL_GPIO_DeInit+0x190>)
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	089b      	lsrs	r3, r3, #2
 80041e6:	3318      	adds	r3, #24
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	589a      	ldr	r2, [r3, r2]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	43d9      	mvns	r1, r3
 80041f0:	4829      	ldr	r0, [pc, #164]	@ (8004298 <HAL_GPIO_DeInit+0x190>)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	089b      	lsrs	r3, r3, #2
 80041f6:	400a      	ands	r2, r1
 80041f8:	3318      	adds	r3, #24
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	2103      	movs	r1, #3
 8004208:	4099      	lsls	r1, r3
 800420a:	000b      	movs	r3, r1
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	08da      	lsrs	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3208      	adds	r2, #8
 800421a:	0092      	lsls	r2, r2, #2
 800421c:	58d3      	ldr	r3, [r2, r3]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	2107      	movs	r1, #7
 8004222:	400a      	ands	r2, r1
 8004224:	0092      	lsls	r2, r2, #2
 8004226:	210f      	movs	r1, #15
 8004228:	4091      	lsls	r1, r2
 800422a:	000a      	movs	r2, r1
 800422c:	43d1      	mvns	r1, r2
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	08d2      	lsrs	r2, r2, #3
 8004232:	4019      	ands	r1, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3208      	adds	r2, #8
 8004238:	0092      	lsls	r2, r2, #2
 800423a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	0052      	lsls	r2, r2, #1
 8004244:	2103      	movs	r1, #3
 8004246:	4091      	lsls	r1, r2
 8004248:	000a      	movs	r2, r1
 800424a:	43d2      	mvns	r2, r2
 800424c:	401a      	ands	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2101      	movs	r1, #1
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4091      	lsls	r1, r2
 800425c:	000a      	movs	r2, r1
 800425e:	43d2      	mvns	r2, r2
 8004260:	401a      	ands	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	0052      	lsls	r2, r2, #1
 800426e:	2103      	movs	r1, #3
 8004270:	4091      	lsls	r1, r2
 8004272:	000a      	movs	r2, r1
 8004274:	43d2      	mvns	r2, r2
 8004276:	401a      	ands	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3301      	adds	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	40da      	lsrs	r2, r3
 8004288:	1e13      	subs	r3, r2, #0
 800428a:	d000      	beq.n	800428e <HAL_GPIO_DeInit+0x186>
 800428c:	e744      	b.n	8004118 <HAL_GPIO_DeInit+0x10>
  }
}
 800428e:	46c0      	nop			@ (mov r8, r8)
 8004290:	46c0      	nop			@ (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	b006      	add	sp, #24
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021800 	.word	0x40021800
 800429c:	50000400 	.word	0x50000400
 80042a0:	50000800 	.word	0x50000800
 80042a4:	50000c00 	.word	0x50000c00

080042a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	000a      	movs	r2, r1
 80042b2:	1cbb      	adds	r3, r7, #2
 80042b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	1cba      	adds	r2, r7, #2
 80042bc:	8812      	ldrh	r2, [r2, #0]
 80042be:	4013      	ands	r3, r2
 80042c0:	d004      	beq.n	80042cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80042c2:	230f      	movs	r3, #15
 80042c4:	18fb      	adds	r3, r7, r3
 80042c6:	2201      	movs	r2, #1
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	e003      	b.n	80042d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042cc:	230f      	movs	r3, #15
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	2200      	movs	r2, #0
 80042d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80042d4:	230f      	movs	r3, #15
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	781b      	ldrb	r3, [r3, #0]
}
 80042da:	0018      	movs	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	b004      	add	sp, #16
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	0008      	movs	r0, r1
 80042ec:	0011      	movs	r1, r2
 80042ee:	1cbb      	adds	r3, r7, #2
 80042f0:	1c02      	adds	r2, r0, #0
 80042f2:	801a      	strh	r2, [r3, #0]
 80042f4:	1c7b      	adds	r3, r7, #1
 80042f6:	1c0a      	adds	r2, r1, #0
 80042f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042fa:	1c7b      	adds	r3, r7, #1
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d004      	beq.n	800430c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004302:	1cbb      	adds	r3, r7, #2
 8004304:	881a      	ldrh	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800430a:	e003      	b.n	8004314 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800430c:	1cbb      	adds	r3, r7, #2
 800430e:	881a      	ldrh	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004314:	46c0      	nop			@ (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b002      	add	sp, #8
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e08f      	b.n	800444e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2241      	movs	r2, #65	@ 0x41
 8004332:	5c9b      	ldrb	r3, [r3, r2]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d107      	bne.n	800434a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2240      	movs	r2, #64	@ 0x40
 800433e:	2100      	movs	r1, #0
 8004340:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0018      	movs	r0, r3
 8004346:	f7fe f8d9 	bl	80024fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2241      	movs	r2, #65	@ 0x41
 800434e:	2124      	movs	r1, #36	@ 0x24
 8004350:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2101      	movs	r1, #1
 800435e:	438a      	bics	r2, r1
 8004360:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	493b      	ldr	r1, [pc, #236]	@ (8004458 <HAL_I2C_Init+0x13c>)
 800436c:	400a      	ands	r2, r1
 800436e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4938      	ldr	r1, [pc, #224]	@ (800445c <HAL_I2C_Init+0x140>)
 800437c:	400a      	ands	r2, r1
 800437e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d108      	bne.n	800439a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2180      	movs	r1, #128	@ 0x80
 8004392:	0209      	lsls	r1, r1, #8
 8004394:	430a      	orrs	r2, r1
 8004396:	609a      	str	r2, [r3, #8]
 8004398:	e007      	b.n	80043aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2184      	movs	r1, #132	@ 0x84
 80043a4:	0209      	lsls	r1, r1, #8
 80043a6:	430a      	orrs	r2, r1
 80043a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d109      	bne.n	80043c6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2180      	movs	r1, #128	@ 0x80
 80043be:	0109      	lsls	r1, r1, #4
 80043c0:	430a      	orrs	r2, r1
 80043c2:	605a      	str	r2, [r3, #4]
 80043c4:	e007      	b.n	80043d6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4923      	ldr	r1, [pc, #140]	@ (8004460 <HAL_I2C_Init+0x144>)
 80043d2:	400a      	ands	r2, r1
 80043d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4920      	ldr	r1, [pc, #128]	@ (8004464 <HAL_I2C_Init+0x148>)
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	491a      	ldr	r1, [pc, #104]	@ (800445c <HAL_I2C_Init+0x140>)
 80043f2:	400a      	ands	r2, r1
 80043f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	431a      	orrs	r2, r3
 8004400:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69d9      	ldr	r1, [r3, #28]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1a      	ldr	r2, [r3, #32]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2101      	movs	r1, #1
 800442c:	430a      	orrs	r2, r1
 800442e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2241      	movs	r2, #65	@ 0x41
 800443a:	2120      	movs	r1, #32
 800443c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2242      	movs	r2, #66	@ 0x42
 8004448:	2100      	movs	r1, #0
 800444a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	0018      	movs	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	b002      	add	sp, #8
 8004454:	bd80      	pop	{r7, pc}
 8004456:	46c0      	nop			@ (mov r8, r8)
 8004458:	f0ffffff 	.word	0xf0ffffff
 800445c:	ffff7fff 	.word	0xffff7fff
 8004460:	fffff7ff 	.word	0xfffff7ff
 8004464:	02008000 	.word	0x02008000

08004468 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e022      	b.n	80044c0 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2241      	movs	r2, #65	@ 0x41
 800447e:	2124      	movs	r1, #36	@ 0x24
 8004480:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2101      	movs	r1, #1
 800448e:	438a      	bics	r2, r1
 8004490:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0018      	movs	r0, r3
 8004496:	f7fe f893 	bl	80025c0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2241      	movs	r2, #65	@ 0x41
 80044a4:	2100      	movs	r1, #0
 80044a6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2242      	movs	r2, #66	@ 0x42
 80044b2:	2100      	movs	r1, #0
 80044b4:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2240      	movs	r2, #64	@ 0x40
 80044ba:	2100      	movs	r1, #0
 80044bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b002      	add	sp, #8
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044c8:	b590      	push	{r4, r7, lr}
 80044ca:	b089      	sub	sp, #36	@ 0x24
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	0008      	movs	r0, r1
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	0019      	movs	r1, r3
 80044d6:	230a      	movs	r3, #10
 80044d8:	18fb      	adds	r3, r7, r3
 80044da:	1c02      	adds	r2, r0, #0
 80044dc:	801a      	strh	r2, [r3, #0]
 80044de:	2308      	movs	r3, #8
 80044e0:	18fb      	adds	r3, r7, r3
 80044e2:	1c0a      	adds	r2, r1, #0
 80044e4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2241      	movs	r2, #65	@ 0x41
 80044ea:	5c9b      	ldrb	r3, [r3, r2]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d000      	beq.n	80044f4 <HAL_I2C_Master_Transmit+0x2c>
 80044f2:	e10a      	b.n	800470a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2240      	movs	r2, #64	@ 0x40
 80044f8:	5c9b      	ldrb	r3, [r3, r2]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_I2C_Master_Transmit+0x3a>
 80044fe:	2302      	movs	r3, #2
 8004500:	e104      	b.n	800470c <HAL_I2C_Master_Transmit+0x244>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2240      	movs	r2, #64	@ 0x40
 8004506:	2101      	movs	r1, #1
 8004508:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800450a:	f7fe fb27 	bl	8002b5c <HAL_GetTick>
 800450e:	0003      	movs	r3, r0
 8004510:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	0219      	lsls	r1, r3, #8
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	2319      	movs	r3, #25
 800451e:	2201      	movs	r2, #1
 8004520:	f000 fa1a 	bl	8004958 <I2C_WaitOnFlagUntilTimeout>
 8004524:	1e03      	subs	r3, r0, #0
 8004526:	d001      	beq.n	800452c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0ef      	b.n	800470c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2241      	movs	r2, #65	@ 0x41
 8004530:	2121      	movs	r1, #33	@ 0x21
 8004532:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2242      	movs	r2, #66	@ 0x42
 8004538:	2110      	movs	r1, #16
 800453a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2208      	movs	r2, #8
 800454c:	18ba      	adds	r2, r7, r2
 800454e:	8812      	ldrh	r2, [r2, #0]
 8004550:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2bff      	cmp	r3, #255	@ 0xff
 8004560:	d906      	bls.n	8004570 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	22ff      	movs	r2, #255	@ 0xff
 8004566:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004568:	2380      	movs	r3, #128	@ 0x80
 800456a:	045b      	lsls	r3, r3, #17
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	e007      	b.n	8004580 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800457a:	2380      	movs	r3, #128	@ 0x80
 800457c:	049b      	lsls	r3, r3, #18
 800457e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004584:	2b00      	cmp	r3, #0
 8004586:	d027      	beq.n	80045d8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458c:	781a      	ldrb	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	3301      	adds	r3, #1
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	697c      	ldr	r4, [r7, #20]
 80045c4:	230a      	movs	r3, #10
 80045c6:	18fb      	adds	r3, r7, r3
 80045c8:	8819      	ldrh	r1, [r3, #0]
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	4b51      	ldr	r3, [pc, #324]	@ (8004714 <HAL_I2C_Master_Transmit+0x24c>)
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	0023      	movs	r3, r4
 80045d2:	f000 fb9b 	bl	8004d0c <I2C_TransferConfig>
 80045d6:	e06f      	b.n	80046b8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	697c      	ldr	r4, [r7, #20]
 80045e0:	230a      	movs	r3, #10
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	8819      	ldrh	r1, [r3, #0]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004714 <HAL_I2C_Master_Transmit+0x24c>)
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	0023      	movs	r3, r4
 80045ee:	f000 fb8d 	bl	8004d0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045f2:	e061      	b.n	80046b8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	0018      	movs	r0, r3
 80045fc:	f000 fa04 	bl	8004a08 <I2C_WaitOnTXISFlagUntilTimeout>
 8004600:	1e03      	subs	r3, r0, #0
 8004602:	d001      	beq.n	8004608 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e081      	b.n	800470c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d03a      	beq.n	80046b8 <HAL_I2C_Master_Transmit+0x1f0>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004646:	2b00      	cmp	r3, #0
 8004648:	d136      	bne.n	80046b8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800464a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	0013      	movs	r3, r2
 8004654:	2200      	movs	r2, #0
 8004656:	2180      	movs	r1, #128	@ 0x80
 8004658:	f000 f97e 	bl	8004958 <I2C_WaitOnFlagUntilTimeout>
 800465c:	1e03      	subs	r3, r0, #0
 800465e:	d001      	beq.n	8004664 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e053      	b.n	800470c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2bff      	cmp	r3, #255	@ 0xff
 800466c:	d911      	bls.n	8004692 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	22ff      	movs	r2, #255	@ 0xff
 8004672:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004678:	b2da      	uxtb	r2, r3
 800467a:	2380      	movs	r3, #128	@ 0x80
 800467c:	045c      	lsls	r4, r3, #17
 800467e:	230a      	movs	r3, #10
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	8819      	ldrh	r1, [r3, #0]
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	2300      	movs	r3, #0
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	0023      	movs	r3, r4
 800468c:	f000 fb3e 	bl	8004d0c <I2C_TransferConfig>
 8004690:	e012      	b.n	80046b8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	2380      	movs	r3, #128	@ 0x80
 80046a4:	049c      	lsls	r4, r3, #18
 80046a6:	230a      	movs	r3, #10
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	8819      	ldrh	r1, [r3, #0]
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	2300      	movs	r3, #0
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	0023      	movs	r3, r4
 80046b4:	f000 fb2a 	bl	8004d0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d198      	bne.n	80045f4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f000 f9e3 	bl	8004a94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046ce:	1e03      	subs	r3, r0, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e01a      	b.n	800470c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2220      	movs	r2, #32
 80046dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	490b      	ldr	r1, [pc, #44]	@ (8004718 <HAL_I2C_Master_Transmit+0x250>)
 80046ea:	400a      	ands	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2241      	movs	r2, #65	@ 0x41
 80046f2:	2120      	movs	r1, #32
 80046f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2242      	movs	r2, #66	@ 0x42
 80046fa:	2100      	movs	r1, #0
 80046fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2240      	movs	r2, #64	@ 0x40
 8004702:	2100      	movs	r1, #0
 8004704:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	e000      	b.n	800470c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800470a:	2302      	movs	r3, #2
  }
}
 800470c:	0018      	movs	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	b007      	add	sp, #28
 8004712:	bd90      	pop	{r4, r7, pc}
 8004714:	80002000 	.word	0x80002000
 8004718:	fe00e800 	.word	0xfe00e800

0800471c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08a      	sub	sp, #40	@ 0x28
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	230a      	movs	r3, #10
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	1c0a      	adds	r2, r1, #0
 800472e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2241      	movs	r2, #65	@ 0x41
 8004738:	5c9b      	ldrb	r3, [r3, r2]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b20      	cmp	r3, #32
 800473e:	d000      	beq.n	8004742 <HAL_I2C_IsDeviceReady+0x26>
 8004740:	e0df      	b.n	8004902 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699a      	ldr	r2, [r3, #24]
 8004748:	2380      	movs	r3, #128	@ 0x80
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	401a      	ands	r2, r3
 800474e:	2380      	movs	r3, #128	@ 0x80
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	429a      	cmp	r2, r3
 8004754:	d101      	bne.n	800475a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8004756:	2302      	movs	r3, #2
 8004758:	e0d4      	b.n	8004904 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2240      	movs	r2, #64	@ 0x40
 800475e:	5c9b      	ldrb	r3, [r3, r2]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_I2C_IsDeviceReady+0x4c>
 8004764:	2302      	movs	r3, #2
 8004766:	e0cd      	b.n	8004904 <HAL_I2C_IsDeviceReady+0x1e8>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2240      	movs	r2, #64	@ 0x40
 800476c:	2101      	movs	r1, #1
 800476e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2241      	movs	r2, #65	@ 0x41
 8004774:	2124      	movs	r1, #36	@ 0x24
 8004776:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d107      	bne.n	8004796 <HAL_I2C_IsDeviceReady+0x7a>
 8004786:	230a      	movs	r3, #10
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	059b      	lsls	r3, r3, #22
 800478e:	0d9b      	lsrs	r3, r3, #22
 8004790:	4a5e      	ldr	r2, [pc, #376]	@ (800490c <HAL_I2C_IsDeviceReady+0x1f0>)
 8004792:	431a      	orrs	r2, r3
 8004794:	e006      	b.n	80047a4 <HAL_I2C_IsDeviceReady+0x88>
 8004796:	230a      	movs	r3, #10
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	059b      	lsls	r3, r3, #22
 800479e:	0d9b      	lsrs	r3, r3, #22
 80047a0:	4a5b      	ldr	r2, [pc, #364]	@ (8004910 <HAL_I2C_IsDeviceReady+0x1f4>)
 80047a2:	431a      	orrs	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80047aa:	f7fe f9d7 	bl	8002b5c <HAL_GetTick>
 80047ae:	0003      	movs	r3, r0
 80047b0:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	2220      	movs	r2, #32
 80047ba:	4013      	ands	r3, r2
 80047bc:	3b20      	subs	r3, #32
 80047be:	425a      	negs	r2, r3
 80047c0:	4153      	adcs	r3, r2
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	231f      	movs	r3, #31
 80047c6:	18fb      	adds	r3, r7, r3
 80047c8:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	2210      	movs	r2, #16
 80047d2:	4013      	ands	r3, r2
 80047d4:	3b10      	subs	r3, #16
 80047d6:	425a      	negs	r2, r3
 80047d8:	4153      	adcs	r3, r2
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	231e      	movs	r3, #30
 80047de:	18fb      	adds	r3, r7, r3
 80047e0:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80047e2:	e035      	b.n	8004850 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	3301      	adds	r3, #1
 80047e8:	d01a      	beq.n	8004820 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047ea:	f7fe f9b7 	bl	8002b5c <HAL_GetTick>
 80047ee:	0002      	movs	r2, r0
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d302      	bcc.n	8004800 <HAL_I2C_IsDeviceReady+0xe4>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10f      	bne.n	8004820 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2241      	movs	r2, #65	@ 0x41
 8004804:	2120      	movs	r1, #32
 8004806:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480c:	2220      	movs	r2, #32
 800480e:	431a      	orrs	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2240      	movs	r2, #64	@ 0x40
 8004818:	2100      	movs	r1, #0
 800481a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e071      	b.n	8004904 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	2220      	movs	r2, #32
 8004828:	4013      	ands	r3, r2
 800482a:	3b20      	subs	r3, #32
 800482c:	425a      	negs	r2, r3
 800482e:	4153      	adcs	r3, r2
 8004830:	b2da      	uxtb	r2, r3
 8004832:	231f      	movs	r3, #31
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	2210      	movs	r2, #16
 8004840:	4013      	ands	r3, r2
 8004842:	3b10      	subs	r3, #16
 8004844:	425a      	negs	r2, r3
 8004846:	4153      	adcs	r3, r2
 8004848:	b2da      	uxtb	r2, r3
 800484a:	231e      	movs	r3, #30
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004850:	231f      	movs	r3, #31
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d104      	bne.n	8004864 <HAL_I2C_IsDeviceReady+0x148>
 800485a:	231e      	movs	r3, #30
 800485c:	18fb      	adds	r3, r7, r3
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0bf      	beq.n	80047e4 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2210      	movs	r2, #16
 800486c:	4013      	ands	r3, r2
 800486e:	2b10      	cmp	r3, #16
 8004870:	d01a      	beq.n	80048a8 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	0013      	movs	r3, r2
 800487c:	2200      	movs	r2, #0
 800487e:	2120      	movs	r1, #32
 8004880:	f000 f86a 	bl	8004958 <I2C_WaitOnFlagUntilTimeout>
 8004884:	1e03      	subs	r3, r0, #0
 8004886:	d001      	beq.n	800488c <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e03b      	b.n	8004904 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2220      	movs	r2, #32
 8004892:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2241      	movs	r2, #65	@ 0x41
 8004898:	2120      	movs	r1, #32
 800489a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2240      	movs	r2, #64	@ 0x40
 80048a0:	2100      	movs	r1, #0
 80048a2:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e02d      	b.n	8004904 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	0013      	movs	r3, r2
 80048b2:	2200      	movs	r2, #0
 80048b4:	2120      	movs	r1, #32
 80048b6:	f000 f84f 	bl	8004958 <I2C_WaitOnFlagUntilTimeout>
 80048ba:	1e03      	subs	r3, r0, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e020      	b.n	8004904 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2210      	movs	r2, #16
 80048c8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2220      	movs	r2, #32
 80048d0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	3301      	adds	r3, #1
 80048d6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d900      	bls.n	80048e2 <HAL_I2C_IsDeviceReady+0x1c6>
 80048e0:	e74d      	b.n	800477e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2241      	movs	r2, #65	@ 0x41
 80048e6:	2120      	movs	r1, #32
 80048e8:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	2220      	movs	r2, #32
 80048f0:	431a      	orrs	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2240      	movs	r2, #64	@ 0x40
 80048fa:	2100      	movs	r1, #0
 80048fc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8004902:	2302      	movs	r3, #2
  }
}
 8004904:	0018      	movs	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	b008      	add	sp, #32
 800490a:	bd80      	pop	{r7, pc}
 800490c:	02002000 	.word	0x02002000
 8004910:	02002800 	.word	0x02002800

08004914 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2202      	movs	r2, #2
 8004924:	4013      	ands	r3, r2
 8004926:	2b02      	cmp	r3, #2
 8004928:	d103      	bne.n	8004932 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2200      	movs	r2, #0
 8004930:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	2201      	movs	r2, #1
 800493a:	4013      	ands	r3, r2
 800493c:	2b01      	cmp	r3, #1
 800493e:	d007      	beq.n	8004950 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2101      	movs	r1, #1
 800494c:	430a      	orrs	r2, r1
 800494e:	619a      	str	r2, [r3, #24]
  }
}
 8004950:	46c0      	nop			@ (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b002      	add	sp, #8
 8004956:	bd80      	pop	{r7, pc}

08004958 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	1dfb      	adds	r3, r7, #7
 8004966:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004968:	e03a      	b.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	6839      	ldr	r1, [r7, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	0018      	movs	r0, r3
 8004972:	f000 f8d3 	bl	8004b1c <I2C_IsErrorOccurred>
 8004976:	1e03      	subs	r3, r0, #0
 8004978:	d001      	beq.n	800497e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e040      	b.n	8004a00 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	3301      	adds	r3, #1
 8004982:	d02d      	beq.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004984:	f7fe f8ea 	bl	8002b5c <HAL_GetTick>
 8004988:	0002      	movs	r2, r0
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d302      	bcc.n	800499a <I2C_WaitOnFlagUntilTimeout+0x42>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d122      	bne.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	4013      	ands	r3, r2
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	425a      	negs	r2, r3
 80049aa:	4153      	adcs	r3, r2
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	001a      	movs	r2, r3
 80049b0:	1dfb      	adds	r3, r7, #7
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d113      	bne.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049bc:	2220      	movs	r2, #32
 80049be:	431a      	orrs	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2241      	movs	r2, #65	@ 0x41
 80049c8:	2120      	movs	r1, #32
 80049ca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2242      	movs	r2, #66	@ 0x42
 80049d0:	2100      	movs	r1, #0
 80049d2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2240      	movs	r2, #64	@ 0x40
 80049d8:	2100      	movs	r1, #0
 80049da:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e00f      	b.n	8004a00 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	4013      	ands	r3, r2
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	425a      	negs	r2, r3
 80049f0:	4153      	adcs	r3, r2
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	001a      	movs	r2, r3
 80049f6:	1dfb      	adds	r3, r7, #7
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d0b5      	beq.n	800496a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	0018      	movs	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b004      	add	sp, #16
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a14:	e032      	b.n	8004a7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f000 f87d 	bl	8004b1c <I2C_IsErrorOccurred>
 8004a22:	1e03      	subs	r3, r0, #0
 8004a24:	d001      	beq.n	8004a2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e030      	b.n	8004a8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	d025      	beq.n	8004a7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a30:	f7fe f894 	bl	8002b5c <HAL_GetTick>
 8004a34:	0002      	movs	r2, r0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d302      	bcc.n	8004a46 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d11a      	bne.n	8004a7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d013      	beq.n	8004a7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a58:	2220      	movs	r2, #32
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2241      	movs	r2, #65	@ 0x41
 8004a64:	2120      	movs	r1, #32
 8004a66:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2242      	movs	r2, #66	@ 0x42
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2240      	movs	r2, #64	@ 0x40
 8004a74:	2100      	movs	r1, #0
 8004a76:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e007      	b.n	8004a8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	2202      	movs	r2, #2
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d1c5      	bne.n	8004a16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b004      	add	sp, #16
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aa0:	e02f      	b.n	8004b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f000 f837 	bl	8004b1c <I2C_IsErrorOccurred>
 8004aae:	1e03      	subs	r3, r0, #0
 8004ab0:	d001      	beq.n	8004ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e02d      	b.n	8004b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab6:	f7fe f851 	bl	8002b5c <HAL_GetTick>
 8004aba:	0002      	movs	r2, r0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d302      	bcc.n	8004acc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d11a      	bne.n	8004b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d013      	beq.n	8004b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ade:	2220      	movs	r2, #32
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2241      	movs	r2, #65	@ 0x41
 8004aea:	2120      	movs	r1, #32
 8004aec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2242      	movs	r2, #66	@ 0x42
 8004af2:	2100      	movs	r1, #0
 8004af4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2240      	movs	r2, #64	@ 0x40
 8004afa:	2100      	movs	r1, #0
 8004afc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e007      	b.n	8004b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d1c8      	bne.n	8004aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b004      	add	sp, #16
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	@ 0x28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b28:	2327      	movs	r3, #39	@ 0x27
 8004b2a:	18fb      	adds	r3, r7, r3
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2210      	movs	r2, #16
 8004b44:	4013      	ands	r3, r2
 8004b46:	d100      	bne.n	8004b4a <I2C_IsErrorOccurred+0x2e>
 8004b48:	e079      	b.n	8004c3e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2210      	movs	r2, #16
 8004b50:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b52:	e057      	b.n	8004c04 <I2C_IsErrorOccurred+0xe8>
 8004b54:	2227      	movs	r2, #39	@ 0x27
 8004b56:	18bb      	adds	r3, r7, r2
 8004b58:	18ba      	adds	r2, r7, r2
 8004b5a:	7812      	ldrb	r2, [r2, #0]
 8004b5c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	3301      	adds	r3, #1
 8004b62:	d04f      	beq.n	8004c04 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b64:	f7fd fffa 	bl	8002b5c <HAL_GetTick>
 8004b68:	0002      	movs	r2, r0
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d302      	bcc.n	8004b7a <I2C_IsErrorOccurred+0x5e>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d144      	bne.n	8004c04 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	2380      	movs	r3, #128	@ 0x80
 8004b82:	01db      	lsls	r3, r3, #7
 8004b84:	4013      	ands	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b88:	2013      	movs	r0, #19
 8004b8a:	183b      	adds	r3, r7, r0
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	2142      	movs	r1, #66	@ 0x42
 8004b90:	5c52      	ldrb	r2, [r2, r1]
 8004b92:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	2380      	movs	r3, #128	@ 0x80
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	401a      	ands	r2, r3
 8004ba0:	2380      	movs	r3, #128	@ 0x80
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d126      	bne.n	8004bf6 <I2C_IsErrorOccurred+0xda>
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	2380      	movs	r3, #128	@ 0x80
 8004bac:	01db      	lsls	r3, r3, #7
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d021      	beq.n	8004bf6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004bb2:	183b      	adds	r3, r7, r0
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d01d      	beq.n	8004bf6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2180      	movs	r1, #128	@ 0x80
 8004bc6:	01c9      	lsls	r1, r1, #7
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004bcc:	f7fd ffc6 	bl	8002b5c <HAL_GetTick>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bd4:	e00f      	b.n	8004bf6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004bd6:	f7fd ffc1 	bl	8002b5c <HAL_GetTick>
 8004bda:	0002      	movs	r2, r0
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b19      	cmp	r3, #25
 8004be2:	d908      	bls.n	8004bf6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	2220      	movs	r2, #32
 8004be8:	4313      	orrs	r3, r2
 8004bea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004bec:	2327      	movs	r3, #39	@ 0x27
 8004bee:	18fb      	adds	r3, r7, r3
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	701a      	strb	r2, [r3, #0]

              break;
 8004bf4:	e006      	b.n	8004c04 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d1e8      	bne.n	8004bd6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d004      	beq.n	8004c1c <I2C_IsErrorOccurred+0x100>
 8004c12:	2327      	movs	r3, #39	@ 0x27
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d09b      	beq.n	8004b54 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c1c:	2327      	movs	r3, #39	@ 0x27
 8004c1e:	18fb      	adds	r3, r7, r3
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d103      	bne.n	8004c2e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	2204      	movs	r2, #4
 8004c32:	4313      	orrs	r3, r2
 8004c34:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c36:	2327      	movs	r3, #39	@ 0x27
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	2380      	movs	r3, #128	@ 0x80
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d00c      	beq.n	8004c6a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	2201      	movs	r2, #1
 8004c54:	4313      	orrs	r3, r2
 8004c56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2280      	movs	r2, #128	@ 0x80
 8004c5e:	0052      	lsls	r2, r2, #1
 8004c60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c62:	2327      	movs	r3, #39	@ 0x27
 8004c64:	18fb      	adds	r3, r7, r3
 8004c66:	2201      	movs	r2, #1
 8004c68:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	2380      	movs	r3, #128	@ 0x80
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4013      	ands	r3, r2
 8004c72:	d00c      	beq.n	8004c8e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	2208      	movs	r2, #8
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2280      	movs	r2, #128	@ 0x80
 8004c82:	00d2      	lsls	r2, r2, #3
 8004c84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c86:	2327      	movs	r3, #39	@ 0x27
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	2380      	movs	r3, #128	@ 0x80
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4013      	ands	r3, r2
 8004c96:	d00c      	beq.n	8004cb2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2280      	movs	r2, #128	@ 0x80
 8004ca6:	0092      	lsls	r2, r2, #2
 8004ca8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004caa:	2327      	movs	r3, #39	@ 0x27
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	2201      	movs	r2, #1
 8004cb0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004cb2:	2327      	movs	r3, #39	@ 0x27
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01d      	beq.n	8004cf8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f7ff fe28 	bl	8004914 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	490e      	ldr	r1, [pc, #56]	@ (8004d08 <I2C_IsErrorOccurred+0x1ec>)
 8004cd0:	400a      	ands	r2, r1
 8004cd2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2241      	movs	r2, #65	@ 0x41
 8004ce4:	2120      	movs	r1, #32
 8004ce6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2242      	movs	r2, #66	@ 0x42
 8004cec:	2100      	movs	r1, #0
 8004cee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2240      	movs	r2, #64	@ 0x40
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004cf8:	2327      	movs	r3, #39	@ 0x27
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	781b      	ldrb	r3, [r3, #0]
}
 8004cfe:	0018      	movs	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b00a      	add	sp, #40	@ 0x28
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	46c0      	nop			@ (mov r8, r8)
 8004d08:	fe00e800 	.word	0xfe00e800

08004d0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	0008      	movs	r0, r1
 8004d16:	0011      	movs	r1, r2
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	240a      	movs	r4, #10
 8004d1c:	193b      	adds	r3, r7, r4
 8004d1e:	1c02      	adds	r2, r0, #0
 8004d20:	801a      	strh	r2, [r3, #0]
 8004d22:	2009      	movs	r0, #9
 8004d24:	183b      	adds	r3, r7, r0
 8004d26:	1c0a      	adds	r2, r1, #0
 8004d28:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d2a:	193b      	adds	r3, r7, r4
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	059b      	lsls	r3, r3, #22
 8004d30:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d32:	183b      	adds	r3, r7, r0
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	0419      	lsls	r1, r3, #16
 8004d38:	23ff      	movs	r3, #255	@ 0xff
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d3e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d46:	4313      	orrs	r3, r2
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	085b      	lsrs	r3, r3, #1
 8004d4c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d56:	0d51      	lsrs	r1, r2, #21
 8004d58:	2280      	movs	r2, #128	@ 0x80
 8004d5a:	00d2      	lsls	r2, r2, #3
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	4907      	ldr	r1, [pc, #28]	@ (8004d7c <I2C_TransferConfig+0x70>)
 8004d60:	430a      	orrs	r2, r1
 8004d62:	43d2      	mvns	r2, r2
 8004d64:	401a      	ands	r2, r3
 8004d66:	0011      	movs	r1, r2
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d72:	46c0      	nop			@ (mov r8, r8)
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b007      	add	sp, #28
 8004d78:	bd90      	pop	{r4, r7, pc}
 8004d7a:	46c0      	nop			@ (mov r8, r8)
 8004d7c:	03ff63ff 	.word	0x03ff63ff

08004d80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2241      	movs	r2, #65	@ 0x41
 8004d8e:	5c9b      	ldrb	r3, [r3, r2]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d138      	bne.n	8004e08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2240      	movs	r2, #64	@ 0x40
 8004d9a:	5c9b      	ldrb	r3, [r3, r2]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e032      	b.n	8004e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2240      	movs	r2, #64	@ 0x40
 8004da8:	2101      	movs	r1, #1
 8004daa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2241      	movs	r2, #65	@ 0x41
 8004db0:	2124      	movs	r1, #36	@ 0x24
 8004db2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	438a      	bics	r2, r1
 8004dc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4911      	ldr	r1, [pc, #68]	@ (8004e14 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004dd0:	400a      	ands	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6819      	ldr	r1, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2101      	movs	r1, #1
 8004df0:	430a      	orrs	r2, r1
 8004df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2241      	movs	r2, #65	@ 0x41
 8004df8:	2120      	movs	r1, #32
 8004dfa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2240      	movs	r2, #64	@ 0x40
 8004e00:	2100      	movs	r1, #0
 8004e02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	e000      	b.n	8004e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e08:	2302      	movs	r3, #2
  }
}
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b002      	add	sp, #8
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	ffffefff 	.word	0xffffefff

08004e18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2241      	movs	r2, #65	@ 0x41
 8004e26:	5c9b      	ldrb	r3, [r3, r2]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d139      	bne.n	8004ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2240      	movs	r2, #64	@ 0x40
 8004e32:	5c9b      	ldrb	r3, [r3, r2]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e033      	b.n	8004ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2240      	movs	r2, #64	@ 0x40
 8004e40:	2101      	movs	r1, #1
 8004e42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2241      	movs	r2, #65	@ 0x41
 8004e48:	2124      	movs	r1, #36	@ 0x24
 8004e4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2101      	movs	r1, #1
 8004e58:	438a      	bics	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4a11      	ldr	r2, [pc, #68]	@ (8004eac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2101      	movs	r1, #1
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2241      	movs	r2, #65	@ 0x41
 8004e92:	2120      	movs	r1, #32
 8004e94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2240      	movs	r2, #64	@ 0x40
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e000      	b.n	8004ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
  }
}
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	b004      	add	sp, #16
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	fffff0ff 	.word	0xfffff0ff

08004eb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004eb8:	4b19      	ldr	r3, [pc, #100]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a19      	ldr	r2, [pc, #100]	@ (8004f24 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	0019      	movs	r1, r3
 8004ec2:	4b17      	ldr	r3, [pc, #92]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	2380      	movs	r3, #128	@ 0x80
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d11f      	bne.n	8004f14 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004ed4:	4b14      	ldr	r3, [pc, #80]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	0013      	movs	r3, r2
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	189b      	adds	r3, r3, r2
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	4912      	ldr	r1, [pc, #72]	@ (8004f2c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f7fb f916 	bl	8000114 <__udivsi3>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	3301      	adds	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eee:	e008      	b.n	8004f02 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	e001      	b.n	8004f02 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e009      	b.n	8004f16 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f02:	4b07      	ldr	r3, [pc, #28]	@ (8004f20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	2380      	movs	r3, #128	@ 0x80
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	401a      	ands	r2, r3
 8004f0c:	2380      	movs	r3, #128	@ 0x80
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d0ed      	beq.n	8004ef0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	0018      	movs	r0, r3
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	b004      	add	sp, #16
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	46c0      	nop			@ (mov r8, r8)
 8004f20:	40007000 	.word	0x40007000
 8004f24:	fffff9ff 	.word	0xfffff9ff
 8004f28:	20000018 	.word	0x20000018
 8004f2c:	000f4240 	.word	0x000f4240

08004f30 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004f34:	4b03      	ldr	r3, [pc, #12]	@ (8004f44 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	23e0      	movs	r3, #224	@ 0xe0
 8004f3a:	01db      	lsls	r3, r3, #7
 8004f3c:	4013      	ands	r3, r2
}
 8004f3e:	0018      	movs	r0, r3
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40021000 	.word	0x40021000

08004f48 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f4e:	f7fd fe05 	bl	8002b5c <HAL_GetTick>
 8004f52:	0003      	movs	r3, r0
 8004f54:	607b      	str	r3, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004f56:	4b35      	ldr	r3, [pc, #212]	@ (800502c <HAL_RCC_DeInit+0xe4>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4b34      	ldr	r3, [pc, #208]	@ (800502c <HAL_RCC_DeInit+0xe4>)
 8004f5c:	2180      	movs	r1, #128	@ 0x80
 8004f5e:	0049      	lsls	r1, r1, #1
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_DeInit+0x30>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f66:	f7fd fdf9 	bl	8002b5c <HAL_GetTick>
 8004f6a:	0002      	movs	r2, r0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e054      	b.n	8005022 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f78:	4b2c      	ldr	r3, [pc, #176]	@ (800502c <HAL_RCC_DeInit+0xe4>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	2380      	movs	r3, #128	@ 0x80
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4013      	ands	r3, r2
 8004f82:	d0f0      	beq.n	8004f66 <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 8004f84:	4b29      	ldr	r3, [pc, #164]	@ (800502c <HAL_RCC_DeInit+0xe4>)
 8004f86:	2280      	movs	r2, #128	@ 0x80
 8004f88:	01d2      	lsls	r2, r2, #7
 8004f8a:	605a      	str	r2, [r3, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f8c:	f7fd fde6 	bl	8002b5c <HAL_GetTick>
 8004f90:	0003      	movs	r3, r0
 8004f92:	607b      	str	r3, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000000u;
 8004f94:	4b25      	ldr	r3, [pc, #148]	@ (800502c <HAL_RCC_DeInit+0xe4>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8004f9a:	e009      	b.n	8004fb0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9c:	f7fd fdde 	bl	8002b5c <HAL_GetTick>
 8004fa0:	0002      	movs	r2, r0
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	4a22      	ldr	r2, [pc, #136]	@ (8005030 <HAL_RCC_DeInit+0xe8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e038      	b.n	8005022 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8004fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800502c <HAL_RCC_DeInit+0xe4>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2238      	movs	r2, #56	@ 0x38
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d1f0      	bne.n	8004f9c <HAL_RCC_DeInit+0x54>
    }
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8004fba:	4b1c      	ldr	r3, [pc, #112]	@ (800502c <HAL_RCC_DeInit+0xe4>)
 8004fbc:	2280      	movs	r2, #128	@ 0x80
 8004fbe:	0052      	lsls	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8004fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800502c <HAL_RCC_DeInit+0xe4>)
 8004fc4:	2280      	movs	r2, #128	@ 0x80
 8004fc6:	0052      	lsls	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fca:	f7fd fdc7 	bl	8002b5c <HAL_GetTick>
 8004fce:	0003      	movs	r3, r0
 8004fd0:	607b      	str	r3, [r7, #4]

  /* Wait till PLL is ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_DeInit+0x9e>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fd fdc2 	bl	8002b5c <HAL_GetTick>
 8004fd8:	0002      	movs	r2, r0
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_DeInit+0x9e>
    {
      return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e01d      	b.n	8005022 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe6:	4b11      	ldr	r3, [pc, #68]	@ (800502c <HAL_RCC_DeInit+0xe4>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	2380      	movs	r3, #128	@ 0x80
 8004fec:	049b      	lsls	r3, r3, #18
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_DeInit+0x8c>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800502c <HAL_RCC_DeInit+0xe4>)
 8004ff4:	2280      	movs	r2, #128	@ 0x80
 8004ff6:	0152      	lsls	r2, r2, #5
 8004ff8:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000u;
 8004ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800502c <HAL_RCC_DeInit+0xe4>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	619a      	str	r2, [r3, #24]

  /* Clear all flags */
  RCC->CICR = 0xFFFFFFFFu;
 8005000:	4b0a      	ldr	r3, [pc, #40]	@ (800502c <HAL_RCC_DeInit+0xe4>)
 8005002:	2201      	movs	r2, #1
 8005004:	4252      	negs	r2, r2
 8005006:	621a      	str	r2, [r3, #32]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8005008:	4b0a      	ldr	r3, [pc, #40]	@ (8005034 <HAL_RCC_DeInit+0xec>)
 800500a:	4a0b      	ldr	r2, [pc, #44]	@ (8005038 <HAL_RCC_DeInit+0xf0>)
 800500c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800500e:	4b0b      	ldr	r3, [pc, #44]	@ (800503c <HAL_RCC_DeInit+0xf4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	0018      	movs	r0, r3
 8005014:	f7fd fd46 	bl	8002aa4 <HAL_InitTick>
 8005018:	1e03      	subs	r3, r0, #0
 800501a:	d001      	beq.n	8005020 <HAL_RCC_DeInit+0xd8>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <HAL_RCC_DeInit+0xda>
  }
  else
  {
    return HAL_OK;
 8005020:	2300      	movs	r3, #0
  }
}
 8005022:	0018      	movs	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	b002      	add	sp, #8
 8005028:	bd80      	pop	{r7, pc}
 800502a:	46c0      	nop			@ (mov r8, r8)
 800502c:	40021000 	.word	0x40021000
 8005030:	00001388 	.word	0x00001388
 8005034:	20000018 	.word	0x20000018
 8005038:	00f42400 	.word	0x00f42400
 800503c:	2000001c 	.word	0x2000001c

08005040 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e2f3      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2201      	movs	r2, #1
 8005058:	4013      	ands	r3, r2
 800505a:	d100      	bne.n	800505e <HAL_RCC_OscConfig+0x1e>
 800505c:	e07c      	b.n	8005158 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800505e:	4bc3      	ldr	r3, [pc, #780]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	2238      	movs	r2, #56	@ 0x38
 8005064:	4013      	ands	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005068:	4bc0      	ldr	r3, [pc, #768]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	2203      	movs	r2, #3
 800506e:	4013      	ands	r3, r2
 8005070:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2b10      	cmp	r3, #16
 8005076:	d102      	bne.n	800507e <HAL_RCC_OscConfig+0x3e>
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d002      	beq.n	8005084 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d10b      	bne.n	800509c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005084:	4bb9      	ldr	r3, [pc, #740]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	2380      	movs	r3, #128	@ 0x80
 800508a:	029b      	lsls	r3, r3, #10
 800508c:	4013      	ands	r3, r2
 800508e:	d062      	beq.n	8005156 <HAL_RCC_OscConfig+0x116>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d15e      	bne.n	8005156 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e2ce      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	2380      	movs	r3, #128	@ 0x80
 80050a2:	025b      	lsls	r3, r3, #9
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d107      	bne.n	80050b8 <HAL_RCC_OscConfig+0x78>
 80050a8:	4bb0      	ldr	r3, [pc, #704]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	4baf      	ldr	r3, [pc, #700]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80050ae:	2180      	movs	r1, #128	@ 0x80
 80050b0:	0249      	lsls	r1, r1, #9
 80050b2:	430a      	orrs	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e020      	b.n	80050fa <HAL_RCC_OscConfig+0xba>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	23a0      	movs	r3, #160	@ 0xa0
 80050be:	02db      	lsls	r3, r3, #11
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d10e      	bne.n	80050e2 <HAL_RCC_OscConfig+0xa2>
 80050c4:	4ba9      	ldr	r3, [pc, #676]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	4ba8      	ldr	r3, [pc, #672]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80050ca:	2180      	movs	r1, #128	@ 0x80
 80050cc:	02c9      	lsls	r1, r1, #11
 80050ce:	430a      	orrs	r2, r1
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	4ba6      	ldr	r3, [pc, #664]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4ba5      	ldr	r3, [pc, #660]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80050d8:	2180      	movs	r1, #128	@ 0x80
 80050da:	0249      	lsls	r1, r1, #9
 80050dc:	430a      	orrs	r2, r1
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	e00b      	b.n	80050fa <HAL_RCC_OscConfig+0xba>
 80050e2:	4ba2      	ldr	r3, [pc, #648]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4ba1      	ldr	r3, [pc, #644]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80050e8:	49a1      	ldr	r1, [pc, #644]	@ (8005370 <HAL_RCC_OscConfig+0x330>)
 80050ea:	400a      	ands	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	4b9f      	ldr	r3, [pc, #636]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b9e      	ldr	r3, [pc, #632]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80050f4:	499f      	ldr	r1, [pc, #636]	@ (8005374 <HAL_RCC_OscConfig+0x334>)
 80050f6:	400a      	ands	r2, r1
 80050f8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d014      	beq.n	800512c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005102:	f7fd fd2b 	bl	8002b5c <HAL_GetTick>
 8005106:	0003      	movs	r3, r0
 8005108:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800510c:	f7fd fd26 	bl	8002b5c <HAL_GetTick>
 8005110:	0002      	movs	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b64      	cmp	r3, #100	@ 0x64
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e28d      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800511e:	4b93      	ldr	r3, [pc, #588]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	2380      	movs	r3, #128	@ 0x80
 8005124:	029b      	lsls	r3, r3, #10
 8005126:	4013      	ands	r3, r2
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0xcc>
 800512a:	e015      	b.n	8005158 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512c:	f7fd fd16 	bl	8002b5c <HAL_GetTick>
 8005130:	0003      	movs	r3, r0
 8005132:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005136:	f7fd fd11 	bl	8002b5c <HAL_GetTick>
 800513a:	0002      	movs	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b64      	cmp	r3, #100	@ 0x64
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e278      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005148:	4b88      	ldr	r3, [pc, #544]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	2380      	movs	r3, #128	@ 0x80
 800514e:	029b      	lsls	r3, r3, #10
 8005150:	4013      	ands	r3, r2
 8005152:	d1f0      	bne.n	8005136 <HAL_RCC_OscConfig+0xf6>
 8005154:	e000      	b.n	8005158 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005156:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2202      	movs	r2, #2
 800515e:	4013      	ands	r3, r2
 8005160:	d100      	bne.n	8005164 <HAL_RCC_OscConfig+0x124>
 8005162:	e099      	b.n	8005298 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005164:	4b81      	ldr	r3, [pc, #516]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2238      	movs	r2, #56	@ 0x38
 800516a:	4013      	ands	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800516e:	4b7f      	ldr	r3, [pc, #508]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	2203      	movs	r2, #3
 8005174:	4013      	ands	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	2b10      	cmp	r3, #16
 800517c:	d102      	bne.n	8005184 <HAL_RCC_OscConfig+0x144>
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d002      	beq.n	800518a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d135      	bne.n	80051f6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800518a:	4b78      	ldr	r3, [pc, #480]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	2380      	movs	r3, #128	@ 0x80
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	4013      	ands	r3, r2
 8005194:	d005      	beq.n	80051a2 <HAL_RCC_OscConfig+0x162>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e24b      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a2:	4b72      	ldr	r3, [pc, #456]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	4a74      	ldr	r2, [pc, #464]	@ (8005378 <HAL_RCC_OscConfig+0x338>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	0019      	movs	r1, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	021a      	lsls	r2, r3, #8
 80051b2:	4b6e      	ldr	r3, [pc, #440]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80051b4:	430a      	orrs	r2, r1
 80051b6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d112      	bne.n	80051e4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80051be:	4b6b      	ldr	r3, [pc, #428]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a6e      	ldr	r2, [pc, #440]	@ (800537c <HAL_RCC_OscConfig+0x33c>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	0019      	movs	r1, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	4b67      	ldr	r3, [pc, #412]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80051ce:	430a      	orrs	r2, r1
 80051d0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80051d2:	4b66      	ldr	r3, [pc, #408]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	0adb      	lsrs	r3, r3, #11
 80051d8:	2207      	movs	r2, #7
 80051da:	4013      	ands	r3, r2
 80051dc:	4a68      	ldr	r2, [pc, #416]	@ (8005380 <HAL_RCC_OscConfig+0x340>)
 80051de:	40da      	lsrs	r2, r3
 80051e0:	4b68      	ldr	r3, [pc, #416]	@ (8005384 <HAL_RCC_OscConfig+0x344>)
 80051e2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80051e4:	4b68      	ldr	r3, [pc, #416]	@ (8005388 <HAL_RCC_OscConfig+0x348>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	0018      	movs	r0, r3
 80051ea:	f7fd fc5b 	bl	8002aa4 <HAL_InitTick>
 80051ee:	1e03      	subs	r3, r0, #0
 80051f0:	d051      	beq.n	8005296 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e221      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d030      	beq.n	8005260 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80051fe:	4b5b      	ldr	r3, [pc, #364]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a5e      	ldr	r2, [pc, #376]	@ (800537c <HAL_RCC_OscConfig+0x33c>)
 8005204:	4013      	ands	r3, r2
 8005206:	0019      	movs	r1, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	4b57      	ldr	r3, [pc, #348]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 800520e:	430a      	orrs	r2, r1
 8005210:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005212:	4b56      	ldr	r3, [pc, #344]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	4b55      	ldr	r3, [pc, #340]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 8005218:	2180      	movs	r1, #128	@ 0x80
 800521a:	0049      	lsls	r1, r1, #1
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005220:	f7fd fc9c 	bl	8002b5c <HAL_GetTick>
 8005224:	0003      	movs	r3, r0
 8005226:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800522a:	f7fd fc97 	bl	8002b5c <HAL_GetTick>
 800522e:	0002      	movs	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e1fe      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800523c:	4b4b      	ldr	r3, [pc, #300]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	2380      	movs	r3, #128	@ 0x80
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4013      	ands	r3, r2
 8005246:	d0f0      	beq.n	800522a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005248:	4b48      	ldr	r3, [pc, #288]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4a4a      	ldr	r2, [pc, #296]	@ (8005378 <HAL_RCC_OscConfig+0x338>)
 800524e:	4013      	ands	r3, r2
 8005250:	0019      	movs	r1, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	021a      	lsls	r2, r3, #8
 8005258:	4b44      	ldr	r3, [pc, #272]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	e01b      	b.n	8005298 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005260:	4b42      	ldr	r3, [pc, #264]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b41      	ldr	r3, [pc, #260]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 8005266:	4949      	ldr	r1, [pc, #292]	@ (800538c <HAL_RCC_OscConfig+0x34c>)
 8005268:	400a      	ands	r2, r1
 800526a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526c:	f7fd fc76 	bl	8002b5c <HAL_GetTick>
 8005270:	0003      	movs	r3, r0
 8005272:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005276:	f7fd fc71 	bl	8002b5c <HAL_GetTick>
 800527a:	0002      	movs	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e1d8      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005288:	4b38      	ldr	r3, [pc, #224]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	2380      	movs	r3, #128	@ 0x80
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	4013      	ands	r3, r2
 8005292:	d1f0      	bne.n	8005276 <HAL_RCC_OscConfig+0x236>
 8005294:	e000      	b.n	8005298 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005296:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2208      	movs	r2, #8
 800529e:	4013      	ands	r3, r2
 80052a0:	d047      	beq.n	8005332 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80052a2:	4b32      	ldr	r3, [pc, #200]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2238      	movs	r2, #56	@ 0x38
 80052a8:	4013      	ands	r3, r2
 80052aa:	2b18      	cmp	r3, #24
 80052ac:	d10a      	bne.n	80052c4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80052ae:	4b2f      	ldr	r3, [pc, #188]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80052b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052b2:	2202      	movs	r2, #2
 80052b4:	4013      	ands	r3, r2
 80052b6:	d03c      	beq.n	8005332 <HAL_RCC_OscConfig+0x2f2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d138      	bne.n	8005332 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e1ba      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d019      	beq.n	8005300 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80052cc:	4b27      	ldr	r3, [pc, #156]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80052ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80052d0:	4b26      	ldr	r3, [pc, #152]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80052d2:	2101      	movs	r1, #1
 80052d4:	430a      	orrs	r2, r1
 80052d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fd fc40 	bl	8002b5c <HAL_GetTick>
 80052dc:	0003      	movs	r3, r0
 80052de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e2:	f7fd fc3b 	bl	8002b5c <HAL_GetTick>
 80052e6:	0002      	movs	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e1a2      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052f4:	4b1d      	ldr	r3, [pc, #116]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 80052f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052f8:	2202      	movs	r2, #2
 80052fa:	4013      	ands	r3, r2
 80052fc:	d0f1      	beq.n	80052e2 <HAL_RCC_OscConfig+0x2a2>
 80052fe:	e018      	b.n	8005332 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005300:	4b1a      	ldr	r3, [pc, #104]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 8005302:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005304:	4b19      	ldr	r3, [pc, #100]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 8005306:	2101      	movs	r1, #1
 8005308:	438a      	bics	r2, r1
 800530a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fd fc26 	bl	8002b5c <HAL_GetTick>
 8005310:	0003      	movs	r3, r0
 8005312:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005316:	f7fd fc21 	bl	8002b5c <HAL_GetTick>
 800531a:	0002      	movs	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e188      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005328:	4b10      	ldr	r3, [pc, #64]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 800532a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800532c:	2202      	movs	r2, #2
 800532e:	4013      	ands	r3, r2
 8005330:	d1f1      	bne.n	8005316 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2204      	movs	r2, #4
 8005338:	4013      	ands	r3, r2
 800533a:	d100      	bne.n	800533e <HAL_RCC_OscConfig+0x2fe>
 800533c:	e0c6      	b.n	80054cc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800533e:	231f      	movs	r3, #31
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005346:	4b09      	ldr	r3, [pc, #36]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2238      	movs	r2, #56	@ 0x38
 800534c:	4013      	ands	r3, r2
 800534e:	2b20      	cmp	r3, #32
 8005350:	d11e      	bne.n	8005390 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005352:	4b06      	ldr	r3, [pc, #24]	@ (800536c <HAL_RCC_OscConfig+0x32c>)
 8005354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005356:	2202      	movs	r2, #2
 8005358:	4013      	ands	r3, r2
 800535a:	d100      	bne.n	800535e <HAL_RCC_OscConfig+0x31e>
 800535c:	e0b6      	b.n	80054cc <HAL_RCC_OscConfig+0x48c>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d000      	beq.n	8005368 <HAL_RCC_OscConfig+0x328>
 8005366:	e0b1      	b.n	80054cc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e166      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
 800536c:	40021000 	.word	0x40021000
 8005370:	fffeffff 	.word	0xfffeffff
 8005374:	fffbffff 	.word	0xfffbffff
 8005378:	ffff80ff 	.word	0xffff80ff
 800537c:	ffffc7ff 	.word	0xffffc7ff
 8005380:	00f42400 	.word	0x00f42400
 8005384:	20000018 	.word	0x20000018
 8005388:	2000001c 	.word	0x2000001c
 800538c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005390:	4bac      	ldr	r3, [pc, #688]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 8005392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005394:	2380      	movs	r3, #128	@ 0x80
 8005396:	055b      	lsls	r3, r3, #21
 8005398:	4013      	ands	r3, r2
 800539a:	d101      	bne.n	80053a0 <HAL_RCC_OscConfig+0x360>
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <HAL_RCC_OscConfig+0x362>
 80053a0:	2300      	movs	r3, #0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d011      	beq.n	80053ca <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80053a6:	4ba7      	ldr	r3, [pc, #668]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 80053a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053aa:	4ba6      	ldr	r3, [pc, #664]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 80053ac:	2180      	movs	r1, #128	@ 0x80
 80053ae:	0549      	lsls	r1, r1, #21
 80053b0:	430a      	orrs	r2, r1
 80053b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80053b4:	4ba3      	ldr	r3, [pc, #652]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 80053b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053b8:	2380      	movs	r3, #128	@ 0x80
 80053ba:	055b      	lsls	r3, r3, #21
 80053bc:	4013      	ands	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80053c2:	231f      	movs	r3, #31
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	2201      	movs	r2, #1
 80053c8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ca:	4b9f      	ldr	r3, [pc, #636]	@ (8005648 <HAL_RCC_OscConfig+0x608>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	2380      	movs	r3, #128	@ 0x80
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	4013      	ands	r3, r2
 80053d4:	d11a      	bne.n	800540c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053d6:	4b9c      	ldr	r3, [pc, #624]	@ (8005648 <HAL_RCC_OscConfig+0x608>)
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b9b      	ldr	r3, [pc, #620]	@ (8005648 <HAL_RCC_OscConfig+0x608>)
 80053dc:	2180      	movs	r1, #128	@ 0x80
 80053de:	0049      	lsls	r1, r1, #1
 80053e0:	430a      	orrs	r2, r1
 80053e2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80053e4:	f7fd fbba 	bl	8002b5c <HAL_GetTick>
 80053e8:	0003      	movs	r3, r0
 80053ea:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ee:	f7fd fbb5 	bl	8002b5c <HAL_GetTick>
 80053f2:	0002      	movs	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e11c      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005400:	4b91      	ldr	r3, [pc, #580]	@ (8005648 <HAL_RCC_OscConfig+0x608>)
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	2380      	movs	r3, #128	@ 0x80
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	4013      	ands	r3, r2
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d106      	bne.n	8005422 <HAL_RCC_OscConfig+0x3e2>
 8005414:	4b8b      	ldr	r3, [pc, #556]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 8005416:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005418:	4b8a      	ldr	r3, [pc, #552]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 800541a:	2101      	movs	r1, #1
 800541c:	430a      	orrs	r2, r1
 800541e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005420:	e01c      	b.n	800545c <HAL_RCC_OscConfig+0x41c>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2b05      	cmp	r3, #5
 8005428:	d10c      	bne.n	8005444 <HAL_RCC_OscConfig+0x404>
 800542a:	4b86      	ldr	r3, [pc, #536]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 800542c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800542e:	4b85      	ldr	r3, [pc, #532]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 8005430:	2104      	movs	r1, #4
 8005432:	430a      	orrs	r2, r1
 8005434:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005436:	4b83      	ldr	r3, [pc, #524]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 8005438:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800543a:	4b82      	ldr	r3, [pc, #520]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 800543c:	2101      	movs	r1, #1
 800543e:	430a      	orrs	r2, r1
 8005440:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005442:	e00b      	b.n	800545c <HAL_RCC_OscConfig+0x41c>
 8005444:	4b7f      	ldr	r3, [pc, #508]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 8005446:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005448:	4b7e      	ldr	r3, [pc, #504]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 800544a:	2101      	movs	r1, #1
 800544c:	438a      	bics	r2, r1
 800544e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005450:	4b7c      	ldr	r3, [pc, #496]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 8005452:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005454:	4b7b      	ldr	r3, [pc, #492]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 8005456:	2104      	movs	r1, #4
 8005458:	438a      	bics	r2, r1
 800545a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d014      	beq.n	800548e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fd fb7a 	bl	8002b5c <HAL_GetTick>
 8005468:	0003      	movs	r3, r0
 800546a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800546c:	e009      	b.n	8005482 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546e:	f7fd fb75 	bl	8002b5c <HAL_GetTick>
 8005472:	0002      	movs	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	4a74      	ldr	r2, [pc, #464]	@ (800564c <HAL_RCC_OscConfig+0x60c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e0db      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005482:	4b70      	ldr	r3, [pc, #448]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 8005484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005486:	2202      	movs	r2, #2
 8005488:	4013      	ands	r3, r2
 800548a:	d0f0      	beq.n	800546e <HAL_RCC_OscConfig+0x42e>
 800548c:	e013      	b.n	80054b6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548e:	f7fd fb65 	bl	8002b5c <HAL_GetTick>
 8005492:	0003      	movs	r3, r0
 8005494:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005496:	e009      	b.n	80054ac <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005498:	f7fd fb60 	bl	8002b5c <HAL_GetTick>
 800549c:	0002      	movs	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	4a6a      	ldr	r2, [pc, #424]	@ (800564c <HAL_RCC_OscConfig+0x60c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e0c6      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054ac:	4b65      	ldr	r3, [pc, #404]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 80054ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b0:	2202      	movs	r2, #2
 80054b2:	4013      	ands	r3, r2
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80054b6:	231f      	movs	r3, #31
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d105      	bne.n	80054cc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80054c0:	4b60      	ldr	r3, [pc, #384]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 80054c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054c4:	4b5f      	ldr	r3, [pc, #380]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 80054c6:	4962      	ldr	r1, [pc, #392]	@ (8005650 <HAL_RCC_OscConfig+0x610>)
 80054c8:	400a      	ands	r2, r1
 80054ca:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d100      	bne.n	80054d6 <HAL_RCC_OscConfig+0x496>
 80054d4:	e0b0      	b.n	8005638 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054d6:	4b5b      	ldr	r3, [pc, #364]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2238      	movs	r2, #56	@ 0x38
 80054dc:	4013      	ands	r3, r2
 80054de:	2b10      	cmp	r3, #16
 80054e0:	d100      	bne.n	80054e4 <HAL_RCC_OscConfig+0x4a4>
 80054e2:	e078      	b.n	80055d6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d153      	bne.n	8005594 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ec:	4b55      	ldr	r3, [pc, #340]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b54      	ldr	r3, [pc, #336]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 80054f2:	4958      	ldr	r1, [pc, #352]	@ (8005654 <HAL_RCC_OscConfig+0x614>)
 80054f4:	400a      	ands	r2, r1
 80054f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f8:	f7fd fb30 	bl	8002b5c <HAL_GetTick>
 80054fc:	0003      	movs	r3, r0
 80054fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005502:	f7fd fb2b 	bl	8002b5c <HAL_GetTick>
 8005506:	0002      	movs	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e092      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005514:	4b4b      	ldr	r3, [pc, #300]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	2380      	movs	r3, #128	@ 0x80
 800551a:	049b      	lsls	r3, r3, #18
 800551c:	4013      	ands	r3, r2
 800551e:	d1f0      	bne.n	8005502 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005520:	4b48      	ldr	r3, [pc, #288]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	4a4c      	ldr	r2, [pc, #304]	@ (8005658 <HAL_RCC_OscConfig+0x618>)
 8005526:	4013      	ands	r3, r2
 8005528:	0019      	movs	r1, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1a      	ldr	r2, [r3, #32]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005546:	431a      	orrs	r2, r3
 8005548:	4b3e      	ldr	r3, [pc, #248]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 800554a:	430a      	orrs	r2, r1
 800554c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800554e:	4b3d      	ldr	r3, [pc, #244]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b3c      	ldr	r3, [pc, #240]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 8005554:	2180      	movs	r1, #128	@ 0x80
 8005556:	0449      	lsls	r1, r1, #17
 8005558:	430a      	orrs	r2, r1
 800555a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800555c:	4b39      	ldr	r3, [pc, #228]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	4b38      	ldr	r3, [pc, #224]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 8005562:	2180      	movs	r1, #128	@ 0x80
 8005564:	0549      	lsls	r1, r1, #21
 8005566:	430a      	orrs	r2, r1
 8005568:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556a:	f7fd faf7 	bl	8002b5c <HAL_GetTick>
 800556e:	0003      	movs	r3, r0
 8005570:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005574:	f7fd faf2 	bl	8002b5c <HAL_GetTick>
 8005578:	0002      	movs	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e059      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005586:	4b2f      	ldr	r3, [pc, #188]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	2380      	movs	r3, #128	@ 0x80
 800558c:	049b      	lsls	r3, r3, #18
 800558e:	4013      	ands	r3, r2
 8005590:	d0f0      	beq.n	8005574 <HAL_RCC_OscConfig+0x534>
 8005592:	e051      	b.n	8005638 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005594:	4b2b      	ldr	r3, [pc, #172]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	4b2a      	ldr	r3, [pc, #168]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 800559a:	492e      	ldr	r1, [pc, #184]	@ (8005654 <HAL_RCC_OscConfig+0x614>)
 800559c:	400a      	ands	r2, r1
 800559e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fd fadc 	bl	8002b5c <HAL_GetTick>
 80055a4:	0003      	movs	r3, r0
 80055a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055aa:	f7fd fad7 	bl	8002b5c <HAL_GetTick>
 80055ae:	0002      	movs	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e03e      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055bc:	4b21      	ldr	r3, [pc, #132]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	2380      	movs	r3, #128	@ 0x80
 80055c2:	049b      	lsls	r3, r3, #18
 80055c4:	4013      	ands	r3, r2
 80055c6:	d1f0      	bne.n	80055aa <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80055c8:	4b1e      	ldr	r3, [pc, #120]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 80055ce:	4923      	ldr	r1, [pc, #140]	@ (800565c <HAL_RCC_OscConfig+0x61c>)
 80055d0:	400a      	ands	r2, r1
 80055d2:	60da      	str	r2, [r3, #12]
 80055d4:	e030      	b.n	8005638 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e02b      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80055e2:	4b18      	ldr	r3, [pc, #96]	@ (8005644 <HAL_RCC_OscConfig+0x604>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2203      	movs	r2, #3
 80055ec:	401a      	ands	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d11e      	bne.n	8005634 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2270      	movs	r2, #112	@ 0x70
 80055fa:	401a      	ands	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005600:	429a      	cmp	r2, r3
 8005602:	d117      	bne.n	8005634 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	23fe      	movs	r3, #254	@ 0xfe
 8005608:	01db      	lsls	r3, r3, #7
 800560a:	401a      	ands	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005610:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005612:	429a      	cmp	r2, r3
 8005614:	d10e      	bne.n	8005634 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	23f8      	movs	r3, #248	@ 0xf8
 800561a:	039b      	lsls	r3, r3, #14
 800561c:	401a      	ands	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005622:	429a      	cmp	r2, r3
 8005624:	d106      	bne.n	8005634 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	0f5b      	lsrs	r3, r3, #29
 800562a:	075a      	lsls	r2, r3, #29
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005630:	429a      	cmp	r2, r3
 8005632:	d001      	beq.n	8005638 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	0018      	movs	r0, r3
 800563c:	46bd      	mov	sp, r7
 800563e:	b008      	add	sp, #32
 8005640:	bd80      	pop	{r7, pc}
 8005642:	46c0      	nop			@ (mov r8, r8)
 8005644:	40021000 	.word	0x40021000
 8005648:	40007000 	.word	0x40007000
 800564c:	00001388 	.word	0x00001388
 8005650:	efffffff 	.word	0xefffffff
 8005654:	feffffff 	.word	0xfeffffff
 8005658:	1fc1808c 	.word	0x1fc1808c
 800565c:	effefffc 	.word	0xeffefffc

08005660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e0e9      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005674:	4b76      	ldr	r3, [pc, #472]	@ (8005850 <HAL_RCC_ClockConfig+0x1f0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2207      	movs	r2, #7
 800567a:	4013      	ands	r3, r2
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d91e      	bls.n	80056c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005682:	4b73      	ldr	r3, [pc, #460]	@ (8005850 <HAL_RCC_ClockConfig+0x1f0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2207      	movs	r2, #7
 8005688:	4393      	bics	r3, r2
 800568a:	0019      	movs	r1, r3
 800568c:	4b70      	ldr	r3, [pc, #448]	@ (8005850 <HAL_RCC_ClockConfig+0x1f0>)
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005694:	f7fd fa62 	bl	8002b5c <HAL_GetTick>
 8005698:	0003      	movs	r3, r0
 800569a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800569c:	e009      	b.n	80056b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800569e:	f7fd fa5d 	bl	8002b5c <HAL_GetTick>
 80056a2:	0002      	movs	r2, r0
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	4a6a      	ldr	r2, [pc, #424]	@ (8005854 <HAL_RCC_ClockConfig+0x1f4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e0ca      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056b2:	4b67      	ldr	r3, [pc, #412]	@ (8005850 <HAL_RCC_ClockConfig+0x1f0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2207      	movs	r2, #7
 80056b8:	4013      	ands	r3, r2
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d1ee      	bne.n	800569e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2202      	movs	r2, #2
 80056c6:	4013      	ands	r3, r2
 80056c8:	d015      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2204      	movs	r2, #4
 80056d0:	4013      	ands	r3, r2
 80056d2:	d006      	beq.n	80056e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80056d4:	4b60      	ldr	r3, [pc, #384]	@ (8005858 <HAL_RCC_ClockConfig+0x1f8>)
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	4b5f      	ldr	r3, [pc, #380]	@ (8005858 <HAL_RCC_ClockConfig+0x1f8>)
 80056da:	21e0      	movs	r1, #224	@ 0xe0
 80056dc:	01c9      	lsls	r1, r1, #7
 80056de:	430a      	orrs	r2, r1
 80056e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005858 <HAL_RCC_ClockConfig+0x1f8>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	4a5d      	ldr	r2, [pc, #372]	@ (800585c <HAL_RCC_ClockConfig+0x1fc>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	0019      	movs	r1, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	4b59      	ldr	r3, [pc, #356]	@ (8005858 <HAL_RCC_ClockConfig+0x1f8>)
 80056f2:	430a      	orrs	r2, r1
 80056f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2201      	movs	r2, #1
 80056fc:	4013      	ands	r3, r2
 80056fe:	d057      	beq.n	80057b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d107      	bne.n	8005718 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005708:	4b53      	ldr	r3, [pc, #332]	@ (8005858 <HAL_RCC_ClockConfig+0x1f8>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	2380      	movs	r3, #128	@ 0x80
 800570e:	029b      	lsls	r3, r3, #10
 8005710:	4013      	ands	r3, r2
 8005712:	d12b      	bne.n	800576c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e097      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2b02      	cmp	r3, #2
 800571e:	d107      	bne.n	8005730 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005720:	4b4d      	ldr	r3, [pc, #308]	@ (8005858 <HAL_RCC_ClockConfig+0x1f8>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	2380      	movs	r3, #128	@ 0x80
 8005726:	049b      	lsls	r3, r3, #18
 8005728:	4013      	ands	r3, r2
 800572a:	d11f      	bne.n	800576c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e08b      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d107      	bne.n	8005748 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005738:	4b47      	ldr	r3, [pc, #284]	@ (8005858 <HAL_RCC_ClockConfig+0x1f8>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	2380      	movs	r3, #128	@ 0x80
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4013      	ands	r3, r2
 8005742:	d113      	bne.n	800576c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e07f      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b03      	cmp	r3, #3
 800574e:	d106      	bne.n	800575e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005750:	4b41      	ldr	r3, [pc, #260]	@ (8005858 <HAL_RCC_ClockConfig+0x1f8>)
 8005752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005754:	2202      	movs	r2, #2
 8005756:	4013      	ands	r3, r2
 8005758:	d108      	bne.n	800576c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e074      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800575e:	4b3e      	ldr	r3, [pc, #248]	@ (8005858 <HAL_RCC_ClockConfig+0x1f8>)
 8005760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005762:	2202      	movs	r2, #2
 8005764:	4013      	ands	r3, r2
 8005766:	d101      	bne.n	800576c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e06d      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800576c:	4b3a      	ldr	r3, [pc, #232]	@ (8005858 <HAL_RCC_ClockConfig+0x1f8>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	2207      	movs	r2, #7
 8005772:	4393      	bics	r3, r2
 8005774:	0019      	movs	r1, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	4b37      	ldr	r3, [pc, #220]	@ (8005858 <HAL_RCC_ClockConfig+0x1f8>)
 800577c:	430a      	orrs	r2, r1
 800577e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005780:	f7fd f9ec 	bl	8002b5c <HAL_GetTick>
 8005784:	0003      	movs	r3, r0
 8005786:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005788:	e009      	b.n	800579e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800578a:	f7fd f9e7 	bl	8002b5c <HAL_GetTick>
 800578e:	0002      	movs	r2, r0
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	4a2f      	ldr	r2, [pc, #188]	@ (8005854 <HAL_RCC_ClockConfig+0x1f4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d901      	bls.n	800579e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e054      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800579e:	4b2e      	ldr	r3, [pc, #184]	@ (8005858 <HAL_RCC_ClockConfig+0x1f8>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2238      	movs	r2, #56	@ 0x38
 80057a4:	401a      	ands	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d1ec      	bne.n	800578a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057b0:	4b27      	ldr	r3, [pc, #156]	@ (8005850 <HAL_RCC_ClockConfig+0x1f0>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2207      	movs	r2, #7
 80057b6:	4013      	ands	r3, r2
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d21e      	bcs.n	80057fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057be:	4b24      	ldr	r3, [pc, #144]	@ (8005850 <HAL_RCC_ClockConfig+0x1f0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2207      	movs	r2, #7
 80057c4:	4393      	bics	r3, r2
 80057c6:	0019      	movs	r1, r3
 80057c8:	4b21      	ldr	r3, [pc, #132]	@ (8005850 <HAL_RCC_ClockConfig+0x1f0>)
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057d0:	f7fd f9c4 	bl	8002b5c <HAL_GetTick>
 80057d4:	0003      	movs	r3, r0
 80057d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057d8:	e009      	b.n	80057ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057da:	f7fd f9bf 	bl	8002b5c <HAL_GetTick>
 80057de:	0002      	movs	r2, r0
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005854 <HAL_RCC_ClockConfig+0x1f4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e02c      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057ee:	4b18      	ldr	r3, [pc, #96]	@ (8005850 <HAL_RCC_ClockConfig+0x1f0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2207      	movs	r2, #7
 80057f4:	4013      	ands	r3, r2
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d1ee      	bne.n	80057da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2204      	movs	r2, #4
 8005802:	4013      	ands	r3, r2
 8005804:	d009      	beq.n	800581a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005806:	4b14      	ldr	r3, [pc, #80]	@ (8005858 <HAL_RCC_ClockConfig+0x1f8>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	4a15      	ldr	r2, [pc, #84]	@ (8005860 <HAL_RCC_ClockConfig+0x200>)
 800580c:	4013      	ands	r3, r2
 800580e:	0019      	movs	r1, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	4b10      	ldr	r3, [pc, #64]	@ (8005858 <HAL_RCC_ClockConfig+0x1f8>)
 8005816:	430a      	orrs	r2, r1
 8005818:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800581a:	f000 f829 	bl	8005870 <HAL_RCC_GetSysClockFreq>
 800581e:	0001      	movs	r1, r0
 8005820:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <HAL_RCC_ClockConfig+0x1f8>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	0a1b      	lsrs	r3, r3, #8
 8005826:	220f      	movs	r2, #15
 8005828:	401a      	ands	r2, r3
 800582a:	4b0e      	ldr	r3, [pc, #56]	@ (8005864 <HAL_RCC_ClockConfig+0x204>)
 800582c:	0092      	lsls	r2, r2, #2
 800582e:	58d3      	ldr	r3, [r2, r3]
 8005830:	221f      	movs	r2, #31
 8005832:	4013      	ands	r3, r2
 8005834:	000a      	movs	r2, r1
 8005836:	40da      	lsrs	r2, r3
 8005838:	4b0b      	ldr	r3, [pc, #44]	@ (8005868 <HAL_RCC_ClockConfig+0x208>)
 800583a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800583c:	4b0b      	ldr	r3, [pc, #44]	@ (800586c <HAL_RCC_ClockConfig+0x20c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	0018      	movs	r0, r3
 8005842:	f7fd f92f 	bl	8002aa4 <HAL_InitTick>
 8005846:	0003      	movs	r3, r0
}
 8005848:	0018      	movs	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	b004      	add	sp, #16
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40022000 	.word	0x40022000
 8005854:	00001388 	.word	0x00001388
 8005858:	40021000 	.word	0x40021000
 800585c:	fffff0ff 	.word	0xfffff0ff
 8005860:	ffff8fff 	.word	0xffff8fff
 8005864:	08009694 	.word	0x08009694
 8005868:	20000018 	.word	0x20000018
 800586c:	2000001c 	.word	0x2000001c

08005870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005876:	4b3c      	ldr	r3, [pc, #240]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2238      	movs	r2, #56	@ 0x38
 800587c:	4013      	ands	r3, r2
 800587e:	d10f      	bne.n	80058a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005880:	4b39      	ldr	r3, [pc, #228]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	0adb      	lsrs	r3, r3, #11
 8005886:	2207      	movs	r2, #7
 8005888:	4013      	ands	r3, r2
 800588a:	2201      	movs	r2, #1
 800588c:	409a      	lsls	r2, r3
 800588e:	0013      	movs	r3, r2
 8005890:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005892:	6839      	ldr	r1, [r7, #0]
 8005894:	4835      	ldr	r0, [pc, #212]	@ (800596c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005896:	f7fa fc3d 	bl	8000114 <__udivsi3>
 800589a:	0003      	movs	r3, r0
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	e05d      	b.n	800595c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058a0:	4b31      	ldr	r3, [pc, #196]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2238      	movs	r2, #56	@ 0x38
 80058a6:	4013      	ands	r3, r2
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d102      	bne.n	80058b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058ac:	4b30      	ldr	r3, [pc, #192]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x100>)
 80058ae:	613b      	str	r3, [r7, #16]
 80058b0:	e054      	b.n	800595c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2238      	movs	r2, #56	@ 0x38
 80058b8:	4013      	ands	r3, r2
 80058ba:	2b10      	cmp	r3, #16
 80058bc:	d138      	bne.n	8005930 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80058be:	4b2a      	ldr	r3, [pc, #168]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	2203      	movs	r2, #3
 80058c4:	4013      	ands	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058c8:	4b27      	ldr	r3, [pc, #156]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	091b      	lsrs	r3, r3, #4
 80058ce:	2207      	movs	r2, #7
 80058d0:	4013      	ands	r3, r2
 80058d2:	3301      	adds	r3, #1
 80058d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d10d      	bne.n	80058f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	4824      	ldr	r0, [pc, #144]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x100>)
 80058e0:	f7fa fc18 	bl	8000114 <__udivsi3>
 80058e4:	0003      	movs	r3, r0
 80058e6:	0019      	movs	r1, r3
 80058e8:	4b1f      	ldr	r3, [pc, #124]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	0a1b      	lsrs	r3, r3, #8
 80058ee:	227f      	movs	r2, #127	@ 0x7f
 80058f0:	4013      	ands	r3, r2
 80058f2:	434b      	muls	r3, r1
 80058f4:	617b      	str	r3, [r7, #20]
        break;
 80058f6:	e00d      	b.n	8005914 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	481c      	ldr	r0, [pc, #112]	@ (800596c <HAL_RCC_GetSysClockFreq+0xfc>)
 80058fc:	f7fa fc0a 	bl	8000114 <__udivsi3>
 8005900:	0003      	movs	r3, r0
 8005902:	0019      	movs	r1, r3
 8005904:	4b18      	ldr	r3, [pc, #96]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	0a1b      	lsrs	r3, r3, #8
 800590a:	227f      	movs	r2, #127	@ 0x7f
 800590c:	4013      	ands	r3, r2
 800590e:	434b      	muls	r3, r1
 8005910:	617b      	str	r3, [r7, #20]
        break;
 8005912:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005914:	4b14      	ldr	r3, [pc, #80]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	0f5b      	lsrs	r3, r3, #29
 800591a:	2207      	movs	r2, #7
 800591c:	4013      	ands	r3, r2
 800591e:	3301      	adds	r3, #1
 8005920:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	6978      	ldr	r0, [r7, #20]
 8005926:	f7fa fbf5 	bl	8000114 <__udivsi3>
 800592a:	0003      	movs	r3, r0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	e015      	b.n	800595c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005930:	4b0d      	ldr	r3, [pc, #52]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	2238      	movs	r2, #56	@ 0x38
 8005936:	4013      	ands	r3, r2
 8005938:	2b20      	cmp	r3, #32
 800593a:	d103      	bne.n	8005944 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800593c:	2380      	movs	r3, #128	@ 0x80
 800593e:	021b      	lsls	r3, r3, #8
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	e00b      	b.n	800595c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005944:	4b08      	ldr	r3, [pc, #32]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2238      	movs	r2, #56	@ 0x38
 800594a:	4013      	ands	r3, r2
 800594c:	2b18      	cmp	r3, #24
 800594e:	d103      	bne.n	8005958 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005950:	23fa      	movs	r3, #250	@ 0xfa
 8005952:	01db      	lsls	r3, r3, #7
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	e001      	b.n	800595c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800595c:	693b      	ldr	r3, [r7, #16]
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b006      	add	sp, #24
 8005964:	bd80      	pop	{r7, pc}
 8005966:	46c0      	nop			@ (mov r8, r8)
 8005968:	40021000 	.word	0x40021000
 800596c:	00f42400 	.word	0x00f42400
 8005970:	007a1200 	.word	0x007a1200

08005974 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005978:	4b02      	ldr	r3, [pc, #8]	@ (8005984 <HAL_RCC_GetHCLKFreq+0x10>)
 800597a:	681b      	ldr	r3, [r3, #0]
}
 800597c:	0018      	movs	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	46c0      	nop			@ (mov r8, r8)
 8005984:	20000018 	.word	0x20000018

08005988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005988:	b5b0      	push	{r4, r5, r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800598c:	f7ff fff2 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 8005990:	0004      	movs	r4, r0
 8005992:	f7ff facd 	bl	8004f30 <LL_RCC_GetAPB1Prescaler>
 8005996:	0003      	movs	r3, r0
 8005998:	0b1a      	lsrs	r2, r3, #12
 800599a:	4b05      	ldr	r3, [pc, #20]	@ (80059b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800599c:	0092      	lsls	r2, r2, #2
 800599e:	58d3      	ldr	r3, [r2, r3]
 80059a0:	221f      	movs	r2, #31
 80059a2:	4013      	ands	r3, r2
 80059a4:	40dc      	lsrs	r4, r3
 80059a6:	0023      	movs	r3, r4
}
 80059a8:	0018      	movs	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bdb0      	pop	{r4, r5, r7, pc}
 80059ae:	46c0      	nop			@ (mov r8, r8)
 80059b0:	080096d4 	.word	0x080096d4

080059b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80059bc:	2313      	movs	r3, #19
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059c4:	2312      	movs	r3, #18
 80059c6:	18fb      	adds	r3, r7, r3
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	2380      	movs	r3, #128	@ 0x80
 80059d2:	029b      	lsls	r3, r3, #10
 80059d4:	4013      	ands	r3, r2
 80059d6:	d100      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x26>
 80059d8:	e0a3      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059da:	2011      	movs	r0, #17
 80059dc:	183b      	adds	r3, r7, r0
 80059de:	2200      	movs	r2, #0
 80059e0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e2:	4b86      	ldr	r3, [pc, #536]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80059e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059e6:	2380      	movs	r3, #128	@ 0x80
 80059e8:	055b      	lsls	r3, r3, #21
 80059ea:	4013      	ands	r3, r2
 80059ec:	d110      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ee:	4b83      	ldr	r3, [pc, #524]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80059f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059f2:	4b82      	ldr	r3, [pc, #520]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80059f4:	2180      	movs	r1, #128	@ 0x80
 80059f6:	0549      	lsls	r1, r1, #21
 80059f8:	430a      	orrs	r2, r1
 80059fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80059fc:	4b7f      	ldr	r3, [pc, #508]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80059fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a00:	2380      	movs	r3, #128	@ 0x80
 8005a02:	055b      	lsls	r3, r3, #21
 8005a04:	4013      	ands	r3, r2
 8005a06:	60bb      	str	r3, [r7, #8]
 8005a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a0a:	183b      	adds	r3, r7, r0
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a10:	4b7b      	ldr	r3, [pc, #492]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	4b7a      	ldr	r3, [pc, #488]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005a16:	2180      	movs	r1, #128	@ 0x80
 8005a18:	0049      	lsls	r1, r1, #1
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a1e:	f7fd f89d 	bl	8002b5c <HAL_GetTick>
 8005a22:	0003      	movs	r3, r0
 8005a24:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a26:	e00b      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a28:	f7fd f898 	bl	8002b5c <HAL_GetTick>
 8005a2c:	0002      	movs	r2, r0
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d904      	bls.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005a36:	2313      	movs	r3, #19
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	2203      	movs	r2, #3
 8005a3c:	701a      	strb	r2, [r3, #0]
        break;
 8005a3e:	e005      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a40:	4b6f      	ldr	r3, [pc, #444]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	2380      	movs	r3, #128	@ 0x80
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d0ed      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005a4c:	2313      	movs	r3, #19
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d154      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a56:	4b69      	ldr	r3, [pc, #420]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a5a:	23c0      	movs	r3, #192	@ 0xc0
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4013      	ands	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d019      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d014      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a72:	4b62      	ldr	r3, [pc, #392]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a76:	4a63      	ldr	r2, [pc, #396]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a7c:	4b5f      	ldr	r3, [pc, #380]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a80:	4b5e      	ldr	r3, [pc, #376]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a82:	2180      	movs	r1, #128	@ 0x80
 8005a84:	0249      	lsls	r1, r1, #9
 8005a86:	430a      	orrs	r2, r1
 8005a88:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a8a:	4b5c      	ldr	r3, [pc, #368]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a8e:	4b5b      	ldr	r3, [pc, #364]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a90:	495d      	ldr	r1, [pc, #372]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a92:	400a      	ands	r2, r1
 8005a94:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a96:	4b59      	ldr	r3, [pc, #356]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	d016      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa4:	f7fd f85a 	bl	8002b5c <HAL_GetTick>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aac:	e00c      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aae:	f7fd f855 	bl	8002b5c <HAL_GetTick>
 8005ab2:	0002      	movs	r2, r0
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	4a54      	ldr	r2, [pc, #336]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d904      	bls.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005abe:	2313      	movs	r3, #19
 8005ac0:	18fb      	adds	r3, r7, r3
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	701a      	strb	r2, [r3, #0]
            break;
 8005ac6:	e004      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005acc:	2202      	movs	r2, #2
 8005ace:	4013      	ands	r3, r2
 8005ad0:	d0ed      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005ad2:	2313      	movs	r3, #19
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10a      	bne.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005adc:	4b47      	ldr	r3, [pc, #284]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae0:	4a48      	ldr	r2, [pc, #288]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	0019      	movs	r1, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	4b44      	ldr	r3, [pc, #272]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005aec:	430a      	orrs	r2, r1
 8005aee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005af0:	e00c      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005af2:	2312      	movs	r3, #18
 8005af4:	18fb      	adds	r3, r7, r3
 8005af6:	2213      	movs	r2, #19
 8005af8:	18ba      	adds	r2, r7, r2
 8005afa:	7812      	ldrb	r2, [r2, #0]
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	e005      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b00:	2312      	movs	r3, #18
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	2213      	movs	r2, #19
 8005b06:	18ba      	adds	r2, r7, r2
 8005b08:	7812      	ldrb	r2, [r2, #0]
 8005b0a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b0c:	2311      	movs	r3, #17
 8005b0e:	18fb      	adds	r3, r7, r3
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d105      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b16:	4b39      	ldr	r3, [pc, #228]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b1a:	4b38      	ldr	r3, [pc, #224]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b1c:	493c      	ldr	r1, [pc, #240]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005b1e:	400a      	ands	r2, r1
 8005b20:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2201      	movs	r2, #1
 8005b28:	4013      	ands	r3, r2
 8005b2a:	d009      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b2c:	4b33      	ldr	r3, [pc, #204]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b30:	2203      	movs	r2, #3
 8005b32:	4393      	bics	r3, r2
 8005b34:	0019      	movs	r1, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	4b30      	ldr	r3, [pc, #192]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2202      	movs	r2, #2
 8005b46:	4013      	ands	r3, r2
 8005b48:	d009      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4e:	220c      	movs	r2, #12
 8005b50:	4393      	bics	r3, r2
 8005b52:	0019      	movs	r1, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	4b28      	ldr	r3, [pc, #160]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2220      	movs	r2, #32
 8005b64:	4013      	ands	r3, r2
 8005b66:	d009      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b68:	4b24      	ldr	r3, [pc, #144]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b6c:	4a29      	ldr	r2, [pc, #164]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b6e:	4013      	ands	r3, r2
 8005b70:	0019      	movs	r1, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	4b21      	ldr	r3, [pc, #132]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	2380      	movs	r3, #128	@ 0x80
 8005b82:	01db      	lsls	r3, r3, #7
 8005b84:	4013      	ands	r3, r2
 8005b86:	d015      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b88:	4b1c      	ldr	r3, [pc, #112]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	0899      	lsrs	r1, r3, #2
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	695a      	ldr	r2, [r3, #20]
 8005b94:	4b19      	ldr	r3, [pc, #100]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b96:	430a      	orrs	r2, r1
 8005b98:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695a      	ldr	r2, [r3, #20]
 8005b9e:	2380      	movs	r3, #128	@ 0x80
 8005ba0:	05db      	lsls	r3, r3, #23
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d106      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ba6:	4b15      	ldr	r3, [pc, #84]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	4b14      	ldr	r3, [pc, #80]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005bac:	2180      	movs	r1, #128	@ 0x80
 8005bae:	0249      	lsls	r1, r1, #9
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	2380      	movs	r3, #128	@ 0x80
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	d016      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc4:	4a14      	ldr	r2, [pc, #80]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	0019      	movs	r1, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	4b0b      	ldr	r3, [pc, #44]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	2380      	movs	r3, #128	@ 0x80
 8005bda:	01db      	lsls	r3, r3, #7
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d106      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005be0:	4b06      	ldr	r3, [pc, #24]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	4b05      	ldr	r3, [pc, #20]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005be6:	2180      	movs	r1, #128	@ 0x80
 8005be8:	0249      	lsls	r1, r1, #9
 8005bea:	430a      	orrs	r2, r1
 8005bec:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005bee:	2312      	movs	r3, #18
 8005bf0:	18fb      	adds	r3, r7, r3
 8005bf2:	781b      	ldrb	r3, [r3, #0]
}
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	b006      	add	sp, #24
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	40007000 	.word	0x40007000
 8005c04:	fffffcff 	.word	0xfffffcff
 8005c08:	fffeffff 	.word	0xfffeffff
 8005c0c:	00001388 	.word	0x00001388
 8005c10:	efffffff 	.word	0xefffffff
 8005c14:	ffffcfff 	.word	0xffffcfff
 8005c18:	ffff3fff 	.word	0xffff3fff

08005c1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e0a8      	b.n	8005d80 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d109      	bne.n	8005c4a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	2382      	movs	r3, #130	@ 0x82
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d009      	beq.n	8005c56 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	61da      	str	r2, [r3, #28]
 8005c48:	e005      	b.n	8005c56 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	225d      	movs	r2, #93	@ 0x5d
 8005c60:	5c9b      	ldrb	r3, [r3, r2]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d107      	bne.n	8005c78 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	225c      	movs	r2, #92	@ 0x5c
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	0018      	movs	r0, r3
 8005c74:	f7fc fcce 	bl	8002614 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	225d      	movs	r2, #93	@ 0x5d
 8005c7c:	2102      	movs	r1, #2
 8005c7e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2140      	movs	r1, #64	@ 0x40
 8005c8c:	438a      	bics	r2, r1
 8005c8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	23e0      	movs	r3, #224	@ 0xe0
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d902      	bls.n	8005ca2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e002      	b.n	8005ca8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ca2:	2380      	movs	r3, #128	@ 0x80
 8005ca4:	015b      	lsls	r3, r3, #5
 8005ca6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	23f0      	movs	r3, #240	@ 0xf0
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d008      	beq.n	8005cc6 <HAL_SPI_Init+0xaa>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	23e0      	movs	r3, #224	@ 0xe0
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d002      	beq.n	8005cc6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	2382      	movs	r3, #130	@ 0x82
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	401a      	ands	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6899      	ldr	r1, [r3, #8]
 8005cd4:	2384      	movs	r3, #132	@ 0x84
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	400b      	ands	r3, r1
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2102      	movs	r1, #2
 8005ce2:	400b      	ands	r3, r1
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	2101      	movs	r1, #1
 8005cec:	400b      	ands	r3, r1
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6999      	ldr	r1, [r3, #24]
 8005cf4:	2380      	movs	r3, #128	@ 0x80
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	400b      	ands	r3, r1
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	2138      	movs	r1, #56	@ 0x38
 8005d02:	400b      	ands	r3, r1
 8005d04:	431a      	orrs	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	2180      	movs	r1, #128	@ 0x80
 8005d0c:	400b      	ands	r3, r1
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	0011      	movs	r1, r2
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d16:	2380      	movs	r3, #128	@ 0x80
 8005d18:	019b      	lsls	r3, r3, #6
 8005d1a:	401a      	ands	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	0c1b      	lsrs	r3, r3, #16
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	401a      	ands	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d32:	2110      	movs	r1, #16
 8005d34:	400b      	ands	r3, r1
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d3c:	2108      	movs	r1, #8
 8005d3e:	400b      	ands	r3, r1
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68d9      	ldr	r1, [r3, #12]
 8005d46:	23f0      	movs	r3, #240	@ 0xf0
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	400b      	ands	r3, r1
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	0011      	movs	r1, r2
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	2380      	movs	r3, #128	@ 0x80
 8005d54:	015b      	lsls	r3, r3, #5
 8005d56:	401a      	ands	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69da      	ldr	r2, [r3, #28]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4907      	ldr	r1, [pc, #28]	@ (8005d88 <HAL_SPI_Init+0x16c>)
 8005d6c:	400a      	ands	r2, r1
 8005d6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	225d      	movs	r2, #93	@ 0x5d
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	0018      	movs	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	b004      	add	sp, #16
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	fffff7ff 	.word	0xfffff7ff

08005d8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	1dbb      	adds	r3, r7, #6
 8005d9a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d9c:	231f      	movs	r3, #31
 8005d9e:	18fb      	adds	r3, r7, r3
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	225c      	movs	r2, #92	@ 0x5c
 8005da8:	5c9b      	ldrb	r3, [r3, r2]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_SPI_Transmit+0x26>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e147      	b.n	8006042 <HAL_SPI_Transmit+0x2b6>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	225c      	movs	r2, #92	@ 0x5c
 8005db6:	2101      	movs	r1, #1
 8005db8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dba:	f7fc fecf 	bl	8002b5c <HAL_GetTick>
 8005dbe:	0003      	movs	r3, r0
 8005dc0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005dc2:	2316      	movs	r3, #22
 8005dc4:	18fb      	adds	r3, r7, r3
 8005dc6:	1dba      	adds	r2, r7, #6
 8005dc8:	8812      	ldrh	r2, [r2, #0]
 8005dca:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	225d      	movs	r2, #93	@ 0x5d
 8005dd0:	5c9b      	ldrb	r3, [r3, r2]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d004      	beq.n	8005de2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005dd8:	231f      	movs	r3, #31
 8005dda:	18fb      	adds	r3, r7, r3
 8005ddc:	2202      	movs	r2, #2
 8005dde:	701a      	strb	r2, [r3, #0]
    goto error;
 8005de0:	e128      	b.n	8006034 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <HAL_SPI_Transmit+0x64>
 8005de8:	1dbb      	adds	r3, r7, #6
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d104      	bne.n	8005dfa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005df0:	231f      	movs	r3, #31
 8005df2:	18fb      	adds	r3, r7, r3
 8005df4:	2201      	movs	r2, #1
 8005df6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005df8:	e11c      	b.n	8006034 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	225d      	movs	r2, #93	@ 0x5d
 8005dfe:	2103      	movs	r1, #3
 8005e00:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1dba      	adds	r2, r7, #6
 8005e12:	8812      	ldrh	r2, [r2, #0]
 8005e14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	1dba      	adds	r2, r7, #6
 8005e1a:	8812      	ldrh	r2, [r2, #0]
 8005e1c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2244      	movs	r2, #68	@ 0x44
 8005e28:	2100      	movs	r1, #0
 8005e2a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2246      	movs	r2, #70	@ 0x46
 8005e30:	2100      	movs	r1, #0
 8005e32:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	2380      	movs	r3, #128	@ 0x80
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d110      	bne.n	8005e6e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2140      	movs	r1, #64	@ 0x40
 8005e58:	438a      	bics	r2, r1
 8005e5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2180      	movs	r1, #128	@ 0x80
 8005e68:	01c9      	lsls	r1, r1, #7
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2240      	movs	r2, #64	@ 0x40
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b40      	cmp	r3, #64	@ 0x40
 8005e7a:	d007      	beq.n	8005e8c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2140      	movs	r1, #64	@ 0x40
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	23e0      	movs	r3, #224	@ 0xe0
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d952      	bls.n	8005f3e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d004      	beq.n	8005eaa <HAL_SPI_Transmit+0x11e>
 8005ea0:	2316      	movs	r3, #22
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d143      	bne.n	8005f32 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eae:	881a      	ldrh	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eba:	1c9a      	adds	r2, r3, #2
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ece:	e030      	b.n	8005f32 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d112      	bne.n	8005f04 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee2:	881a      	ldrh	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eee:	1c9a      	adds	r2, r3, #2
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f02:	e016      	b.n	8005f32 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f04:	f7fc fe2a 	bl	8002b5c <HAL_GetTick>
 8005f08:	0002      	movs	r2, r0
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d802      	bhi.n	8005f1a <HAL_SPI_Transmit+0x18e>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	3301      	adds	r3, #1
 8005f18:	d102      	bne.n	8005f20 <HAL_SPI_Transmit+0x194>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d108      	bne.n	8005f32 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005f20:	231f      	movs	r3, #31
 8005f22:	18fb      	adds	r3, r7, r3
 8005f24:	2203      	movs	r2, #3
 8005f26:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	225d      	movs	r2, #93	@ 0x5d
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	5499      	strb	r1, [r3, r2]
          goto error;
 8005f30:	e080      	b.n	8006034 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1c9      	bne.n	8005ed0 <HAL_SPI_Transmit+0x144>
 8005f3c:	e053      	b.n	8005fe6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <HAL_SPI_Transmit+0x1c4>
 8005f46:	2316      	movs	r3, #22
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d145      	bne.n	8005fdc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	7812      	ldrb	r2, [r2, #0]
 8005f5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005f76:	e031      	b.n	8005fdc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	4013      	ands	r3, r2
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d113      	bne.n	8005fae <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	7812      	ldrb	r2, [r2, #0]
 8005f92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005fac:	e016      	b.n	8005fdc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fae:	f7fc fdd5 	bl	8002b5c <HAL_GetTick>
 8005fb2:	0002      	movs	r2, r0
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d802      	bhi.n	8005fc4 <HAL_SPI_Transmit+0x238>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	d102      	bne.n	8005fca <HAL_SPI_Transmit+0x23e>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d108      	bne.n	8005fdc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8005fca:	231f      	movs	r3, #31
 8005fcc:	18fb      	adds	r3, r7, r3
 8005fce:	2203      	movs	r2, #3
 8005fd0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	225d      	movs	r2, #93	@ 0x5d
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	5499      	strb	r1, [r3, r2]
          goto error;
 8005fda:	e02b      	b.n	8006034 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1c8      	bne.n	8005f78 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	6839      	ldr	r1, [r7, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	0018      	movs	r0, r3
 8005fee:	f000 fcef 	bl	80069d0 <SPI_EndRxTxTransaction>
 8005ff2:	1e03      	subs	r3, r0, #0
 8005ff4:	d002      	beq.n	8005ffc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006004:	2300      	movs	r3, #0
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	613b      	str	r3, [r7, #16]
 8006018:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800601e:	2b00      	cmp	r3, #0
 8006020:	d004      	beq.n	800602c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8006022:	231f      	movs	r3, #31
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	2201      	movs	r2, #1
 8006028:	701a      	strb	r2, [r3, #0]
 800602a:	e003      	b.n	8006034 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	225d      	movs	r2, #93	@ 0x5d
 8006030:	2101      	movs	r1, #1
 8006032:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	225c      	movs	r2, #92	@ 0x5c
 8006038:	2100      	movs	r1, #0
 800603a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800603c:	231f      	movs	r3, #31
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	781b      	ldrb	r3, [r3, #0]
}
 8006042:	0018      	movs	r0, r3
 8006044:	46bd      	mov	sp, r7
 8006046:	b008      	add	sp, #32
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800604c:	b590      	push	{r4, r7, lr}
 800604e:	b089      	sub	sp, #36	@ 0x24
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	1dbb      	adds	r3, r7, #6
 800605a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800605c:	2117      	movs	r1, #23
 800605e:	187b      	adds	r3, r7, r1
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	225d      	movs	r2, #93	@ 0x5d
 8006068:	5c9b      	ldrb	r3, [r3, r2]
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b01      	cmp	r3, #1
 800606e:	d003      	beq.n	8006078 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8006070:	187b      	adds	r3, r7, r1
 8006072:	2202      	movs	r2, #2
 8006074:	701a      	strb	r2, [r3, #0]
    goto error;
 8006076:	e12b      	b.n	80062d0 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	2382      	movs	r3, #130	@ 0x82
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	429a      	cmp	r2, r3
 8006082:	d113      	bne.n	80060ac <HAL_SPI_Receive+0x60>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10f      	bne.n	80060ac <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	225d      	movs	r2, #93	@ 0x5d
 8006090:	2104      	movs	r1, #4
 8006092:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006094:	1dbb      	adds	r3, r7, #6
 8006096:	881c      	ldrh	r4, [r3, #0]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	68b9      	ldr	r1, [r7, #8]
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	0023      	movs	r3, r4
 80060a4:	f000 f924 	bl	80062f0 <HAL_SPI_TransmitReceive>
 80060a8:	0003      	movs	r3, r0
 80060aa:	e118      	b.n	80062de <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	225c      	movs	r2, #92	@ 0x5c
 80060b0:	5c9b      	ldrb	r3, [r3, r2]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <HAL_SPI_Receive+0x6e>
 80060b6:	2302      	movs	r3, #2
 80060b8:	e111      	b.n	80062de <HAL_SPI_Receive+0x292>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	225c      	movs	r2, #92	@ 0x5c
 80060be:	2101      	movs	r1, #1
 80060c0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060c2:	f7fc fd4b 	bl	8002b5c <HAL_GetTick>
 80060c6:	0003      	movs	r3, r0
 80060c8:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <HAL_SPI_Receive+0x8c>
 80060d0:	1dbb      	adds	r3, r7, #6
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d104      	bne.n	80060e2 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80060d8:	2317      	movs	r3, #23
 80060da:	18fb      	adds	r3, r7, r3
 80060dc:	2201      	movs	r2, #1
 80060de:	701a      	strb	r2, [r3, #0]
    goto error;
 80060e0:	e0f6      	b.n	80062d0 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	225d      	movs	r2, #93	@ 0x5d
 80060e6:	2104      	movs	r1, #4
 80060e8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	1dba      	adds	r2, r7, #6
 80060fa:	2144      	movs	r1, #68	@ 0x44
 80060fc:	8812      	ldrh	r2, [r2, #0]
 80060fe:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	1dba      	adds	r2, r7, #6
 8006104:	2146      	movs	r1, #70	@ 0x46
 8006106:	8812      	ldrh	r2, [r2, #0]
 8006108:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	23e0      	movs	r3, #224	@ 0xe0
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	429a      	cmp	r2, r3
 8006132:	d908      	bls.n	8006146 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	496a      	ldr	r1, [pc, #424]	@ (80062e8 <HAL_SPI_Receive+0x29c>)
 8006140:	400a      	ands	r2, r1
 8006142:	605a      	str	r2, [r3, #4]
 8006144:	e008      	b.n	8006158 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2180      	movs	r1, #128	@ 0x80
 8006152:	0149      	lsls	r1, r1, #5
 8006154:	430a      	orrs	r2, r1
 8006156:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	2380      	movs	r3, #128	@ 0x80
 800615e:	021b      	lsls	r3, r3, #8
 8006160:	429a      	cmp	r2, r3
 8006162:	d10f      	bne.n	8006184 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2140      	movs	r1, #64	@ 0x40
 8006170:	438a      	bics	r2, r1
 8006172:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	495b      	ldr	r1, [pc, #364]	@ (80062ec <HAL_SPI_Receive+0x2a0>)
 8006180:	400a      	ands	r2, r1
 8006182:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2240      	movs	r2, #64	@ 0x40
 800618c:	4013      	ands	r3, r2
 800618e:	2b40      	cmp	r3, #64	@ 0x40
 8006190:	d007      	beq.n	80061a2 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2140      	movs	r1, #64	@ 0x40
 800619e:	430a      	orrs	r2, r1
 80061a0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	23e0      	movs	r3, #224	@ 0xe0
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d900      	bls.n	80061b0 <HAL_SPI_Receive+0x164>
 80061ae:	e071      	b.n	8006294 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80061b0:	e035      	b.n	800621e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2201      	movs	r2, #1
 80061ba:	4013      	ands	r3, r2
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d117      	bne.n	80061f0 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	330c      	adds	r3, #12
 80061c6:	001a      	movs	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061cc:	7812      	ldrb	r2, [r2, #0]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2246      	movs	r2, #70	@ 0x46
 80061e0:	5a9b      	ldrh	r3, [r3, r2]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b299      	uxth	r1, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2246      	movs	r2, #70	@ 0x46
 80061ec:	5299      	strh	r1, [r3, r2]
 80061ee:	e016      	b.n	800621e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061f0:	f7fc fcb4 	bl	8002b5c <HAL_GetTick>
 80061f4:	0002      	movs	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d802      	bhi.n	8006206 <HAL_SPI_Receive+0x1ba>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	3301      	adds	r3, #1
 8006204:	d102      	bne.n	800620c <HAL_SPI_Receive+0x1c0>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d108      	bne.n	800621e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800620c:	2317      	movs	r3, #23
 800620e:	18fb      	adds	r3, r7, r3
 8006210:	2203      	movs	r2, #3
 8006212:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	225d      	movs	r2, #93	@ 0x5d
 8006218:	2101      	movs	r1, #1
 800621a:	5499      	strb	r1, [r3, r2]
          goto error;
 800621c:	e058      	b.n	80062d0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2246      	movs	r2, #70	@ 0x46
 8006222:	5a9b      	ldrh	r3, [r3, r2]
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1c3      	bne.n	80061b2 <HAL_SPI_Receive+0x166>
 800622a:	e039      	b.n	80062a0 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	2201      	movs	r2, #1
 8006234:	4013      	ands	r3, r2
 8006236:	2b01      	cmp	r3, #1
 8006238:	d115      	bne.n	8006266 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006244:	b292      	uxth	r2, r2
 8006246:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624c:	1c9a      	adds	r2, r3, #2
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2246      	movs	r2, #70	@ 0x46
 8006256:	5a9b      	ldrh	r3, [r3, r2]
 8006258:	b29b      	uxth	r3, r3
 800625a:	3b01      	subs	r3, #1
 800625c:	b299      	uxth	r1, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2246      	movs	r2, #70	@ 0x46
 8006262:	5299      	strh	r1, [r3, r2]
 8006264:	e016      	b.n	8006294 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006266:	f7fc fc79 	bl	8002b5c <HAL_GetTick>
 800626a:	0002      	movs	r2, r0
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	429a      	cmp	r2, r3
 8006274:	d802      	bhi.n	800627c <HAL_SPI_Receive+0x230>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	3301      	adds	r3, #1
 800627a:	d102      	bne.n	8006282 <HAL_SPI_Receive+0x236>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d108      	bne.n	8006294 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8006282:	2317      	movs	r3, #23
 8006284:	18fb      	adds	r3, r7, r3
 8006286:	2203      	movs	r2, #3
 8006288:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	225d      	movs	r2, #93	@ 0x5d
 800628e:	2101      	movs	r1, #1
 8006290:	5499      	strb	r1, [r3, r2]
          goto error;
 8006292:	e01d      	b.n	80062d0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2246      	movs	r2, #70	@ 0x46
 8006298:	5a9b      	ldrh	r3, [r3, r2]
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1c5      	bne.n	800622c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	0018      	movs	r0, r3
 80062a8:	f000 fb34 	bl	8006914 <SPI_EndRxTransaction>
 80062ac:	1e03      	subs	r3, r0, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2220      	movs	r2, #32
 80062b4:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d004      	beq.n	80062c8 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80062be:	2317      	movs	r3, #23
 80062c0:	18fb      	adds	r3, r7, r3
 80062c2:	2201      	movs	r2, #1
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	e003      	b.n	80062d0 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	225d      	movs	r2, #93	@ 0x5d
 80062cc:	2101      	movs	r1, #1
 80062ce:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	225c      	movs	r2, #92	@ 0x5c
 80062d4:	2100      	movs	r1, #0
 80062d6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80062d8:	2317      	movs	r3, #23
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	781b      	ldrb	r3, [r3, #0]
}
 80062de:	0018      	movs	r0, r3
 80062e0:	46bd      	mov	sp, r7
 80062e2:	b007      	add	sp, #28
 80062e4:	bd90      	pop	{r4, r7, pc}
 80062e6:	46c0      	nop			@ (mov r8, r8)
 80062e8:	ffffefff 	.word	0xffffefff
 80062ec:	ffffbfff 	.word	0xffffbfff

080062f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08a      	sub	sp, #40	@ 0x28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	001a      	movs	r2, r3
 80062fe:	1cbb      	adds	r3, r7, #2
 8006300:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006302:	2301      	movs	r3, #1
 8006304:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006306:	2323      	movs	r3, #35	@ 0x23
 8006308:	18fb      	adds	r3, r7, r3
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	225c      	movs	r2, #92	@ 0x5c
 8006312:	5c9b      	ldrb	r3, [r3, r2]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_SPI_TransmitReceive+0x2c>
 8006318:	2302      	movs	r3, #2
 800631a:	e1c4      	b.n	80066a6 <HAL_SPI_TransmitReceive+0x3b6>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	225c      	movs	r2, #92	@ 0x5c
 8006320:	2101      	movs	r1, #1
 8006322:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006324:	f7fc fc1a 	bl	8002b5c <HAL_GetTick>
 8006328:	0003      	movs	r3, r0
 800632a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800632c:	201b      	movs	r0, #27
 800632e:	183b      	adds	r3, r7, r0
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	215d      	movs	r1, #93	@ 0x5d
 8006334:	5c52      	ldrb	r2, [r2, r1]
 8006336:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800633e:	2312      	movs	r3, #18
 8006340:	18fb      	adds	r3, r7, r3
 8006342:	1cba      	adds	r2, r7, #2
 8006344:	8812      	ldrh	r2, [r2, #0]
 8006346:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006348:	183b      	adds	r3, r7, r0
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d011      	beq.n	8006374 <HAL_SPI_TransmitReceive+0x84>
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	2382      	movs	r3, #130	@ 0x82
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	429a      	cmp	r2, r3
 8006358:	d107      	bne.n	800636a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d103      	bne.n	800636a <HAL_SPI_TransmitReceive+0x7a>
 8006362:	183b      	adds	r3, r7, r0
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b04      	cmp	r3, #4
 8006368:	d004      	beq.n	8006374 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800636a:	2323      	movs	r3, #35	@ 0x23
 800636c:	18fb      	adds	r3, r7, r3
 800636e:	2202      	movs	r2, #2
 8006370:	701a      	strb	r2, [r3, #0]
    goto error;
 8006372:	e191      	b.n	8006698 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d006      	beq.n	8006388 <HAL_SPI_TransmitReceive+0x98>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <HAL_SPI_TransmitReceive+0x98>
 8006380:	1cbb      	adds	r3, r7, #2
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d104      	bne.n	8006392 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006388:	2323      	movs	r3, #35	@ 0x23
 800638a:	18fb      	adds	r3, r7, r3
 800638c:	2201      	movs	r2, #1
 800638e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006390:	e182      	b.n	8006698 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	225d      	movs	r2, #93	@ 0x5d
 8006396:	5c9b      	ldrb	r3, [r3, r2]
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b04      	cmp	r3, #4
 800639c:	d003      	beq.n	80063a6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	225d      	movs	r2, #93	@ 0x5d
 80063a2:	2105      	movs	r1, #5
 80063a4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	1cba      	adds	r2, r7, #2
 80063b6:	2146      	movs	r1, #70	@ 0x46
 80063b8:	8812      	ldrh	r2, [r2, #0]
 80063ba:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	1cba      	adds	r2, r7, #2
 80063c0:	2144      	movs	r1, #68	@ 0x44
 80063c2:	8812      	ldrh	r2, [r2, #0]
 80063c4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	1cba      	adds	r2, r7, #2
 80063d0:	8812      	ldrh	r2, [r2, #0]
 80063d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	1cba      	adds	r2, r7, #2
 80063d8:	8812      	ldrh	r2, [r2, #0]
 80063da:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	23e0      	movs	r3, #224	@ 0xe0
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d908      	bls.n	8006406 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	49ac      	ldr	r1, [pc, #688]	@ (80066b0 <HAL_SPI_TransmitReceive+0x3c0>)
 8006400:	400a      	ands	r2, r1
 8006402:	605a      	str	r2, [r3, #4]
 8006404:	e008      	b.n	8006418 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2180      	movs	r1, #128	@ 0x80
 8006412:	0149      	lsls	r1, r1, #5
 8006414:	430a      	orrs	r2, r1
 8006416:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2240      	movs	r2, #64	@ 0x40
 8006420:	4013      	ands	r3, r2
 8006422:	2b40      	cmp	r3, #64	@ 0x40
 8006424:	d007      	beq.n	8006436 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2140      	movs	r1, #64	@ 0x40
 8006432:	430a      	orrs	r2, r1
 8006434:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	23e0      	movs	r3, #224	@ 0xe0
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	429a      	cmp	r2, r3
 8006440:	d800      	bhi.n	8006444 <HAL_SPI_TransmitReceive+0x154>
 8006442:	e083      	b.n	800654c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <HAL_SPI_TransmitReceive+0x168>
 800644c:	2312      	movs	r3, #18
 800644e:	18fb      	adds	r3, r7, r3
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d000      	beq.n	8006458 <HAL_SPI_TransmitReceive+0x168>
 8006456:	e06d      	b.n	8006534 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645c:	881a      	ldrh	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006468:	1c9a      	adds	r2, r3, #2
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800647c:	e05a      	b.n	8006534 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2202      	movs	r2, #2
 8006486:	4013      	ands	r3, r2
 8006488:	2b02      	cmp	r3, #2
 800648a:	d11b      	bne.n	80064c4 <HAL_SPI_TransmitReceive+0x1d4>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d016      	beq.n	80064c4 <HAL_SPI_TransmitReceive+0x1d4>
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	2b01      	cmp	r3, #1
 800649a:	d113      	bne.n	80064c4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a0:	881a      	ldrh	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ac:	1c9a      	adds	r2, r3, #2
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2201      	movs	r2, #1
 80064cc:	4013      	ands	r3, r2
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d11c      	bne.n	800650c <HAL_SPI_TransmitReceive+0x21c>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2246      	movs	r2, #70	@ 0x46
 80064d6:	5a9b      	ldrh	r3, [r3, r2]
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d016      	beq.n	800650c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e8:	b292      	uxth	r2, r2
 80064ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f0:	1c9a      	adds	r2, r3, #2
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2246      	movs	r2, #70	@ 0x46
 80064fa:	5a9b      	ldrh	r3, [r3, r2]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b299      	uxth	r1, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2246      	movs	r2, #70	@ 0x46
 8006506:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006508:	2301      	movs	r3, #1
 800650a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800650c:	f7fc fb26 	bl	8002b5c <HAL_GetTick>
 8006510:	0002      	movs	r2, r0
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006518:	429a      	cmp	r2, r3
 800651a:	d80b      	bhi.n	8006534 <HAL_SPI_TransmitReceive+0x244>
 800651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651e:	3301      	adds	r3, #1
 8006520:	d008      	beq.n	8006534 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8006522:	2323      	movs	r3, #35	@ 0x23
 8006524:	18fb      	adds	r3, r7, r3
 8006526:	2203      	movs	r2, #3
 8006528:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	225d      	movs	r2, #93	@ 0x5d
 800652e:	2101      	movs	r1, #1
 8006530:	5499      	strb	r1, [r3, r2]
        goto error;
 8006532:	e0b1      	b.n	8006698 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006538:	b29b      	uxth	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d19f      	bne.n	800647e <HAL_SPI_TransmitReceive+0x18e>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2246      	movs	r2, #70	@ 0x46
 8006542:	5a9b      	ldrh	r3, [r3, r2]
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d199      	bne.n	800647e <HAL_SPI_TransmitReceive+0x18e>
 800654a:	e089      	b.n	8006660 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <HAL_SPI_TransmitReceive+0x270>
 8006554:	2312      	movs	r3, #18
 8006556:	18fb      	adds	r3, r7, r3
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d000      	beq.n	8006560 <HAL_SPI_TransmitReceive+0x270>
 800655e:	e074      	b.n	800664a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	330c      	adds	r3, #12
 800656a:	7812      	ldrb	r2, [r2, #0]
 800656c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006586:	e060      	b.n	800664a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	2202      	movs	r2, #2
 8006590:	4013      	ands	r3, r2
 8006592:	2b02      	cmp	r3, #2
 8006594:	d11c      	bne.n	80065d0 <HAL_SPI_TransmitReceive+0x2e0>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d017      	beq.n	80065d0 <HAL_SPI_TransmitReceive+0x2e0>
 80065a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d114      	bne.n	80065d0 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	330c      	adds	r3, #12
 80065b0:	7812      	ldrb	r2, [r2, #0]
 80065b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	2201      	movs	r2, #1
 80065d8:	4013      	ands	r3, r2
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d11e      	bne.n	800661c <HAL_SPI_TransmitReceive+0x32c>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2246      	movs	r2, #70	@ 0x46
 80065e2:	5a9b      	ldrh	r3, [r3, r2]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d018      	beq.n	800661c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	330c      	adds	r3, #12
 80065f0:	001a      	movs	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f6:	7812      	ldrb	r2, [r2, #0]
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2246      	movs	r2, #70	@ 0x46
 800660a:	5a9b      	ldrh	r3, [r3, r2]
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b299      	uxth	r1, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2246      	movs	r2, #70	@ 0x46
 8006616:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006618:	2301      	movs	r3, #1
 800661a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800661c:	f7fc fa9e 	bl	8002b5c <HAL_GetTick>
 8006620:	0002      	movs	r2, r0
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006628:	429a      	cmp	r2, r3
 800662a:	d802      	bhi.n	8006632 <HAL_SPI_TransmitReceive+0x342>
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	3301      	adds	r3, #1
 8006630:	d102      	bne.n	8006638 <HAL_SPI_TransmitReceive+0x348>
 8006632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006634:	2b00      	cmp	r3, #0
 8006636:	d108      	bne.n	800664a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8006638:	2323      	movs	r3, #35	@ 0x23
 800663a:	18fb      	adds	r3, r7, r3
 800663c:	2203      	movs	r2, #3
 800663e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	225d      	movs	r2, #93	@ 0x5d
 8006644:	2101      	movs	r1, #1
 8006646:	5499      	strb	r1, [r3, r2]
        goto error;
 8006648:	e026      	b.n	8006698 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d199      	bne.n	8006588 <HAL_SPI_TransmitReceive+0x298>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2246      	movs	r2, #70	@ 0x46
 8006658:	5a9b      	ldrh	r3, [r3, r2]
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	d193      	bne.n	8006588 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	0018      	movs	r0, r3
 8006668:	f000 f9b2 	bl	80069d0 <SPI_EndRxTxTransaction>
 800666c:	1e03      	subs	r3, r0, #0
 800666e:	d006      	beq.n	800667e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8006670:	2323      	movs	r3, #35	@ 0x23
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	2201      	movs	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2220      	movs	r2, #32
 800667c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006682:	2b00      	cmp	r3, #0
 8006684:	d004      	beq.n	8006690 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8006686:	2323      	movs	r3, #35	@ 0x23
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	e003      	b.n	8006698 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	225d      	movs	r2, #93	@ 0x5d
 8006694:	2101      	movs	r1, #1
 8006696:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	225c      	movs	r2, #92	@ 0x5c
 800669c:	2100      	movs	r1, #0
 800669e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80066a0:	2323      	movs	r3, #35	@ 0x23
 80066a2:	18fb      	adds	r3, r7, r3
 80066a4:	781b      	ldrb	r3, [r3, #0]
}
 80066a6:	0018      	movs	r0, r3
 80066a8:	46bd      	mov	sp, r7
 80066aa:	b00a      	add	sp, #40	@ 0x28
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	46c0      	nop			@ (mov r8, r8)
 80066b0:	ffffefff 	.word	0xffffefff

080066b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	1dfb      	adds	r3, r7, #7
 80066c2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066c4:	f7fc fa4a 	bl	8002b5c <HAL_GetTick>
 80066c8:	0002      	movs	r2, r0
 80066ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	18d3      	adds	r3, r2, r3
 80066d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066d4:	f7fc fa42 	bl	8002b5c <HAL_GetTick>
 80066d8:	0003      	movs	r3, r0
 80066da:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066dc:	4b3a      	ldr	r3, [pc, #232]	@ (80067c8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	015b      	lsls	r3, r3, #5
 80066e2:	0d1b      	lsrs	r3, r3, #20
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	4353      	muls	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066ea:	e058      	b.n	800679e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	3301      	adds	r3, #1
 80066f0:	d055      	beq.n	800679e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066f2:	f7fc fa33 	bl	8002b5c <HAL_GetTick>
 80066f6:	0002      	movs	r2, r0
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	69fa      	ldr	r2, [r7, #28]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d902      	bls.n	8006708 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d142      	bne.n	800678e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	21e0      	movs	r1, #224	@ 0xe0
 8006714:	438a      	bics	r2, r1
 8006716:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	2382      	movs	r3, #130	@ 0x82
 800671e:	005b      	lsls	r3, r3, #1
 8006720:	429a      	cmp	r2, r3
 8006722:	d113      	bne.n	800674c <SPI_WaitFlagStateUntilTimeout+0x98>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	2380      	movs	r3, #128	@ 0x80
 800672a:	021b      	lsls	r3, r3, #8
 800672c:	429a      	cmp	r2, r3
 800672e:	d005      	beq.n	800673c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	2380      	movs	r3, #128	@ 0x80
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	429a      	cmp	r2, r3
 800673a:	d107      	bne.n	800674c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2140      	movs	r1, #64	@ 0x40
 8006748:	438a      	bics	r2, r1
 800674a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006750:	2380      	movs	r3, #128	@ 0x80
 8006752:	019b      	lsls	r3, r3, #6
 8006754:	429a      	cmp	r2, r3
 8006756:	d110      	bne.n	800677a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	491a      	ldr	r1, [pc, #104]	@ (80067cc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006764:	400a      	ands	r2, r1
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2180      	movs	r1, #128	@ 0x80
 8006774:	0189      	lsls	r1, r1, #6
 8006776:	430a      	orrs	r2, r1
 8006778:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	225d      	movs	r2, #93	@ 0x5d
 800677e:	2101      	movs	r1, #1
 8006780:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	225c      	movs	r2, #92	@ 0x5c
 8006786:	2100      	movs	r1, #0
 8006788:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e017      	b.n	80067be <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	3b01      	subs	r3, #1
 800679c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	4013      	ands	r3, r2
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	425a      	negs	r2, r3
 80067ae:	4153      	adcs	r3, r2
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	001a      	movs	r2, r3
 80067b4:	1dfb      	adds	r3, r7, #7
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d197      	bne.n	80066ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	0018      	movs	r0, r3
 80067c0:	46bd      	mov	sp, r7
 80067c2:	b008      	add	sp, #32
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	46c0      	nop			@ (mov r8, r8)
 80067c8:	20000018 	.word	0x20000018
 80067cc:	ffffdfff 	.word	0xffffdfff

080067d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08a      	sub	sp, #40	@ 0x28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80067de:	2317      	movs	r3, #23
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	2200      	movs	r2, #0
 80067e4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80067e6:	f7fc f9b9 	bl	8002b5c <HAL_GetTick>
 80067ea:	0002      	movs	r2, r0
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	1a9b      	subs	r3, r3, r2
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	18d3      	adds	r3, r2, r3
 80067f4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80067f6:	f7fc f9b1 	bl	8002b5c <HAL_GetTick>
 80067fa:	0003      	movs	r3, r0
 80067fc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	330c      	adds	r3, #12
 8006804:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006806:	4b41      	ldr	r3, [pc, #260]	@ (800690c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	0013      	movs	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	189b      	adds	r3, r3, r2
 8006810:	00da      	lsls	r2, r3, #3
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	0d1b      	lsrs	r3, r3, #20
 8006816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006818:	4353      	muls	r3, r2
 800681a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800681c:	e068      	b.n	80068f0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	23c0      	movs	r3, #192	@ 0xc0
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	429a      	cmp	r2, r3
 8006826:	d10a      	bne.n	800683e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d107      	bne.n	800683e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	b2da      	uxtb	r2, r3
 8006834:	2117      	movs	r1, #23
 8006836:	187b      	adds	r3, r7, r1
 8006838:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800683a:	187b      	adds	r3, r7, r1
 800683c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	3301      	adds	r3, #1
 8006842:	d055      	beq.n	80068f0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006844:	f7fc f98a 	bl	8002b5c <HAL_GetTick>
 8006848:	0002      	movs	r2, r0
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006850:	429a      	cmp	r2, r3
 8006852:	d902      	bls.n	800685a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006856:	2b00      	cmp	r3, #0
 8006858:	d142      	bne.n	80068e0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	21e0      	movs	r1, #224	@ 0xe0
 8006866:	438a      	bics	r2, r1
 8006868:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	2382      	movs	r3, #130	@ 0x82
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	429a      	cmp	r2, r3
 8006874:	d113      	bne.n	800689e <SPI_WaitFifoStateUntilTimeout+0xce>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	2380      	movs	r3, #128	@ 0x80
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	429a      	cmp	r2, r3
 8006880:	d005      	beq.n	800688e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	2380      	movs	r3, #128	@ 0x80
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	429a      	cmp	r2, r3
 800688c:	d107      	bne.n	800689e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2140      	movs	r1, #64	@ 0x40
 800689a:	438a      	bics	r2, r1
 800689c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068a2:	2380      	movs	r3, #128	@ 0x80
 80068a4:	019b      	lsls	r3, r3, #6
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d110      	bne.n	80068cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4916      	ldr	r1, [pc, #88]	@ (8006910 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80068b6:	400a      	ands	r2, r1
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2180      	movs	r1, #128	@ 0x80
 80068c6:	0189      	lsls	r1, r1, #6
 80068c8:	430a      	orrs	r2, r1
 80068ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	225d      	movs	r2, #93	@ 0x5d
 80068d0:	2101      	movs	r1, #1
 80068d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	225c      	movs	r2, #92	@ 0x5c
 80068d8:	2100      	movs	r1, #0
 80068da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e010      	b.n	8006902 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	4013      	ands	r3, r2
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d18e      	bne.n	800681e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	0018      	movs	r0, r3
 8006904:	46bd      	mov	sp, r7
 8006906:	b00a      	add	sp, #40	@ 0x28
 8006908:	bd80      	pop	{r7, pc}
 800690a:	46c0      	nop			@ (mov r8, r8)
 800690c:	20000018 	.word	0x20000018
 8006910:	ffffdfff 	.word	0xffffdfff

08006914 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af02      	add	r7, sp, #8
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	2382      	movs	r3, #130	@ 0x82
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	429a      	cmp	r2, r3
 800692a:	d113      	bne.n	8006954 <SPI_EndRxTransaction+0x40>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	2380      	movs	r3, #128	@ 0x80
 8006932:	021b      	lsls	r3, r3, #8
 8006934:	429a      	cmp	r2, r3
 8006936:	d005      	beq.n	8006944 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	2380      	movs	r3, #128	@ 0x80
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	429a      	cmp	r2, r3
 8006942:	d107      	bne.n	8006954 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2140      	movs	r1, #64	@ 0x40
 8006950:	438a      	bics	r2, r1
 8006952:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	0013      	movs	r3, r2
 800695e:	2200      	movs	r2, #0
 8006960:	2180      	movs	r1, #128	@ 0x80
 8006962:	f7ff fea7 	bl	80066b4 <SPI_WaitFlagStateUntilTimeout>
 8006966:	1e03      	subs	r3, r0, #0
 8006968:	d007      	beq.n	800697a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800696e:	2220      	movs	r2, #32
 8006970:	431a      	orrs	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e026      	b.n	80069c8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	2382      	movs	r3, #130	@ 0x82
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	429a      	cmp	r2, r3
 8006984:	d11f      	bne.n	80069c6 <SPI_EndRxTransaction+0xb2>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	2380      	movs	r3, #128	@ 0x80
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	429a      	cmp	r2, r3
 8006990:	d005      	beq.n	800699e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	2380      	movs	r3, #128	@ 0x80
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	429a      	cmp	r2, r3
 800699c:	d113      	bne.n	80069c6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	23c0      	movs	r3, #192	@ 0xc0
 80069a2:	00d9      	lsls	r1, r3, #3
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	0013      	movs	r3, r2
 80069ac:	2200      	movs	r2, #0
 80069ae:	f7ff ff0f 	bl	80067d0 <SPI_WaitFifoStateUntilTimeout>
 80069b2:	1e03      	subs	r3, r0, #0
 80069b4:	d007      	beq.n	80069c6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ba:	2220      	movs	r2, #32
 80069bc:	431a      	orrs	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e000      	b.n	80069c8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	0018      	movs	r0, r3
 80069ca:	46bd      	mov	sp, r7
 80069cc:	b004      	add	sp, #16
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	23c0      	movs	r3, #192	@ 0xc0
 80069e0:	0159      	lsls	r1, r3, #5
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	0013      	movs	r3, r2
 80069ea:	2200      	movs	r2, #0
 80069ec:	f7ff fef0 	bl	80067d0 <SPI_WaitFifoStateUntilTimeout>
 80069f0:	1e03      	subs	r3, r0, #0
 80069f2:	d007      	beq.n	8006a04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069f8:	2220      	movs	r2, #32
 80069fa:	431a      	orrs	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e027      	b.n	8006a54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	0013      	movs	r3, r2
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2180      	movs	r1, #128	@ 0x80
 8006a12:	f7ff fe4f 	bl	80066b4 <SPI_WaitFlagStateUntilTimeout>
 8006a16:	1e03      	subs	r3, r0, #0
 8006a18:	d007      	beq.n	8006a2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a1e:	2220      	movs	r2, #32
 8006a20:	431a      	orrs	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e014      	b.n	8006a54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	23c0      	movs	r3, #192	@ 0xc0
 8006a2e:	00d9      	lsls	r1, r3, #3
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	0013      	movs	r3, r2
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f7ff fec9 	bl	80067d0 <SPI_WaitFifoStateUntilTimeout>
 8006a3e:	1e03      	subs	r3, r0, #0
 8006a40:	d007      	beq.n	8006a52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a46:	2220      	movs	r2, #32
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e000      	b.n	8006a54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	0018      	movs	r0, r3
 8006a56:	46bd      	mov	sp, r7
 8006a58:	b004      	add	sp, #16
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e046      	b.n	8006afc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2288      	movs	r2, #136	@ 0x88
 8006a72:	589b      	ldr	r3, [r3, r2]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d107      	bne.n	8006a88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2284      	movs	r2, #132	@ 0x84
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	0018      	movs	r0, r3
 8006a84:	f7fb fe10 	bl	80026a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2288      	movs	r2, #136	@ 0x88
 8006a8c:	2124      	movs	r1, #36	@ 0x24
 8006a8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	438a      	bics	r2, r1
 8006a9e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f000 fdba 	bl	8007624 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	f000 fc12 	bl	80072dc <UART_SetConfig>
 8006ab8:	0003      	movs	r3, r0
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d101      	bne.n	8006ac2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e01c      	b.n	8006afc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	490d      	ldr	r1, [pc, #52]	@ (8006b04 <HAL_UART_Init+0xa8>)
 8006ace:	400a      	ands	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	212a      	movs	r1, #42	@ 0x2a
 8006ade:	438a      	bics	r2, r1
 8006ae0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2101      	movs	r1, #1
 8006aee:	430a      	orrs	r2, r1
 8006af0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	0018      	movs	r0, r3
 8006af6:	f000 fe49 	bl	800778c <UART_CheckIdleState>
 8006afa:	0003      	movs	r3, r0
}
 8006afc:	0018      	movs	r0, r3
 8006afe:	46bd      	mov	sp, r7
 8006b00:	b002      	add	sp, #8
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	ffffb7ff 	.word	0xffffb7ff

08006b08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08a      	sub	sp, #40	@ 0x28
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	603b      	str	r3, [r7, #0]
 8006b14:	1dbb      	adds	r3, r7, #6
 8006b16:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2288      	movs	r2, #136	@ 0x88
 8006b1c:	589b      	ldr	r3, [r3, r2]
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d000      	beq.n	8006b24 <HAL_UART_Transmit+0x1c>
 8006b22:	e090      	b.n	8006c46 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_UART_Transmit+0x2a>
 8006b2a:	1dbb      	adds	r3, r7, #6
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e088      	b.n	8006c48 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	2380      	movs	r3, #128	@ 0x80
 8006b3c:	015b      	lsls	r3, r3, #5
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d109      	bne.n	8006b56 <HAL_UART_Transmit+0x4e>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d105      	bne.n	8006b56 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	4013      	ands	r3, r2
 8006b50:	d001      	beq.n	8006b56 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e078      	b.n	8006c48 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2290      	movs	r2, #144	@ 0x90
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2288      	movs	r2, #136	@ 0x88
 8006b62:	2121      	movs	r1, #33	@ 0x21
 8006b64:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b66:	f7fb fff9 	bl	8002b5c <HAL_GetTick>
 8006b6a:	0003      	movs	r3, r0
 8006b6c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	1dba      	adds	r2, r7, #6
 8006b72:	2154      	movs	r1, #84	@ 0x54
 8006b74:	8812      	ldrh	r2, [r2, #0]
 8006b76:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	1dba      	adds	r2, r7, #6
 8006b7c:	2156      	movs	r1, #86	@ 0x56
 8006b7e:	8812      	ldrh	r2, [r2, #0]
 8006b80:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	2380      	movs	r3, #128	@ 0x80
 8006b88:	015b      	lsls	r3, r3, #5
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d108      	bne.n	8006ba0 <HAL_UART_Transmit+0x98>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d104      	bne.n	8006ba0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	61bb      	str	r3, [r7, #24]
 8006b9e:	e003      	b.n	8006ba8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ba8:	e030      	b.n	8006c0c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	0013      	movs	r3, r2
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2180      	movs	r1, #128	@ 0x80
 8006bb8:	f000 fe92 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 8006bbc:	1e03      	subs	r3, r0, #0
 8006bbe:	d005      	beq.n	8006bcc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2288      	movs	r2, #136	@ 0x88
 8006bc4:	2120      	movs	r1, #32
 8006bc6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e03d      	b.n	8006c48 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10b      	bne.n	8006bea <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	001a      	movs	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	05d2      	lsls	r2, r2, #23
 8006bde:	0dd2      	lsrs	r2, r2, #23
 8006be0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	3302      	adds	r3, #2
 8006be6:	61bb      	str	r3, [r7, #24]
 8006be8:	e007      	b.n	8006bfa <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	781a      	ldrb	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2256      	movs	r2, #86	@ 0x56
 8006bfe:	5a9b      	ldrh	r3, [r3, r2]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b299      	uxth	r1, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2256      	movs	r2, #86	@ 0x56
 8006c0a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2256      	movs	r2, #86	@ 0x56
 8006c10:	5a9b      	ldrh	r3, [r3, r2]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1c8      	bne.n	8006baa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	0013      	movs	r3, r2
 8006c22:	2200      	movs	r2, #0
 8006c24:	2140      	movs	r1, #64	@ 0x40
 8006c26:	f000 fe5b 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 8006c2a:	1e03      	subs	r3, r0, #0
 8006c2c:	d005      	beq.n	8006c3a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2288      	movs	r2, #136	@ 0x88
 8006c32:	2120      	movs	r1, #32
 8006c34:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e006      	b.n	8006c48 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2288      	movs	r2, #136	@ 0x88
 8006c3e:	2120      	movs	r1, #32
 8006c40:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	e000      	b.n	8006c48 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006c46:	2302      	movs	r3, #2
  }
}
 8006c48:	0018      	movs	r0, r3
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	b008      	add	sp, #32
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c50:	b5b0      	push	{r4, r5, r7, lr}
 8006c52:	b0aa      	sub	sp, #168	@ 0xa8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	22a4      	movs	r2, #164	@ 0xa4
 8006c60:	18b9      	adds	r1, r7, r2
 8006c62:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	20a0      	movs	r0, #160	@ 0xa0
 8006c6c:	1839      	adds	r1, r7, r0
 8006c6e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	249c      	movs	r4, #156	@ 0x9c
 8006c78:	1939      	adds	r1, r7, r4
 8006c7a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c7c:	0011      	movs	r1, r2
 8006c7e:	18bb      	adds	r3, r7, r2
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4aa2      	ldr	r2, [pc, #648]	@ (8006f0c <HAL_UART_IRQHandler+0x2bc>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	2298      	movs	r2, #152	@ 0x98
 8006c88:	18bd      	adds	r5, r7, r2
 8006c8a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006c8c:	18bb      	adds	r3, r7, r2
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d11a      	bne.n	8006cca <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c94:	187b      	adds	r3, r7, r1
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	d015      	beq.n	8006cca <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c9e:	183b      	adds	r3, r7, r0
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	d105      	bne.n	8006cb4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ca8:	193b      	adds	r3, r7, r4
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	2380      	movs	r3, #128	@ 0x80
 8006cae:	055b      	lsls	r3, r3, #21
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	d00a      	beq.n	8006cca <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d100      	bne.n	8006cbe <HAL_UART_IRQHandler+0x6e>
 8006cbc:	e2dc      	b.n	8007278 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	0010      	movs	r0, r2
 8006cc6:	4798      	blx	r3
      }
      return;
 8006cc8:	e2d6      	b.n	8007278 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cca:	2398      	movs	r3, #152	@ 0x98
 8006ccc:	18fb      	adds	r3, r7, r3
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d100      	bne.n	8006cd6 <HAL_UART_IRQHandler+0x86>
 8006cd4:	e122      	b.n	8006f1c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006cd6:	239c      	movs	r3, #156	@ 0x9c
 8006cd8:	18fb      	adds	r3, r7, r3
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a8c      	ldr	r2, [pc, #560]	@ (8006f10 <HAL_UART_IRQHandler+0x2c0>)
 8006cde:	4013      	ands	r3, r2
 8006ce0:	d106      	bne.n	8006cf0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ce2:	23a0      	movs	r3, #160	@ 0xa0
 8006ce4:	18fb      	adds	r3, r7, r3
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a8a      	ldr	r2, [pc, #552]	@ (8006f14 <HAL_UART_IRQHandler+0x2c4>)
 8006cea:	4013      	ands	r3, r2
 8006cec:	d100      	bne.n	8006cf0 <HAL_UART_IRQHandler+0xa0>
 8006cee:	e115      	b.n	8006f1c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cf0:	23a4      	movs	r3, #164	@ 0xa4
 8006cf2:	18fb      	adds	r3, r7, r3
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	d012      	beq.n	8006d22 <HAL_UART_IRQHandler+0xd2>
 8006cfc:	23a0      	movs	r3, #160	@ 0xa0
 8006cfe:	18fb      	adds	r3, r7, r3
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	2380      	movs	r3, #128	@ 0x80
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	4013      	ands	r3, r2
 8006d08:	d00b      	beq.n	8006d22 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2290      	movs	r2, #144	@ 0x90
 8006d16:	589b      	ldr	r3, [r3, r2]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2190      	movs	r1, #144	@ 0x90
 8006d20:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d22:	23a4      	movs	r3, #164	@ 0xa4
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2202      	movs	r2, #2
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	d011      	beq.n	8006d52 <HAL_UART_IRQHandler+0x102>
 8006d2e:	239c      	movs	r3, #156	@ 0x9c
 8006d30:	18fb      	adds	r3, r7, r3
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2201      	movs	r2, #1
 8006d36:	4013      	ands	r3, r2
 8006d38:	d00b      	beq.n	8006d52 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2290      	movs	r2, #144	@ 0x90
 8006d46:	589b      	ldr	r3, [r3, r2]
 8006d48:	2204      	movs	r2, #4
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2190      	movs	r1, #144	@ 0x90
 8006d50:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d52:	23a4      	movs	r3, #164	@ 0xa4
 8006d54:	18fb      	adds	r3, r7, r3
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2204      	movs	r2, #4
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	d011      	beq.n	8006d82 <HAL_UART_IRQHandler+0x132>
 8006d5e:	239c      	movs	r3, #156	@ 0x9c
 8006d60:	18fb      	adds	r3, r7, r3
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2201      	movs	r2, #1
 8006d66:	4013      	ands	r3, r2
 8006d68:	d00b      	beq.n	8006d82 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2204      	movs	r2, #4
 8006d70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2290      	movs	r2, #144	@ 0x90
 8006d76:	589b      	ldr	r3, [r3, r2]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2190      	movs	r1, #144	@ 0x90
 8006d80:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d82:	23a4      	movs	r3, #164	@ 0xa4
 8006d84:	18fb      	adds	r3, r7, r3
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2208      	movs	r2, #8
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	d017      	beq.n	8006dbe <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d8e:	23a0      	movs	r3, #160	@ 0xa0
 8006d90:	18fb      	adds	r3, r7, r3
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2220      	movs	r2, #32
 8006d96:	4013      	ands	r3, r2
 8006d98:	d105      	bne.n	8006da6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d9a:	239c      	movs	r3, #156	@ 0x9c
 8006d9c:	18fb      	adds	r3, r7, r3
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a5b      	ldr	r2, [pc, #364]	@ (8006f10 <HAL_UART_IRQHandler+0x2c0>)
 8006da2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006da4:	d00b      	beq.n	8006dbe <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2208      	movs	r2, #8
 8006dac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2290      	movs	r2, #144	@ 0x90
 8006db2:	589b      	ldr	r3, [r3, r2]
 8006db4:	2208      	movs	r2, #8
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2190      	movs	r1, #144	@ 0x90
 8006dbc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006dbe:	23a4      	movs	r3, #164	@ 0xa4
 8006dc0:	18fb      	adds	r3, r7, r3
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	2380      	movs	r3, #128	@ 0x80
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	4013      	ands	r3, r2
 8006dca:	d013      	beq.n	8006df4 <HAL_UART_IRQHandler+0x1a4>
 8006dcc:	23a0      	movs	r3, #160	@ 0xa0
 8006dce:	18fb      	adds	r3, r7, r3
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	2380      	movs	r3, #128	@ 0x80
 8006dd4:	04db      	lsls	r3, r3, #19
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	d00c      	beq.n	8006df4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2280      	movs	r2, #128	@ 0x80
 8006de0:	0112      	lsls	r2, r2, #4
 8006de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2290      	movs	r2, #144	@ 0x90
 8006de8:	589b      	ldr	r3, [r3, r2]
 8006dea:	2220      	movs	r2, #32
 8006dec:	431a      	orrs	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2190      	movs	r1, #144	@ 0x90
 8006df2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2290      	movs	r2, #144	@ 0x90
 8006df8:	589b      	ldr	r3, [r3, r2]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d100      	bne.n	8006e00 <HAL_UART_IRQHandler+0x1b0>
 8006dfe:	e23d      	b.n	800727c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e00:	23a4      	movs	r3, #164	@ 0xa4
 8006e02:	18fb      	adds	r3, r7, r3
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2220      	movs	r2, #32
 8006e08:	4013      	ands	r3, r2
 8006e0a:	d015      	beq.n	8006e38 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e0c:	23a0      	movs	r3, #160	@ 0xa0
 8006e0e:	18fb      	adds	r3, r7, r3
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2220      	movs	r2, #32
 8006e14:	4013      	ands	r3, r2
 8006e16:	d106      	bne.n	8006e26 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e18:	239c      	movs	r3, #156	@ 0x9c
 8006e1a:	18fb      	adds	r3, r7, r3
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	2380      	movs	r3, #128	@ 0x80
 8006e20:	055b      	lsls	r3, r3, #21
 8006e22:	4013      	ands	r3, r2
 8006e24:	d008      	beq.n	8006e38 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d004      	beq.n	8006e38 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	0010      	movs	r0, r2
 8006e36:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2290      	movs	r2, #144	@ 0x90
 8006e3c:	589b      	ldr	r3, [r3, r2]
 8006e3e:	2194      	movs	r1, #148	@ 0x94
 8006e40:	187a      	adds	r2, r7, r1
 8006e42:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	2240      	movs	r2, #64	@ 0x40
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	2b40      	cmp	r3, #64	@ 0x40
 8006e50:	d004      	beq.n	8006e5c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e52:	187b      	adds	r3, r7, r1
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2228      	movs	r2, #40	@ 0x28
 8006e58:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e5a:	d04c      	beq.n	8006ef6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	0018      	movs	r0, r3
 8006e60:	f000 fe94 	bl	8007b8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	2240      	movs	r2, #64	@ 0x40
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	2b40      	cmp	r3, #64	@ 0x40
 8006e70:	d13c      	bne.n	8006eec <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e72:	f3ef 8310 	mrs	r3, PRIMASK
 8006e76:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8006e78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e7a:	2090      	movs	r0, #144	@ 0x90
 8006e7c:	183a      	adds	r2, r7, r0
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	2301      	movs	r3, #1
 8006e82:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e86:	f383 8810 	msr	PRIMASK, r3
}
 8006e8a:	46c0      	nop			@ (mov r8, r8)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689a      	ldr	r2, [r3, #8]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2140      	movs	r1, #64	@ 0x40
 8006e98:	438a      	bics	r2, r1
 8006e9a:	609a      	str	r2, [r3, #8]
 8006e9c:	183b      	adds	r3, r7, r0
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ea2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ea4:	f383 8810 	msr	PRIMASK, r3
}
 8006ea8:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2280      	movs	r2, #128	@ 0x80
 8006eae:	589b      	ldr	r3, [r3, r2]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d016      	beq.n	8006ee2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2280      	movs	r2, #128	@ 0x80
 8006eb8:	589b      	ldr	r3, [r3, r2]
 8006eba:	4a17      	ldr	r2, [pc, #92]	@ (8006f18 <HAL_UART_IRQHandler+0x2c8>)
 8006ebc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2280      	movs	r2, #128	@ 0x80
 8006ec2:	589b      	ldr	r3, [r3, r2]
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	f7fc fb8b 	bl	80035e0 <HAL_DMA_Abort_IT>
 8006eca:	1e03      	subs	r3, r0, #0
 8006ecc:	d01c      	beq.n	8006f08 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2280      	movs	r2, #128	@ 0x80
 8006ed2:	589b      	ldr	r3, [r3, r2]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	2180      	movs	r1, #128	@ 0x80
 8006eda:	5852      	ldr	r2, [r2, r1]
 8006edc:	0010      	movs	r0, r2
 8006ede:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee0:	e012      	b.n	8006f08 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f000 f9f1 	bl	80072cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eea:	e00d      	b.n	8006f08 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	0018      	movs	r0, r3
 8006ef0:	f000 f9ec 	bl	80072cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef4:	e008      	b.n	8006f08 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	0018      	movs	r0, r3
 8006efa:	f000 f9e7 	bl	80072cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2290      	movs	r2, #144	@ 0x90
 8006f02:	2100      	movs	r1, #0
 8006f04:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006f06:	e1b9      	b.n	800727c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f08:	46c0      	nop			@ (mov r8, r8)
    return;
 8006f0a:	e1b7      	b.n	800727c <HAL_UART_IRQHandler+0x62c>
 8006f0c:	0000080f 	.word	0x0000080f
 8006f10:	10000001 	.word	0x10000001
 8006f14:	04000120 	.word	0x04000120
 8006f18:	08007e51 	.word	0x08007e51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d000      	beq.n	8006f26 <HAL_UART_IRQHandler+0x2d6>
 8006f24:	e13e      	b.n	80071a4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f26:	23a4      	movs	r3, #164	@ 0xa4
 8006f28:	18fb      	adds	r3, r7, r3
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2210      	movs	r2, #16
 8006f2e:	4013      	ands	r3, r2
 8006f30:	d100      	bne.n	8006f34 <HAL_UART_IRQHandler+0x2e4>
 8006f32:	e137      	b.n	80071a4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f34:	23a0      	movs	r3, #160	@ 0xa0
 8006f36:	18fb      	adds	r3, r7, r3
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2210      	movs	r2, #16
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	d100      	bne.n	8006f42 <HAL_UART_IRQHandler+0x2f2>
 8006f40:	e130      	b.n	80071a4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2210      	movs	r2, #16
 8006f48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	2240      	movs	r2, #64	@ 0x40
 8006f52:	4013      	ands	r3, r2
 8006f54:	2b40      	cmp	r3, #64	@ 0x40
 8006f56:	d000      	beq.n	8006f5a <HAL_UART_IRQHandler+0x30a>
 8006f58:	e0a4      	b.n	80070a4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2280      	movs	r2, #128	@ 0x80
 8006f5e:	589b      	ldr	r3, [r3, r2]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	217e      	movs	r1, #126	@ 0x7e
 8006f66:	187b      	adds	r3, r7, r1
 8006f68:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006f6a:	187b      	adds	r3, r7, r1
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d100      	bne.n	8006f74 <HAL_UART_IRQHandler+0x324>
 8006f72:	e185      	b.n	8007280 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	225c      	movs	r2, #92	@ 0x5c
 8006f78:	5a9b      	ldrh	r3, [r3, r2]
 8006f7a:	187a      	adds	r2, r7, r1
 8006f7c:	8812      	ldrh	r2, [r2, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d300      	bcc.n	8006f84 <HAL_UART_IRQHandler+0x334>
 8006f82:	e17d      	b.n	8007280 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	187a      	adds	r2, r7, r1
 8006f88:	215e      	movs	r1, #94	@ 0x5e
 8006f8a:	8812      	ldrh	r2, [r2, #0]
 8006f8c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2280      	movs	r2, #128	@ 0x80
 8006f92:	589b      	ldr	r3, [r3, r2]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	d170      	bne.n	8007080 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8006fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fa6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fa8:	2301      	movs	r3, #1
 8006faa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fae:	f383 8810 	msr	PRIMASK, r3
}
 8006fb2:	46c0      	nop			@ (mov r8, r8)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	49b4      	ldr	r1, [pc, #720]	@ (8007290 <HAL_UART_IRQHandler+0x640>)
 8006fc0:	400a      	ands	r2, r1
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fca:	f383 8810 	msr	PRIMASK, r3
}
 8006fce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd8:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fda:	2301      	movs	r3, #1
 8006fdc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fe0:	f383 8810 	msr	PRIMASK, r3
}
 8006fe4:	46c0      	nop			@ (mov r8, r8)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	438a      	bics	r2, r1
 8006ff4:	609a      	str	r2, [r3, #8]
 8006ff6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ff8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ffa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ffc:	f383 8810 	msr	PRIMASK, r3
}
 8007000:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007002:	f3ef 8310 	mrs	r3, PRIMASK
 8007006:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8007008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800700a:	673b      	str	r3, [r7, #112]	@ 0x70
 800700c:	2301      	movs	r3, #1
 800700e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007012:	f383 8810 	msr	PRIMASK, r3
}
 8007016:	46c0      	nop			@ (mov r8, r8)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2140      	movs	r1, #64	@ 0x40
 8007024:	438a      	bics	r2, r1
 8007026:	609a      	str	r2, [r3, #8]
 8007028:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800702a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800702c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800702e:	f383 8810 	msr	PRIMASK, r3
}
 8007032:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	228c      	movs	r2, #140	@ 0x8c
 8007038:	2120      	movs	r1, #32
 800703a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007042:	f3ef 8310 	mrs	r3, PRIMASK
 8007046:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8007048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800704c:	2301      	movs	r3, #1
 800704e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007050:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007052:	f383 8810 	msr	PRIMASK, r3
}
 8007056:	46c0      	nop			@ (mov r8, r8)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2110      	movs	r1, #16
 8007064:	438a      	bics	r2, r1
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800706a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800706c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800706e:	f383 8810 	msr	PRIMASK, r3
}
 8007072:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2280      	movs	r2, #128	@ 0x80
 8007078:	589b      	ldr	r3, [r3, r2]
 800707a:	0018      	movs	r0, r3
 800707c:	f7fc fa4e 	bl	800351c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	225c      	movs	r2, #92	@ 0x5c
 800708a:	5a9a      	ldrh	r2, [r3, r2]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	215e      	movs	r1, #94	@ 0x5e
 8007090:	5a5b      	ldrh	r3, [r3, r1]
 8007092:	b29b      	uxth	r3, r3
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	b29a      	uxth	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	0011      	movs	r1, r2
 800709c:	0018      	movs	r0, r3
 800709e:	f7fa fb1d 	bl	80016dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070a2:	e0ed      	b.n	8007280 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	225c      	movs	r2, #92	@ 0x5c
 80070a8:	5a99      	ldrh	r1, [r3, r2]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	225e      	movs	r2, #94	@ 0x5e
 80070ae:	5a9b      	ldrh	r3, [r3, r2]
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	208e      	movs	r0, #142	@ 0x8e
 80070b4:	183b      	adds	r3, r7, r0
 80070b6:	1a8a      	subs	r2, r1, r2
 80070b8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	225e      	movs	r2, #94	@ 0x5e
 80070be:	5a9b      	ldrh	r3, [r3, r2]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d100      	bne.n	80070c8 <HAL_UART_IRQHandler+0x478>
 80070c6:	e0dd      	b.n	8007284 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80070c8:	183b      	adds	r3, r7, r0
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d100      	bne.n	80070d2 <HAL_UART_IRQHandler+0x482>
 80070d0:	e0d8      	b.n	8007284 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d2:	f3ef 8310 	mrs	r3, PRIMASK
 80070d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80070d8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070da:	2488      	movs	r4, #136	@ 0x88
 80070dc:	193a      	adds	r2, r7, r4
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	2301      	movs	r3, #1
 80070e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f383 8810 	msr	PRIMASK, r3
}
 80070ea:	46c0      	nop			@ (mov r8, r8)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4967      	ldr	r1, [pc, #412]	@ (8007294 <HAL_UART_IRQHandler+0x644>)
 80070f8:	400a      	ands	r2, r1
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	193b      	adds	r3, r7, r4
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f383 8810 	msr	PRIMASK, r3
}
 8007108:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800710a:	f3ef 8310 	mrs	r3, PRIMASK
 800710e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007110:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007112:	2484      	movs	r4, #132	@ 0x84
 8007114:	193a      	adds	r2, r7, r4
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	2301      	movs	r3, #1
 800711a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	f383 8810 	msr	PRIMASK, r3
}
 8007122:	46c0      	nop			@ (mov r8, r8)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689a      	ldr	r2, [r3, #8]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	495a      	ldr	r1, [pc, #360]	@ (8007298 <HAL_UART_IRQHandler+0x648>)
 8007130:	400a      	ands	r2, r1
 8007132:	609a      	str	r2, [r3, #8]
 8007134:	193b      	adds	r3, r7, r4
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	f383 8810 	msr	PRIMASK, r3
}
 8007140:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	228c      	movs	r2, #140	@ 0x8c
 8007146:	2120      	movs	r1, #32
 8007148:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007156:	f3ef 8310 	mrs	r3, PRIMASK
 800715a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800715e:	2480      	movs	r4, #128	@ 0x80
 8007160:	193a      	adds	r2, r7, r4
 8007162:	6013      	str	r3, [r2, #0]
 8007164:	2301      	movs	r3, #1
 8007166:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716a:	f383 8810 	msr	PRIMASK, r3
}
 800716e:	46c0      	nop			@ (mov r8, r8)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2110      	movs	r1, #16
 800717c:	438a      	bics	r2, r1
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	193b      	adds	r3, r7, r4
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007188:	f383 8810 	msr	PRIMASK, r3
}
 800718c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2202      	movs	r2, #2
 8007192:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007194:	183b      	adds	r3, r7, r0
 8007196:	881a      	ldrh	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	0011      	movs	r1, r2
 800719c:	0018      	movs	r0, r3
 800719e:	f7fa fa9d 	bl	80016dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071a2:	e06f      	b.n	8007284 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071a4:	23a4      	movs	r3, #164	@ 0xa4
 80071a6:	18fb      	adds	r3, r7, r3
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	2380      	movs	r3, #128	@ 0x80
 80071ac:	035b      	lsls	r3, r3, #13
 80071ae:	4013      	ands	r3, r2
 80071b0:	d010      	beq.n	80071d4 <HAL_UART_IRQHandler+0x584>
 80071b2:	239c      	movs	r3, #156	@ 0x9c
 80071b4:	18fb      	adds	r3, r7, r3
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	2380      	movs	r3, #128	@ 0x80
 80071ba:	03db      	lsls	r3, r3, #15
 80071bc:	4013      	ands	r3, r2
 80071be:	d009      	beq.n	80071d4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2280      	movs	r2, #128	@ 0x80
 80071c6:	0352      	lsls	r2, r2, #13
 80071c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	0018      	movs	r0, r3
 80071ce:	f000 fe82 	bl	8007ed6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071d2:	e05a      	b.n	800728a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80071d4:	23a4      	movs	r3, #164	@ 0xa4
 80071d6:	18fb      	adds	r3, r7, r3
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2280      	movs	r2, #128	@ 0x80
 80071dc:	4013      	ands	r3, r2
 80071de:	d016      	beq.n	800720e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80071e0:	23a0      	movs	r3, #160	@ 0xa0
 80071e2:	18fb      	adds	r3, r7, r3
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2280      	movs	r2, #128	@ 0x80
 80071e8:	4013      	ands	r3, r2
 80071ea:	d106      	bne.n	80071fa <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80071ec:	239c      	movs	r3, #156	@ 0x9c
 80071ee:	18fb      	adds	r3, r7, r3
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	2380      	movs	r3, #128	@ 0x80
 80071f4:	041b      	lsls	r3, r3, #16
 80071f6:	4013      	ands	r3, r2
 80071f8:	d009      	beq.n	800720e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d042      	beq.n	8007288 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	0010      	movs	r0, r2
 800720a:	4798      	blx	r3
    }
    return;
 800720c:	e03c      	b.n	8007288 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800720e:	23a4      	movs	r3, #164	@ 0xa4
 8007210:	18fb      	adds	r3, r7, r3
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2240      	movs	r2, #64	@ 0x40
 8007216:	4013      	ands	r3, r2
 8007218:	d00a      	beq.n	8007230 <HAL_UART_IRQHandler+0x5e0>
 800721a:	23a0      	movs	r3, #160	@ 0xa0
 800721c:	18fb      	adds	r3, r7, r3
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2240      	movs	r2, #64	@ 0x40
 8007222:	4013      	ands	r3, r2
 8007224:	d004      	beq.n	8007230 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	0018      	movs	r0, r3
 800722a:	f000 fe28 	bl	8007e7e <UART_EndTransmit_IT>
    return;
 800722e:	e02c      	b.n	800728a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007230:	23a4      	movs	r3, #164	@ 0xa4
 8007232:	18fb      	adds	r3, r7, r3
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	2380      	movs	r3, #128	@ 0x80
 8007238:	041b      	lsls	r3, r3, #16
 800723a:	4013      	ands	r3, r2
 800723c:	d00b      	beq.n	8007256 <HAL_UART_IRQHandler+0x606>
 800723e:	23a0      	movs	r3, #160	@ 0xa0
 8007240:	18fb      	adds	r3, r7, r3
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	2380      	movs	r3, #128	@ 0x80
 8007246:	05db      	lsls	r3, r3, #23
 8007248:	4013      	ands	r3, r2
 800724a:	d004      	beq.n	8007256 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	0018      	movs	r0, r3
 8007250:	f000 fe51 	bl	8007ef6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007254:	e019      	b.n	800728a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007256:	23a4      	movs	r3, #164	@ 0xa4
 8007258:	18fb      	adds	r3, r7, r3
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	2380      	movs	r3, #128	@ 0x80
 800725e:	045b      	lsls	r3, r3, #17
 8007260:	4013      	ands	r3, r2
 8007262:	d012      	beq.n	800728a <HAL_UART_IRQHandler+0x63a>
 8007264:	23a0      	movs	r3, #160	@ 0xa0
 8007266:	18fb      	adds	r3, r7, r3
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	da0d      	bge.n	800728a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	0018      	movs	r0, r3
 8007272:	f000 fe38 	bl	8007ee6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007276:	e008      	b.n	800728a <HAL_UART_IRQHandler+0x63a>
      return;
 8007278:	46c0      	nop			@ (mov r8, r8)
 800727a:	e006      	b.n	800728a <HAL_UART_IRQHandler+0x63a>
    return;
 800727c:	46c0      	nop			@ (mov r8, r8)
 800727e:	e004      	b.n	800728a <HAL_UART_IRQHandler+0x63a>
      return;
 8007280:	46c0      	nop			@ (mov r8, r8)
 8007282:	e002      	b.n	800728a <HAL_UART_IRQHandler+0x63a>
      return;
 8007284:	46c0      	nop			@ (mov r8, r8)
 8007286:	e000      	b.n	800728a <HAL_UART_IRQHandler+0x63a>
    return;
 8007288:	46c0      	nop			@ (mov r8, r8)
  }
}
 800728a:	46bd      	mov	sp, r7
 800728c:	b02a      	add	sp, #168	@ 0xa8
 800728e:	bdb0      	pop	{r4, r5, r7, pc}
 8007290:	fffffeff 	.word	0xfffffeff
 8007294:	fffffedf 	.word	0xfffffedf
 8007298:	effffffe 	.word	0xeffffffe

0800729c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80072a4:	46c0      	nop			@ (mov r8, r8)
 80072a6:	46bd      	mov	sp, r7
 80072a8:	b002      	add	sp, #8
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80072b4:	46c0      	nop			@ (mov r8, r8)
 80072b6:	46bd      	mov	sp, r7
 80072b8:	b002      	add	sp, #8
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80072c4:	46c0      	nop			@ (mov r8, r8)
 80072c6:	46bd      	mov	sp, r7
 80072c8:	b002      	add	sp, #8
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072d4:	46c0      	nop			@ (mov r8, r8)
 80072d6:	46bd      	mov	sp, r7
 80072d8:	b002      	add	sp, #8
 80072da:	bd80      	pop	{r7, pc}

080072dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b088      	sub	sp, #32
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072e4:	231a      	movs	r3, #26
 80072e6:	18fb      	adds	r3, r7, r3
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	431a      	orrs	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	4313      	orrs	r3, r2
 8007302:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4abc      	ldr	r2, [pc, #752]	@ (80075fc <UART_SetConfig+0x320>)
 800730c:	4013      	ands	r3, r2
 800730e:	0019      	movs	r1, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	69fa      	ldr	r2, [r7, #28]
 8007316:	430a      	orrs	r2, r1
 8007318:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	4ab7      	ldr	r2, [pc, #732]	@ (8007600 <UART_SetConfig+0x324>)
 8007322:	4013      	ands	r3, r2
 8007324:	0019      	movs	r1, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	4313      	orrs	r3, r2
 8007340:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	4aae      	ldr	r2, [pc, #696]	@ (8007604 <UART_SetConfig+0x328>)
 800734a:	4013      	ands	r3, r2
 800734c:	0019      	movs	r1, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69fa      	ldr	r2, [r7, #28]
 8007354:	430a      	orrs	r2, r1
 8007356:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735e:	220f      	movs	r2, #15
 8007360:	4393      	bics	r3, r2
 8007362:	0019      	movs	r1, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4aa4      	ldr	r2, [pc, #656]	@ (8007608 <UART_SetConfig+0x32c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d127      	bne.n	80073ca <UART_SetConfig+0xee>
 800737a:	4ba4      	ldr	r3, [pc, #656]	@ (800760c <UART_SetConfig+0x330>)
 800737c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800737e:	2203      	movs	r2, #3
 8007380:	4013      	ands	r3, r2
 8007382:	2b03      	cmp	r3, #3
 8007384:	d017      	beq.n	80073b6 <UART_SetConfig+0xda>
 8007386:	d81b      	bhi.n	80073c0 <UART_SetConfig+0xe4>
 8007388:	2b02      	cmp	r3, #2
 800738a:	d00a      	beq.n	80073a2 <UART_SetConfig+0xc6>
 800738c:	d818      	bhi.n	80073c0 <UART_SetConfig+0xe4>
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <UART_SetConfig+0xbc>
 8007392:	2b01      	cmp	r3, #1
 8007394:	d00a      	beq.n	80073ac <UART_SetConfig+0xd0>
 8007396:	e013      	b.n	80073c0 <UART_SetConfig+0xe4>
 8007398:	231b      	movs	r3, #27
 800739a:	18fb      	adds	r3, r7, r3
 800739c:	2200      	movs	r2, #0
 800739e:	701a      	strb	r2, [r3, #0]
 80073a0:	e058      	b.n	8007454 <UART_SetConfig+0x178>
 80073a2:	231b      	movs	r3, #27
 80073a4:	18fb      	adds	r3, r7, r3
 80073a6:	2202      	movs	r2, #2
 80073a8:	701a      	strb	r2, [r3, #0]
 80073aa:	e053      	b.n	8007454 <UART_SetConfig+0x178>
 80073ac:	231b      	movs	r3, #27
 80073ae:	18fb      	adds	r3, r7, r3
 80073b0:	2204      	movs	r2, #4
 80073b2:	701a      	strb	r2, [r3, #0]
 80073b4:	e04e      	b.n	8007454 <UART_SetConfig+0x178>
 80073b6:	231b      	movs	r3, #27
 80073b8:	18fb      	adds	r3, r7, r3
 80073ba:	2208      	movs	r2, #8
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	e049      	b.n	8007454 <UART_SetConfig+0x178>
 80073c0:	231b      	movs	r3, #27
 80073c2:	18fb      	adds	r3, r7, r3
 80073c4:	2210      	movs	r2, #16
 80073c6:	701a      	strb	r2, [r3, #0]
 80073c8:	e044      	b.n	8007454 <UART_SetConfig+0x178>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a90      	ldr	r2, [pc, #576]	@ (8007610 <UART_SetConfig+0x334>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d127      	bne.n	8007424 <UART_SetConfig+0x148>
 80073d4:	4b8d      	ldr	r3, [pc, #564]	@ (800760c <UART_SetConfig+0x330>)
 80073d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d8:	220c      	movs	r2, #12
 80073da:	4013      	ands	r3, r2
 80073dc:	2b0c      	cmp	r3, #12
 80073de:	d017      	beq.n	8007410 <UART_SetConfig+0x134>
 80073e0:	d81b      	bhi.n	800741a <UART_SetConfig+0x13e>
 80073e2:	2b08      	cmp	r3, #8
 80073e4:	d00a      	beq.n	80073fc <UART_SetConfig+0x120>
 80073e6:	d818      	bhi.n	800741a <UART_SetConfig+0x13e>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <UART_SetConfig+0x116>
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d00a      	beq.n	8007406 <UART_SetConfig+0x12a>
 80073f0:	e013      	b.n	800741a <UART_SetConfig+0x13e>
 80073f2:	231b      	movs	r3, #27
 80073f4:	18fb      	adds	r3, r7, r3
 80073f6:	2200      	movs	r2, #0
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	e02b      	b.n	8007454 <UART_SetConfig+0x178>
 80073fc:	231b      	movs	r3, #27
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	2202      	movs	r2, #2
 8007402:	701a      	strb	r2, [r3, #0]
 8007404:	e026      	b.n	8007454 <UART_SetConfig+0x178>
 8007406:	231b      	movs	r3, #27
 8007408:	18fb      	adds	r3, r7, r3
 800740a:	2204      	movs	r2, #4
 800740c:	701a      	strb	r2, [r3, #0]
 800740e:	e021      	b.n	8007454 <UART_SetConfig+0x178>
 8007410:	231b      	movs	r3, #27
 8007412:	18fb      	adds	r3, r7, r3
 8007414:	2208      	movs	r2, #8
 8007416:	701a      	strb	r2, [r3, #0]
 8007418:	e01c      	b.n	8007454 <UART_SetConfig+0x178>
 800741a:	231b      	movs	r3, #27
 800741c:	18fb      	adds	r3, r7, r3
 800741e:	2210      	movs	r2, #16
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	e017      	b.n	8007454 <UART_SetConfig+0x178>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a7a      	ldr	r2, [pc, #488]	@ (8007614 <UART_SetConfig+0x338>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d104      	bne.n	8007438 <UART_SetConfig+0x15c>
 800742e:	231b      	movs	r3, #27
 8007430:	18fb      	adds	r3, r7, r3
 8007432:	2200      	movs	r2, #0
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e00d      	b.n	8007454 <UART_SetConfig+0x178>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a76      	ldr	r2, [pc, #472]	@ (8007618 <UART_SetConfig+0x33c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d104      	bne.n	800744c <UART_SetConfig+0x170>
 8007442:	231b      	movs	r3, #27
 8007444:	18fb      	adds	r3, r7, r3
 8007446:	2200      	movs	r2, #0
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	e003      	b.n	8007454 <UART_SetConfig+0x178>
 800744c:	231b      	movs	r3, #27
 800744e:	18fb      	adds	r3, r7, r3
 8007450:	2210      	movs	r2, #16
 8007452:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	69da      	ldr	r2, [r3, #28]
 8007458:	2380      	movs	r3, #128	@ 0x80
 800745a:	021b      	lsls	r3, r3, #8
 800745c:	429a      	cmp	r2, r3
 800745e:	d000      	beq.n	8007462 <UART_SetConfig+0x186>
 8007460:	e065      	b.n	800752e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8007462:	231b      	movs	r3, #27
 8007464:	18fb      	adds	r3, r7, r3
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b08      	cmp	r3, #8
 800746a:	d015      	beq.n	8007498 <UART_SetConfig+0x1bc>
 800746c:	dc18      	bgt.n	80074a0 <UART_SetConfig+0x1c4>
 800746e:	2b04      	cmp	r3, #4
 8007470:	d00d      	beq.n	800748e <UART_SetConfig+0x1b2>
 8007472:	dc15      	bgt.n	80074a0 <UART_SetConfig+0x1c4>
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <UART_SetConfig+0x1a2>
 8007478:	2b02      	cmp	r3, #2
 800747a:	d005      	beq.n	8007488 <UART_SetConfig+0x1ac>
 800747c:	e010      	b.n	80074a0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800747e:	f7fe fa83 	bl	8005988 <HAL_RCC_GetPCLK1Freq>
 8007482:	0003      	movs	r3, r0
 8007484:	617b      	str	r3, [r7, #20]
        break;
 8007486:	e012      	b.n	80074ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007488:	4b64      	ldr	r3, [pc, #400]	@ (800761c <UART_SetConfig+0x340>)
 800748a:	617b      	str	r3, [r7, #20]
        break;
 800748c:	e00f      	b.n	80074ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800748e:	f7fe f9ef 	bl	8005870 <HAL_RCC_GetSysClockFreq>
 8007492:	0003      	movs	r3, r0
 8007494:	617b      	str	r3, [r7, #20]
        break;
 8007496:	e00a      	b.n	80074ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007498:	2380      	movs	r3, #128	@ 0x80
 800749a:	021b      	lsls	r3, r3, #8
 800749c:	617b      	str	r3, [r7, #20]
        break;
 800749e:	e006      	b.n	80074ae <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80074a4:	231a      	movs	r3, #26
 80074a6:	18fb      	adds	r3, r7, r3
 80074a8:	2201      	movs	r2, #1
 80074aa:	701a      	strb	r2, [r3, #0]
        break;
 80074ac:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d100      	bne.n	80074b6 <UART_SetConfig+0x1da>
 80074b4:	e08d      	b.n	80075d2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074ba:	4b59      	ldr	r3, [pc, #356]	@ (8007620 <UART_SetConfig+0x344>)
 80074bc:	0052      	lsls	r2, r2, #1
 80074be:	5ad3      	ldrh	r3, [r2, r3]
 80074c0:	0019      	movs	r1, r3
 80074c2:	6978      	ldr	r0, [r7, #20]
 80074c4:	f7f8 fe26 	bl	8000114 <__udivsi3>
 80074c8:	0003      	movs	r3, r0
 80074ca:	005a      	lsls	r2, r3, #1
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	085b      	lsrs	r3, r3, #1
 80074d2:	18d2      	adds	r2, r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	0019      	movs	r1, r3
 80074da:	0010      	movs	r0, r2
 80074dc:	f7f8 fe1a 	bl	8000114 <__udivsi3>
 80074e0:	0003      	movs	r3, r0
 80074e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	2b0f      	cmp	r3, #15
 80074e8:	d91c      	bls.n	8007524 <UART_SetConfig+0x248>
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	2380      	movs	r3, #128	@ 0x80
 80074ee:	025b      	lsls	r3, r3, #9
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d217      	bcs.n	8007524 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	200e      	movs	r0, #14
 80074fa:	183b      	adds	r3, r7, r0
 80074fc:	210f      	movs	r1, #15
 80074fe:	438a      	bics	r2, r1
 8007500:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	085b      	lsrs	r3, r3, #1
 8007506:	b29b      	uxth	r3, r3
 8007508:	2207      	movs	r2, #7
 800750a:	4013      	ands	r3, r2
 800750c:	b299      	uxth	r1, r3
 800750e:	183b      	adds	r3, r7, r0
 8007510:	183a      	adds	r2, r7, r0
 8007512:	8812      	ldrh	r2, [r2, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	183a      	adds	r2, r7, r0
 800751e:	8812      	ldrh	r2, [r2, #0]
 8007520:	60da      	str	r2, [r3, #12]
 8007522:	e056      	b.n	80075d2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007524:	231a      	movs	r3, #26
 8007526:	18fb      	adds	r3, r7, r3
 8007528:	2201      	movs	r2, #1
 800752a:	701a      	strb	r2, [r3, #0]
 800752c:	e051      	b.n	80075d2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800752e:	231b      	movs	r3, #27
 8007530:	18fb      	adds	r3, r7, r3
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b08      	cmp	r3, #8
 8007536:	d015      	beq.n	8007564 <UART_SetConfig+0x288>
 8007538:	dc18      	bgt.n	800756c <UART_SetConfig+0x290>
 800753a:	2b04      	cmp	r3, #4
 800753c:	d00d      	beq.n	800755a <UART_SetConfig+0x27e>
 800753e:	dc15      	bgt.n	800756c <UART_SetConfig+0x290>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <UART_SetConfig+0x26e>
 8007544:	2b02      	cmp	r3, #2
 8007546:	d005      	beq.n	8007554 <UART_SetConfig+0x278>
 8007548:	e010      	b.n	800756c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800754a:	f7fe fa1d 	bl	8005988 <HAL_RCC_GetPCLK1Freq>
 800754e:	0003      	movs	r3, r0
 8007550:	617b      	str	r3, [r7, #20]
        break;
 8007552:	e012      	b.n	800757a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007554:	4b31      	ldr	r3, [pc, #196]	@ (800761c <UART_SetConfig+0x340>)
 8007556:	617b      	str	r3, [r7, #20]
        break;
 8007558:	e00f      	b.n	800757a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800755a:	f7fe f989 	bl	8005870 <HAL_RCC_GetSysClockFreq>
 800755e:	0003      	movs	r3, r0
 8007560:	617b      	str	r3, [r7, #20]
        break;
 8007562:	e00a      	b.n	800757a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007564:	2380      	movs	r3, #128	@ 0x80
 8007566:	021b      	lsls	r3, r3, #8
 8007568:	617b      	str	r3, [r7, #20]
        break;
 800756a:	e006      	b.n	800757a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007570:	231a      	movs	r3, #26
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	2201      	movs	r2, #1
 8007576:	701a      	strb	r2, [r3, #0]
        break;
 8007578:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d028      	beq.n	80075d2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007584:	4b26      	ldr	r3, [pc, #152]	@ (8007620 <UART_SetConfig+0x344>)
 8007586:	0052      	lsls	r2, r2, #1
 8007588:	5ad3      	ldrh	r3, [r2, r3]
 800758a:	0019      	movs	r1, r3
 800758c:	6978      	ldr	r0, [r7, #20]
 800758e:	f7f8 fdc1 	bl	8000114 <__udivsi3>
 8007592:	0003      	movs	r3, r0
 8007594:	001a      	movs	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	085b      	lsrs	r3, r3, #1
 800759c:	18d2      	adds	r2, r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	0019      	movs	r1, r3
 80075a4:	0010      	movs	r0, r2
 80075a6:	f7f8 fdb5 	bl	8000114 <__udivsi3>
 80075aa:	0003      	movs	r3, r0
 80075ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	2b0f      	cmp	r3, #15
 80075b2:	d90a      	bls.n	80075ca <UART_SetConfig+0x2ee>
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	2380      	movs	r3, #128	@ 0x80
 80075b8:	025b      	lsls	r3, r3, #9
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d205      	bcs.n	80075ca <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	60da      	str	r2, [r3, #12]
 80075c8:	e003      	b.n	80075d2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80075ca:	231a      	movs	r3, #26
 80075cc:	18fb      	adds	r3, r7, r3
 80075ce:	2201      	movs	r2, #1
 80075d0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	226a      	movs	r2, #106	@ 0x6a
 80075d6:	2101      	movs	r1, #1
 80075d8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2268      	movs	r2, #104	@ 0x68
 80075de:	2101      	movs	r1, #1
 80075e0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80075ee:	231a      	movs	r3, #26
 80075f0:	18fb      	adds	r3, r7, r3
 80075f2:	781b      	ldrb	r3, [r3, #0]
}
 80075f4:	0018      	movs	r0, r3
 80075f6:	46bd      	mov	sp, r7
 80075f8:	b008      	add	sp, #32
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	cfff69f3 	.word	0xcfff69f3
 8007600:	ffffcfff 	.word	0xffffcfff
 8007604:	11fff4ff 	.word	0x11fff4ff
 8007608:	40013800 	.word	0x40013800
 800760c:	40021000 	.word	0x40021000
 8007610:	40004400 	.word	0x40004400
 8007614:	40004800 	.word	0x40004800
 8007618:	40004c00 	.word	0x40004c00
 800761c:	00f42400 	.word	0x00f42400
 8007620:	080096f4 	.word	0x080096f4

08007624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007630:	2208      	movs	r2, #8
 8007632:	4013      	ands	r3, r2
 8007634:	d00b      	beq.n	800764e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	4a4a      	ldr	r2, [pc, #296]	@ (8007768 <UART_AdvFeatureConfig+0x144>)
 800763e:	4013      	ands	r3, r2
 8007640:	0019      	movs	r1, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007652:	2201      	movs	r2, #1
 8007654:	4013      	ands	r3, r2
 8007656:	d00b      	beq.n	8007670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	4a43      	ldr	r2, [pc, #268]	@ (800776c <UART_AdvFeatureConfig+0x148>)
 8007660:	4013      	ands	r3, r2
 8007662:	0019      	movs	r1, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007674:	2202      	movs	r2, #2
 8007676:	4013      	ands	r3, r2
 8007678:	d00b      	beq.n	8007692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	4a3b      	ldr	r2, [pc, #236]	@ (8007770 <UART_AdvFeatureConfig+0x14c>)
 8007682:	4013      	ands	r3, r2
 8007684:	0019      	movs	r1, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007696:	2204      	movs	r2, #4
 8007698:	4013      	ands	r3, r2
 800769a:	d00b      	beq.n	80076b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	4a34      	ldr	r2, [pc, #208]	@ (8007774 <UART_AdvFeatureConfig+0x150>)
 80076a4:	4013      	ands	r3, r2
 80076a6:	0019      	movs	r1, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b8:	2210      	movs	r2, #16
 80076ba:	4013      	ands	r3, r2
 80076bc:	d00b      	beq.n	80076d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	4a2c      	ldr	r2, [pc, #176]	@ (8007778 <UART_AdvFeatureConfig+0x154>)
 80076c6:	4013      	ands	r3, r2
 80076c8:	0019      	movs	r1, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076da:	2220      	movs	r2, #32
 80076dc:	4013      	ands	r3, r2
 80076de:	d00b      	beq.n	80076f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	4a25      	ldr	r2, [pc, #148]	@ (800777c <UART_AdvFeatureConfig+0x158>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	0019      	movs	r1, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fc:	2240      	movs	r2, #64	@ 0x40
 80076fe:	4013      	ands	r3, r2
 8007700:	d01d      	beq.n	800773e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	4a1d      	ldr	r2, [pc, #116]	@ (8007780 <UART_AdvFeatureConfig+0x15c>)
 800770a:	4013      	ands	r3, r2
 800770c:	0019      	movs	r1, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800771e:	2380      	movs	r3, #128	@ 0x80
 8007720:	035b      	lsls	r3, r3, #13
 8007722:	429a      	cmp	r2, r3
 8007724:	d10b      	bne.n	800773e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	4a15      	ldr	r2, [pc, #84]	@ (8007784 <UART_AdvFeatureConfig+0x160>)
 800772e:	4013      	ands	r3, r2
 8007730:	0019      	movs	r1, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007742:	2280      	movs	r2, #128	@ 0x80
 8007744:	4013      	ands	r3, r2
 8007746:	d00b      	beq.n	8007760 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	4a0e      	ldr	r2, [pc, #56]	@ (8007788 <UART_AdvFeatureConfig+0x164>)
 8007750:	4013      	ands	r3, r2
 8007752:	0019      	movs	r1, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	430a      	orrs	r2, r1
 800775e:	605a      	str	r2, [r3, #4]
  }
}
 8007760:	46c0      	nop			@ (mov r8, r8)
 8007762:	46bd      	mov	sp, r7
 8007764:	b002      	add	sp, #8
 8007766:	bd80      	pop	{r7, pc}
 8007768:	ffff7fff 	.word	0xffff7fff
 800776c:	fffdffff 	.word	0xfffdffff
 8007770:	fffeffff 	.word	0xfffeffff
 8007774:	fffbffff 	.word	0xfffbffff
 8007778:	ffffefff 	.word	0xffffefff
 800777c:	ffffdfff 	.word	0xffffdfff
 8007780:	ffefffff 	.word	0xffefffff
 8007784:	ff9fffff 	.word	0xff9fffff
 8007788:	fff7ffff 	.word	0xfff7ffff

0800778c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b092      	sub	sp, #72	@ 0x48
 8007790:	af02      	add	r7, sp, #8
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2290      	movs	r2, #144	@ 0x90
 8007798:	2100      	movs	r1, #0
 800779a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800779c:	f7fb f9de 	bl	8002b5c <HAL_GetTick>
 80077a0:	0003      	movs	r3, r0
 80077a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2208      	movs	r2, #8
 80077ac:	4013      	ands	r3, r2
 80077ae:	2b08      	cmp	r3, #8
 80077b0:	d12d      	bne.n	800780e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b4:	2280      	movs	r2, #128	@ 0x80
 80077b6:	0391      	lsls	r1, r2, #14
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	4a47      	ldr	r2, [pc, #284]	@ (80078d8 <UART_CheckIdleState+0x14c>)
 80077bc:	9200      	str	r2, [sp, #0]
 80077be:	2200      	movs	r2, #0
 80077c0:	f000 f88e 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 80077c4:	1e03      	subs	r3, r0, #0
 80077c6:	d022      	beq.n	800780e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077c8:	f3ef 8310 	mrs	r3, PRIMASK
 80077cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80077ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80077d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077d2:	2301      	movs	r3, #1
 80077d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d8:	f383 8810 	msr	PRIMASK, r3
}
 80077dc:	46c0      	nop			@ (mov r8, r8)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2180      	movs	r1, #128	@ 0x80
 80077ea:	438a      	bics	r2, r1
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f4:	f383 8810 	msr	PRIMASK, r3
}
 80077f8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2288      	movs	r2, #136	@ 0x88
 80077fe:	2120      	movs	r1, #32
 8007800:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2284      	movs	r2, #132	@ 0x84
 8007806:	2100      	movs	r1, #0
 8007808:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e060      	b.n	80078d0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2204      	movs	r2, #4
 8007816:	4013      	ands	r3, r2
 8007818:	2b04      	cmp	r3, #4
 800781a:	d146      	bne.n	80078aa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800781c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800781e:	2280      	movs	r2, #128	@ 0x80
 8007820:	03d1      	lsls	r1, r2, #15
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	4a2c      	ldr	r2, [pc, #176]	@ (80078d8 <UART_CheckIdleState+0x14c>)
 8007826:	9200      	str	r2, [sp, #0]
 8007828:	2200      	movs	r2, #0
 800782a:	f000 f859 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 800782e:	1e03      	subs	r3, r0, #0
 8007830:	d03b      	beq.n	80078aa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007832:	f3ef 8310 	mrs	r3, PRIMASK
 8007836:	60fb      	str	r3, [r7, #12]
  return(result);
 8007838:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800783a:	637b      	str	r3, [r7, #52]	@ 0x34
 800783c:	2301      	movs	r3, #1
 800783e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f383 8810 	msr	PRIMASK, r3
}
 8007846:	46c0      	nop			@ (mov r8, r8)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4922      	ldr	r1, [pc, #136]	@ (80078dc <UART_CheckIdleState+0x150>)
 8007854:	400a      	ands	r2, r1
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800785a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f383 8810 	msr	PRIMASK, r3
}
 8007862:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007864:	f3ef 8310 	mrs	r3, PRIMASK
 8007868:	61bb      	str	r3, [r7, #24]
  return(result);
 800786a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786c:	633b      	str	r3, [r7, #48]	@ 0x30
 800786e:	2301      	movs	r3, #1
 8007870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	f383 8810 	msr	PRIMASK, r3
}
 8007878:	46c0      	nop			@ (mov r8, r8)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2101      	movs	r1, #1
 8007886:	438a      	bics	r2, r1
 8007888:	609a      	str	r2, [r3, #8]
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	f383 8810 	msr	PRIMASK, r3
}
 8007894:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	228c      	movs	r2, #140	@ 0x8c
 800789a:	2120      	movs	r1, #32
 800789c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2284      	movs	r2, #132	@ 0x84
 80078a2:	2100      	movs	r1, #0
 80078a4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e012      	b.n	80078d0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2288      	movs	r2, #136	@ 0x88
 80078ae:	2120      	movs	r1, #32
 80078b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	228c      	movs	r2, #140	@ 0x8c
 80078b6:	2120      	movs	r1, #32
 80078b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2284      	movs	r2, #132	@ 0x84
 80078ca:	2100      	movs	r1, #0
 80078cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	0018      	movs	r0, r3
 80078d2:	46bd      	mov	sp, r7
 80078d4:	b010      	add	sp, #64	@ 0x40
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	01ffffff 	.word	0x01ffffff
 80078dc:	fffffedf 	.word	0xfffffedf

080078e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	1dfb      	adds	r3, r7, #7
 80078ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f0:	e051      	b.n	8007996 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	3301      	adds	r3, #1
 80078f6:	d04e      	beq.n	8007996 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078f8:	f7fb f930 	bl	8002b5c <HAL_GetTick>
 80078fc:	0002      	movs	r2, r0
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	429a      	cmp	r2, r3
 8007906:	d302      	bcc.n	800790e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e051      	b.n	80079b6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2204      	movs	r2, #4
 800791a:	4013      	ands	r3, r2
 800791c:	d03b      	beq.n	8007996 <UART_WaitOnFlagUntilTimeout+0xb6>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b80      	cmp	r3, #128	@ 0x80
 8007922:	d038      	beq.n	8007996 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b40      	cmp	r3, #64	@ 0x40
 8007928:	d035      	beq.n	8007996 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	2208      	movs	r2, #8
 8007932:	4013      	ands	r3, r2
 8007934:	2b08      	cmp	r3, #8
 8007936:	d111      	bne.n	800795c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2208      	movs	r2, #8
 800793e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	0018      	movs	r0, r3
 8007944:	f000 f922 	bl	8007b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2290      	movs	r2, #144	@ 0x90
 800794c:	2108      	movs	r1, #8
 800794e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2284      	movs	r2, #132	@ 0x84
 8007954:	2100      	movs	r1, #0
 8007956:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e02c      	b.n	80079b6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	69da      	ldr	r2, [r3, #28]
 8007962:	2380      	movs	r3, #128	@ 0x80
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	401a      	ands	r2, r3
 8007968:	2380      	movs	r3, #128	@ 0x80
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	429a      	cmp	r2, r3
 800796e:	d112      	bne.n	8007996 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2280      	movs	r2, #128	@ 0x80
 8007976:	0112      	lsls	r2, r2, #4
 8007978:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	0018      	movs	r0, r3
 800797e:	f000 f905 	bl	8007b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2290      	movs	r2, #144	@ 0x90
 8007986:	2120      	movs	r1, #32
 8007988:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2284      	movs	r2, #132	@ 0x84
 800798e:	2100      	movs	r1, #0
 8007990:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e00f      	b.n	80079b6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	4013      	ands	r3, r2
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	425a      	negs	r2, r3
 80079a6:	4153      	adcs	r3, r2
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	001a      	movs	r2, r3
 80079ac:	1dfb      	adds	r3, r7, #7
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d09e      	beq.n	80078f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	0018      	movs	r0, r3
 80079b8:	46bd      	mov	sp, r7
 80079ba:	b004      	add	sp, #16
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b090      	sub	sp, #64	@ 0x40
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	1dbb      	adds	r3, r7, #6
 80079cc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	1dba      	adds	r2, r7, #6
 80079d8:	215c      	movs	r1, #92	@ 0x5c
 80079da:	8812      	ldrh	r2, [r2, #0]
 80079dc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2290      	movs	r2, #144	@ 0x90
 80079e2:	2100      	movs	r1, #0
 80079e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	228c      	movs	r2, #140	@ 0x8c
 80079ea:	2122      	movs	r1, #34	@ 0x22
 80079ec:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2280      	movs	r2, #128	@ 0x80
 80079f2:	589b      	ldr	r3, [r3, r2]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d02d      	beq.n	8007a54 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2280      	movs	r2, #128	@ 0x80
 80079fc:	589b      	ldr	r3, [r3, r2]
 80079fe:	4a40      	ldr	r2, [pc, #256]	@ (8007b00 <UART_Start_Receive_DMA+0x140>)
 8007a00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2280      	movs	r2, #128	@ 0x80
 8007a06:	589b      	ldr	r3, [r3, r2]
 8007a08:	4a3e      	ldr	r2, [pc, #248]	@ (8007b04 <UART_Start_Receive_DMA+0x144>)
 8007a0a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2280      	movs	r2, #128	@ 0x80
 8007a10:	589b      	ldr	r3, [r3, r2]
 8007a12:	4a3d      	ldr	r2, [pc, #244]	@ (8007b08 <UART_Start_Receive_DMA+0x148>)
 8007a14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2280      	movs	r2, #128	@ 0x80
 8007a1a:	589b      	ldr	r3, [r3, r2]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2280      	movs	r2, #128	@ 0x80
 8007a24:	5898      	ldr	r0, [r3, r2]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3324      	adds	r3, #36	@ 0x24
 8007a2c:	0019      	movs	r1, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a32:	001a      	movs	r2, r3
 8007a34:	1dbb      	adds	r3, r7, #6
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	f7fb fcea 	bl	8003410 <HAL_DMA_Start_IT>
 8007a3c:	1e03      	subs	r3, r0, #0
 8007a3e:	d009      	beq.n	8007a54 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2290      	movs	r2, #144	@ 0x90
 8007a44:	2110      	movs	r1, #16
 8007a46:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	228c      	movs	r2, #140	@ 0x8c
 8007a4c:	2120      	movs	r1, #32
 8007a4e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e050      	b.n	8007af6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d019      	beq.n	8007a90 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8007a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a66:	2301      	movs	r3, #1
 8007a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6c:	f383 8810 	msr	PRIMASK, r3
}
 8007a70:	46c0      	nop			@ (mov r8, r8)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2180      	movs	r1, #128	@ 0x80
 8007a7e:	0049      	lsls	r1, r1, #1
 8007a80:	430a      	orrs	r2, r1
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a86:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8a:	f383 8810 	msr	PRIMASK, r3
}
 8007a8e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a90:	f3ef 8310 	mrs	r3, PRIMASK
 8007a94:	613b      	str	r3, [r7, #16]
  return(result);
 8007a96:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f383 8810 	msr	PRIMASK, r3
}
 8007aa4:	46c0      	nop			@ (mov r8, r8)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689a      	ldr	r2, [r3, #8]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	609a      	str	r2, [r3, #8]
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	f383 8810 	msr	PRIMASK, r3
}
 8007ac0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac6:	61fb      	str	r3, [r7, #28]
  return(result);
 8007ac8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007acc:	2301      	movs	r3, #1
 8007ace:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	f383 8810 	msr	PRIMASK, r3
}
 8007ad6:	46c0      	nop			@ (mov r8, r8)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2140      	movs	r1, #64	@ 0x40
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	609a      	str	r2, [r3, #8]
 8007ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aee:	f383 8810 	msr	PRIMASK, r3
}
 8007af2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	0018      	movs	r0, r3
 8007af8:	46bd      	mov	sp, r7
 8007afa:	b010      	add	sp, #64	@ 0x40
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	46c0      	nop			@ (mov r8, r8)
 8007b00:	08007c59 	.word	0x08007c59
 8007b04:	08007d89 	.word	0x08007d89
 8007b08:	08007dcb 	.word	0x08007dcb

08007b0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08a      	sub	sp, #40	@ 0x28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b14:	f3ef 8310 	mrs	r3, PRIMASK
 8007b18:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b1e:	2301      	movs	r3, #1
 8007b20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f383 8810 	msr	PRIMASK, r3
}
 8007b28:	46c0      	nop			@ (mov r8, r8)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	21c0      	movs	r1, #192	@ 0xc0
 8007b36:	438a      	bics	r2, r1
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	f383 8810 	msr	PRIMASK, r3
}
 8007b44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b46:	f3ef 8310 	mrs	r3, PRIMASK
 8007b4a:	617b      	str	r3, [r7, #20]
  return(result);
 8007b4c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007b4e:	623b      	str	r3, [r7, #32]
 8007b50:	2301      	movs	r3, #1
 8007b52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	f383 8810 	msr	PRIMASK, r3
}
 8007b5a:	46c0      	nop			@ (mov r8, r8)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689a      	ldr	r2, [r3, #8]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4908      	ldr	r1, [pc, #32]	@ (8007b88 <UART_EndTxTransfer+0x7c>)
 8007b68:	400a      	ands	r2, r1
 8007b6a:	609a      	str	r2, [r3, #8]
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	f383 8810 	msr	PRIMASK, r3
}
 8007b76:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2288      	movs	r2, #136	@ 0x88
 8007b7c:	2120      	movs	r1, #32
 8007b7e:	5099      	str	r1, [r3, r2]
}
 8007b80:	46c0      	nop			@ (mov r8, r8)
 8007b82:	46bd      	mov	sp, r7
 8007b84:	b00a      	add	sp, #40	@ 0x28
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	ff7fffff 	.word	0xff7fffff

08007b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08e      	sub	sp, #56	@ 0x38
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b94:	f3ef 8310 	mrs	r3, PRIMASK
 8007b98:	617b      	str	r3, [r7, #20]
  return(result);
 8007b9a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	f383 8810 	msr	PRIMASK, r3
}
 8007ba8:	46c0      	nop			@ (mov r8, r8)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4926      	ldr	r1, [pc, #152]	@ (8007c50 <UART_EndRxTransfer+0xc4>)
 8007bb6:	400a      	ands	r2, r1
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	f383 8810 	msr	PRIMASK, r3
}
 8007bc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8007bca:	623b      	str	r3, [r7, #32]
  return(result);
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bce:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd6:	f383 8810 	msr	PRIMASK, r3
}
 8007bda:	46c0      	nop			@ (mov r8, r8)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689a      	ldr	r2, [r3, #8]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	491b      	ldr	r1, [pc, #108]	@ (8007c54 <UART_EndRxTransfer+0xc8>)
 8007be8:	400a      	ands	r2, r1
 8007bea:	609a      	str	r2, [r3, #8]
 8007bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf2:	f383 8810 	msr	PRIMASK, r3
}
 8007bf6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d118      	bne.n	8007c32 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c00:	f3ef 8310 	mrs	r3, PRIMASK
 8007c04:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c06:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f383 8810 	msr	PRIMASK, r3
}
 8007c14:	46c0      	nop			@ (mov r8, r8)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2110      	movs	r1, #16
 8007c22:	438a      	bics	r2, r1
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	f383 8810 	msr	PRIMASK, r3
}
 8007c30:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	228c      	movs	r2, #140	@ 0x8c
 8007c36:	2120      	movs	r1, #32
 8007c38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c46:	46c0      	nop			@ (mov r8, r8)
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	b00e      	add	sp, #56	@ 0x38
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	fffffedf 	.word	0xfffffedf
 8007c54:	effffffe 	.word	0xeffffffe

08007c58 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b094      	sub	sp, #80	@ 0x50
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c64:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	4013      	ands	r3, r2
 8007c70:	d16f      	bne.n	8007d52 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8007c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c74:	225e      	movs	r2, #94	@ 0x5e
 8007c76:	2100      	movs	r1, #0
 8007c78:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007c80:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c84:	2301      	movs	r3, #1
 8007c86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	f383 8810 	msr	PRIMASK, r3
}
 8007c8e:	46c0      	nop			@ (mov r8, r8)
 8007c90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	493a      	ldr	r1, [pc, #232]	@ (8007d84 <UART_DMAReceiveCplt+0x12c>)
 8007c9c:	400a      	ands	r2, r1
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ca2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	f383 8810 	msr	PRIMASK, r3
}
 8007caa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cac:	f3ef 8310 	mrs	r3, PRIMASK
 8007cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbc:	f383 8810 	msr	PRIMASK, r3
}
 8007cc0:	46c0      	nop			@ (mov r8, r8)
 8007cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2101      	movs	r1, #1
 8007cce:	438a      	bics	r2, r1
 8007cd0:	609a      	str	r2, [r3, #8]
 8007cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd8:	f383 8810 	msr	PRIMASK, r3
}
 8007cdc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cde:	f3ef 8310 	mrs	r3, PRIMASK
 8007ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ce8:	2301      	movs	r3, #1
 8007cea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cee:	f383 8810 	msr	PRIMASK, r3
}
 8007cf2:	46c0      	nop			@ (mov r8, r8)
 8007cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	689a      	ldr	r2, [r3, #8]
 8007cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2140      	movs	r1, #64	@ 0x40
 8007d00:	438a      	bics	r2, r1
 8007d02:	609a      	str	r2, [r3, #8]
 8007d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d06:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0a:	f383 8810 	msr	PRIMASK, r3
}
 8007d0e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d12:	228c      	movs	r2, #140	@ 0x8c
 8007d14:	2120      	movs	r1, #32
 8007d16:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d118      	bne.n	8007d52 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d20:	f3ef 8310 	mrs	r3, PRIMASK
 8007d24:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d26:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	f383 8810 	msr	PRIMASK, r3
}
 8007d34:	46c0      	nop			@ (mov r8, r8)
 8007d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2110      	movs	r1, #16
 8007d42:	438a      	bics	r2, r1
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f383 8810 	msr	PRIMASK, r3
}
 8007d50:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d54:	2200      	movs	r2, #0
 8007d56:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d108      	bne.n	8007d72 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d62:	225c      	movs	r2, #92	@ 0x5c
 8007d64:	5a9a      	ldrh	r2, [r3, r2]
 8007d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d68:	0011      	movs	r1, r2
 8007d6a:	0018      	movs	r0, r3
 8007d6c:	f7f9 fcb6 	bl	80016dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d70:	e003      	b.n	8007d7a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8007d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d74:	0018      	movs	r0, r3
 8007d76:	f7ff fa99 	bl	80072ac <HAL_UART_RxCpltCallback>
}
 8007d7a:	46c0      	nop			@ (mov r8, r8)
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	b014      	add	sp, #80	@ 0x50
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	46c0      	nop			@ (mov r8, r8)
 8007d84:	fffffeff 	.word	0xfffffeff

08007d88 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d94:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d10a      	bne.n	8007dba <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	225c      	movs	r2, #92	@ 0x5c
 8007da8:	5a9b      	ldrh	r3, [r3, r2]
 8007daa:	085b      	lsrs	r3, r3, #1
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	0011      	movs	r1, r2
 8007db2:	0018      	movs	r0, r3
 8007db4:	f7f9 fc92 	bl	80016dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007db8:	e003      	b.n	8007dc2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	f7ff fa7d 	bl	80072bc <HAL_UART_RxHalfCpltCallback>
}
 8007dc2:	46c0      	nop			@ (mov r8, r8)
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	b004      	add	sp, #16
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b086      	sub	sp, #24
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	2288      	movs	r2, #136	@ 0x88
 8007ddc:	589b      	ldr	r3, [r3, r2]
 8007dde:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	228c      	movs	r2, #140	@ 0x8c
 8007de4:	589b      	ldr	r3, [r3, r2]
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	2280      	movs	r2, #128	@ 0x80
 8007df0:	4013      	ands	r3, r2
 8007df2:	2b80      	cmp	r3, #128	@ 0x80
 8007df4:	d10a      	bne.n	8007e0c <UART_DMAError+0x42>
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	2b21      	cmp	r3, #33	@ 0x21
 8007dfa:	d107      	bne.n	8007e0c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	2256      	movs	r2, #86	@ 0x56
 8007e00:	2100      	movs	r1, #0
 8007e02:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	0018      	movs	r0, r3
 8007e08:	f7ff fe80 	bl	8007b0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	2240      	movs	r2, #64	@ 0x40
 8007e14:	4013      	ands	r3, r2
 8007e16:	2b40      	cmp	r3, #64	@ 0x40
 8007e18:	d10a      	bne.n	8007e30 <UART_DMAError+0x66>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2b22      	cmp	r3, #34	@ 0x22
 8007e1e:	d107      	bne.n	8007e30 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	225e      	movs	r2, #94	@ 0x5e
 8007e24:	2100      	movs	r1, #0
 8007e26:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	0018      	movs	r0, r3
 8007e2c:	f7ff feae 	bl	8007b8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	2290      	movs	r2, #144	@ 0x90
 8007e34:	589b      	ldr	r3, [r3, r2]
 8007e36:	2210      	movs	r2, #16
 8007e38:	431a      	orrs	r2, r3
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2190      	movs	r1, #144	@ 0x90
 8007e3e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	0018      	movs	r0, r3
 8007e44:	f7ff fa42 	bl	80072cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e48:	46c0      	nop			@ (mov r8, r8)
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	b006      	add	sp, #24
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	225e      	movs	r2, #94	@ 0x5e
 8007e62:	2100      	movs	r1, #0
 8007e64:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2256      	movs	r2, #86	@ 0x56
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	0018      	movs	r0, r3
 8007e72:	f7ff fa2b 	bl	80072cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e76:	46c0      	nop			@ (mov r8, r8)
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	b004      	add	sp, #16
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b086      	sub	sp, #24
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e86:	f3ef 8310 	mrs	r3, PRIMASK
 8007e8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e8e:	617b      	str	r3, [r7, #20]
 8007e90:	2301      	movs	r3, #1
 8007e92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f383 8810 	msr	PRIMASK, r3
}
 8007e9a:	46c0      	nop			@ (mov r8, r8)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2140      	movs	r1, #64	@ 0x40
 8007ea8:	438a      	bics	r2, r1
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f383 8810 	msr	PRIMASK, r3
}
 8007eb6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2288      	movs	r2, #136	@ 0x88
 8007ebc:	2120      	movs	r1, #32
 8007ebe:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	0018      	movs	r0, r3
 8007eca:	f7ff f9e7 	bl	800729c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ece:	46c0      	nop			@ (mov r8, r8)
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	b006      	add	sp, #24
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b082      	sub	sp, #8
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ede:	46c0      	nop			@ (mov r8, r8)
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	b002      	add	sp, #8
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007eee:	46c0      	nop			@ (mov r8, r8)
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	b002      	add	sp, #8
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b082      	sub	sp, #8
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007efe:	46c0      	nop			@ (mov r8, r8)
 8007f00:	46bd      	mov	sp, r7
 8007f02:	b002      	add	sp, #8
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2284      	movs	r2, #132	@ 0x84
 8007f14:	5c9b      	ldrb	r3, [r3, r2]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d101      	bne.n	8007f1e <HAL_UARTEx_DisableFifoMode+0x16>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e027      	b.n	8007f6e <HAL_UARTEx_DisableFifoMode+0x66>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2284      	movs	r2, #132	@ 0x84
 8007f22:	2101      	movs	r1, #1
 8007f24:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2288      	movs	r2, #136	@ 0x88
 8007f2a:	2124      	movs	r1, #36	@ 0x24
 8007f2c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2101      	movs	r1, #1
 8007f42:	438a      	bics	r2, r1
 8007f44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4a0b      	ldr	r2, [pc, #44]	@ (8007f78 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2288      	movs	r2, #136	@ 0x88
 8007f60:	2120      	movs	r1, #32
 8007f62:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2284      	movs	r2, #132	@ 0x84
 8007f68:	2100      	movs	r1, #0
 8007f6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	0018      	movs	r0, r3
 8007f70:	46bd      	mov	sp, r7
 8007f72:	b004      	add	sp, #16
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	46c0      	nop			@ (mov r8, r8)
 8007f78:	dfffffff 	.word	0xdfffffff

08007f7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2284      	movs	r2, #132	@ 0x84
 8007f8a:	5c9b      	ldrb	r3, [r3, r2]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d101      	bne.n	8007f94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f90:	2302      	movs	r3, #2
 8007f92:	e02e      	b.n	8007ff2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2284      	movs	r2, #132	@ 0x84
 8007f98:	2101      	movs	r1, #1
 8007f9a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2288      	movs	r2, #136	@ 0x88
 8007fa0:	2124      	movs	r1, #36	@ 0x24
 8007fa2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	438a      	bics	r2, r1
 8007fba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	08d9      	lsrs	r1, r3, #3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	0018      	movs	r0, r3
 8007fd4:	f000 f8bc 	bl	8008150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2288      	movs	r2, #136	@ 0x88
 8007fe4:	2120      	movs	r1, #32
 8007fe6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2284      	movs	r2, #132	@ 0x84
 8007fec:	2100      	movs	r1, #0
 8007fee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	0018      	movs	r0, r3
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	b004      	add	sp, #16
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2284      	movs	r2, #132	@ 0x84
 800800a:	5c9b      	ldrb	r3, [r3, r2]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d101      	bne.n	8008014 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008010:	2302      	movs	r3, #2
 8008012:	e02f      	b.n	8008074 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2284      	movs	r2, #132	@ 0x84
 8008018:	2101      	movs	r1, #1
 800801a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2288      	movs	r2, #136	@ 0x88
 8008020:	2124      	movs	r1, #36	@ 0x24
 8008022:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2101      	movs	r1, #1
 8008038:	438a      	bics	r2, r1
 800803a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	4a0e      	ldr	r2, [pc, #56]	@ (800807c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008044:	4013      	ands	r3, r2
 8008046:	0019      	movs	r1, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	0018      	movs	r0, r3
 8008056:	f000 f87b 	bl	8008150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2288      	movs	r2, #136	@ 0x88
 8008066:	2120      	movs	r1, #32
 8008068:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2284      	movs	r2, #132	@ 0x84
 800806e:	2100      	movs	r1, #0
 8008070:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	0018      	movs	r0, r3
 8008076:	46bd      	mov	sp, r7
 8008078:	b004      	add	sp, #16
 800807a:	bd80      	pop	{r7, pc}
 800807c:	f1ffffff 	.word	0xf1ffffff

08008080 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008080:	b5b0      	push	{r4, r5, r7, lr}
 8008082:	b08a      	sub	sp, #40	@ 0x28
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	1dbb      	adds	r3, r7, #6
 800808c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	228c      	movs	r2, #140	@ 0x8c
 8008092:	589b      	ldr	r3, [r3, r2]
 8008094:	2b20      	cmp	r3, #32
 8008096:	d156      	bne.n	8008146 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800809e:	1dbb      	adds	r3, r7, #6
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e04e      	b.n	8008148 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689a      	ldr	r2, [r3, #8]
 80080ae:	2380      	movs	r3, #128	@ 0x80
 80080b0:	015b      	lsls	r3, r3, #5
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d109      	bne.n	80080ca <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d105      	bne.n	80080ca <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2201      	movs	r2, #1
 80080c2:	4013      	ands	r3, r2
 80080c4:	d001      	beq.n	80080ca <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e03e      	b.n	8008148 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2201      	movs	r2, #1
 80080ce:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80080d6:	2527      	movs	r5, #39	@ 0x27
 80080d8:	197c      	adds	r4, r7, r5
 80080da:	1dbb      	adds	r3, r7, #6
 80080dc:	881a      	ldrh	r2, [r3, #0]
 80080de:	68b9      	ldr	r1, [r7, #8]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	0018      	movs	r0, r3
 80080e4:	f7ff fc6c 	bl	80079c0 <UART_Start_Receive_DMA>
 80080e8:	0003      	movs	r3, r0
 80080ea:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80080ec:	197b      	adds	r3, r7, r5
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d124      	bne.n	800813e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d11c      	bne.n	8008136 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2210      	movs	r2, #16
 8008102:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008104:	f3ef 8310 	mrs	r3, PRIMASK
 8008108:	617b      	str	r3, [r7, #20]
  return(result);
 800810a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800810c:	623b      	str	r3, [r7, #32]
 800810e:	2301      	movs	r3, #1
 8008110:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	f383 8810 	msr	PRIMASK, r3
}
 8008118:	46c0      	nop			@ (mov r8, r8)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2110      	movs	r1, #16
 8008126:	430a      	orrs	r2, r1
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	f383 8810 	msr	PRIMASK, r3
}
 8008134:	e003      	b.n	800813e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008136:	2327      	movs	r3, #39	@ 0x27
 8008138:	18fb      	adds	r3, r7, r3
 800813a:	2201      	movs	r2, #1
 800813c:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800813e:	2327      	movs	r3, #39	@ 0x27
 8008140:	18fb      	adds	r3, r7, r3
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	e000      	b.n	8008148 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8008146:	2302      	movs	r3, #2
  }
}
 8008148:	0018      	movs	r0, r3
 800814a:	46bd      	mov	sp, r7
 800814c:	b00a      	add	sp, #40	@ 0x28
 800814e:	bdb0      	pop	{r4, r5, r7, pc}

08008150 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800815c:	2b00      	cmp	r3, #0
 800815e:	d108      	bne.n	8008172 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	226a      	movs	r2, #106	@ 0x6a
 8008164:	2101      	movs	r1, #1
 8008166:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2268      	movs	r2, #104	@ 0x68
 800816c:	2101      	movs	r1, #1
 800816e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008170:	e043      	b.n	80081fa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008172:	260f      	movs	r6, #15
 8008174:	19bb      	adds	r3, r7, r6
 8008176:	2208      	movs	r2, #8
 8008178:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800817a:	200e      	movs	r0, #14
 800817c:	183b      	adds	r3, r7, r0
 800817e:	2208      	movs	r2, #8
 8008180:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	0e5b      	lsrs	r3, r3, #25
 800818a:	b2da      	uxtb	r2, r3
 800818c:	240d      	movs	r4, #13
 800818e:	193b      	adds	r3, r7, r4
 8008190:	2107      	movs	r1, #7
 8008192:	400a      	ands	r2, r1
 8008194:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	0f5b      	lsrs	r3, r3, #29
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	250c      	movs	r5, #12
 80081a2:	197b      	adds	r3, r7, r5
 80081a4:	2107      	movs	r1, #7
 80081a6:	400a      	ands	r2, r1
 80081a8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081aa:	183b      	adds	r3, r7, r0
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	197a      	adds	r2, r7, r5
 80081b0:	7812      	ldrb	r2, [r2, #0]
 80081b2:	4914      	ldr	r1, [pc, #80]	@ (8008204 <UARTEx_SetNbDataToProcess+0xb4>)
 80081b4:	5c8a      	ldrb	r2, [r1, r2]
 80081b6:	435a      	muls	r2, r3
 80081b8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80081ba:	197b      	adds	r3, r7, r5
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	4a12      	ldr	r2, [pc, #72]	@ (8008208 <UARTEx_SetNbDataToProcess+0xb8>)
 80081c0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081c2:	0019      	movs	r1, r3
 80081c4:	f7f8 f830 	bl	8000228 <__divsi3>
 80081c8:	0003      	movs	r3, r0
 80081ca:	b299      	uxth	r1, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	226a      	movs	r2, #106	@ 0x6a
 80081d0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081d2:	19bb      	adds	r3, r7, r6
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	193a      	adds	r2, r7, r4
 80081d8:	7812      	ldrb	r2, [r2, #0]
 80081da:	490a      	ldr	r1, [pc, #40]	@ (8008204 <UARTEx_SetNbDataToProcess+0xb4>)
 80081dc:	5c8a      	ldrb	r2, [r1, r2]
 80081de:	435a      	muls	r2, r3
 80081e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80081e2:	193b      	adds	r3, r7, r4
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	4a08      	ldr	r2, [pc, #32]	@ (8008208 <UARTEx_SetNbDataToProcess+0xb8>)
 80081e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081ea:	0019      	movs	r1, r3
 80081ec:	f7f8 f81c 	bl	8000228 <__divsi3>
 80081f0:	0003      	movs	r3, r0
 80081f2:	b299      	uxth	r1, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2268      	movs	r2, #104	@ 0x68
 80081f8:	5299      	strh	r1, [r3, r2]
}
 80081fa:	46c0      	nop			@ (mov r8, r8)
 80081fc:	46bd      	mov	sp, r7
 80081fe:	b005      	add	sp, #20
 8008200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008202:	46c0      	nop			@ (mov r8, r8)
 8008204:	0800970c 	.word	0x0800970c
 8008208:	08009714 	.word	0x08009714

0800820c <_vsiprintf_r>:
 800820c:	b510      	push	{r4, lr}
 800820e:	2400      	movs	r4, #0
 8008210:	b09a      	sub	sp, #104	@ 0x68
 8008212:	9100      	str	r1, [sp, #0]
 8008214:	9104      	str	r1, [sp, #16]
 8008216:	4906      	ldr	r1, [pc, #24]	@ (8008230 <_vsiprintf_r+0x24>)
 8008218:	9419      	str	r4, [sp, #100]	@ 0x64
 800821a:	9105      	str	r1, [sp, #20]
 800821c:	9102      	str	r1, [sp, #8]
 800821e:	4905      	ldr	r1, [pc, #20]	@ (8008234 <_vsiprintf_r+0x28>)
 8008220:	9103      	str	r1, [sp, #12]
 8008222:	4669      	mov	r1, sp
 8008224:	f000 f9ae 	bl	8008584 <_svfiprintf_r>
 8008228:	9b00      	ldr	r3, [sp, #0]
 800822a:	701c      	strb	r4, [r3, #0]
 800822c:	b01a      	add	sp, #104	@ 0x68
 800822e:	bd10      	pop	{r4, pc}
 8008230:	7fffffff 	.word	0x7fffffff
 8008234:	ffff0208 	.word	0xffff0208

08008238 <vsiprintf>:
 8008238:	b510      	push	{r4, lr}
 800823a:	4c04      	ldr	r4, [pc, #16]	@ (800824c <vsiprintf+0x14>)
 800823c:	0013      	movs	r3, r2
 800823e:	000a      	movs	r2, r1
 8008240:	0001      	movs	r1, r0
 8008242:	6820      	ldr	r0, [r4, #0]
 8008244:	f7ff ffe2 	bl	800820c <_vsiprintf_r>
 8008248:	bd10      	pop	{r4, pc}
 800824a:	46c0      	nop			@ (mov r8, r8)
 800824c:	20000024 	.word	0x20000024

08008250 <memset>:
 8008250:	0003      	movs	r3, r0
 8008252:	1882      	adds	r2, r0, r2
 8008254:	4293      	cmp	r3, r2
 8008256:	d100      	bne.n	800825a <memset+0xa>
 8008258:	4770      	bx	lr
 800825a:	7019      	strb	r1, [r3, #0]
 800825c:	3301      	adds	r3, #1
 800825e:	e7f9      	b.n	8008254 <memset+0x4>

08008260 <__errno>:
 8008260:	4b01      	ldr	r3, [pc, #4]	@ (8008268 <__errno+0x8>)
 8008262:	6818      	ldr	r0, [r3, #0]
 8008264:	4770      	bx	lr
 8008266:	46c0      	nop			@ (mov r8, r8)
 8008268:	20000024 	.word	0x20000024

0800826c <__libc_init_array>:
 800826c:	b570      	push	{r4, r5, r6, lr}
 800826e:	2600      	movs	r6, #0
 8008270:	4c0c      	ldr	r4, [pc, #48]	@ (80082a4 <__libc_init_array+0x38>)
 8008272:	4d0d      	ldr	r5, [pc, #52]	@ (80082a8 <__libc_init_array+0x3c>)
 8008274:	1b64      	subs	r4, r4, r5
 8008276:	10a4      	asrs	r4, r4, #2
 8008278:	42a6      	cmp	r6, r4
 800827a:	d109      	bne.n	8008290 <__libc_init_array+0x24>
 800827c:	2600      	movs	r6, #0
 800827e:	f000 fc63 	bl	8008b48 <_init>
 8008282:	4c0a      	ldr	r4, [pc, #40]	@ (80082ac <__libc_init_array+0x40>)
 8008284:	4d0a      	ldr	r5, [pc, #40]	@ (80082b0 <__libc_init_array+0x44>)
 8008286:	1b64      	subs	r4, r4, r5
 8008288:	10a4      	asrs	r4, r4, #2
 800828a:	42a6      	cmp	r6, r4
 800828c:	d105      	bne.n	800829a <__libc_init_array+0x2e>
 800828e:	bd70      	pop	{r4, r5, r6, pc}
 8008290:	00b3      	lsls	r3, r6, #2
 8008292:	58eb      	ldr	r3, [r5, r3]
 8008294:	4798      	blx	r3
 8008296:	3601      	adds	r6, #1
 8008298:	e7ee      	b.n	8008278 <__libc_init_array+0xc>
 800829a:	00b3      	lsls	r3, r6, #2
 800829c:	58eb      	ldr	r3, [r5, r3]
 800829e:	4798      	blx	r3
 80082a0:	3601      	adds	r6, #1
 80082a2:	e7f2      	b.n	800828a <__libc_init_array+0x1e>
 80082a4:	08009750 	.word	0x08009750
 80082a8:	08009750 	.word	0x08009750
 80082ac:	08009754 	.word	0x08009754
 80082b0:	08009750 	.word	0x08009750

080082b4 <__retarget_lock_acquire_recursive>:
 80082b4:	4770      	bx	lr

080082b6 <__retarget_lock_release_recursive>:
 80082b6:	4770      	bx	lr

080082b8 <memcpy>:
 80082b8:	2300      	movs	r3, #0
 80082ba:	b510      	push	{r4, lr}
 80082bc:	429a      	cmp	r2, r3
 80082be:	d100      	bne.n	80082c2 <memcpy+0xa>
 80082c0:	bd10      	pop	{r4, pc}
 80082c2:	5ccc      	ldrb	r4, [r1, r3]
 80082c4:	54c4      	strb	r4, [r0, r3]
 80082c6:	3301      	adds	r3, #1
 80082c8:	e7f8      	b.n	80082bc <memcpy+0x4>
	...

080082cc <_free_r>:
 80082cc:	b570      	push	{r4, r5, r6, lr}
 80082ce:	0005      	movs	r5, r0
 80082d0:	1e0c      	subs	r4, r1, #0
 80082d2:	d010      	beq.n	80082f6 <_free_r+0x2a>
 80082d4:	3c04      	subs	r4, #4
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	da00      	bge.n	80082de <_free_r+0x12>
 80082dc:	18e4      	adds	r4, r4, r3
 80082de:	0028      	movs	r0, r5
 80082e0:	f000 f8e0 	bl	80084a4 <__malloc_lock>
 80082e4:	4a1d      	ldr	r2, [pc, #116]	@ (800835c <_free_r+0x90>)
 80082e6:	6813      	ldr	r3, [r2, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d105      	bne.n	80082f8 <_free_r+0x2c>
 80082ec:	6063      	str	r3, [r4, #4]
 80082ee:	6014      	str	r4, [r2, #0]
 80082f0:	0028      	movs	r0, r5
 80082f2:	f000 f8df 	bl	80084b4 <__malloc_unlock>
 80082f6:	bd70      	pop	{r4, r5, r6, pc}
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	d908      	bls.n	800830e <_free_r+0x42>
 80082fc:	6820      	ldr	r0, [r4, #0]
 80082fe:	1821      	adds	r1, r4, r0
 8008300:	428b      	cmp	r3, r1
 8008302:	d1f3      	bne.n	80082ec <_free_r+0x20>
 8008304:	6819      	ldr	r1, [r3, #0]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	1809      	adds	r1, r1, r0
 800830a:	6021      	str	r1, [r4, #0]
 800830c:	e7ee      	b.n	80082ec <_free_r+0x20>
 800830e:	001a      	movs	r2, r3
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <_free_r+0x4e>
 8008316:	42a3      	cmp	r3, r4
 8008318:	d9f9      	bls.n	800830e <_free_r+0x42>
 800831a:	6811      	ldr	r1, [r2, #0]
 800831c:	1850      	adds	r0, r2, r1
 800831e:	42a0      	cmp	r0, r4
 8008320:	d10b      	bne.n	800833a <_free_r+0x6e>
 8008322:	6820      	ldr	r0, [r4, #0]
 8008324:	1809      	adds	r1, r1, r0
 8008326:	1850      	adds	r0, r2, r1
 8008328:	6011      	str	r1, [r2, #0]
 800832a:	4283      	cmp	r3, r0
 800832c:	d1e0      	bne.n	80082f0 <_free_r+0x24>
 800832e:	6818      	ldr	r0, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	1841      	adds	r1, r0, r1
 8008334:	6011      	str	r1, [r2, #0]
 8008336:	6053      	str	r3, [r2, #4]
 8008338:	e7da      	b.n	80082f0 <_free_r+0x24>
 800833a:	42a0      	cmp	r0, r4
 800833c:	d902      	bls.n	8008344 <_free_r+0x78>
 800833e:	230c      	movs	r3, #12
 8008340:	602b      	str	r3, [r5, #0]
 8008342:	e7d5      	b.n	80082f0 <_free_r+0x24>
 8008344:	6820      	ldr	r0, [r4, #0]
 8008346:	1821      	adds	r1, r4, r0
 8008348:	428b      	cmp	r3, r1
 800834a:	d103      	bne.n	8008354 <_free_r+0x88>
 800834c:	6819      	ldr	r1, [r3, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	1809      	adds	r1, r1, r0
 8008352:	6021      	str	r1, [r4, #0]
 8008354:	6063      	str	r3, [r4, #4]
 8008356:	6054      	str	r4, [r2, #4]
 8008358:	e7ca      	b.n	80082f0 <_free_r+0x24>
 800835a:	46c0      	nop			@ (mov r8, r8)
 800835c:	200012c0 	.word	0x200012c0

08008360 <sbrk_aligned>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	4e0f      	ldr	r6, [pc, #60]	@ (80083a0 <sbrk_aligned+0x40>)
 8008364:	000d      	movs	r5, r1
 8008366:	6831      	ldr	r1, [r6, #0]
 8008368:	0004      	movs	r4, r0
 800836a:	2900      	cmp	r1, #0
 800836c:	d102      	bne.n	8008374 <sbrk_aligned+0x14>
 800836e:	f000 fb95 	bl	8008a9c <_sbrk_r>
 8008372:	6030      	str	r0, [r6, #0]
 8008374:	0029      	movs	r1, r5
 8008376:	0020      	movs	r0, r4
 8008378:	f000 fb90 	bl	8008a9c <_sbrk_r>
 800837c:	1c43      	adds	r3, r0, #1
 800837e:	d103      	bne.n	8008388 <sbrk_aligned+0x28>
 8008380:	2501      	movs	r5, #1
 8008382:	426d      	negs	r5, r5
 8008384:	0028      	movs	r0, r5
 8008386:	bd70      	pop	{r4, r5, r6, pc}
 8008388:	2303      	movs	r3, #3
 800838a:	1cc5      	adds	r5, r0, #3
 800838c:	439d      	bics	r5, r3
 800838e:	42a8      	cmp	r0, r5
 8008390:	d0f8      	beq.n	8008384 <sbrk_aligned+0x24>
 8008392:	1a29      	subs	r1, r5, r0
 8008394:	0020      	movs	r0, r4
 8008396:	f000 fb81 	bl	8008a9c <_sbrk_r>
 800839a:	3001      	adds	r0, #1
 800839c:	d1f2      	bne.n	8008384 <sbrk_aligned+0x24>
 800839e:	e7ef      	b.n	8008380 <sbrk_aligned+0x20>
 80083a0:	200012bc 	.word	0x200012bc

080083a4 <_malloc_r>:
 80083a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083a6:	2203      	movs	r2, #3
 80083a8:	1ccb      	adds	r3, r1, #3
 80083aa:	4393      	bics	r3, r2
 80083ac:	3308      	adds	r3, #8
 80083ae:	0005      	movs	r5, r0
 80083b0:	001f      	movs	r7, r3
 80083b2:	2b0c      	cmp	r3, #12
 80083b4:	d234      	bcs.n	8008420 <_malloc_r+0x7c>
 80083b6:	270c      	movs	r7, #12
 80083b8:	42b9      	cmp	r1, r7
 80083ba:	d833      	bhi.n	8008424 <_malloc_r+0x80>
 80083bc:	0028      	movs	r0, r5
 80083be:	f000 f871 	bl	80084a4 <__malloc_lock>
 80083c2:	4e37      	ldr	r6, [pc, #220]	@ (80084a0 <_malloc_r+0xfc>)
 80083c4:	6833      	ldr	r3, [r6, #0]
 80083c6:	001c      	movs	r4, r3
 80083c8:	2c00      	cmp	r4, #0
 80083ca:	d12f      	bne.n	800842c <_malloc_r+0x88>
 80083cc:	0039      	movs	r1, r7
 80083ce:	0028      	movs	r0, r5
 80083d0:	f7ff ffc6 	bl	8008360 <sbrk_aligned>
 80083d4:	0004      	movs	r4, r0
 80083d6:	1c43      	adds	r3, r0, #1
 80083d8:	d15f      	bne.n	800849a <_malloc_r+0xf6>
 80083da:	6834      	ldr	r4, [r6, #0]
 80083dc:	9400      	str	r4, [sp, #0]
 80083de:	9b00      	ldr	r3, [sp, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d14a      	bne.n	800847a <_malloc_r+0xd6>
 80083e4:	2c00      	cmp	r4, #0
 80083e6:	d052      	beq.n	800848e <_malloc_r+0xea>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	0028      	movs	r0, r5
 80083ec:	18e3      	adds	r3, r4, r3
 80083ee:	9900      	ldr	r1, [sp, #0]
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	f000 fb53 	bl	8008a9c <_sbrk_r>
 80083f6:	9b01      	ldr	r3, [sp, #4]
 80083f8:	4283      	cmp	r3, r0
 80083fa:	d148      	bne.n	800848e <_malloc_r+0xea>
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	0028      	movs	r0, r5
 8008400:	1aff      	subs	r7, r7, r3
 8008402:	0039      	movs	r1, r7
 8008404:	f7ff ffac 	bl	8008360 <sbrk_aligned>
 8008408:	3001      	adds	r0, #1
 800840a:	d040      	beq.n	800848e <_malloc_r+0xea>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	19db      	adds	r3, r3, r7
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	6833      	ldr	r3, [r6, #0]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	2a00      	cmp	r2, #0
 8008418:	d133      	bne.n	8008482 <_malloc_r+0xde>
 800841a:	9b00      	ldr	r3, [sp, #0]
 800841c:	6033      	str	r3, [r6, #0]
 800841e:	e019      	b.n	8008454 <_malloc_r+0xb0>
 8008420:	2b00      	cmp	r3, #0
 8008422:	dac9      	bge.n	80083b8 <_malloc_r+0x14>
 8008424:	230c      	movs	r3, #12
 8008426:	602b      	str	r3, [r5, #0]
 8008428:	2000      	movs	r0, #0
 800842a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800842c:	6821      	ldr	r1, [r4, #0]
 800842e:	1bc9      	subs	r1, r1, r7
 8008430:	d420      	bmi.n	8008474 <_malloc_r+0xd0>
 8008432:	290b      	cmp	r1, #11
 8008434:	d90a      	bls.n	800844c <_malloc_r+0xa8>
 8008436:	19e2      	adds	r2, r4, r7
 8008438:	6027      	str	r7, [r4, #0]
 800843a:	42a3      	cmp	r3, r4
 800843c:	d104      	bne.n	8008448 <_malloc_r+0xa4>
 800843e:	6032      	str	r2, [r6, #0]
 8008440:	6863      	ldr	r3, [r4, #4]
 8008442:	6011      	str	r1, [r2, #0]
 8008444:	6053      	str	r3, [r2, #4]
 8008446:	e005      	b.n	8008454 <_malloc_r+0xb0>
 8008448:	605a      	str	r2, [r3, #4]
 800844a:	e7f9      	b.n	8008440 <_malloc_r+0x9c>
 800844c:	6862      	ldr	r2, [r4, #4]
 800844e:	42a3      	cmp	r3, r4
 8008450:	d10e      	bne.n	8008470 <_malloc_r+0xcc>
 8008452:	6032      	str	r2, [r6, #0]
 8008454:	0028      	movs	r0, r5
 8008456:	f000 f82d 	bl	80084b4 <__malloc_unlock>
 800845a:	0020      	movs	r0, r4
 800845c:	2207      	movs	r2, #7
 800845e:	300b      	adds	r0, #11
 8008460:	1d23      	adds	r3, r4, #4
 8008462:	4390      	bics	r0, r2
 8008464:	1ac2      	subs	r2, r0, r3
 8008466:	4298      	cmp	r0, r3
 8008468:	d0df      	beq.n	800842a <_malloc_r+0x86>
 800846a:	1a1b      	subs	r3, r3, r0
 800846c:	50a3      	str	r3, [r4, r2]
 800846e:	e7dc      	b.n	800842a <_malloc_r+0x86>
 8008470:	605a      	str	r2, [r3, #4]
 8008472:	e7ef      	b.n	8008454 <_malloc_r+0xb0>
 8008474:	0023      	movs	r3, r4
 8008476:	6864      	ldr	r4, [r4, #4]
 8008478:	e7a6      	b.n	80083c8 <_malloc_r+0x24>
 800847a:	9c00      	ldr	r4, [sp, #0]
 800847c:	6863      	ldr	r3, [r4, #4]
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	e7ad      	b.n	80083de <_malloc_r+0x3a>
 8008482:	001a      	movs	r2, r3
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	42a3      	cmp	r3, r4
 8008488:	d1fb      	bne.n	8008482 <_malloc_r+0xde>
 800848a:	2300      	movs	r3, #0
 800848c:	e7da      	b.n	8008444 <_malloc_r+0xa0>
 800848e:	230c      	movs	r3, #12
 8008490:	0028      	movs	r0, r5
 8008492:	602b      	str	r3, [r5, #0]
 8008494:	f000 f80e 	bl	80084b4 <__malloc_unlock>
 8008498:	e7c6      	b.n	8008428 <_malloc_r+0x84>
 800849a:	6007      	str	r7, [r0, #0]
 800849c:	e7da      	b.n	8008454 <_malloc_r+0xb0>
 800849e:	46c0      	nop			@ (mov r8, r8)
 80084a0:	200012c0 	.word	0x200012c0

080084a4 <__malloc_lock>:
 80084a4:	b510      	push	{r4, lr}
 80084a6:	4802      	ldr	r0, [pc, #8]	@ (80084b0 <__malloc_lock+0xc>)
 80084a8:	f7ff ff04 	bl	80082b4 <__retarget_lock_acquire_recursive>
 80084ac:	bd10      	pop	{r4, pc}
 80084ae:	46c0      	nop			@ (mov r8, r8)
 80084b0:	200012b8 	.word	0x200012b8

080084b4 <__malloc_unlock>:
 80084b4:	b510      	push	{r4, lr}
 80084b6:	4802      	ldr	r0, [pc, #8]	@ (80084c0 <__malloc_unlock+0xc>)
 80084b8:	f7ff fefd 	bl	80082b6 <__retarget_lock_release_recursive>
 80084bc:	bd10      	pop	{r4, pc}
 80084be:	46c0      	nop			@ (mov r8, r8)
 80084c0:	200012b8 	.word	0x200012b8

080084c4 <__ssputs_r>:
 80084c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084c6:	688e      	ldr	r6, [r1, #8]
 80084c8:	b085      	sub	sp, #20
 80084ca:	001f      	movs	r7, r3
 80084cc:	000c      	movs	r4, r1
 80084ce:	680b      	ldr	r3, [r1, #0]
 80084d0:	9002      	str	r0, [sp, #8]
 80084d2:	9203      	str	r2, [sp, #12]
 80084d4:	42be      	cmp	r6, r7
 80084d6:	d830      	bhi.n	800853a <__ssputs_r+0x76>
 80084d8:	210c      	movs	r1, #12
 80084da:	5e62      	ldrsh	r2, [r4, r1]
 80084dc:	2190      	movs	r1, #144	@ 0x90
 80084de:	00c9      	lsls	r1, r1, #3
 80084e0:	420a      	tst	r2, r1
 80084e2:	d028      	beq.n	8008536 <__ssputs_r+0x72>
 80084e4:	2003      	movs	r0, #3
 80084e6:	6921      	ldr	r1, [r4, #16]
 80084e8:	1a5b      	subs	r3, r3, r1
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	6963      	ldr	r3, [r4, #20]
 80084ee:	4343      	muls	r3, r0
 80084f0:	9801      	ldr	r0, [sp, #4]
 80084f2:	0fdd      	lsrs	r5, r3, #31
 80084f4:	18ed      	adds	r5, r5, r3
 80084f6:	1c7b      	adds	r3, r7, #1
 80084f8:	181b      	adds	r3, r3, r0
 80084fa:	106d      	asrs	r5, r5, #1
 80084fc:	42ab      	cmp	r3, r5
 80084fe:	d900      	bls.n	8008502 <__ssputs_r+0x3e>
 8008500:	001d      	movs	r5, r3
 8008502:	0552      	lsls	r2, r2, #21
 8008504:	d528      	bpl.n	8008558 <__ssputs_r+0x94>
 8008506:	0029      	movs	r1, r5
 8008508:	9802      	ldr	r0, [sp, #8]
 800850a:	f7ff ff4b 	bl	80083a4 <_malloc_r>
 800850e:	1e06      	subs	r6, r0, #0
 8008510:	d02c      	beq.n	800856c <__ssputs_r+0xa8>
 8008512:	9a01      	ldr	r2, [sp, #4]
 8008514:	6921      	ldr	r1, [r4, #16]
 8008516:	f7ff fecf 	bl	80082b8 <memcpy>
 800851a:	89a2      	ldrh	r2, [r4, #12]
 800851c:	4b18      	ldr	r3, [pc, #96]	@ (8008580 <__ssputs_r+0xbc>)
 800851e:	401a      	ands	r2, r3
 8008520:	2380      	movs	r3, #128	@ 0x80
 8008522:	4313      	orrs	r3, r2
 8008524:	81a3      	strh	r3, [r4, #12]
 8008526:	9b01      	ldr	r3, [sp, #4]
 8008528:	6126      	str	r6, [r4, #16]
 800852a:	18f6      	adds	r6, r6, r3
 800852c:	6026      	str	r6, [r4, #0]
 800852e:	003e      	movs	r6, r7
 8008530:	6165      	str	r5, [r4, #20]
 8008532:	1aed      	subs	r5, r5, r3
 8008534:	60a5      	str	r5, [r4, #8]
 8008536:	42be      	cmp	r6, r7
 8008538:	d900      	bls.n	800853c <__ssputs_r+0x78>
 800853a:	003e      	movs	r6, r7
 800853c:	0032      	movs	r2, r6
 800853e:	9903      	ldr	r1, [sp, #12]
 8008540:	6820      	ldr	r0, [r4, #0]
 8008542:	f000 fa99 	bl	8008a78 <memmove>
 8008546:	2000      	movs	r0, #0
 8008548:	68a3      	ldr	r3, [r4, #8]
 800854a:	1b9b      	subs	r3, r3, r6
 800854c:	60a3      	str	r3, [r4, #8]
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	199b      	adds	r3, r3, r6
 8008552:	6023      	str	r3, [r4, #0]
 8008554:	b005      	add	sp, #20
 8008556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008558:	002a      	movs	r2, r5
 800855a:	9802      	ldr	r0, [sp, #8]
 800855c:	f000 fabb 	bl	8008ad6 <_realloc_r>
 8008560:	1e06      	subs	r6, r0, #0
 8008562:	d1e0      	bne.n	8008526 <__ssputs_r+0x62>
 8008564:	6921      	ldr	r1, [r4, #16]
 8008566:	9802      	ldr	r0, [sp, #8]
 8008568:	f7ff feb0 	bl	80082cc <_free_r>
 800856c:	230c      	movs	r3, #12
 800856e:	2001      	movs	r0, #1
 8008570:	9a02      	ldr	r2, [sp, #8]
 8008572:	4240      	negs	r0, r0
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	89a2      	ldrh	r2, [r4, #12]
 8008578:	3334      	adds	r3, #52	@ 0x34
 800857a:	4313      	orrs	r3, r2
 800857c:	81a3      	strh	r3, [r4, #12]
 800857e:	e7e9      	b.n	8008554 <__ssputs_r+0x90>
 8008580:	fffffb7f 	.word	0xfffffb7f

08008584 <_svfiprintf_r>:
 8008584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008586:	b0a1      	sub	sp, #132	@ 0x84
 8008588:	9003      	str	r0, [sp, #12]
 800858a:	001d      	movs	r5, r3
 800858c:	898b      	ldrh	r3, [r1, #12]
 800858e:	000f      	movs	r7, r1
 8008590:	0016      	movs	r6, r2
 8008592:	061b      	lsls	r3, r3, #24
 8008594:	d511      	bpl.n	80085ba <_svfiprintf_r+0x36>
 8008596:	690b      	ldr	r3, [r1, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10e      	bne.n	80085ba <_svfiprintf_r+0x36>
 800859c:	2140      	movs	r1, #64	@ 0x40
 800859e:	f7ff ff01 	bl	80083a4 <_malloc_r>
 80085a2:	6038      	str	r0, [r7, #0]
 80085a4:	6138      	str	r0, [r7, #16]
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d105      	bne.n	80085b6 <_svfiprintf_r+0x32>
 80085aa:	230c      	movs	r3, #12
 80085ac:	9a03      	ldr	r2, [sp, #12]
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	2001      	movs	r0, #1
 80085b2:	4240      	negs	r0, r0
 80085b4:	e0cf      	b.n	8008756 <_svfiprintf_r+0x1d2>
 80085b6:	2340      	movs	r3, #64	@ 0x40
 80085b8:	617b      	str	r3, [r7, #20]
 80085ba:	2300      	movs	r3, #0
 80085bc:	ac08      	add	r4, sp, #32
 80085be:	6163      	str	r3, [r4, #20]
 80085c0:	3320      	adds	r3, #32
 80085c2:	7663      	strb	r3, [r4, #25]
 80085c4:	3310      	adds	r3, #16
 80085c6:	76a3      	strb	r3, [r4, #26]
 80085c8:	9507      	str	r5, [sp, #28]
 80085ca:	0035      	movs	r5, r6
 80085cc:	782b      	ldrb	r3, [r5, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <_svfiprintf_r+0x52>
 80085d2:	2b25      	cmp	r3, #37	@ 0x25
 80085d4:	d148      	bne.n	8008668 <_svfiprintf_r+0xe4>
 80085d6:	1bab      	subs	r3, r5, r6
 80085d8:	9305      	str	r3, [sp, #20]
 80085da:	42b5      	cmp	r5, r6
 80085dc:	d00b      	beq.n	80085f6 <_svfiprintf_r+0x72>
 80085de:	0032      	movs	r2, r6
 80085e0:	0039      	movs	r1, r7
 80085e2:	9803      	ldr	r0, [sp, #12]
 80085e4:	f7ff ff6e 	bl	80084c4 <__ssputs_r>
 80085e8:	3001      	adds	r0, #1
 80085ea:	d100      	bne.n	80085ee <_svfiprintf_r+0x6a>
 80085ec:	e0ae      	b.n	800874c <_svfiprintf_r+0x1c8>
 80085ee:	6963      	ldr	r3, [r4, #20]
 80085f0:	9a05      	ldr	r2, [sp, #20]
 80085f2:	189b      	adds	r3, r3, r2
 80085f4:	6163      	str	r3, [r4, #20]
 80085f6:	782b      	ldrb	r3, [r5, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d100      	bne.n	80085fe <_svfiprintf_r+0x7a>
 80085fc:	e0a6      	b.n	800874c <_svfiprintf_r+0x1c8>
 80085fe:	2201      	movs	r2, #1
 8008600:	2300      	movs	r3, #0
 8008602:	4252      	negs	r2, r2
 8008604:	6062      	str	r2, [r4, #4]
 8008606:	a904      	add	r1, sp, #16
 8008608:	3254      	adds	r2, #84	@ 0x54
 800860a:	1852      	adds	r2, r2, r1
 800860c:	1c6e      	adds	r6, r5, #1
 800860e:	6023      	str	r3, [r4, #0]
 8008610:	60e3      	str	r3, [r4, #12]
 8008612:	60a3      	str	r3, [r4, #8]
 8008614:	7013      	strb	r3, [r2, #0]
 8008616:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008618:	4b54      	ldr	r3, [pc, #336]	@ (800876c <_svfiprintf_r+0x1e8>)
 800861a:	2205      	movs	r2, #5
 800861c:	0018      	movs	r0, r3
 800861e:	7831      	ldrb	r1, [r6, #0]
 8008620:	9305      	str	r3, [sp, #20]
 8008622:	f000 fa4d 	bl	8008ac0 <memchr>
 8008626:	1c75      	adds	r5, r6, #1
 8008628:	2800      	cmp	r0, #0
 800862a:	d11f      	bne.n	800866c <_svfiprintf_r+0xe8>
 800862c:	6822      	ldr	r2, [r4, #0]
 800862e:	06d3      	lsls	r3, r2, #27
 8008630:	d504      	bpl.n	800863c <_svfiprintf_r+0xb8>
 8008632:	2353      	movs	r3, #83	@ 0x53
 8008634:	a904      	add	r1, sp, #16
 8008636:	185b      	adds	r3, r3, r1
 8008638:	2120      	movs	r1, #32
 800863a:	7019      	strb	r1, [r3, #0]
 800863c:	0713      	lsls	r3, r2, #28
 800863e:	d504      	bpl.n	800864a <_svfiprintf_r+0xc6>
 8008640:	2353      	movs	r3, #83	@ 0x53
 8008642:	a904      	add	r1, sp, #16
 8008644:	185b      	adds	r3, r3, r1
 8008646:	212b      	movs	r1, #43	@ 0x2b
 8008648:	7019      	strb	r1, [r3, #0]
 800864a:	7833      	ldrb	r3, [r6, #0]
 800864c:	2b2a      	cmp	r3, #42	@ 0x2a
 800864e:	d016      	beq.n	800867e <_svfiprintf_r+0xfa>
 8008650:	0035      	movs	r5, r6
 8008652:	2100      	movs	r1, #0
 8008654:	200a      	movs	r0, #10
 8008656:	68e3      	ldr	r3, [r4, #12]
 8008658:	782a      	ldrb	r2, [r5, #0]
 800865a:	1c6e      	adds	r6, r5, #1
 800865c:	3a30      	subs	r2, #48	@ 0x30
 800865e:	2a09      	cmp	r2, #9
 8008660:	d950      	bls.n	8008704 <_svfiprintf_r+0x180>
 8008662:	2900      	cmp	r1, #0
 8008664:	d111      	bne.n	800868a <_svfiprintf_r+0x106>
 8008666:	e017      	b.n	8008698 <_svfiprintf_r+0x114>
 8008668:	3501      	adds	r5, #1
 800866a:	e7af      	b.n	80085cc <_svfiprintf_r+0x48>
 800866c:	9b05      	ldr	r3, [sp, #20]
 800866e:	6822      	ldr	r2, [r4, #0]
 8008670:	1ac0      	subs	r0, r0, r3
 8008672:	2301      	movs	r3, #1
 8008674:	4083      	lsls	r3, r0
 8008676:	4313      	orrs	r3, r2
 8008678:	002e      	movs	r6, r5
 800867a:	6023      	str	r3, [r4, #0]
 800867c:	e7cc      	b.n	8008618 <_svfiprintf_r+0x94>
 800867e:	9b07      	ldr	r3, [sp, #28]
 8008680:	1d19      	adds	r1, r3, #4
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	9107      	str	r1, [sp, #28]
 8008686:	2b00      	cmp	r3, #0
 8008688:	db01      	blt.n	800868e <_svfiprintf_r+0x10a>
 800868a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800868c:	e004      	b.n	8008698 <_svfiprintf_r+0x114>
 800868e:	425b      	negs	r3, r3
 8008690:	60e3      	str	r3, [r4, #12]
 8008692:	2302      	movs	r3, #2
 8008694:	4313      	orrs	r3, r2
 8008696:	6023      	str	r3, [r4, #0]
 8008698:	782b      	ldrb	r3, [r5, #0]
 800869a:	2b2e      	cmp	r3, #46	@ 0x2e
 800869c:	d10c      	bne.n	80086b8 <_svfiprintf_r+0x134>
 800869e:	786b      	ldrb	r3, [r5, #1]
 80086a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80086a2:	d134      	bne.n	800870e <_svfiprintf_r+0x18a>
 80086a4:	9b07      	ldr	r3, [sp, #28]
 80086a6:	3502      	adds	r5, #2
 80086a8:	1d1a      	adds	r2, r3, #4
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	9207      	str	r2, [sp, #28]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	da01      	bge.n	80086b6 <_svfiprintf_r+0x132>
 80086b2:	2301      	movs	r3, #1
 80086b4:	425b      	negs	r3, r3
 80086b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80086b8:	4e2d      	ldr	r6, [pc, #180]	@ (8008770 <_svfiprintf_r+0x1ec>)
 80086ba:	2203      	movs	r2, #3
 80086bc:	0030      	movs	r0, r6
 80086be:	7829      	ldrb	r1, [r5, #0]
 80086c0:	f000 f9fe 	bl	8008ac0 <memchr>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	d006      	beq.n	80086d6 <_svfiprintf_r+0x152>
 80086c8:	2340      	movs	r3, #64	@ 0x40
 80086ca:	1b80      	subs	r0, r0, r6
 80086cc:	4083      	lsls	r3, r0
 80086ce:	6822      	ldr	r2, [r4, #0]
 80086d0:	3501      	adds	r5, #1
 80086d2:	4313      	orrs	r3, r2
 80086d4:	6023      	str	r3, [r4, #0]
 80086d6:	7829      	ldrb	r1, [r5, #0]
 80086d8:	2206      	movs	r2, #6
 80086da:	4826      	ldr	r0, [pc, #152]	@ (8008774 <_svfiprintf_r+0x1f0>)
 80086dc:	1c6e      	adds	r6, r5, #1
 80086de:	7621      	strb	r1, [r4, #24]
 80086e0:	f000 f9ee 	bl	8008ac0 <memchr>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d038      	beq.n	800875a <_svfiprintf_r+0x1d6>
 80086e8:	4b23      	ldr	r3, [pc, #140]	@ (8008778 <_svfiprintf_r+0x1f4>)
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d122      	bne.n	8008734 <_svfiprintf_r+0x1b0>
 80086ee:	2207      	movs	r2, #7
 80086f0:	9b07      	ldr	r3, [sp, #28]
 80086f2:	3307      	adds	r3, #7
 80086f4:	4393      	bics	r3, r2
 80086f6:	3308      	adds	r3, #8
 80086f8:	9307      	str	r3, [sp, #28]
 80086fa:	6963      	ldr	r3, [r4, #20]
 80086fc:	9a04      	ldr	r2, [sp, #16]
 80086fe:	189b      	adds	r3, r3, r2
 8008700:	6163      	str	r3, [r4, #20]
 8008702:	e762      	b.n	80085ca <_svfiprintf_r+0x46>
 8008704:	4343      	muls	r3, r0
 8008706:	0035      	movs	r5, r6
 8008708:	2101      	movs	r1, #1
 800870a:	189b      	adds	r3, r3, r2
 800870c:	e7a4      	b.n	8008658 <_svfiprintf_r+0xd4>
 800870e:	2300      	movs	r3, #0
 8008710:	200a      	movs	r0, #10
 8008712:	0019      	movs	r1, r3
 8008714:	3501      	adds	r5, #1
 8008716:	6063      	str	r3, [r4, #4]
 8008718:	782a      	ldrb	r2, [r5, #0]
 800871a:	1c6e      	adds	r6, r5, #1
 800871c:	3a30      	subs	r2, #48	@ 0x30
 800871e:	2a09      	cmp	r2, #9
 8008720:	d903      	bls.n	800872a <_svfiprintf_r+0x1a6>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0c8      	beq.n	80086b8 <_svfiprintf_r+0x134>
 8008726:	9109      	str	r1, [sp, #36]	@ 0x24
 8008728:	e7c6      	b.n	80086b8 <_svfiprintf_r+0x134>
 800872a:	4341      	muls	r1, r0
 800872c:	0035      	movs	r5, r6
 800872e:	2301      	movs	r3, #1
 8008730:	1889      	adds	r1, r1, r2
 8008732:	e7f1      	b.n	8008718 <_svfiprintf_r+0x194>
 8008734:	aa07      	add	r2, sp, #28
 8008736:	9200      	str	r2, [sp, #0]
 8008738:	0021      	movs	r1, r4
 800873a:	003a      	movs	r2, r7
 800873c:	4b0f      	ldr	r3, [pc, #60]	@ (800877c <_svfiprintf_r+0x1f8>)
 800873e:	9803      	ldr	r0, [sp, #12]
 8008740:	e000      	b.n	8008744 <_svfiprintf_r+0x1c0>
 8008742:	bf00      	nop
 8008744:	9004      	str	r0, [sp, #16]
 8008746:	9b04      	ldr	r3, [sp, #16]
 8008748:	3301      	adds	r3, #1
 800874a:	d1d6      	bne.n	80086fa <_svfiprintf_r+0x176>
 800874c:	89bb      	ldrh	r3, [r7, #12]
 800874e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008750:	065b      	lsls	r3, r3, #25
 8008752:	d500      	bpl.n	8008756 <_svfiprintf_r+0x1d2>
 8008754:	e72c      	b.n	80085b0 <_svfiprintf_r+0x2c>
 8008756:	b021      	add	sp, #132	@ 0x84
 8008758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875a:	aa07      	add	r2, sp, #28
 800875c:	9200      	str	r2, [sp, #0]
 800875e:	0021      	movs	r1, r4
 8008760:	003a      	movs	r2, r7
 8008762:	4b06      	ldr	r3, [pc, #24]	@ (800877c <_svfiprintf_r+0x1f8>)
 8008764:	9803      	ldr	r0, [sp, #12]
 8008766:	f000 f87b 	bl	8008860 <_printf_i>
 800876a:	e7eb      	b.n	8008744 <_svfiprintf_r+0x1c0>
 800876c:	0800971c 	.word	0x0800971c
 8008770:	08009722 	.word	0x08009722
 8008774:	08009726 	.word	0x08009726
 8008778:	00000000 	.word	0x00000000
 800877c:	080084c5 	.word	0x080084c5

08008780 <_printf_common>:
 8008780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008782:	0016      	movs	r6, r2
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	688a      	ldr	r2, [r1, #8]
 8008788:	690b      	ldr	r3, [r1, #16]
 800878a:	000c      	movs	r4, r1
 800878c:	9000      	str	r0, [sp, #0]
 800878e:	4293      	cmp	r3, r2
 8008790:	da00      	bge.n	8008794 <_printf_common+0x14>
 8008792:	0013      	movs	r3, r2
 8008794:	0022      	movs	r2, r4
 8008796:	6033      	str	r3, [r6, #0]
 8008798:	3243      	adds	r2, #67	@ 0x43
 800879a:	7812      	ldrb	r2, [r2, #0]
 800879c:	2a00      	cmp	r2, #0
 800879e:	d001      	beq.n	80087a4 <_printf_common+0x24>
 80087a0:	3301      	adds	r3, #1
 80087a2:	6033      	str	r3, [r6, #0]
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	069b      	lsls	r3, r3, #26
 80087a8:	d502      	bpl.n	80087b0 <_printf_common+0x30>
 80087aa:	6833      	ldr	r3, [r6, #0]
 80087ac:	3302      	adds	r3, #2
 80087ae:	6033      	str	r3, [r6, #0]
 80087b0:	6822      	ldr	r2, [r4, #0]
 80087b2:	2306      	movs	r3, #6
 80087b4:	0015      	movs	r5, r2
 80087b6:	401d      	ands	r5, r3
 80087b8:	421a      	tst	r2, r3
 80087ba:	d027      	beq.n	800880c <_printf_common+0x8c>
 80087bc:	0023      	movs	r3, r4
 80087be:	3343      	adds	r3, #67	@ 0x43
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	1e5a      	subs	r2, r3, #1
 80087c4:	4193      	sbcs	r3, r2
 80087c6:	6822      	ldr	r2, [r4, #0]
 80087c8:	0692      	lsls	r2, r2, #26
 80087ca:	d430      	bmi.n	800882e <_printf_common+0xae>
 80087cc:	0022      	movs	r2, r4
 80087ce:	9901      	ldr	r1, [sp, #4]
 80087d0:	9800      	ldr	r0, [sp, #0]
 80087d2:	9d08      	ldr	r5, [sp, #32]
 80087d4:	3243      	adds	r2, #67	@ 0x43
 80087d6:	47a8      	blx	r5
 80087d8:	3001      	adds	r0, #1
 80087da:	d025      	beq.n	8008828 <_printf_common+0xa8>
 80087dc:	2206      	movs	r2, #6
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	2500      	movs	r5, #0
 80087e2:	4013      	ands	r3, r2
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d105      	bne.n	80087f4 <_printf_common+0x74>
 80087e8:	6833      	ldr	r3, [r6, #0]
 80087ea:	68e5      	ldr	r5, [r4, #12]
 80087ec:	1aed      	subs	r5, r5, r3
 80087ee:	43eb      	mvns	r3, r5
 80087f0:	17db      	asrs	r3, r3, #31
 80087f2:	401d      	ands	r5, r3
 80087f4:	68a3      	ldr	r3, [r4, #8]
 80087f6:	6922      	ldr	r2, [r4, #16]
 80087f8:	4293      	cmp	r3, r2
 80087fa:	dd01      	ble.n	8008800 <_printf_common+0x80>
 80087fc:	1a9b      	subs	r3, r3, r2
 80087fe:	18ed      	adds	r5, r5, r3
 8008800:	2600      	movs	r6, #0
 8008802:	42b5      	cmp	r5, r6
 8008804:	d120      	bne.n	8008848 <_printf_common+0xc8>
 8008806:	2000      	movs	r0, #0
 8008808:	e010      	b.n	800882c <_printf_common+0xac>
 800880a:	3501      	adds	r5, #1
 800880c:	68e3      	ldr	r3, [r4, #12]
 800880e:	6832      	ldr	r2, [r6, #0]
 8008810:	1a9b      	subs	r3, r3, r2
 8008812:	42ab      	cmp	r3, r5
 8008814:	ddd2      	ble.n	80087bc <_printf_common+0x3c>
 8008816:	0022      	movs	r2, r4
 8008818:	2301      	movs	r3, #1
 800881a:	9901      	ldr	r1, [sp, #4]
 800881c:	9800      	ldr	r0, [sp, #0]
 800881e:	9f08      	ldr	r7, [sp, #32]
 8008820:	3219      	adds	r2, #25
 8008822:	47b8      	blx	r7
 8008824:	3001      	adds	r0, #1
 8008826:	d1f0      	bne.n	800880a <_printf_common+0x8a>
 8008828:	2001      	movs	r0, #1
 800882a:	4240      	negs	r0, r0
 800882c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800882e:	2030      	movs	r0, #48	@ 0x30
 8008830:	18e1      	adds	r1, r4, r3
 8008832:	3143      	adds	r1, #67	@ 0x43
 8008834:	7008      	strb	r0, [r1, #0]
 8008836:	0021      	movs	r1, r4
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	3145      	adds	r1, #69	@ 0x45
 800883c:	7809      	ldrb	r1, [r1, #0]
 800883e:	18a2      	adds	r2, r4, r2
 8008840:	3243      	adds	r2, #67	@ 0x43
 8008842:	3302      	adds	r3, #2
 8008844:	7011      	strb	r1, [r2, #0]
 8008846:	e7c1      	b.n	80087cc <_printf_common+0x4c>
 8008848:	0022      	movs	r2, r4
 800884a:	2301      	movs	r3, #1
 800884c:	9901      	ldr	r1, [sp, #4]
 800884e:	9800      	ldr	r0, [sp, #0]
 8008850:	9f08      	ldr	r7, [sp, #32]
 8008852:	321a      	adds	r2, #26
 8008854:	47b8      	blx	r7
 8008856:	3001      	adds	r0, #1
 8008858:	d0e6      	beq.n	8008828 <_printf_common+0xa8>
 800885a:	3601      	adds	r6, #1
 800885c:	e7d1      	b.n	8008802 <_printf_common+0x82>
	...

08008860 <_printf_i>:
 8008860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008862:	b08b      	sub	sp, #44	@ 0x2c
 8008864:	9206      	str	r2, [sp, #24]
 8008866:	000a      	movs	r2, r1
 8008868:	3243      	adds	r2, #67	@ 0x43
 800886a:	9307      	str	r3, [sp, #28]
 800886c:	9005      	str	r0, [sp, #20]
 800886e:	9203      	str	r2, [sp, #12]
 8008870:	7e0a      	ldrb	r2, [r1, #24]
 8008872:	000c      	movs	r4, r1
 8008874:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008876:	2a78      	cmp	r2, #120	@ 0x78
 8008878:	d809      	bhi.n	800888e <_printf_i+0x2e>
 800887a:	2a62      	cmp	r2, #98	@ 0x62
 800887c:	d80b      	bhi.n	8008896 <_printf_i+0x36>
 800887e:	2a00      	cmp	r2, #0
 8008880:	d100      	bne.n	8008884 <_printf_i+0x24>
 8008882:	e0ba      	b.n	80089fa <_printf_i+0x19a>
 8008884:	497a      	ldr	r1, [pc, #488]	@ (8008a70 <_printf_i+0x210>)
 8008886:	9104      	str	r1, [sp, #16]
 8008888:	2a58      	cmp	r2, #88	@ 0x58
 800888a:	d100      	bne.n	800888e <_printf_i+0x2e>
 800888c:	e08e      	b.n	80089ac <_printf_i+0x14c>
 800888e:	0025      	movs	r5, r4
 8008890:	3542      	adds	r5, #66	@ 0x42
 8008892:	702a      	strb	r2, [r5, #0]
 8008894:	e022      	b.n	80088dc <_printf_i+0x7c>
 8008896:	0010      	movs	r0, r2
 8008898:	3863      	subs	r0, #99	@ 0x63
 800889a:	2815      	cmp	r0, #21
 800889c:	d8f7      	bhi.n	800888e <_printf_i+0x2e>
 800889e:	f7f7 fc2f 	bl	8000100 <__gnu_thumb1_case_shi>
 80088a2:	0016      	.short	0x0016
 80088a4:	fff6001f 	.word	0xfff6001f
 80088a8:	fff6fff6 	.word	0xfff6fff6
 80088ac:	001ffff6 	.word	0x001ffff6
 80088b0:	fff6fff6 	.word	0xfff6fff6
 80088b4:	fff6fff6 	.word	0xfff6fff6
 80088b8:	0036009f 	.word	0x0036009f
 80088bc:	fff6007e 	.word	0xfff6007e
 80088c0:	00b0fff6 	.word	0x00b0fff6
 80088c4:	0036fff6 	.word	0x0036fff6
 80088c8:	fff6fff6 	.word	0xfff6fff6
 80088cc:	0082      	.short	0x0082
 80088ce:	0025      	movs	r5, r4
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	3542      	adds	r5, #66	@ 0x42
 80088d4:	1d11      	adds	r1, r2, #4
 80088d6:	6019      	str	r1, [r3, #0]
 80088d8:	6813      	ldr	r3, [r2, #0]
 80088da:	702b      	strb	r3, [r5, #0]
 80088dc:	2301      	movs	r3, #1
 80088de:	e09e      	b.n	8008a1e <_printf_i+0x1be>
 80088e0:	6818      	ldr	r0, [r3, #0]
 80088e2:	6809      	ldr	r1, [r1, #0]
 80088e4:	1d02      	adds	r2, r0, #4
 80088e6:	060d      	lsls	r5, r1, #24
 80088e8:	d50b      	bpl.n	8008902 <_printf_i+0xa2>
 80088ea:	6806      	ldr	r6, [r0, #0]
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	2e00      	cmp	r6, #0
 80088f0:	da03      	bge.n	80088fa <_printf_i+0x9a>
 80088f2:	232d      	movs	r3, #45	@ 0x2d
 80088f4:	9a03      	ldr	r2, [sp, #12]
 80088f6:	4276      	negs	r6, r6
 80088f8:	7013      	strb	r3, [r2, #0]
 80088fa:	4b5d      	ldr	r3, [pc, #372]	@ (8008a70 <_printf_i+0x210>)
 80088fc:	270a      	movs	r7, #10
 80088fe:	9304      	str	r3, [sp, #16]
 8008900:	e018      	b.n	8008934 <_printf_i+0xd4>
 8008902:	6806      	ldr	r6, [r0, #0]
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	0649      	lsls	r1, r1, #25
 8008908:	d5f1      	bpl.n	80088ee <_printf_i+0x8e>
 800890a:	b236      	sxth	r6, r6
 800890c:	e7ef      	b.n	80088ee <_printf_i+0x8e>
 800890e:	6808      	ldr	r0, [r1, #0]
 8008910:	6819      	ldr	r1, [r3, #0]
 8008912:	c940      	ldmia	r1!, {r6}
 8008914:	0605      	lsls	r5, r0, #24
 8008916:	d402      	bmi.n	800891e <_printf_i+0xbe>
 8008918:	0640      	lsls	r0, r0, #25
 800891a:	d500      	bpl.n	800891e <_printf_i+0xbe>
 800891c:	b2b6      	uxth	r6, r6
 800891e:	6019      	str	r1, [r3, #0]
 8008920:	4b53      	ldr	r3, [pc, #332]	@ (8008a70 <_printf_i+0x210>)
 8008922:	270a      	movs	r7, #10
 8008924:	9304      	str	r3, [sp, #16]
 8008926:	2a6f      	cmp	r2, #111	@ 0x6f
 8008928:	d100      	bne.n	800892c <_printf_i+0xcc>
 800892a:	3f02      	subs	r7, #2
 800892c:	0023      	movs	r3, r4
 800892e:	2200      	movs	r2, #0
 8008930:	3343      	adds	r3, #67	@ 0x43
 8008932:	701a      	strb	r2, [r3, #0]
 8008934:	6863      	ldr	r3, [r4, #4]
 8008936:	60a3      	str	r3, [r4, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	db06      	blt.n	800894a <_printf_i+0xea>
 800893c:	2104      	movs	r1, #4
 800893e:	6822      	ldr	r2, [r4, #0]
 8008940:	9d03      	ldr	r5, [sp, #12]
 8008942:	438a      	bics	r2, r1
 8008944:	6022      	str	r2, [r4, #0]
 8008946:	4333      	orrs	r3, r6
 8008948:	d00c      	beq.n	8008964 <_printf_i+0x104>
 800894a:	9d03      	ldr	r5, [sp, #12]
 800894c:	0030      	movs	r0, r6
 800894e:	0039      	movs	r1, r7
 8008950:	f7f7 fc66 	bl	8000220 <__aeabi_uidivmod>
 8008954:	9b04      	ldr	r3, [sp, #16]
 8008956:	3d01      	subs	r5, #1
 8008958:	5c5b      	ldrb	r3, [r3, r1]
 800895a:	702b      	strb	r3, [r5, #0]
 800895c:	0033      	movs	r3, r6
 800895e:	0006      	movs	r6, r0
 8008960:	429f      	cmp	r7, r3
 8008962:	d9f3      	bls.n	800894c <_printf_i+0xec>
 8008964:	2f08      	cmp	r7, #8
 8008966:	d109      	bne.n	800897c <_printf_i+0x11c>
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	07db      	lsls	r3, r3, #31
 800896c:	d506      	bpl.n	800897c <_printf_i+0x11c>
 800896e:	6862      	ldr	r2, [r4, #4]
 8008970:	6923      	ldr	r3, [r4, #16]
 8008972:	429a      	cmp	r2, r3
 8008974:	dc02      	bgt.n	800897c <_printf_i+0x11c>
 8008976:	2330      	movs	r3, #48	@ 0x30
 8008978:	3d01      	subs	r5, #1
 800897a:	702b      	strb	r3, [r5, #0]
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	1b5b      	subs	r3, r3, r5
 8008980:	6123      	str	r3, [r4, #16]
 8008982:	9b07      	ldr	r3, [sp, #28]
 8008984:	0021      	movs	r1, r4
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	9805      	ldr	r0, [sp, #20]
 800898a:	9b06      	ldr	r3, [sp, #24]
 800898c:	aa09      	add	r2, sp, #36	@ 0x24
 800898e:	f7ff fef7 	bl	8008780 <_printf_common>
 8008992:	3001      	adds	r0, #1
 8008994:	d148      	bne.n	8008a28 <_printf_i+0x1c8>
 8008996:	2001      	movs	r0, #1
 8008998:	4240      	negs	r0, r0
 800899a:	b00b      	add	sp, #44	@ 0x2c
 800899c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800899e:	2220      	movs	r2, #32
 80089a0:	6809      	ldr	r1, [r1, #0]
 80089a2:	430a      	orrs	r2, r1
 80089a4:	6022      	str	r2, [r4, #0]
 80089a6:	2278      	movs	r2, #120	@ 0x78
 80089a8:	4932      	ldr	r1, [pc, #200]	@ (8008a74 <_printf_i+0x214>)
 80089aa:	9104      	str	r1, [sp, #16]
 80089ac:	0021      	movs	r1, r4
 80089ae:	3145      	adds	r1, #69	@ 0x45
 80089b0:	700a      	strb	r2, [r1, #0]
 80089b2:	6819      	ldr	r1, [r3, #0]
 80089b4:	6822      	ldr	r2, [r4, #0]
 80089b6:	c940      	ldmia	r1!, {r6}
 80089b8:	0610      	lsls	r0, r2, #24
 80089ba:	d402      	bmi.n	80089c2 <_printf_i+0x162>
 80089bc:	0650      	lsls	r0, r2, #25
 80089be:	d500      	bpl.n	80089c2 <_printf_i+0x162>
 80089c0:	b2b6      	uxth	r6, r6
 80089c2:	6019      	str	r1, [r3, #0]
 80089c4:	07d3      	lsls	r3, r2, #31
 80089c6:	d502      	bpl.n	80089ce <_printf_i+0x16e>
 80089c8:	2320      	movs	r3, #32
 80089ca:	4313      	orrs	r3, r2
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	2e00      	cmp	r6, #0
 80089d0:	d001      	beq.n	80089d6 <_printf_i+0x176>
 80089d2:	2710      	movs	r7, #16
 80089d4:	e7aa      	b.n	800892c <_printf_i+0xcc>
 80089d6:	2220      	movs	r2, #32
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	4393      	bics	r3, r2
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	e7f8      	b.n	80089d2 <_printf_i+0x172>
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	680d      	ldr	r5, [r1, #0]
 80089e4:	1d10      	adds	r0, r2, #4
 80089e6:	6949      	ldr	r1, [r1, #20]
 80089e8:	6018      	str	r0, [r3, #0]
 80089ea:	6813      	ldr	r3, [r2, #0]
 80089ec:	062e      	lsls	r6, r5, #24
 80089ee:	d501      	bpl.n	80089f4 <_printf_i+0x194>
 80089f0:	6019      	str	r1, [r3, #0]
 80089f2:	e002      	b.n	80089fa <_printf_i+0x19a>
 80089f4:	066d      	lsls	r5, r5, #25
 80089f6:	d5fb      	bpl.n	80089f0 <_printf_i+0x190>
 80089f8:	8019      	strh	r1, [r3, #0]
 80089fa:	2300      	movs	r3, #0
 80089fc:	9d03      	ldr	r5, [sp, #12]
 80089fe:	6123      	str	r3, [r4, #16]
 8008a00:	e7bf      	b.n	8008982 <_printf_i+0x122>
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	1d11      	adds	r1, r2, #4
 8008a06:	6019      	str	r1, [r3, #0]
 8008a08:	6815      	ldr	r5, [r2, #0]
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	0028      	movs	r0, r5
 8008a0e:	6862      	ldr	r2, [r4, #4]
 8008a10:	f000 f856 	bl	8008ac0 <memchr>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d001      	beq.n	8008a1c <_printf_i+0x1bc>
 8008a18:	1b40      	subs	r0, r0, r5
 8008a1a:	6060      	str	r0, [r4, #4]
 8008a1c:	6863      	ldr	r3, [r4, #4]
 8008a1e:	6123      	str	r3, [r4, #16]
 8008a20:	2300      	movs	r3, #0
 8008a22:	9a03      	ldr	r2, [sp, #12]
 8008a24:	7013      	strb	r3, [r2, #0]
 8008a26:	e7ac      	b.n	8008982 <_printf_i+0x122>
 8008a28:	002a      	movs	r2, r5
 8008a2a:	6923      	ldr	r3, [r4, #16]
 8008a2c:	9906      	ldr	r1, [sp, #24]
 8008a2e:	9805      	ldr	r0, [sp, #20]
 8008a30:	9d07      	ldr	r5, [sp, #28]
 8008a32:	47a8      	blx	r5
 8008a34:	3001      	adds	r0, #1
 8008a36:	d0ae      	beq.n	8008996 <_printf_i+0x136>
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	079b      	lsls	r3, r3, #30
 8008a3c:	d415      	bmi.n	8008a6a <_printf_i+0x20a>
 8008a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a40:	68e0      	ldr	r0, [r4, #12]
 8008a42:	4298      	cmp	r0, r3
 8008a44:	daa9      	bge.n	800899a <_printf_i+0x13a>
 8008a46:	0018      	movs	r0, r3
 8008a48:	e7a7      	b.n	800899a <_printf_i+0x13a>
 8008a4a:	0022      	movs	r2, r4
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	9906      	ldr	r1, [sp, #24]
 8008a50:	9805      	ldr	r0, [sp, #20]
 8008a52:	9e07      	ldr	r6, [sp, #28]
 8008a54:	3219      	adds	r2, #25
 8008a56:	47b0      	blx	r6
 8008a58:	3001      	adds	r0, #1
 8008a5a:	d09c      	beq.n	8008996 <_printf_i+0x136>
 8008a5c:	3501      	adds	r5, #1
 8008a5e:	68e3      	ldr	r3, [r4, #12]
 8008a60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a62:	1a9b      	subs	r3, r3, r2
 8008a64:	42ab      	cmp	r3, r5
 8008a66:	dcf0      	bgt.n	8008a4a <_printf_i+0x1ea>
 8008a68:	e7e9      	b.n	8008a3e <_printf_i+0x1de>
 8008a6a:	2500      	movs	r5, #0
 8008a6c:	e7f7      	b.n	8008a5e <_printf_i+0x1fe>
 8008a6e:	46c0      	nop			@ (mov r8, r8)
 8008a70:	0800972d 	.word	0x0800972d
 8008a74:	0800973e 	.word	0x0800973e

08008a78 <memmove>:
 8008a78:	b510      	push	{r4, lr}
 8008a7a:	4288      	cmp	r0, r1
 8008a7c:	d902      	bls.n	8008a84 <memmove+0xc>
 8008a7e:	188b      	adds	r3, r1, r2
 8008a80:	4298      	cmp	r0, r3
 8008a82:	d308      	bcc.n	8008a96 <memmove+0x1e>
 8008a84:	2300      	movs	r3, #0
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d007      	beq.n	8008a9a <memmove+0x22>
 8008a8a:	5ccc      	ldrb	r4, [r1, r3]
 8008a8c:	54c4      	strb	r4, [r0, r3]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	e7f9      	b.n	8008a86 <memmove+0xe>
 8008a92:	5c8b      	ldrb	r3, [r1, r2]
 8008a94:	5483      	strb	r3, [r0, r2]
 8008a96:	3a01      	subs	r2, #1
 8008a98:	d2fb      	bcs.n	8008a92 <memmove+0x1a>
 8008a9a:	bd10      	pop	{r4, pc}

08008a9c <_sbrk_r>:
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	b570      	push	{r4, r5, r6, lr}
 8008aa0:	4d06      	ldr	r5, [pc, #24]	@ (8008abc <_sbrk_r+0x20>)
 8008aa2:	0004      	movs	r4, r0
 8008aa4:	0008      	movs	r0, r1
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	f7f9 ff4a 	bl	8002940 <_sbrk>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d103      	bne.n	8008ab8 <_sbrk_r+0x1c>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d000      	beq.n	8008ab8 <_sbrk_r+0x1c>
 8008ab6:	6023      	str	r3, [r4, #0]
 8008ab8:	bd70      	pop	{r4, r5, r6, pc}
 8008aba:	46c0      	nop			@ (mov r8, r8)
 8008abc:	200012b4 	.word	0x200012b4

08008ac0 <memchr>:
 8008ac0:	b2c9      	uxtb	r1, r1
 8008ac2:	1882      	adds	r2, r0, r2
 8008ac4:	4290      	cmp	r0, r2
 8008ac6:	d101      	bne.n	8008acc <memchr+0xc>
 8008ac8:	2000      	movs	r0, #0
 8008aca:	4770      	bx	lr
 8008acc:	7803      	ldrb	r3, [r0, #0]
 8008ace:	428b      	cmp	r3, r1
 8008ad0:	d0fb      	beq.n	8008aca <memchr+0xa>
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	e7f6      	b.n	8008ac4 <memchr+0x4>

08008ad6 <_realloc_r>:
 8008ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ad8:	0006      	movs	r6, r0
 8008ada:	000c      	movs	r4, r1
 8008adc:	0015      	movs	r5, r2
 8008ade:	2900      	cmp	r1, #0
 8008ae0:	d105      	bne.n	8008aee <_realloc_r+0x18>
 8008ae2:	0011      	movs	r1, r2
 8008ae4:	f7ff fc5e 	bl	80083a4 <_malloc_r>
 8008ae8:	0004      	movs	r4, r0
 8008aea:	0020      	movs	r0, r4
 8008aec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008aee:	2a00      	cmp	r2, #0
 8008af0:	d103      	bne.n	8008afa <_realloc_r+0x24>
 8008af2:	f7ff fbeb 	bl	80082cc <_free_r>
 8008af6:	002c      	movs	r4, r5
 8008af8:	e7f7      	b.n	8008aea <_realloc_r+0x14>
 8008afa:	f000 f81c 	bl	8008b36 <_malloc_usable_size_r>
 8008afe:	0007      	movs	r7, r0
 8008b00:	4285      	cmp	r5, r0
 8008b02:	d802      	bhi.n	8008b0a <_realloc_r+0x34>
 8008b04:	0843      	lsrs	r3, r0, #1
 8008b06:	42ab      	cmp	r3, r5
 8008b08:	d3ef      	bcc.n	8008aea <_realloc_r+0x14>
 8008b0a:	0029      	movs	r1, r5
 8008b0c:	0030      	movs	r0, r6
 8008b0e:	f7ff fc49 	bl	80083a4 <_malloc_r>
 8008b12:	9001      	str	r0, [sp, #4]
 8008b14:	2800      	cmp	r0, #0
 8008b16:	d101      	bne.n	8008b1c <_realloc_r+0x46>
 8008b18:	9c01      	ldr	r4, [sp, #4]
 8008b1a:	e7e6      	b.n	8008aea <_realloc_r+0x14>
 8008b1c:	002a      	movs	r2, r5
 8008b1e:	42bd      	cmp	r5, r7
 8008b20:	d900      	bls.n	8008b24 <_realloc_r+0x4e>
 8008b22:	003a      	movs	r2, r7
 8008b24:	0021      	movs	r1, r4
 8008b26:	9801      	ldr	r0, [sp, #4]
 8008b28:	f7ff fbc6 	bl	80082b8 <memcpy>
 8008b2c:	0021      	movs	r1, r4
 8008b2e:	0030      	movs	r0, r6
 8008b30:	f7ff fbcc 	bl	80082cc <_free_r>
 8008b34:	e7f0      	b.n	8008b18 <_realloc_r+0x42>

08008b36 <_malloc_usable_size_r>:
 8008b36:	1f0b      	subs	r3, r1, #4
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	1f18      	subs	r0, r3, #4
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	da01      	bge.n	8008b44 <_malloc_usable_size_r+0xe>
 8008b40:	580b      	ldr	r3, [r1, r0]
 8008b42:	18c0      	adds	r0, r0, r3
 8008b44:	4770      	bx	lr
	...

08008b48 <_init>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	46c0      	nop			@ (mov r8, r8)
 8008b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4e:	bc08      	pop	{r3}
 8008b50:	469e      	mov	lr, r3
 8008b52:	4770      	bx	lr

08008b54 <_fini>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	46c0      	nop			@ (mov r8, r8)
 8008b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5a:	bc08      	pop	{r3}
 8008b5c:	469e      	mov	lr, r3
 8008b5e:	4770      	bx	lr

08008b60 <__FLASH_Program_Fast_veneer>:
 8008b60:	b401      	push	{r0}
 8008b62:	4802      	ldr	r0, [pc, #8]	@ (8008b6c <__FLASH_Program_Fast_veneer+0xc>)
 8008b64:	4684      	mov	ip, r0
 8008b66:	bc01      	pop	{r0}
 8008b68:	4760      	bx	ip
 8008b6a:	bf00      	nop
 8008b6c:	20000075 	.word	0x20000075

Disassembly of section .data:

20000000 <supported_commands>:
20000000:	54535251 58575655 5c5b5a59 00000000     QRSTUVWXYZ[\....

20000010 <Font_7x10>:
20000010:	00000a07 08008eec                       ........

20000018 <SystemCoreClock>:
20000018:	00f42400                                .$..

2000001c <uwTickPrio>:
2000001c:	00000004                                ....

20000020 <uwTickFreq>:
20000020:	00000001                                ....

20000024 <_impure_ptr>:
20000024:	20000028                                (.. 

20000028 <_impure_data>:
20000028:	00000000 2000117c 200011e4 2000124c     ....|.. ... L.. 
	...

20000074 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000074:	b580      	push	{r7, lr}
20000076:	b088      	sub	sp, #32
20000078:	af00      	add	r7, sp, #0
2000007a:	6078      	str	r0, [r7, #4]
2000007c:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000007e:	231f      	movs	r3, #31
20000080:	18fb      	adds	r3, r7, r3
20000082:	2200      	movs	r2, #0
20000084:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000086:	687b      	ldr	r3, [r7, #4]
20000088:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000008a:	683b      	ldr	r3, [r7, #0]
2000008c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000008e:	4b1a      	ldr	r3, [pc, #104]	@ (200000f8 <FLASH_Program_Fast+0x84>)
20000090:	695a      	ldr	r2, [r3, #20]
20000092:	4b19      	ldr	r3, [pc, #100]	@ (200000f8 <FLASH_Program_Fast+0x84>)
20000094:	2180      	movs	r1, #128	@ 0x80
20000096:	02c9      	lsls	r1, r1, #11
20000098:	430a      	orrs	r2, r1
2000009a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000009c:	f3ef 8310 	mrs	r3, PRIMASK
200000a0:	60fb      	str	r3, [r7, #12]
  return(result);
200000a2:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000a6:	b672      	cpsid	i
}
200000a8:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000aa:	e00f      	b.n	200000cc <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000ac:	697a      	ldr	r2, [r7, #20]
200000ae:	69bb      	ldr	r3, [r7, #24]
200000b0:	6812      	ldr	r2, [r2, #0]
200000b2:	601a      	str	r2, [r3, #0]
    src += 4U;
200000b4:	697b      	ldr	r3, [r7, #20]
200000b6:	3304      	adds	r3, #4
200000b8:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000ba:	69bb      	ldr	r3, [r7, #24]
200000bc:	3304      	adds	r3, #4
200000be:	61bb      	str	r3, [r7, #24]
    index++;
200000c0:	211f      	movs	r1, #31
200000c2:	187b      	adds	r3, r7, r1
200000c4:	781a      	ldrb	r2, [r3, #0]
200000c6:	187b      	adds	r3, r7, r1
200000c8:	3201      	adds	r2, #1
200000ca:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000cc:	231f      	movs	r3, #31
200000ce:	18fb      	adds	r3, r7, r3
200000d0:	781b      	ldrb	r3, [r3, #0]
200000d2:	2b3f      	cmp	r3, #63	@ 0x3f
200000d4:	d9ea      	bls.n	200000ac <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000d6:	46c0      	nop			@ (mov r8, r8)
200000d8:	4b07      	ldr	r3, [pc, #28]	@ (200000f8 <FLASH_Program_Fast+0x84>)
200000da:	691a      	ldr	r2, [r3, #16]
200000dc:	2380      	movs	r3, #128	@ 0x80
200000de:	025b      	lsls	r3, r3, #9
200000e0:	4013      	ands	r3, r2
200000e2:	d1f9      	bne.n	200000d8 <FLASH_Program_Fast+0x64>
200000e4:	693b      	ldr	r3, [r7, #16]
200000e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000e8:	68bb      	ldr	r3, [r7, #8]
200000ea:	f383 8810 	msr	PRIMASK, r3
}
200000ee:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000f0:	46c0      	nop			@ (mov r8, r8)
200000f2:	46bd      	mov	sp, r7
200000f4:	b008      	add	sp, #32
200000f6:	bd80      	pop	{r7, pc}
200000f8:	40022000 	.word	0x40022000
