
NUC.G070_LORA_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b0  080000b8  080000b8  000100b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c44  08009268  08009268  00019268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eac  08009eac  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  08009eac  08009eac  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009eac  08009eac  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eac  08009eac  00019eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009eb0  08009eb0  00019eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08009eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          0000108c  20000110  08009fc0  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000119c  08009fc0  0002119c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f1c  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000374c  00000000  00000000  00037050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0003a7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  0003b958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ef7  00000000  00000000  0003c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018389  00000000  00000000  0005489f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bdf6  00000000  00000000  0006cc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8a1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004270  00000000  00000000  000f8a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000110 	.word	0x20000110
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800923c 	.word	0x0800923c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000114 	.word	0x20000114
 80000fc:	0800923c 	.word	0x0800923c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <W25qxx_Spi>:


W25Q_HandleTypeDef w25qxx;


uint8_t W25qxx_Spi(uint8_t Data){
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b087      	sub	sp, #28
 8000414:	af02      	add	r7, sp, #8
 8000416:	0002      	movs	r2, r0
 8000418:	1dfb      	adds	r3, r7, #7
 800041a:	701a      	strb	r2, [r3, #0]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&W25Q_SPI, &Data, &ret, 1, 100);
 800041c:	240f      	movs	r4, #15
 800041e:	193a      	adds	r2, r7, r4
 8000420:	1df9      	adds	r1, r7, #7
 8000422:	4806      	ldr	r0, [pc, #24]	; (800043c <W25qxx_Spi+0x2c>)
 8000424:	2364      	movs	r3, #100	; 0x64
 8000426:	9300      	str	r3, [sp, #0]
 8000428:	2301      	movs	r3, #1
 800042a:	f006 faf7 	bl	8006a1c <HAL_SPI_TransmitReceive>
	return ret;
 800042e:	193b      	adds	r3, r7, r4
 8000430:	781b      	ldrb	r3, [r3, #0]
}
 8000432:	0018      	movs	r0, r3
 8000434:	46bd      	mov	sp, r7
 8000436:	b005      	add	sp, #20
 8000438:	bd90      	pop	{r4, r7, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	200002dc 	.word	0x200002dc

08000440 <W25qxx_WaitForWriteEnd>:

void W25qxx_WaitForWriteEnd(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
	uint32_t count=0;
 8000446:	2300      	movs	r3, #0
 8000448:	607b      	str	r3, [r7, #4]
	HAL_Delay(1);
 800044a:	2001      	movs	r0, #1
 800044c:	f002 ff7a 	bl	8003344 <HAL_Delay>
	Cs_Low;
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <W25qxx_WaitForWriteEnd+0x60>)
 8000452:	2200      	movs	r2, #0
 8000454:	2101      	movs	r1, #1
 8000456:	0018      	movs	r0, r3
 8000458:	f004 fb1b 	bl	8004a92 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25Q_READ_SR1);
 800045c:	2005      	movs	r0, #5
 800045e:	f7ff ffd7 	bl	8000410 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(Dummy_Byte);
 8000462:	20a5      	movs	r0, #165	; 0xa5
 8000464:	f7ff ffd4 	bl	8000410 <W25qxx_Spi>
 8000468:	0003      	movs	r3, r0
 800046a:	0019      	movs	r1, r3
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <W25qxx_WaitForWriteEnd+0x64>)
 800046e:	222c      	movs	r2, #44	; 0x2c
 8000470:	5499      	strb	r1, [r3, r2]
		HAL_Delay(1);
 8000472:	2001      	movs	r0, #1
 8000474:	f002 ff66 	bl	8003344 <HAL_Delay>
		count++;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3301      	adds	r3, #1
 800047c:	607b      	str	r3, [r7, #4]
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <W25qxx_WaitForWriteEnd+0x64>)
 8000480:	222c      	movs	r2, #44	; 0x2c
 8000482:	5c9b      	ldrb	r3, [r3, r2]
 8000484:	001a      	movs	r2, r3
 8000486:	2301      	movs	r3, #1
 8000488:	4013      	ands	r3, r2
 800048a:	d1ea      	bne.n	8000462 <W25qxx_WaitForWriteEnd+0x22>
	Cs_High;
 800048c:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <W25qxx_WaitForWriteEnd+0x60>)
 800048e:	2201      	movs	r2, #1
 8000490:	2101      	movs	r1, #1
 8000492:	0018      	movs	r0, r3
 8000494:	f004 fafd 	bl	8004a92 <HAL_GPIO_WritePin>
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b002      	add	sp, #8
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	50000400 	.word	0x50000400
 80004a4:	20000130 	.word	0x20000130

080004a8 <W25Q_Write_Enable>:
	UID	|=(((uint64_t)Rdata[0]<<24) | ((uint64_t)Rdata[1]<<16) | ((uint64_t)Rdata[2]<<8) | ((uint64_t)Rdata[3]))<<32;
	UID |=((Rdata[4]<<24) | (Rdata[5]<<16) | (Rdata[6]<<8)  | (Rdata[7]));
	return	UID;
}
void W25Q_Write_Enable(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	Cs_Low;
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <W25Q_Write_Enable+0x28>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	2101      	movs	r1, #1
 80004b2:	0018      	movs	r0, r3
 80004b4:	f004 faed 	bl	8004a92 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25Q_WRITE_ENABLE);
 80004b8:	2006      	movs	r0, #6
 80004ba:	f7ff ffa9 	bl	8000410 <W25qxx_Spi>
	Cs_High;
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <W25Q_Write_Enable+0x28>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	2101      	movs	r1, #1
 80004c4:	0018      	movs	r0, r3
 80004c6:	f004 fae4 	bl	8004a92 <HAL_GPIO_WritePin>
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	50000400 	.word	0x50000400

080004d4 <W25Q_Write_Disable>:

void W25Q_Write_Disable(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	Cs_Low;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <W25Q_Write_Disable+0x28>)
 80004da:	2200      	movs	r2, #0
 80004dc:	2101      	movs	r1, #1
 80004de:	0018      	movs	r0, r3
 80004e0:	f004 fad7 	bl	8004a92 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25Q_WRITE_DISABLE);
 80004e4:	2004      	movs	r0, #4
 80004e6:	f7ff ff93 	bl	8000410 <W25qxx_Spi>
	Cs_High;
 80004ea:	4b04      	ldr	r3, [pc, #16]	; (80004fc <W25Q_Write_Disable+0x28>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	2101      	movs	r1, #1
 80004f0:	0018      	movs	r0, r3
 80004f2:	f004 face 	bl	8004a92 <HAL_GPIO_WritePin>
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	50000400 	.word	0x50000400

08000500 <W25Q_Buf_Program>:
	W25Q_Write_Disable();

}

void W25Q_Buf_Program(uint32_t Adress, uint8_t *Buffer, uint8_t len)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b0c9      	sub	sp, #292	; 0x124
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	4b4a      	ldr	r3, [pc, #296]	; (8000634 <W25Q_Buf_Program+0x134>)
 800050c:	2490      	movs	r4, #144	; 0x90
 800050e:	0064      	lsls	r4, r4, #1
 8000510:	191b      	adds	r3, r3, r4
 8000512:	19db      	adds	r3, r3, r7
 8000514:	701a      	strb	r2, [r3, #0]
	W25qxx_WaitForWriteEnd();
 8000516:	f7ff ff93 	bl	8000440 <W25qxx_WaitForWriteEnd>
	W25Q_Write_Enable();
 800051a:	f7ff ffc5 	bl	80004a8 <W25Q_Write_Enable>

	uint8_t Datas[256] = { '\0' };
 800051e:	4b46      	ldr	r3, [pc, #280]	; (8000638 <W25Q_Buf_Program+0x138>)
 8000520:	191b      	adds	r3, r3, r4
 8000522:	19db      	adds	r3, r3, r7
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	3304      	adds	r3, #4
 800052a:	22fc      	movs	r2, #252	; 0xfc
 800052c:	2100      	movs	r1, #0
 800052e:	0018      	movs	r0, r3
 8000530:	f008 fa19 	bl	8008966 <memset>
	uint8_t adres[3] = { '\0' };
 8000534:	4b41      	ldr	r3, [pc, #260]	; (800063c <W25Q_Buf_Program+0x13c>)
 8000536:	0020      	movs	r0, r4
 8000538:	181b      	adds	r3, r3, r0
 800053a:	19db      	adds	r3, r3, r7
 800053c:	4a40      	ldr	r2, [pc, #256]	; (8000640 <W25Q_Buf_Program+0x140>)
 800053e:	8812      	ldrh	r2, [r2, #0]
 8000540:	801a      	strh	r2, [r3, #0]
 8000542:	2202      	movs	r2, #2
 8000544:	2100      	movs	r1, #0
 8000546:	5499      	strb	r1, [r3, r2]
	/*Gelen 24 bitlik Adres bilgisi 8 bit olarak parçalanıyor*/
	adres[0] = (Adress >> 16) & 0xFF;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	0c1b      	lsrs	r3, r3, #16
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b3b      	ldr	r3, [pc, #236]	; (800063c <W25Q_Buf_Program+0x13c>)
 8000550:	181b      	adds	r3, r3, r0
 8000552:	19db      	adds	r3, r3, r7
 8000554:	701a      	strb	r2, [r3, #0]
	adres[1] = (Adress >> 8) & 0xFF;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	0a1b      	lsrs	r3, r3, #8
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b37      	ldr	r3, [pc, #220]	; (800063c <W25Q_Buf_Program+0x13c>)
 800055e:	181b      	adds	r3, r3, r0
 8000560:	19db      	adds	r3, r3, r7
 8000562:	705a      	strb	r2, [r3, #1]
	adres[2] = (Adress) & 0xFF;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b34      	ldr	r3, [pc, #208]	; (800063c <W25Q_Buf_Program+0x13c>)
 800056a:	181b      	adds	r3, r3, r0
 800056c:	19db      	adds	r3, r3, r7
 800056e:	709a      	strb	r2, [r3, #2]

	for(int i=0; i<256;i++)
 8000570:	2300      	movs	r3, #0
 8000572:	228e      	movs	r2, #142	; 0x8e
 8000574:	0052      	lsls	r2, r2, #1
 8000576:	18ba      	adds	r2, r7, r2
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	e015      	b.n	80005a8 <W25Q_Buf_Program+0xa8>
	{
		Datas[i]= *Buffer;
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	7819      	ldrb	r1, [r3, #0]
 8000580:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <W25Q_Buf_Program+0x138>)
 8000582:	2290      	movs	r2, #144	; 0x90
 8000584:	0052      	lsls	r2, r2, #1
 8000586:	189b      	adds	r3, r3, r2
 8000588:	19da      	adds	r2, r3, r7
 800058a:	208e      	movs	r0, #142	; 0x8e
 800058c:	0040      	lsls	r0, r0, #1
 800058e:	183b      	adds	r3, r7, r0
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	18d3      	adds	r3, r2, r3
 8000594:	1c0a      	adds	r2, r1, #0
 8000596:	701a      	strb	r2, [r3, #0]
		Buffer+=1;
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	3301      	adds	r3, #1
 800059c:	60bb      	str	r3, [r7, #8]
	for(int i=0; i<256;i++)
 800059e:	183b      	adds	r3, r7, r0
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	183a      	adds	r2, r7, r0
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	238e      	movs	r3, #142	; 0x8e
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2bff      	cmp	r3, #255	; 0xff
 80005b2:	dde3      	ble.n	800057c <W25Q_Buf_Program+0x7c>
	}

	Cs_Low;
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <W25Q_Buf_Program+0x144>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	2101      	movs	r1, #1
 80005ba:	0018      	movs	r0, r3
 80005bc:	f004 fa69 	bl	8004a92 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25Q_PAGE_PROGRAM);
 80005c0:	2002      	movs	r0, #2
 80005c2:	f7ff ff25 	bl	8000410 <W25qxx_Spi>
	for (int i = 0; i < 3; i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	228c      	movs	r2, #140	; 0x8c
 80005ca:	0052      	lsls	r2, r2, #1
 80005cc:	18ba      	adds	r2, r7, r2
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	e012      	b.n	80005f8 <W25Q_Buf_Program+0xf8>
		W25qxx_Spi(adres[i]);
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <W25Q_Buf_Program+0x13c>)
 80005d4:	2290      	movs	r2, #144	; 0x90
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	189b      	adds	r3, r3, r2
 80005da:	19da      	adds	r2, r3, r7
 80005dc:	248c      	movs	r4, #140	; 0x8c
 80005de:	0064      	lsls	r4, r4, #1
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	18d3      	adds	r3, r2, r3
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	0018      	movs	r0, r3
 80005ea:	f7ff ff11 	bl	8000410 <W25qxx_Spi>
	for (int i = 0; i < 3; i++)
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	193a      	adds	r2, r7, r4
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	238c      	movs	r3, #140	; 0x8c
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b02      	cmp	r3, #2
 8000602:	dde6      	ble.n	80005d2 <W25Q_Buf_Program+0xd2>
	HAL_SPI_Transmit(&W25Q_SPI, Datas, 256, HAL_MAX_DELAY);
 8000604:	2301      	movs	r3, #1
 8000606:	425b      	negs	r3, r3
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	0052      	lsls	r2, r2, #1
 800060c:	2118      	movs	r1, #24
 800060e:	1879      	adds	r1, r7, r1
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <W25Q_Buf_Program+0x148>)
 8000612:	f005 ff5f 	bl	80064d4 <HAL_SPI_Transmit>
	Cs_High;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <W25Q_Buf_Program+0x144>)
 8000618:	2201      	movs	r2, #1
 800061a:	2101      	movs	r1, #1
 800061c:	0018      	movs	r0, r3
 800061e:	f004 fa38 	bl	8004a92 <HAL_GPIO_WritePin>
	/*Pg. 66 Page Program Time Typ 0,7ms Max 3ms*/
	W25qxx_WaitForWriteEnd();
 8000622:	f7ff ff0d 	bl	8000440 <W25qxx_WaitForWriteEnd>
	W25Q_Write_Disable();
 8000626:	f7ff ff55 	bl	80004d4 <W25Q_Write_Disable>
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b049      	add	sp, #292	; 0x124
 8000630:	bd90      	pop	{r4, r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	fffffee7 	.word	0xfffffee7
 8000638:	fffffef8 	.word	0xfffffef8
 800063c:	fffffef4 	.word	0xfffffef4
 8000640:	08009268 	.word	0x08009268
 8000644:	50000400 	.word	0x50000400
 8000648:	200002dc 	.word	0x200002dc

0800064c <W25Q_Read_Fast>:
	Cs_High;

	return status;
}
uint8_t W25Q_Read_Fast(uint32_t Adress, uint8_t *Buffer)
{
 800064c:	b5b0      	push	{r4, r5, r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	W25qxx_WaitForWriteEnd();
 8000656:	f7ff fef3 	bl	8000440 <W25qxx_WaitForWriteEnd>

	int8_t Adresses[3] = { '\0' };
 800065a:	2008      	movs	r0, #8
 800065c:	183b      	adds	r3, r7, r0
 800065e:	4a27      	ldr	r2, [pc, #156]	; (80006fc <W25Q_Read_Fast+0xb0>)
 8000660:	8812      	ldrh	r2, [r2, #0]
 8000662:	801a      	strh	r2, [r3, #0]
 8000664:	2202      	movs	r2, #2
 8000666:	2100      	movs	r1, #0
 8000668:	5499      	strb	r1, [r3, r2]
	HAL_StatusTypeDef status = HAL_OK;
 800066a:	230b      	movs	r3, #11
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
	Adresses[0] = (Adress >> 16) & 0xFF;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	0c1b      	lsrs	r3, r3, #16
 8000676:	b25a      	sxtb	r2, r3
 8000678:	183b      	adds	r3, r7, r0
 800067a:	701a      	strb	r2, [r3, #0]
	Adresses[1] = (Adress >> 8) & 0xFF;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	0a1b      	lsrs	r3, r3, #8
 8000680:	b25a      	sxtb	r2, r3
 8000682:	183b      	adds	r3, r7, r0
 8000684:	705a      	strb	r2, [r3, #1]
	Adresses[2] = Adress & 0xFF;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	b25a      	sxtb	r2, r3
 800068a:	183b      	adds	r3, r7, r0
 800068c:	709a      	strb	r2, [r3, #2]
	Cs_Low;
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <W25Q_Read_Fast+0xb4>)
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	0018      	movs	r0, r3
 8000696:	f004 f9fc 	bl	8004a92 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25Q_FAST_READ);
 800069a:	200b      	movs	r0, #11
 800069c:	f7ff feb8 	bl	8000410 <W25qxx_Spi>
	for (int i = 0; i < 3; i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	e00c      	b.n	80006c0 <W25Q_Read_Fast+0x74>
		W25qxx_Spi(Adresses[i]);
 80006a6:	2308      	movs	r3, #8
 80006a8:	18fa      	adds	r2, r7, r3
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	18d3      	adds	r3, r2, r3
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b25b      	sxtb	r3, r3
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff feab 	bl	8000410 <W25qxx_Spi>
	for (int i = 0; i < 3; i++)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	3301      	adds	r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b02      	cmp	r3, #2
 80006c4:	ddef      	ble.n	80006a6 <W25Q_Read_Fast+0x5a>
	W25qxx_Spi(Dummy_Byte);
 80006c6:	20a5      	movs	r0, #165	; 0xa5
 80006c8:	f7ff fea2 	bl	8000410 <W25qxx_Spi>
	status = HAL_SPI_Receive(&W25Q_SPI, Buffer, 256, HAL_MAX_DELAY);
 80006cc:	250b      	movs	r5, #11
 80006ce:	197c      	adds	r4, r7, r5
 80006d0:	2301      	movs	r3, #1
 80006d2:	425b      	negs	r3, r3
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0052      	lsls	r2, r2, #1
 80006d8:	6839      	ldr	r1, [r7, #0]
 80006da:	480a      	ldr	r0, [pc, #40]	; (8000704 <W25Q_Read_Fast+0xb8>)
 80006dc:	f006 f852 	bl	8006784 <HAL_SPI_Receive>
 80006e0:	0003      	movs	r3, r0
 80006e2:	7023      	strb	r3, [r4, #0]
	Cs_High;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <W25Q_Read_Fast+0xb4>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	2101      	movs	r1, #1
 80006ea:	0018      	movs	r0, r3
 80006ec:	f004 f9d1 	bl	8004a92 <HAL_GPIO_WritePin>

	return status;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]
}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b004      	add	sp, #16
 80006fa:	bdb0      	pop	{r4, r5, r7, pc}
 80006fc:	08009268 	.word	0x08009268
 8000700:	50000400 	.word	0x50000400
 8000704:	200002dc 	.word	0x200002dc

08000708 <W25Q_Chip_Erase>:


void W25Q_Chip_Erase(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	W25Q_Write_Enable();
 800070e:	f7ff fecb 	bl	80004a8 <W25Q_Write_Enable>
	uint8_t Tdata=W25Q_CHIP_ERASE;
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	22c7      	movs	r2, #199	; 0xc7
 8000716:	701a      	strb	r2, [r3, #0]
	Cs_Low;
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <W25Q_Chip_Erase+0x40>)
 800071a:	2200      	movs	r2, #0
 800071c:	2101      	movs	r1, #1
 800071e:	0018      	movs	r0, r3
 8000720:	f004 f9b7 	bl	8004a92 <HAL_GPIO_WritePin>
	W25qxx_Spi(Tdata);
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	0018      	movs	r0, r3
 800072a:	f7ff fe71 	bl	8000410 <W25qxx_Spi>
	Cs_High;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <W25Q_Chip_Erase+0x40>)
 8000730:	2201      	movs	r2, #1
 8000732:	2101      	movs	r1, #1
 8000734:	0018      	movs	r0, r3
 8000736:	f004 f9ac 	bl	8004a92 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800073a:	f7ff fe81 	bl	8000440 <W25qxx_WaitForWriteEnd>


}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	50000400 	.word	0x50000400

0800074c <bootloader_get_ver_cmd>:
const uint32_t go_to_address = 0;
uint8_t EXT_Flash_Buf[256]={'\0'};
uint32_t EXT_Flash_Write_Start_Addr=0x00000000 ;


void bootloader_get_ver_cmd(uint8_t *bl_rx_data) {
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b087      	sub	sp, #28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	uint8_t bl_Version[4] = {0};
 8000754:	240c      	movs	r4, #12
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
	uint32_t host_crc=0;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

	printMessage("Bootloaer_Get_Ver_Cmd");
 8000760:	4b34      	ldr	r3, [pc, #208]	; (8000834 <bootloader_get_ver_cmd+0xe8>)
 8000762:	0018      	movs	r0, r3
 8000764:	f001 fb2e 	bl	8001dc4 <printMessage>
	printMessage(" BL_VER :%#x,%#x  ", bl_rx_data[1], bl_rx_data[2]);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3301      	adds	r3, #1
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	0019      	movs	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3302      	adds	r3, #2
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	001a      	movs	r2, r3
 8000778:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <bootloader_get_ver_cmd+0xec>)
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fb22 	bl	8001dc4 <printMessage>

	uint32_t command_packet_length = bl_rx_data[0] + 1;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	613b      	str	r3, [r7, #16]

	host_crc |=(bl_rx_data[5]&0xFFFFFFFF)<<24;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3305      	adds	r3, #5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	061b      	lsls	r3, r3, #24
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	4313      	orrs	r3, r2
 8000794:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[4]&0xFFFFFFFF)<<16;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3304      	adds	r3, #4
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	041b      	lsls	r3, r3, #16
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[3]&0xFFFFFFFF)<<8;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3303      	adds	r3, #3
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	021b      	lsls	r3, r3, #8
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[2]&0xFFFFFFFF);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3302      	adds	r3, #2
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	001a      	movs	r2, r3
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	4313      	orrs	r3, r2
 80007be:	617b      	str	r3, [r7, #20]
	// crc control
	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_length - 4, host_crc)) {
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	1f19      	subs	r1, r3, #4
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fe4b 	bl	8001464 <bootloader_verify_crc>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d125      	bne.n	800081e <bootloader_get_ver_cmd+0xd2>
		printMessage("Checksum success");
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <bootloader_get_ver_cmd+0xf0>)
 80007d4:	0018      	movs	r0, r3
 80007d6:	f001 faf5 	bl	8001dc4 <printMessage>
		bootloader_send_ack(1);
 80007da:	2001      	movs	r0, #1
 80007dc:	f000 fee8 	bl	80015b0 <bootloader_send_ack>
		bl_Version[3] = bootloader_get_version();
 80007e0:	f000 ff26 	bl	8001630 <bootloader_get_version>
 80007e4:	0003      	movs	r3, r0
 80007e6:	001a      	movs	r2, r3
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	70da      	strb	r2, [r3, #3]
		printMessage(" BL_VER : %d %#x  ", bl_Version[3], bl_Version[3]);
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	78db      	ldrb	r3, [r3, #3]
 80007f0:	0019      	movs	r1, r3
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	78db      	ldrb	r3, [r3, #3]
 80007f6:	001a      	movs	r2, r3
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <bootloader_get_ver_cmd+0xf4>)
 80007fa:	0018      	movs	r0, r3
 80007fc:	f001 fae2 	bl	8001dc4 <printMessage>
		bl_Version[0]=TARGET_LORA_HIGH;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2218      	movs	r2, #24
 8000804:	701a      	strb	r2, [r3, #0]
		bl_Version[1]=TARGET_LORA_LOW;
 8000806:	193b      	adds	r3, r7, r4
 8000808:	2266      	movs	r2, #102	; 0x66
 800080a:	705a      	strb	r2, [r3, #1]
		bl_Version[2]=TARGET_LORA_CHANNEL;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2213      	movs	r2, #19
 8000810:	709a      	strb	r2, [r3, #2]
		bootloader_uart_write_data(bl_Version, 4);
 8000812:	193b      	adds	r3, r7, r4
 8000814:	2104      	movs	r1, #4
 8000816:	0018      	movs	r0, r3
 8000818:	f000 fe10 	bl	800143c <bootloader_uart_write_data>
	} else {
		printMessage("Checksum fail ");
		bootloader_send_nack();
	}
}
 800081c:	e005      	b.n	800082a <bootloader_get_ver_cmd+0xde>
		printMessage("Checksum fail ");
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <bootloader_get_ver_cmd+0xf8>)
 8000820:	0018      	movs	r0, r3
 8000822:	f001 facf 	bl	8001dc4 <printMessage>
		bootloader_send_nack();
 8000826:	f000 fee7 	bl	80015f8 <bootloader_send_nack>
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b007      	add	sp, #28
 8000830:	bd90      	pop	{r4, r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	0800926c 	.word	0x0800926c
 8000838:	08009284 	.word	0x08009284
 800083c:	08009298 	.word	0x08009298
 8000840:	080092ac 	.word	0x080092ac
 8000844:	080092c0 	.word	0x080092c0

08000848 <bootloader_get_help_cmd>:

void bootloader_get_help_cmd(uint8_t *bl_rx_data) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	printMessage("bootloader_get_help_cmd");
 8000850:	4b34      	ldr	r3, [pc, #208]	; (8000924 <bootloader_get_help_cmd+0xdc>)
 8000852:	0018      	movs	r0, r3
 8000854:	f001 fab6 	bl	8001dc4 <printMessage>
	uint32_t host_crc = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
	uint32_t command_packet_len = bl_rx_data[0] + 1;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]


	host_crc |=(bl_rx_data[5]&0xFFFFFFFF)<<24;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3305      	adds	r3, #5
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	061b      	lsls	r3, r3, #24
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	4313      	orrs	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
	host_crc |=(bl_rx_data[4]&0xFFFFFFFF)<<16;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3304      	adds	r3, #4
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	4313      	orrs	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
	host_crc |=(bl_rx_data[3]&0xFFFFFFFF)<<8;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3303      	adds	r3, #3
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	4313      	orrs	r3, r2
 800088c:	613b      	str	r3, [r7, #16]
	host_crc |=(bl_rx_data[2]&0xFFFFFFFF);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3302      	adds	r3, #2
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	001a      	movs	r2, r3
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	4313      	orrs	r3, r2
 800089a:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	1f19      	subs	r1, r3, #4
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 fddd 	bl	8001464 <bootloader_verify_crc>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d12f      	bne.n	800090e <bootloader_get_help_cmd+0xc6>
		printMessage("Checksum success");
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <bootloader_get_help_cmd+0xe0>)
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 fa87 	bl	8001dc4 <printMessage>
		bootloader_send_ack(strlen(supported_commands));
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <bootloader_get_help_cmd+0xe4>)
 80008b8:	0018      	movs	r0, r3
 80008ba:	f7ff fc21 	bl	8000100 <strlen>
 80008be:	0003      	movs	r3, r0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fe74 	bl	80015b0 <bootloader_send_ack>

		bootloader_uart_write_data(supported_commands, strlen(supported_commands));
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <bootloader_get_help_cmd+0xe4>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff fc18 	bl	8000100 <strlen>
 80008d0:	0002      	movs	r2, r0
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <bootloader_get_help_cmd+0xe4>)
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fdb0 	bl	800143c <bootloader_uart_write_data>
		for (int i = 0; i < strlen(supported_commands); i++) {
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	e00c      	b.n	80008fc <bootloader_get_help_cmd+0xb4>
			printMessage("%#x ", supported_commands[i]);
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <bootloader_get_help_cmd+0xe4>)
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	001a      	movs	r2, r3
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <bootloader_get_help_cmd+0xe8>)
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f001 fa67 	bl	8001dc4 <printMessage>
		for (int i = 0; i < strlen(supported_commands); i++) {
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	4b0b      	ldr	r3, [pc, #44]	; (800092c <bootloader_get_help_cmd+0xe4>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f7ff fbfe 	bl	8000100 <strlen>
 8000904:	0002      	movs	r2, r0
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	429a      	cmp	r2, r3
 800090a:	d8ea      	bhi.n	80008e2 <bootloader_get_help_cmd+0x9a>
		}
	} else {
		printMessage("Checksum fail");
		bootloader_send_nack();
	}
}
 800090c:	e005      	b.n	800091a <bootloader_get_help_cmd+0xd2>
		printMessage("Checksum fail");
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <bootloader_get_help_cmd+0xec>)
 8000910:	0018      	movs	r0, r3
 8000912:	f001 fa57 	bl	8001dc4 <printMessage>
		bootloader_send_nack();
 8000916:	f000 fe6f 	bl	80015f8 <bootloader_send_nack>
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b006      	add	sp, #24
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	080092d0 	.word	0x080092d0
 8000928:	08009298 	.word	0x08009298
 800092c:	20000008 	.word	0x20000008
 8000930:	080092e8 	.word	0x080092e8
 8000934:	080092f0 	.word	0x080092f0

08000938 <bootloader_get_cid_cmd>:

void bootloader_get_cid_cmd(uint8_t *bl_rx_data) {
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	b089      	sub	sp, #36	; 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	uint8_t cID[5] = {0};
 8000940:	250c      	movs	r5, #12
 8000942:	197b      	adds	r3, r7, r5
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	711a      	strb	r2, [r3, #4]
	uint32_t host_crc = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
	uint16_t val=0;
 8000950:	241a      	movs	r4, #26
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2200      	movs	r2, #0
 8000956:	801a      	strh	r2, [r3, #0]
	printMessage("bootloader_get_cid_cmd ");
 8000958:	4b35      	ldr	r3, [pc, #212]	; (8000a30 <bootloader_get_cid_cmd+0xf8>)
 800095a:	0018      	movs	r0, r3
 800095c:	f001 fa32 	bl	8001dc4 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	617b      	str	r3, [r7, #20]

	//uint32_t host_crc = *((uint32_t*) ((uint32_t*)bl_rx_data + command_packet_len - 4));
	host_crc |=(bl_rx_data[5]&0xFFFFFFFF)<<24;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3305      	adds	r3, #5
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	061b      	lsls	r3, r3, #24
 8000970:	69fa      	ldr	r2, [r7, #28]
 8000972:	4313      	orrs	r3, r2
 8000974:	61fb      	str	r3, [r7, #28]
	host_crc |=(bl_rx_data[4]&0xFFFFFFFF)<<16;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3304      	adds	r3, #4
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	041b      	lsls	r3, r3, #16
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	4313      	orrs	r3, r2
 8000982:	61fb      	str	r3, [r7, #28]
	host_crc |=(bl_rx_data[3]&0xFFFFFFFF)<<8;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3303      	adds	r3, #3
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	69fa      	ldr	r2, [r7, #28]
 800098e:	4313      	orrs	r3, r2
 8000990:	61fb      	str	r3, [r7, #28]
	host_crc |=(bl_rx_data[2]&0xFFFFFFFF);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3302      	adds	r3, #2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	001a      	movs	r2, r3
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	4313      	orrs	r3, r2
 800099e:	61fb      	str	r3, [r7, #28]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4,
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	1f19      	subs	r1, r3, #4
 80009a4:	69fa      	ldr	r2, [r7, #28]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fd5b 	bl	8001464 <bootloader_verify_crc>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d133      	bne.n	8000a1a <bootloader_get_cid_cmd+0xe2>
			host_crc)) {
		printMessage("Checksum succes ");
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <bootloader_get_cid_cmd+0xfc>)
 80009b4:	0018      	movs	r0, r3
 80009b6:	f001 fa05 	bl	8001dc4 <printMessage>
		bootloader_send_ack(2);
 80009ba:	2002      	movs	r0, #2
 80009bc:	f000 fdf8 	bl	80015b0 <bootloader_send_ack>
		val = get_mcu_chip_id();
 80009c0:	0026      	movs	r6, r4
 80009c2:	193c      	adds	r4, r7, r4
 80009c4:	f000 fe3a 	bl	800163c <get_mcu_chip_id>
 80009c8:	0003      	movs	r3, r0
 80009ca:	8023      	strh	r3, [r4, #0]
		cID[3] = val & 0xFF; //High 8bit
 80009cc:	0034      	movs	r4, r6
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	197b      	adds	r3, r7, r5
 80009d6:	70da      	strb	r2, [r3, #3]
		cID[4] = (val >> 8) & 0xFF; //High 8bit
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	b29b      	uxth	r3, r3
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	002c      	movs	r4, r5
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	711a      	strb	r2, [r3, #4]
		cID[0]=TARGET_LORA_HIGH;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	2218      	movs	r2, #24
 80009ec:	701a      	strb	r2, [r3, #0]
		cID[1]=TARGET_LORA_LOW;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2266      	movs	r2, #102	; 0x66
 80009f2:	705a      	strb	r2, [r3, #1]
		cID[2]=TARGET_LORA_CHANNEL;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2213      	movs	r2, #19
 80009f8:	709a      	strb	r2, [r3, #2]
		printMessage("Chip Id: %#x ", cID[3], cID[3]);
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	78db      	ldrb	r3, [r3, #3]
 80009fe:	0019      	movs	r1, r3
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	78db      	ldrb	r3, [r3, #3]
 8000a04:	001a      	movs	r2, r3
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <bootloader_get_cid_cmd+0x100>)
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f001 f9db 	bl	8001dc4 <printMessage>
		bootloader_uart_write_data(cID, 5);
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2105      	movs	r1, #5
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 fd12 	bl	800143c <bootloader_uart_write_data>
	} else {
		printMessage("Checksum fail ");
		bootloader_send_nack();
	}
}
 8000a18:	e005      	b.n	8000a26 <bootloader_get_cid_cmd+0xee>
		printMessage("Checksum fail ");
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <bootloader_get_cid_cmd+0x104>)
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f001 f9d1 	bl	8001dc4 <printMessage>
		bootloader_send_nack();
 8000a22:	f000 fde9 	bl	80015f8 <bootloader_send_nack>
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b009      	add	sp, #36	; 0x24
 8000a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	08009300 	.word	0x08009300
 8000a34:	08009318 	.word	0x08009318
 8000a38:	0800932c 	.word	0x0800932c
 8000a3c:	080092c0 	.word	0x080092c0

08000a40 <bootloader_go_to_addr_cmd>:

void bootloader_go_to_addr_cmd(uint8_t *bl_rx_data) {
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b08b      	sub	sp, #44	; 0x2c
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	uint32_t go_to_address = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t addr_valid[4]={0x18,0x66,0x13,ADDR_VALID};
 8000a4c:	2410      	movs	r4, #16
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	4a5e      	ldr	r2, [pc, #376]	; (8000bcc <bootloader_go_to_addr_cmd+0x18c>)
 8000a52:	601a      	str	r2, [r3, #0]
	uint8_t addr_invalid[4]={0x18,0x66,0x13,ADDR_INVALID};
 8000a54:	230c      	movs	r3, #12
 8000a56:	18fb      	adds	r3, r7, r3
 8000a58:	4a5d      	ldr	r2, [pc, #372]	; (8000bd0 <bootloader_go_to_addr_cmd+0x190>)
 8000a5a:	601a      	str	r2, [r3, #0]
	uint32_t host_crc = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]

	printMessage("bootlodaer_go_to_addr_cmd ");
 8000a60:	4b5c      	ldr	r3, [pc, #368]	; (8000bd4 <bootloader_go_to_addr_cmd+0x194>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 f9ae 	bl	8001dc4 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	61fb      	str	r3, [r7, #28]

	//uint32_t host_crc = *((uint32_t*) ((uint32_t*)bl_rx_data + command_packet_len - 4));
	host_crc |=(bl_rx_data[command_packet_len-1]&0xFFFFFFFF)<<24;
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	18d3      	adds	r3, r2, r3
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	061b      	lsls	r3, r3, #24
 8000a7c:	6a3a      	ldr	r2, [r7, #32]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	623b      	str	r3, [r7, #32]
	host_crc |=(bl_rx_data[command_packet_len-2]&0xFFFFFFFF)<<16;
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3b02      	subs	r3, #2
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	18d3      	adds	r3, r2, r3
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	041b      	lsls	r3, r3, #16
 8000a8e:	6a3a      	ldr	r2, [r7, #32]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	623b      	str	r3, [r7, #32]
	host_crc |=(bl_rx_data[command_packet_len-3]&0xFFFFFFFF)<<8;
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	3b03      	subs	r3, #3
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	18d3      	adds	r3, r2, r3
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	021b      	lsls	r3, r3, #8
 8000aa0:	6a3a      	ldr	r2, [r7, #32]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	623b      	str	r3, [r7, #32]
	host_crc |=(bl_rx_data[command_packet_len-4]&0xFFFFFFFF);
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3b04      	subs	r3, #4
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	18d3      	adds	r3, r2, r3
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	623b      	str	r3, [r7, #32]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4,
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	1f19      	subs	r1, r3, #4
 8000abc:	6a3a      	ldr	r2, [r7, #32]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f000 fccf 	bl	8001464 <bootloader_verify_crc>
 8000ac6:	1e03      	subs	r3, r0, #0
 8000ac8:	d176      	bne.n	8000bb8 <bootloader_go_to_addr_cmd+0x178>
			host_crc)) {
		printMessage("Checksum succes ");
 8000aca:	4b43      	ldr	r3, [pc, #268]	; (8000bd8 <bootloader_go_to_addr_cmd+0x198>)
 8000acc:	0018      	movs	r0, r3
 8000ace:	f001 f979 	bl	8001dc4 <printMessage>
		bootloader_send_ack(1);
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f000 fd6c 	bl	80015b0 <bootloader_send_ack>

		//go_to_address = ((uint32_t*)((uint32_t*)&bl_rx_data[2]));

		go_to_address |= ((bl_rx_data[2]) & 0xFFFFFFFF);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3302      	adds	r3, #2
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	001a      	movs	r2, r3
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
		go_to_address |= ((bl_rx_data[3]) & 0xFFFFFFFF) << 8;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3303      	adds	r3, #3
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	021b      	lsls	r3, r3, #8
 8000aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000af0:	4313      	orrs	r3, r2
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
		go_to_address |= ((bl_rx_data[4]) & 0xFFFFFFFF) << 16;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3304      	adds	r3, #4
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	041b      	lsls	r3, r3, #16
 8000afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000afe:	4313      	orrs	r3, r2
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
		go_to_address |= ((bl_rx_data[5]) & 0xFFFFFFFF) << 24;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3305      	adds	r3, #5
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	061b      	lsls	r3, r3, #24
 8000b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
		printMessage("GO Addr: %#x ", go_to_address);
 8000b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b12:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <bootloader_go_to_addr_cmd+0x19c>)
 8000b14:	0011      	movs	r1, r2
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 f954 	bl	8001dc4 <printMessage>

		if (bootloader_verify_address(go_to_address) == ADDR_VALID) {
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 fdb2 	bl	8001688 <bootloader_verify_address>
 8000b24:	1e03      	subs	r3, r0, #0
 8000b26:	d13c      	bne.n	8000ba2 <bootloader_go_to_addr_cmd+0x162>

			bootloader_uart_write_data(addr_valid, 4);
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f000 fc85 	bl	800143c <bootloader_uart_write_data>
			printMessage("Going to Address ");
 8000b32:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <bootloader_go_to_addr_cmd+0x1a0>)
 8000b34:	0018      	movs	r0, r3
 8000b36:	f001 f945 	bl	8001dc4 <printMessage>
			SCB->VTOR = go_to_address;
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <bootloader_go_to_addr_cmd+0x1a4>)
 8000b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b3e:	609a      	str	r2, [r3, #8]
			//__set_MSP(mspValue);	// Bu fonksiyon F407 De calisiyordu ama
			//L053 de çalışmıyor
			SysTick->CTRL = 0;
 8000b40:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <bootloader_go_to_addr_cmd+0x1a8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
			SysTick->LOAD = 0;
 8000b46:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <bootloader_go_to_addr_cmd+0x1a8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
			SysTick->VAL = 0;
 8000b4c:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <bootloader_go_to_addr_cmd+0x1a8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
			HAL_I2C_DeInit(&hi2c1);
 8000b52:	4b26      	ldr	r3, [pc, #152]	; (8000bec <bootloader_go_to_addr_cmd+0x1ac>)
 8000b54:	0018      	movs	r0, r3
 8000b56:	f004 f84f 	bl	8004bf8 <HAL_I2C_DeInit>
			HAL_UART_MspDeInit(&huart2);
 8000b5a:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <bootloader_go_to_addr_cmd+0x1b0>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f002 fa61 	bl	8003024 <HAL_UART_MspDeInit>
			HAL_UART_MspDeInit(&huart3);
 8000b62:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <bootloader_go_to_addr_cmd+0x1b4>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f002 fa5d 	bl	8003024 <HAL_UART_MspDeInit>
			HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	019b      	lsls	r3, r3, #6
 8000b6e:	4a22      	ldr	r2, [pc, #136]	; (8000bf8 <bootloader_go_to_addr_cmd+0x1b8>)
 8000b70:	0019      	movs	r1, r3
 8000b72:	0010      	movs	r0, r2
 8000b74:	f003 fea0 	bl	80048b8 <HAL_GPIO_DeInit>
			HAL_DMA_DeInit(&hdma_usart3_rx);
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <bootloader_go_to_addr_cmd+0x1bc>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f002 ffb4 	bl	8003ae8 <HAL_DMA_DeInit>
			HAL_CRC_DeInit(&hcrc);
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <bootloader_go_to_addr_cmd+0x1c0>)
 8000b82:	0018      	movs	r0, r3
 8000b84:	f002 fd78 	bl	8003678 <HAL_CRC_DeInit>
			HAL_RCC_DeInit();
 8000b88:	f004 fd82 	bl	8005690 <HAL_RCC_DeInit>
			HAL_DeInit();
 8000b8c:	f002 fb48 	bl	8003220 <HAL_DeInit>
			uint32_t jump_address = *((volatile uint32_t*) (go_to_address + 4));
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	3304      	adds	r3, #4
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	61bb      	str	r3, [r7, #24]
			void (*jump_to_app)(void) = (void *)jump_address;
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	617b      	str	r3, [r7, #20]
			jump_to_app();
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	4798      	blx	r3
		}
	} else {
		printMessage("Checksum fail ");
		bootloader_send_nack();
	}
}
 8000ba0:	e010      	b.n	8000bc4 <bootloader_go_to_addr_cmd+0x184>
			printMessage("Go Address Invalid ");
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <bootloader_go_to_addr_cmd+0x1c4>)
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f001 f90d 	bl	8001dc4 <printMessage>
			bootloader_uart_write_data(addr_invalid, 4);
 8000baa:	230c      	movs	r3, #12
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	2104      	movs	r1, #4
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 fc43 	bl	800143c <bootloader_uart_write_data>
}
 8000bb6:	e005      	b.n	8000bc4 <bootloader_go_to_addr_cmd+0x184>
		printMessage("Checksum fail ");
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <bootloader_go_to_addr_cmd+0x1c8>)
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 f902 	bl	8001dc4 <printMessage>
		bootloader_send_nack();
 8000bc0:	f000 fd1a 	bl	80015f8 <bootloader_send_nack>
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b00b      	add	sp, #44	; 0x2c
 8000bca:	bd90      	pop	{r4, r7, pc}
 8000bcc:	00136618 	.word	0x00136618
 8000bd0:	01136618 	.word	0x01136618
 8000bd4:	0800933c 	.word	0x0800933c
 8000bd8:	08009318 	.word	0x08009318
 8000bdc:	08009358 	.word	0x08009358
 8000be0:	08009368 	.word	0x08009368
 8000be4:	e000ed00 	.word	0xe000ed00
 8000be8:	e000e010 	.word	0xe000e010
 8000bec:	20000288 	.word	0x20000288
 8000bf0:	20000340 	.word	0x20000340
 8000bf4:	200003d4 	.word	0x200003d4
 8000bf8:	50000800 	.word	0x50000800
 8000bfc:	20000468 	.word	0x20000468
 8000c00:	20000264 	.word	0x20000264
 8000c04:	0800937c 	.word	0x0800937c
 8000c08:	080092c0 	.word	0x080092c0

08000c0c <bootloader_flash_erase_cmd>:

void bootloader_flash_erase_cmd(uint8_t *bl_rx_data) {
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b087      	sub	sp, #28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	uint8_t eraseStatus [4]= {0};
 8000c14:	240c      	movs	r4, #12
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
	uint32_t host_crc = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

	printMessage("bootloader_flash_erase_cmd ");
 8000c20:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <bootloader_flash_erase_cmd+0x104>)
 8000c22:	0018      	movs	r0, r3
 8000c24:	f001 f8ce 	bl	8001dc4 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]

	//uint32_t host_crc = *((uint32_t*) ((uint32_t*)bl_rx_data + command_packet_len - 4));
	host_crc |=(bl_rx_data[command_packet_len-1]&0xFFFFFFFF)<<24;
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	18d3      	adds	r3, r2, r3
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	061b      	lsls	r3, r3, #24
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[command_packet_len-2]&0xFFFFFFFF)<<16;
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	3b02      	subs	r3, #2
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	18d3      	adds	r3, r2, r3
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	041b      	lsls	r3, r3, #16
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[command_packet_len-3]&0xFFFFFFFF)<<8;
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	3b03      	subs	r3, #3
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	18d3      	adds	r3, r2, r3
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[command_packet_len-4]&0xFFFFFFFF);
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	3b04      	subs	r3, #4
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	001a      	movs	r2, r3
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	617b      	str	r3, [r7, #20]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	1f19      	subs	r1, r3, #4
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	0018      	movs	r0, r3
 8000c82:	f000 fbef 	bl	8001464 <bootloader_verify_crc>
 8000c86:	1e03      	subs	r3, r0, #0
 8000c88:	d137      	bne.n	8000cfa <bootloader_flash_erase_cmd+0xee>
		printMessage("Checksum success ");
 8000c8a:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <bootloader_flash_erase_cmd+0x108>)
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f001 f899 	bl	8001dc4 <printMessage>
		bootloader_send_ack(1);
 8000c92:	2001      	movs	r0, #1
 8000c94:	f000 fc8c 	bl	80015b0 <bootloader_send_ack>
		printMessage("Initial Sector: %d Number Of Sectors: %d ", bl_rx_data[2],
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	0019      	movs	r1, r3
				bl_rx_data[3]);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3303      	adds	r3, #3
 8000ca4:	781b      	ldrb	r3, [r3, #0]
		printMessage("Initial Sector: %d Number Of Sectors: %d ", bl_rx_data[2],
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <bootloader_flash_erase_cmd+0x10c>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f001 f88a 	bl	8001dc4 <printMessage>
		/*Daha denemedim page 16dan 63 e kadar silmeli*/
		eraseStatus[3] =execute_flash_erase(bl_rx_data[2], bl_rx_data[3]);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	781a      	ldrb	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3303      	adds	r3, #3
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	0019      	movs	r1, r3
 8000cbe:	0010      	movs	r0, r2
 8000cc0:	f000 fcf8 	bl	80016b4 <execute_flash_erase>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	001a      	movs	r2, r3
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	70da      	strb	r2, [r3, #3]


		printMessage(" Flash Erase Status : %d ", eraseStatus[3]);
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	78db      	ldrb	r3, [r3, #3]
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <bootloader_flash_erase_cmd+0x110>)
 8000cd4:	0011      	movs	r1, r2
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f001 f874 	bl	8001dc4 <printMessage>
		eraseStatus [0]=TARGET_LORA_HIGH;
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	2218      	movs	r2, #24
 8000ce0:	701a      	strb	r2, [r3, #0]
		eraseStatus [1]=TARGET_LORA_LOW;
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	2266      	movs	r2, #102	; 0x66
 8000ce6:	705a      	strb	r2, [r3, #1]
		eraseStatus [2]=TARGET_LORA_CHANNEL;
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	2213      	movs	r2, #19
 8000cec:	709a      	strb	r2, [r3, #2]

		bootloader_uart_write_data(eraseStatus, 4);
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 fba2 	bl	800143c <bootloader_uart_write_data>
	}
	else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}
}
 8000cf8:	e005      	b.n	8000d06 <bootloader_flash_erase_cmd+0xfa>
		printMessage(" Checksum fail ");
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <bootloader_flash_erase_cmd+0x114>)
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f001 f861 	bl	8001dc4 <printMessage>
		bootloader_send_nack();
 8000d02:	f000 fc79 	bl	80015f8 <bootloader_send_nack>
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b007      	add	sp, #28
 8000d0c:	bd90      	pop	{r4, r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	08009390 	.word	0x08009390
 8000d14:	080093ac 	.word	0x080093ac
 8000d18:	080093c0 	.word	0x080093c0
 8000d1c:	080093ec 	.word	0x080093ec
 8000d20:	08009408 	.word	0x08009408

08000d24 <bootloader_mem_write_cmd>:

void bootloader_mem_write_cmd(uint8_t *bl_rx_data) {
 8000d24:	b5b0      	push	{r4, r5, r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	uint8_t addrValid = ADDR_VALID;
 8000d2c:	231f      	movs	r3, #31
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
	uint8_t writeStatus[4] = {0x00};
 8000d34:	2408      	movs	r4, #8
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
	uint8_t checkSum = 0;
 8000d3c:	201e      	movs	r0, #30
 8000d3e:	183b      	adds	r3, r7, r0
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
	uint8_t length = 0;
 8000d44:	211d      	movs	r1, #29
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
	uint32_t memAddress=0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
	length = bl_rx_data[0];
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	701a      	strb	r2, [r3, #0]
	uint32_t host_crc = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

	uint8_t payloadLength = bl_rx_data[6];
 8000d5c:	2513      	movs	r5, #19
 8000d5e:	197b      	adds	r3, r7, r5
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	7992      	ldrb	r2, [r2, #6]
 8000d64:	701a      	strb	r2, [r3, #0]


	memAddress |= ((bl_rx_data[2]) & 0xFFFFFFFF);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3302      	adds	r3, #2
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
	memAddress |= ((bl_rx_data[3]) & 0xFFFFFFFF) << 8;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3303      	adds	r3, #3
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
	memAddress |= ((bl_rx_data[4]) & 0xFFFFFFFF) << 16;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3304      	adds	r3, #4
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	041b      	lsls	r3, r3, #16
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
	memAddress |= ((bl_rx_data[5]) & 0xFFFFFFFF) << 24;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3305      	adds	r3, #5
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	061b      	lsls	r3, r3, #24
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]

	checkSum = bl_rx_data[length];
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	18d2      	adds	r2, r2, r3
 8000da6:	183b      	adds	r3, r7, r0
 8000da8:	7812      	ldrb	r2, [r2, #0]
 8000daa:	701a      	strb	r2, [r3, #0]

	printMessage(" bootloader_mem_write_cmd ");
 8000dac:	4b45      	ldr	r3, [pc, #276]	; (8000ec4 <bootloader_mem_write_cmd+0x1a0>)
 8000dae:	0018      	movs	r0, r3
 8000db0:	f001 f808 	bl	8001dc4 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]

	//uint32_t host_crc = *((uint32_t*) ((uint32_t*)bl_rx_data + command_packet_len - 4));
	host_crc |=(bl_rx_data[command_packet_len-1]&0xFFFFFFFF)<<24;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	18d3      	adds	r3, r2, r3
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	061b      	lsls	r3, r3, #24
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[command_packet_len-2]&0xFFFFFFFF)<<16;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3b02      	subs	r3, #2
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	041b      	lsls	r3, r3, #16
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[command_packet_len-3]&0xFFFFFFFF)<<8;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	3b03      	subs	r3, #3
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	18d3      	adds	r3, r2, r3
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[command_packet_len-4]&0xFFFFFFFF);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3b04      	subs	r3, #4
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	18d3      	adds	r3, r2, r3
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	617b      	str	r3, [r7, #20]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	1f19      	subs	r1, r3, #4
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f000 fb29 	bl	8001464 <bootloader_verify_crc>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d14d      	bne.n	8000eb2 <bootloader_mem_write_cmd+0x18e>
		printMessage(" Checksum success ");
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <bootloader_mem_write_cmd+0x1a4>)
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f000 ffd3 	bl	8001dc4 <printMessage>
		bootloader_send_ack(1);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f000 fbc6 	bl	80015b0 <bootloader_send_ack>

		printMessage(" Memory Write Address: %#x ", memAddress);
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <bootloader_mem_write_cmd+0x1a8>)
 8000e28:	0011      	movs	r1, r2
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 ffca 	bl	8001dc4 <printMessage>

		if (bootloader_verify_address(memAddress) == ADDR_VALID) {
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 fc28 	bl	8001688 <bootloader_verify_address>
 8000e38:	1e03      	subs	r3, r0, #0
 8000e3a:	d123      	bne.n	8000e84 <bootloader_mem_write_cmd+0x160>
			printMessage(" Valid Memory Write Address ");
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <bootloader_mem_write_cmd+0x1ac>)
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 ffc0 	bl	8001dc4 <printMessage>
			writeStatus[3] = execute_memory_write(&bl_rx_data[7], memAddress, payloadLength);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	1dd8      	adds	r0, r3, #7
 8000e48:	197b      	adds	r3, r7, r5
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	0019      	movs	r1, r3
 8000e50:	f000 fca0 	bl	8001794 <execute_memory_write>
 8000e54:	0003      	movs	r3, r0
 8000e56:	001a      	movs	r2, r3
 8000e58:	0021      	movs	r1, r4
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	70da      	strb	r2, [r3, #3]
			writeStatus[0] = TARGET_LORA_HIGH;
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2218      	movs	r2, #24
 8000e62:	701a      	strb	r2, [r3, #0]
			writeStatus[1] = TARGET_LORA_LOW;
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	2266      	movs	r2, #102	; 0x66
 8000e68:	705a      	strb	r2, [r3, #1]
			writeStatus[2] = TARGET_LORA_CHANNEL;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	2213      	movs	r2, #19
 8000e6e:	709a      	strb	r2, [r3, #2]
			bootloader_uart_write_data(writeStatus, 4);
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2104      	movs	r1, #4
 8000e74:	0018      	movs	r0, r3
 8000e76:	f000 fae1 	bl	800143c <bootloader_uart_write_data>
			SSD1306_GotoXY(0, 32);
 8000e7a:	2120      	movs	r1, #32
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f001 fd5b 	bl	8002938 <SSD1306_GotoXY>
		}
	} else {
		printMessage(" Checksum fail ");
		//bootloader_send_nack();
	}
}
 8000e82:	e01a      	b.n	8000eba <bootloader_mem_write_cmd+0x196>
			printMessage(" Invalid Memory Write Address ");
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <bootloader_mem_write_cmd+0x1b0>)
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 ff9c 	bl	8001dc4 <printMessage>
			writeStatus[3] = ADDR_INVALID;
 8000e8c:	2108      	movs	r1, #8
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2201      	movs	r2, #1
 8000e92:	70da      	strb	r2, [r3, #3]
			writeStatus[0]= TARGET_LORA_HIGH;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2218      	movs	r2, #24
 8000e98:	701a      	strb	r2, [r3, #0]
			writeStatus[1]= TARGET_LORA_LOW;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2266      	movs	r2, #102	; 0x66
 8000e9e:	705a      	strb	r2, [r3, #1]
			writeStatus[2]= TARGET_LORA_CHANNEL;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2213      	movs	r2, #19
 8000ea4:	709a      	strb	r2, [r3, #2]
			bootloader_uart_write_data(writeStatus, 4);
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 fac6 	bl	800143c <bootloader_uart_write_data>
}
 8000eb0:	e003      	b.n	8000eba <bootloader_mem_write_cmd+0x196>
		printMessage(" Checksum fail ");
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <bootloader_mem_write_cmd+0x1b4>)
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f000 ff85 	bl	8001dc4 <printMessage>
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b008      	add	sp, #32
 8000ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	08009418 	.word	0x08009418
 8000ec8:	08009434 	.word	0x08009434
 8000ecc:	08009448 	.word	0x08009448
 8000ed0:	08009464 	.word	0x08009464
 8000ed4:	08009484 	.word	0x08009484
 8000ed8:	08009408 	.word	0x08009408

08000edc <bootloader_enable_read_write_protect_cmd>:

void bootloader_enable_read_write_protect_cmd(uint8_t *bl_rx_data) {
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8000ee4:	240f      	movs	r4, #15
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
	uint32_t host_crc = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

	printMessage(" bootloader_enable_read_write_protect_cmd ");
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <bootloader_enable_read_write_protect_cmd+0xc8>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 ff66 	bl	8001dc4 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	613b      	str	r3, [r7, #16]

	//uint32_t host_crc = *((uint32_t*) ((uint32_t*)bl_rx_data + command_packet_len - 4));
	host_crc |=(bl_rx_data[5]&0xFFFFFFFF)<<24;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3305      	adds	r3, #5
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	061b      	lsls	r3, r3, #24
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[4]&0xFFFFFFFF)<<16;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3304      	adds	r3, #4
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	041b      	lsls	r3, r3, #16
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[3]&0xFFFFFFFF)<<8;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3303      	adds	r3, #3
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[2]&0xFFFFFFFF);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	001a      	movs	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	617b      	str	r3, [r7, #20]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1f19      	subs	r1, r3, #4
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	0018      	movs	r0, r3
 8000f42:	f000 fa8f 	bl	8001464 <bootloader_verify_crc>
 8000f46:	1e03      	subs	r3, r0, #0
 8000f48:	d122      	bne.n	8000f90 <bootloader_enable_read_write_protect_cmd+0xb4>
		printMessage(" Checksum success ");
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <bootloader_enable_read_write_protect_cmd+0xcc>)
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f000 ff39 	bl	8001dc4 <printMessage>
		bootloader_send_ack(1);
 8000f52:	2001      	movs	r0, #1
 8000f54:	f000 fb2c 	bl	80015b0 <bootloader_send_ack>

		status = configure_flash_sector_r_w_protection(bl_rx_data[2],
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	7818      	ldrb	r0, [r3, #0]
				bl_rx_data[3], 0);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3303      	adds	r3, #3
		status = configure_flash_sector_r_w_protection(bl_rx_data[2],
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2200      	movs	r2, #0
 8000f66:	0019      	movs	r1, r3
 8000f68:	f000 fe72 	bl	8001c50 <configure_flash_sector_r_w_protection>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	001a      	movs	r2, r3
 8000f70:	193b      	adds	r3, r7, r4
 8000f72:	701a      	strb	r2, [r3, #0]

		printMessage(" Status: %d", status);
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	001a      	movs	r2, r3
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <bootloader_enable_read_write_protect_cmd+0xd0>)
 8000f7c:	0011      	movs	r1, r2
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f000 ff20 	bl	8001dc4 <printMessage>

		bootloader_uart_write_data(&status, 1);
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	2101      	movs	r1, #1
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f000 fa57 	bl	800143c <bootloader_uart_write_data>
	} else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}
}
 8000f8e:	e005      	b.n	8000f9c <bootloader_enable_read_write_protect_cmd+0xc0>
		printMessage(" Checksum fail ");
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <bootloader_enable_read_write_protect_cmd+0xd4>)
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 ff16 	bl	8001dc4 <printMessage>
		bootloader_send_nack();
 8000f98:	f000 fb2e 	bl	80015f8 <bootloader_send_nack>
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b007      	add	sp, #28
 8000fa2:	bd90      	pop	{r4, r7, pc}
 8000fa4:	080094a4 	.word	0x080094a4
 8000fa8:	08009434 	.word	0x08009434
 8000fac:	080094d0 	.word	0x080094d0
 8000fb0:	08009408 	.word	0x08009408

08000fb4 <bootloader_go_to_bootloader_cmd>:

void bootloader_go_to_bootloader_cmd(uint8_t *bl_rx_data)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	uint32_t host_crc = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
	uint8_t BL_Lora[4]={0x18,0x66,0x13, BL_BOOTLOADER_ACTIVE};
 8000fc0:	240c      	movs	r4, #12
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	4a26      	ldr	r2, [pc, #152]	; (8001060 <bootloader_go_to_bootloader_cmd+0xac>)
 8000fc6:	601a      	str	r2, [r3, #0]

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]

	//uint32_t host_crc = *((uint32_t*) ((uint32_t*)bl_rx_data + command_packet_len - 4));
	host_crc |=(bl_rx_data[command_packet_len-1]&0xFFFFFFFF)<<24;
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	18d3      	adds	r3, r2, r3
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	061b      	lsls	r3, r3, #24
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[command_packet_len-2]&0xFFFFFFFF)<<16;
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	18d3      	adds	r3, r2, r3
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	041b      	lsls	r3, r3, #16
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[command_packet_len-3]&0xFFFFFFFF)<<8;
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	3b03      	subs	r3, #3
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	18d3      	adds	r3, r2, r3
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	4313      	orrs	r3, r2
 8001004:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[command_packet_len-4]&0xFFFFFFFF);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	3b04      	subs	r3, #4
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	001a      	movs	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	4313      	orrs	r3, r2
 8001016:	617b      	str	r3, [r7, #20]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1f19      	subs	r1, r3, #4
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	0018      	movs	r0, r3
 8001022:	f000 fa1f 	bl	8001464 <bootloader_verify_crc>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d110      	bne.n	800104c <bootloader_go_to_bootloader_cmd+0x98>
		printMessage("Checksum succes ");
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <bootloader_go_to_bootloader_cmd+0xb0>)
 800102c:	0018      	movs	r0, r3
 800102e:	f000 fec9 	bl	8001dc4 <printMessage>
		bootloader_send_ack(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f000 fabc 	bl	80015b0 <bootloader_send_ack>
		printMessage(" Bootloader already running  ");
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <bootloader_go_to_bootloader_cmd+0xb4>)
 800103a:	0018      	movs	r0, r3
 800103c:	f000 fec2 	bl	8001dc4 <printMessage>
		bootloader_uart_write_data(BL_Lora, 4);
 8001040:	193b      	adds	r3, r7, r4
 8001042:	2104      	movs	r1, #4
 8001044:	0018      	movs	r0, r3
 8001046:	f000 f9f9 	bl	800143c <bootloader_uart_write_data>
		}
	else {
			printMessage("Checksum fail ");
			bootloader_send_nack();
		}
}
 800104a:	e005      	b.n	8001058 <bootloader_go_to_bootloader_cmd+0xa4>
			printMessage("Checksum fail ");
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <bootloader_go_to_bootloader_cmd+0xb8>)
 800104e:	0018      	movs	r0, r3
 8001050:	f000 feb8 	bl	8001dc4 <printMessage>
			bootloader_send_nack();
 8001054:	f000 fad0 	bl	80015f8 <bootloader_send_nack>
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b007      	add	sp, #28
 800105e:	bd90      	pop	{r4, r7, pc}
 8001060:	20136618 	.word	0x20136618
 8001064:	08009318 	.word	0x08009318
 8001068:	080094dc 	.word	0x080094dc
 800106c:	080092c0 	.word	0x080092c0

08001070 <bootloader_ext_mem_to_mem_write_cmd>:

void bootloader_ext_mem_to_mem_write_cmd(uint8_t *bl_rx_data)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	uint8_t bl_Version[4] = { '\0' };
 8001078:	240c      	movs	r4, #12
 800107a:	193b      	adds	r3, r7, r4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
	uint32_t host_crc = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

	printMessage("bootloader_ext_to_mem_cmd");
 8001084:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <bootloader_ext_mem_to_mem_write_cmd+0x108>)
 8001086:	0018      	movs	r0, r3
 8001088:	f000 fe9c 	bl	8001dc4 <printMessage>

	uint32_t command_packet_length = bl_rx_data[0] + 1;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	3301      	adds	r3, #1
 8001092:	613b      	str	r3, [r7, #16]

	host_crc |= (bl_rx_data[5] & 0xFFFFFFFF) << 24;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3305      	adds	r3, #5
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	061b      	lsls	r3, r3, #24
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	4313      	orrs	r3, r2
 80010a0:	617b      	str	r3, [r7, #20]
	host_crc |= (bl_rx_data[4] & 0xFFFFFFFF) << 16;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3304      	adds	r3, #4
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	041b      	lsls	r3, r3, #16
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	617b      	str	r3, [r7, #20]
	host_crc |= (bl_rx_data[3] & 0xFFFFFFFF) << 8;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3303      	adds	r3, #3
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	617b      	str	r3, [r7, #20]
	host_crc |= (bl_rx_data[2] & 0xFFFFFFFF);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3302      	adds	r3, #2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	001a      	movs	r2, r3
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	617b      	str	r3, [r7, #20]
	// crc control
	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_length - 4,
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1f19      	subs	r1, r3, #4
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 f9c5 	bl	8001464 <bootloader_verify_crc>
 80010da:	1e03      	subs	r3, r0, #0
 80010dc:	d142      	bne.n	8001164 <bootloader_ext_mem_to_mem_write_cmd+0xf4>
			host_crc)) {
		printMessage("Checksum success");
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <bootloader_ext_mem_to_mem_write_cmd+0x10c>)
 80010e0:	0018      	movs	r0, r3
 80010e2:	f000 fe6f 	bl	8001dc4 <printMessage>
		bootloader_send_ack(1);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f000 fa62 	bl	80015b0 <bootloader_send_ack>
		bl_Version[3] = 0x20;	// BL_EXT_MEM_TO_MEM_WRITE 	working
 80010ec:	193b      	adds	r3, r7, r4
 80010ee:	2220      	movs	r2, #32
 80010f0:	70da      	strb	r2, [r3, #3]
		printMessage("MEM_WRITE_WORKING ");
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <bootloader_ext_mem_to_mem_write_cmd+0x110>)
 80010f4:	0018      	movs	r0, r3
 80010f6:	f000 fe65 	bl	8001dc4 <printMessage>
		bl_Version[0] = TARGET_LORA_HIGH;
 80010fa:	193b      	adds	r3, r7, r4
 80010fc:	2218      	movs	r2, #24
 80010fe:	701a      	strb	r2, [r3, #0]
		bl_Version[1] = TARGET_LORA_LOW;
 8001100:	193b      	adds	r3, r7, r4
 8001102:	2266      	movs	r2, #102	; 0x66
 8001104:	705a      	strb	r2, [r3, #1]
		bl_Version[2] = TARGET_LORA_CHANNEL;
 8001106:	193b      	adds	r3, r7, r4
 8001108:	2213      	movs	r2, #19
 800110a:	709a      	strb	r2, [r3, #2]
		bootloader_uart_write_data(bl_Version, 4);
 800110c:	193b      	adds	r3, r7, r4
 800110e:	2104      	movs	r1, #4
 8001110:	0018      	movs	r0, r3
 8001112:	f000 f993 	bl	800143c <bootloader_uart_write_data>
		EXT_Flash_Write_Start_Addr = 0x000000;
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <bootloader_ext_mem_to_mem_write_cmd+0x114>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
		while (EXT_Flash_Buf[0] != 0xFF) {
 800111c:	e017      	b.n	800114e <bootloader_ext_mem_to_mem_write_cmd+0xde>
			memset(EXT_Flash_Buf, '\0', 256);
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	005a      	lsls	r2, r3, #1
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <bootloader_ext_mem_to_mem_write_cmd+0x118>)
 8001124:	2100      	movs	r1, #0
 8001126:	0018      	movs	r0, r3
 8001128:	f007 fc1d 	bl	8008966 <memset>
			//HAL_Delay(3);
			W25Q_Read_Fast(EXT_Flash_Write_Start_Addr, EXT_Flash_Buf);
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <bootloader_ext_mem_to_mem_write_cmd+0x114>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <bootloader_ext_mem_to_mem_write_cmd+0x118>)
 8001132:	0011      	movs	r1, r2
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff fa89 	bl	800064c <W25Q_Read_Fast>
			bootloader_mem_write_cmd(EXT_Flash_Buf);
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <bootloader_ext_mem_to_mem_write_cmd+0x118>)
 800113c:	0018      	movs	r0, r3
 800113e:	f7ff fdf1 	bl	8000d24 <bootloader_mem_write_cmd>
			// Yazılacak page öteleniyor
			EXT_Flash_Write_Start_Addr = 256 + EXT_Flash_Write_Start_Addr;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <bootloader_ext_mem_to_mem_write_cmd+0x114>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	32ff      	adds	r2, #255	; 0xff
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <bootloader_ext_mem_to_mem_write_cmd+0x114>)
 800114c:	601a      	str	r2, [r3, #0]
		while (EXT_Flash_Buf[0] != 0xFF) {
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <bootloader_ext_mem_to_mem_write_cmd+0x118>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2bff      	cmp	r3, #255	; 0xff
 8001154:	d1e3      	bne.n	800111e <bootloader_ext_mem_to_mem_write_cmd+0xae>
		}
		printMessage("MEM_WRITE_DONE ");
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <bootloader_ext_mem_to_mem_write_cmd+0x11c>)
 8001158:	0018      	movs	r0, r3
 800115a:	f000 fe33 	bl	8001dc4 <printMessage>
		W25Q_Chip_Erase();
 800115e:	f7ff fad3 	bl	8000708 <W25Q_Chip_Erase>
		bootloader_send_nack();
	}



}
 8001162:	e005      	b.n	8001170 <bootloader_ext_mem_to_mem_write_cmd+0x100>
		printMessage("Checksum fail ");
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <bootloader_ext_mem_to_mem_write_cmd+0x120>)
 8001166:	0018      	movs	r0, r3
 8001168:	f000 fe2c 	bl	8001dc4 <printMessage>
		bootloader_send_nack();
 800116c:	f000 fa44 	bl	80015f8 <bootloader_send_nack>
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b007      	add	sp, #28
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	080094fc 	.word	0x080094fc
 800117c:	08009298 	.word	0x08009298
 8001180:	08009518 	.word	0x08009518
 8001184:	20000260 	.word	0x20000260
 8001188:	20000160 	.word	0x20000160
 800118c:	0800952c 	.word	0x0800952c
 8001190:	080092c0 	.word	0x080092c0

08001194 <bootloader_ext_mem_write_cmd>:

void bootloader_ext_mem_write_cmd(uint8_t *bl_rx_data)
{
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	uint8_t addrValid = ADDR_VALID;
 800119c:	231f      	movs	r3, #31
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
	uint8_t writeStatus[4] = { 0x00 };
 80011a4:	2408      	movs	r4, #8
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
	uint8_t checkSum = 0;
 80011ac:	201e      	movs	r0, #30
 80011ae:	183b      	adds	r3, r7, r0
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
	uint8_t length = 0;
 80011b4:	211d      	movs	r1, #29
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
	uint32_t memAddress = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
	length = bl_rx_data[0];
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	7812      	ldrb	r2, [r2, #0]
 80011c6:	701a      	strb	r2, [r3, #0]
	uint32_t host_crc = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

	uint8_t payloadLength = bl_rx_data[6];
 80011cc:	2513      	movs	r5, #19
 80011ce:	197b      	adds	r3, r7, r5
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	7992      	ldrb	r2, [r2, #6]
 80011d4:	701a      	strb	r2, [r3, #0]

	memAddress |= ((bl_rx_data[2]) & 0xFFFFFFFF);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3302      	adds	r3, #2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	001a      	movs	r2, r3
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
	memAddress |= ((bl_rx_data[3]) & 0xFFFFFFFF) << 8;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3303      	adds	r3, #3
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
	memAddress |= ((bl_rx_data[4]) & 0xFFFFFFFF) << 16;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3304      	adds	r3, #4
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	041b      	lsls	r3, r3, #16
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
	memAddress |= ((bl_rx_data[5]) & 0xFFFFFFFF) << 24;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3305      	adds	r3, #5
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	061b      	lsls	r3, r3, #24
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]

	checkSum = bl_rx_data[length];
 800120e:	187b      	adds	r3, r7, r1
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	18d2      	adds	r2, r2, r3
 8001216:	183b      	adds	r3, r7, r0
 8001218:	7812      	ldrb	r2, [r2, #0]
 800121a:	701a      	strb	r2, [r3, #0]

	printMessage(" bootloader_mem_write_cmd ");
 800121c:	4b4c      	ldr	r3, [pc, #304]	; (8001350 <bootloader_ext_mem_write_cmd+0x1bc>)
 800121e:	0018      	movs	r0, r3
 8001220:	f000 fdd0 	bl	8001dc4 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]

	host_crc |= (bl_rx_data[command_packet_len - 1] & 0xFFFFFFFF) << 24;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3b01      	subs	r3, #1
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	18d3      	adds	r3, r2, r3
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	061b      	lsls	r3, r3, #24
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	4313      	orrs	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
	host_crc |= (bl_rx_data[command_packet_len - 2] & 0xFFFFFFFF) << 16;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3b02      	subs	r3, #2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	18d3      	adds	r3, r2, r3
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	041b      	lsls	r3, r3, #16
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	4313      	orrs	r3, r2
 800124e:	617b      	str	r3, [r7, #20]
	host_crc |= (bl_rx_data[command_packet_len - 3] & 0xFFFFFFFF) << 8;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3b03      	subs	r3, #3
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	18d3      	adds	r3, r2, r3
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	4313      	orrs	r3, r2
 8001260:	617b      	str	r3, [r7, #20]
	host_crc |= (bl_rx_data[command_packet_len - 4] & 0xFFFFFFFF);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	3b04      	subs	r3, #4
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	18d3      	adds	r3, r2, r3
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	001a      	movs	r2, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	4313      	orrs	r3, r2
 8001272:	617b      	str	r3, [r7, #20]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4,host_crc)) {
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	1f19      	subs	r1, r3, #4
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	0018      	movs	r0, r3
 800127e:	f000 f8f1 	bl	8001464 <bootloader_verify_crc>
 8001282:	1e03      	subs	r3, r0, #0
 8001284:	d15b      	bne.n	800133e <bootloader_ext_mem_write_cmd+0x1aa>
		printMessage(" Checksum success ");
 8001286:	4b33      	ldr	r3, [pc, #204]	; (8001354 <bootloader_ext_mem_write_cmd+0x1c0>)
 8001288:	0018      	movs	r0, r3
 800128a:	f000 fd9b 	bl	8001dc4 <printMessage>
		bootloader_send_ack(1);
 800128e:	2001      	movs	r0, #1
 8001290:	f000 f98e 	bl	80015b0 <bootloader_send_ack>

		printMessage(" Memory Write Address: %#x ", memAddress);
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <bootloader_ext_mem_write_cmd+0x1c4>)
 8001298:	0011      	movs	r1, r2
 800129a:	0018      	movs	r0, r3
 800129c:	f000 fd92 	bl	8001dc4 <printMessage>
		memset(EXT_Flash_Buf, '\0', 256);
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	005a      	lsls	r2, r3, #1
 80012a4:	4b2d      	ldr	r3, [pc, #180]	; (800135c <bootloader_ext_mem_write_cmd+0x1c8>)
 80012a6:	2100      	movs	r1, #0
 80012a8:	0018      	movs	r0, r3
 80012aa:	f007 fb5c 	bl	8008966 <memset>
		if (bootloader_verify_address(memAddress) == ADDR_VALID) {
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	0018      	movs	r0, r3
 80012b2:	f000 f9e9 	bl	8001688 <bootloader_verify_address>
 80012b6:	1e03      	subs	r3, r0, #0
 80012b8:	d12a      	bne.n	8001310 <bootloader_ext_mem_write_cmd+0x17c>
			printMessage(" Valid Memory Write Address ");
 80012ba:	4b29      	ldr	r3, [pc, #164]	; (8001360 <bootloader_ext_mem_write_cmd+0x1cc>)
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 fd81 	bl	8001dc4 <printMessage>
			W25Q_Write_Enable();
 80012c2:	f7ff f8f1 	bl	80004a8 <W25Q_Write_Enable>
			writeStatus[3] = execute_ext_mem_write(bl_rx_data, payloadLength);
 80012c6:	197b      	adds	r3, r7, r5
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	0011      	movs	r1, r2
 80012ce:	0018      	movs	r0, r3
 80012d0:	f000 fca4 	bl	8001c1c <execute_ext_mem_write>
 80012d4:	0003      	movs	r3, r0
 80012d6:	001a      	movs	r2, r3
 80012d8:	193b      	adds	r3, r7, r4
 80012da:	70da      	strb	r2, [r3, #3]
			W25Q_Write_Disable();
 80012dc:	f7ff f8fa 	bl	80004d4 <W25Q_Write_Disable>
			W25Q_Read_Fast(0x00000000, EXT_Flash_Buf);
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <bootloader_ext_mem_write_cmd+0x1c8>)
 80012e2:	0019      	movs	r1, r3
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff f9b1 	bl	800064c <W25Q_Read_Fast>
			writeStatus[0] = TARGET_LORA_HIGH;
 80012ea:	193b      	adds	r3, r7, r4
 80012ec:	2218      	movs	r2, #24
 80012ee:	701a      	strb	r2, [r3, #0]
			writeStatus[1] = TARGET_LORA_LOW;
 80012f0:	193b      	adds	r3, r7, r4
 80012f2:	2266      	movs	r2, #102	; 0x66
 80012f4:	705a      	strb	r2, [r3, #1]
			writeStatus[2] = TARGET_LORA_CHANNEL;
 80012f6:	193b      	adds	r3, r7, r4
 80012f8:	2213      	movs	r2, #19
 80012fa:	709a      	strb	r2, [r3, #2]
			bootloader_uart_write_data(writeStatus, 4);
 80012fc:	193b      	adds	r3, r7, r4
 80012fe:	2104      	movs	r1, #4
 8001300:	0018      	movs	r0, r3
 8001302:	f000 f89b 	bl	800143c <bootloader_uart_write_data>
			SSD1306_GotoXY(0, 32);
 8001306:	2120      	movs	r1, #32
 8001308:	2000      	movs	r0, #0
 800130a:	f001 fb15 	bl	8002938 <SSD1306_GotoXY>
		}
	} else {
		printMessage(" Checksum fail ");
		//bootloader_send_nack();
	}
}
 800130e:	e01a      	b.n	8001346 <bootloader_ext_mem_write_cmd+0x1b2>
			printMessage(" Invalid Memory Write Address ");
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <bootloader_ext_mem_write_cmd+0x1d0>)
 8001312:	0018      	movs	r0, r3
 8001314:	f000 fd56 	bl	8001dc4 <printMessage>
			writeStatus[3] = ADDR_INVALID;
 8001318:	2108      	movs	r1, #8
 800131a:	187b      	adds	r3, r7, r1
 800131c:	2201      	movs	r2, #1
 800131e:	70da      	strb	r2, [r3, #3]
			writeStatus[0] = TARGET_LORA_HIGH;
 8001320:	187b      	adds	r3, r7, r1
 8001322:	2218      	movs	r2, #24
 8001324:	701a      	strb	r2, [r3, #0]
			writeStatus[1] = TARGET_LORA_LOW;
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2266      	movs	r2, #102	; 0x66
 800132a:	705a      	strb	r2, [r3, #1]
			writeStatus[2] = TARGET_LORA_CHANNEL;
 800132c:	187b      	adds	r3, r7, r1
 800132e:	2213      	movs	r2, #19
 8001330:	709a      	strb	r2, [r3, #2]
			bootloader_uart_write_data(writeStatus, 4);
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2104      	movs	r1, #4
 8001336:	0018      	movs	r0, r3
 8001338:	f000 f880 	bl	800143c <bootloader_uart_write_data>
}
 800133c:	e003      	b.n	8001346 <bootloader_ext_mem_write_cmd+0x1b2>
		printMessage(" Checksum fail ");
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <bootloader_ext_mem_write_cmd+0x1d4>)
 8001340:	0018      	movs	r0, r3
 8001342:	f000 fd3f 	bl	8001dc4 <printMessage>
}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b008      	add	sp, #32
 800134c:	bdb0      	pop	{r4, r5, r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	08009418 	.word	0x08009418
 8001354:	08009434 	.word	0x08009434
 8001358:	08009448 	.word	0x08009448
 800135c:	20000160 	.word	0x20000160
 8001360:	08009464 	.word	0x08009464
 8001364:	08009484 	.word	0x08009484
 8001368:	08009408 	.word	0x08009408

0800136c <bootloader_disable_read_write_protect_cmd>:
//		bootloader_send_nack();
//	}
//
//}

void bootloader_disable_read_write_protect_cmd(uint8_t *bl_rx_data) {
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8001374:	240f      	movs	r4, #15
 8001376:	193b      	adds	r3, r7, r4
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
	uint32_t host_crc = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

	printMessage(" bootloader_disable_read_write_protect_cmd ");
 8001380:	4b2a      	ldr	r3, [pc, #168]	; (800142c <bootloader_disable_read_write_protect_cmd+0xc0>)
 8001382:	0018      	movs	r0, r3
 8001384:	f000 fd1e 	bl	8001dc4 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	613b      	str	r3, [r7, #16]

	//uint32_t host_crc = *((uint32_t*) ((uint32_t*)bl_rx_data + command_packet_len - 4));
	host_crc |=(bl_rx_data[5]&0xFFFFFFFF)<<24;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3305      	adds	r3, #5
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	061b      	lsls	r3, r3, #24
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	4313      	orrs	r3, r2
 800139c:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[4]&0xFFFFFFFF)<<16;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3304      	adds	r3, #4
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[3]&0xFFFFFFFF)<<8;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3303      	adds	r3, #3
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[2]&0xFFFFFFFF);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3302      	adds	r3, #2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	001a      	movs	r2, r3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4,
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1f19      	subs	r1, r3, #4
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f000 f847 	bl	8001464 <bootloader_verify_crc>
 80013d6:	1e03      	subs	r3, r0, #0
 80013d8:	d11d      	bne.n	8001416 <bootloader_disable_read_write_protect_cmd+0xaa>
			host_crc)) {
		printMessage(" Checksum success ");
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <bootloader_disable_read_write_protect_cmd+0xc4>)
 80013dc:	0018      	movs	r0, r3
 80013de:	f000 fcf1 	bl	8001dc4 <printMessage>
		bootloader_send_ack(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f000 f8e4 	bl	80015b0 <bootloader_send_ack>

		status = configure_flash_sector_r_w_protection(0, 0, 1);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2100      	movs	r1, #0
 80013ec:	2000      	movs	r0, #0
 80013ee:	f000 fc2f 	bl	8001c50 <configure_flash_sector_r_w_protection>
 80013f2:	0003      	movs	r3, r0
 80013f4:	001a      	movs	r2, r3
 80013f6:	193b      	adds	r3, r7, r4
 80013f8:	701a      	strb	r2, [r3, #0]

		printMessage(" Status: %d", status);
 80013fa:	193b      	adds	r3, r7, r4
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	001a      	movs	r2, r3
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <bootloader_disable_read_write_protect_cmd+0xc8>)
 8001402:	0011      	movs	r1, r2
 8001404:	0018      	movs	r0, r3
 8001406:	f000 fcdd 	bl	8001dc4 <printMessage>

		bootloader_uart_write_data(&status, 1);
 800140a:	193b      	adds	r3, r7, r4
 800140c:	2101      	movs	r1, #1
 800140e:	0018      	movs	r0, r3
 8001410:	f000 f814 	bl	800143c <bootloader_uart_write_data>
	} else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}
}
 8001414:	e005      	b.n	8001422 <bootloader_disable_read_write_protect_cmd+0xb6>
		printMessage(" Checksum fail ");
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <bootloader_disable_read_write_protect_cmd+0xcc>)
 8001418:	0018      	movs	r0, r3
 800141a:	f000 fcd3 	bl	8001dc4 <printMessage>
		bootloader_send_nack();
 800141e:	f000 f8eb 	bl	80015f8 <bootloader_send_nack>
}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b007      	add	sp, #28
 8001428:	bd90      	pop	{r4, r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	0800953c 	.word	0x0800953c
 8001430:	08009434 	.word	0x08009434
 8001434:	080094d0 	.word	0x080094d0
 8001438:	08009408 	.word	0x08009408

0800143c <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *Buffer, uint32_t len) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]

	HAL_UART_Transmit(&huart3, Buffer, len, HAL_MAX_DELAY);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b29a      	uxth	r2, r3
 800144a:	2301      	movs	r3, #1
 800144c:	425b      	negs	r3, r3
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <bootloader_uart_write_data+0x24>)
 8001452:	f005 fedf 	bl	8007214 <HAL_UART_Transmit>
}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	b002      	add	sp, #8
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	200003d4 	.word	0x200003d4

08001464 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc(uint8_t* Buffer, uint32_t len, uint32_t crcHost) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	uint32_t crcValue = 0xFF;
 8001470:	23ff      	movs	r3, #255	; 0xff
 8001472:	61fb      	str	r3, [r7, #28]
		uint32_t data = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

		for (uint32_t i = 0; i < len; i++) {
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
 800147c:	e010      	b.n	80014a0 <bootloader_verify_crc+0x3c>
			data = Buffer[i];
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	18d3      	adds	r3, r2, r3
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	617b      	str	r3, [r7, #20]
			crcValue = HAL_CRC_Accumulate(&hcrc, &data, 1);
 8001488:	2314      	movs	r3, #20
 800148a:	18f9      	adds	r1, r7, r3
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <bootloader_verify_crc+0x6c>)
 800148e:	2201      	movs	r2, #1
 8001490:	0018      	movs	r0, r3
 8001492:	f002 f922 	bl	80036da <HAL_CRC_Accumulate>
 8001496:	0003      	movs	r3, r0
 8001498:	61fb      	str	r3, [r7, #28]
		for (uint32_t i = 0; i < len; i++) {
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	3301      	adds	r3, #1
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d3ea      	bcc.n	800147e <bootloader_verify_crc+0x1a>
		}
	__HAL_CRC_DR_RESET(&hcrc);
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <bootloader_verify_crc+0x6c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <bootloader_verify_crc+0x6c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2101      	movs	r1, #1
 80014b4:	430a      	orrs	r2, r1
 80014b6:	609a      	str	r2, [r3, #8]

	if (crcValue == crcHost) {
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d101      	bne.n	80014c4 <bootloader_verify_crc+0x60>
		return CRC_SUCCESS;
 80014c0:	2300      	movs	r3, #0
 80014c2:	e000      	b.n	80014c6 <bootloader_verify_crc+0x62>
	}

	return CRC_FAIL;
 80014c4:	2301      	movs	r3, #1
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b008      	add	sp, #32
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	20000264 	.word	0x20000264

080014d4 <bootloader_get_rdp_cmd>:

void bootloader_get_rdp_cmd(uint8_t *bl_rx_data) {
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	uint8_t rdpLevel [4]= {0};
 80014dc:	240c      	movs	r4, #12
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
	uint32_t host_crc = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
	printMessage(" bootloader_get_rdp_cmd ");
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <bootloader_get_rdp_cmd+0xcc>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f000 fc6a 	bl	8001dc4 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	613b      	str	r3, [r7, #16]

	//uint32_t host_crc = *((uint32_t*) ((uint32_t*)bl_rx_data + command_packet_len - 4));

	host_crc |=(bl_rx_data[5]&0xFFFFFFFF)<<24;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3305      	adds	r3, #5
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	061b      	lsls	r3, r3, #24
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	4313      	orrs	r3, r2
 8001504:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[4]&0xFFFFFFFF)<<16;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3304      	adds	r3, #4
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	041b      	lsls	r3, r3, #16
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	4313      	orrs	r3, r2
 8001512:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[3]&0xFFFFFFFF)<<8;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3303      	adds	r3, #3
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	4313      	orrs	r3, r2
 8001520:	617b      	str	r3, [r7, #20]
	host_crc |=(bl_rx_data[2]&0xFFFFFFFF);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3302      	adds	r3, #2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	001a      	movs	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	4313      	orrs	r3, r2
 800152e:	617b      	str	r3, [r7, #20]


	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4,
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1f19      	subs	r1, r3, #4
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff ff93 	bl	8001464 <bootloader_verify_crc>
 800153e:	1e03      	subs	r3, r0, #0
 8001540:	d123      	bne.n	800158a <bootloader_get_rdp_cmd+0xb6>
			host_crc)) {
		printMessage(" Checksum succes ");
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <bootloader_get_rdp_cmd+0xd0>)
 8001544:	0018      	movs	r0, r3
 8001546:	f000 fc3d 	bl	8001dc4 <printMessage>
		bootloader_send_ack(1);
 800154a:	2001      	movs	r0, #1
 800154c:	f000 f830 	bl	80015b0 <bootloader_send_ack>

		rdpLevel[3] = get_flash_rdp_level();
 8001550:	f000 f886 	bl	8001660 <get_flash_rdp_level>
 8001554:	0003      	movs	r3, r0
 8001556:	001a      	movs	r2, r3
 8001558:	0021      	movs	r1, r4
 800155a:	187b      	adds	r3, r7, r1
 800155c:	70da      	strb	r2, [r3, #3]
		rdpLevel[0]= TARGET_LORA_HIGH;
 800155e:	187b      	adds	r3, r7, r1
 8001560:	2218      	movs	r2, #24
 8001562:	701a      	strb	r2, [r3, #0]
		rdpLevel[1]= TARGET_LORA_LOW;
 8001564:	187b      	adds	r3, r7, r1
 8001566:	2266      	movs	r2, #102	; 0x66
 8001568:	705a      	strb	r2, [r3, #1]
		rdpLevel[2]= TARGET_LORA_CHANNEL;
 800156a:	187b      	adds	r3, r7, r1
 800156c:	2213      	movs	r2, #19
 800156e:	709a      	strb	r2, [r3, #2]
		printMessage("RDP Level: %d", rdpLevel);
 8001570:	000c      	movs	r4, r1
 8001572:	187a      	adds	r2, r7, r1
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <bootloader_get_rdp_cmd+0xd4>)
 8001576:	0011      	movs	r1, r2
 8001578:	0018      	movs	r0, r3
 800157a:	f000 fc23 	bl	8001dc4 <printMessage>
		bootloader_uart_write_data(rdpLevel, 4);
 800157e:	193b      	adds	r3, r7, r4
 8001580:	2104      	movs	r1, #4
 8001582:	0018      	movs	r0, r3
 8001584:	f7ff ff5a 	bl	800143c <bootloader_uart_write_data>
	} else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}

}
 8001588:	e005      	b.n	8001596 <bootloader_get_rdp_cmd+0xc2>
		printMessage(" Checksum fail ");
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <bootloader_get_rdp_cmd+0xd8>)
 800158c:	0018      	movs	r0, r3
 800158e:	f000 fc19 	bl	8001dc4 <printMessage>
		bootloader_send_nack();
 8001592:	f000 f831 	bl	80015f8 <bootloader_send_nack>
}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	b007      	add	sp, #28
 800159c:	bd90      	pop	{r4, r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	08009568 	.word	0x08009568
 80015a4:	08009584 	.word	0x08009584
 80015a8:	08009598 	.word	0x08009598
 80015ac:	08009408 	.word	0x08009408

080015b0 <bootloader_send_ack>:

void bootloader_send_ack(uint8_t followLength) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	0002      	movs	r2, r0
 80015b8:	1dfb      	adds	r3, r7, #7
 80015ba:	701a      	strb	r2, [r3, #0]
	uint8_t ackBuffer[5];
	ackBuffer[0] = TARGET_LORA_HIGH;
 80015bc:	2108      	movs	r1, #8
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	2218      	movs	r2, #24
 80015c2:	701a      	strb	r2, [r3, #0]
	ackBuffer[1] = TARGET_LORA_LOW;
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	2266      	movs	r2, #102	; 0x66
 80015c8:	705a      	strb	r2, [r3, #1]
	ackBuffer[2] = TARGET_LORA_CHANNEL;
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2213      	movs	r2, #19
 80015ce:	709a      	strb	r2, [r3, #2]
	ackBuffer[3] = BL_ACK_VALUE;
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	22a5      	movs	r2, #165	; 0xa5
 80015d4:	70da      	strb	r2, [r3, #3]
	ackBuffer[4] = followLength;
 80015d6:	187b      	adds	r3, r7, r1
 80015d8:	1dfa      	adds	r2, r7, #7
 80015da:	7812      	ldrb	r2, [r2, #0]
 80015dc:	711a      	strb	r2, [r3, #4]

	HAL_UART_Transmit(&huart3, ackBuffer, 5, HAL_MAX_DELAY);
 80015de:	2301      	movs	r3, #1
 80015e0:	425b      	negs	r3, r3
 80015e2:	1879      	adds	r1, r7, r1
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <bootloader_send_ack+0x44>)
 80015e6:	2205      	movs	r2, #5
 80015e8:	f005 fe14 	bl	8007214 <HAL_UART_Transmit>
}
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b004      	add	sp, #16
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200003d4 	.word	0x200003d4

080015f8 <bootloader_send_nack>:

void bootloader_send_nack() {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
	uint8_t nackValue[4] ;
	nackValue[0]= TARGET_LORA_HIGH;
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2218      	movs	r2, #24
 8001602:	701a      	strb	r2, [r3, #0]
	nackValue[1]= TARGET_LORA_LOW;
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2266      	movs	r2, #102	; 0x66
 8001608:	705a      	strb	r2, [r3, #1]
	nackValue[2]= TARGET_LORA_CHANNEL;
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2213      	movs	r2, #19
 800160e:	709a      	strb	r2, [r3, #2]
	nackValue[3]= BL_NACK_VALUE;
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	227f      	movs	r2, #127	; 0x7f
 8001614:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit(&huart3, nackValue, 4, HAL_MAX_DELAY);
 8001616:	2301      	movs	r3, #1
 8001618:	425b      	negs	r3, r3
 800161a:	1d39      	adds	r1, r7, #4
 800161c:	4803      	ldr	r0, [pc, #12]	; (800162c <bootloader_send_nack+0x34>)
 800161e:	2204      	movs	r2, #4
 8001620:	f005 fdf8 	bl	8007214 <HAL_UART_Transmit>
}
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	b002      	add	sp, #8
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200003d4 	.word	0x200003d4

08001630 <bootloader_get_version>:

uint8_t bootloader_get_version(void) {
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	return BL_VER;
 8001634:	2310      	movs	r3, #16
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(void) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
	uint16_t cID;
	cID = (uint16_t) (DBG->IDCODE) & 0x0FFF;
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <get_mcu_chip_id+0x20>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	b29a      	uxth	r2, r3
 8001648:	1dbb      	adds	r3, r7, #6
 800164a:	0512      	lsls	r2, r2, #20
 800164c:	0d12      	lsrs	r2, r2, #20
 800164e:	801a      	strh	r2, [r3, #0]
	return cID;
 8001650:	1dbb      	adds	r3, r7, #6
 8001652:	881b      	ldrh	r3, [r3, #0]
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	b002      	add	sp, #8
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40015800 	.word	0x40015800

08001660 <get_flash_rdp_level>:

uint8_t get_flash_rdp_level(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
	uint8_t rdp_status = 0;
 8001666:	1dfb      	adds	r3, r7, #7
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]

#if	1

	volatile uint32_t *OB_Addr = (uint32_t*) RDP_REG;
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <get_flash_rdp_level+0x24>)
 800166e:	603b      	str	r3, [r7, #0]
	rdp_status = (uint8_t) ((*OB_Addr )& 0x00000000FF);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	1dfb      	adds	r3, r7, #7
 8001676:	701a      	strb	r2, [r3, #0]
	HAL_FLASHEx_OBGetConfig(&OB_InitStruct);
	rdp_level = (uint8_t) OB_InitStruct.RDPLevel;

#endif

	return rdp_status;
 8001678:	1dfb      	adds	r3, r7, #7
 800167a:	781b      	ldrb	r3, [r3, #0]
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	b002      	add	sp, #8
 8001682:	bd80      	pop	{r7, pc}
 8001684:	1fff7800 	.word	0x1fff7800

08001688 <bootloader_verify_address>:

uint8_t bootloader_verify_address(uint32_t goAddress) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	if (goAddress >= FLASH_BASE && goAddress <= G0_FLASH_END)
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	051b      	lsls	r3, r3, #20
 8001696:	429a      	cmp	r2, r3
 8001698:	d305      	bcc.n	80016a6 <bootloader_verify_address+0x1e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <bootloader_verify_address+0x28>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d801      	bhi.n	80016a6 <bootloader_verify_address+0x1e>
		return ADDR_VALID;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <bootloader_verify_address+0x20>
	else
	return ADDR_INVALID;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	0801ffff 	.word	0x0801ffff

080016b4 <execute_flash_erase>:
/*
 * sectorNumber Silinecek sektör numarası
 * numberOfSector sectorNumber'dan sonraki silinecek sektör sayısı
 *
 * */
uint8_t execute_flash_erase(uint8_t sectorNumber, uint8_t numberOfSector) {
 80016b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	0002      	movs	r2, r0
 80016bc:	1dfb      	adds	r3, r7, #7
 80016be:	701a      	strb	r2, [r3, #0]
 80016c0:	1dbb      	adds	r3, r7, #6
 80016c2:	1c0a      	adds	r2, r1, #0
 80016c4:	701a      	strb	r2, [r3, #0]
	FLASH_EraseInitTypeDef FlashEraseInitStruct = { 0 };
 80016c6:	230c      	movs	r3, #12
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	0018      	movs	r0, r3
 80016cc:	2310      	movs	r3, #16
 80016ce:	001a      	movs	r2, r3
 80016d0:	2100      	movs	r1, #0
 80016d2:	f007 f948 	bl	8008966 <memset>
	uint32_t SectorError = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
	HAL_StatusTypeDef status = { 0 };
 80016da:	231f      	movs	r3, #31
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]

	if (sectorNumber > 63)
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b3f      	cmp	r3, #63	; 0x3f
 80016e8:	d901      	bls.n	80016ee <execute_flash_erase+0x3a>
		return INVALID_SECTOR;
 80016ea:	2304      	movs	r3, #4
 80016ec:	e04a      	b.n	8001784 <execute_flash_erase+0xd0>

	if ((sectorNumber <= 63) || (sectorNumber == 0xFF)) {
 80016ee:	1dfb      	adds	r3, r7, #7
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b3f      	cmp	r3, #63	; 0x3f
 80016f4:	d903      	bls.n	80016fe <execute_flash_erase+0x4a>
 80016f6:	1dfb      	adds	r3, r7, #7
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2bff      	cmp	r3, #255	; 0xff
 80016fc:	d141      	bne.n	8001782 <execute_flash_erase+0xce>
		if (sectorNumber == 0xFF) {
 80016fe:	1dfb      	adds	r3, r7, #7
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2bff      	cmp	r3, #255	; 0xff
 8001704:	d11b      	bne.n	800173e <execute_flash_erase+0x8a>
			FlashEraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001706:	240c      	movs	r4, #12
 8001708:	193b      	adds	r3, r7, r4
 800170a:	2202      	movs	r2, #2
 800170c:	601a      	str	r2, [r3, #0]
			FlashEraseInitStruct.Page = ((FLASH_END_ADDRESS-FLASH_APP_BASE_ADDRESS)/FLASH_BANK_SIZE);
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <execute_flash_erase+0xd8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	029a      	lsls	r2, r3, #10
 8001714:	23ff      	movs	r3, #255	; 0xff
 8001716:	029b      	lsls	r3, r3, #10
 8001718:	4013      	ands	r3, r2
 800171a:	0019      	movs	r1, r3
 800171c:	481c      	ldr	r0, [pc, #112]	; (8001790 <execute_flash_erase+0xdc>)
 800171e:	f7fe fd01 	bl	8000124 <__udivsi3>
 8001722:	0003      	movs	r3, r0
 8001724:	001a      	movs	r2, r3
 8001726:	193b      	adds	r3, r7, r4
 8001728:	609a      	str	r2, [r3, #8]
			FlashEraseInitStruct.NbPages = FLASH_PAGE_NB;
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <execute_flash_erase+0xd8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	029a      	lsls	r2, r3, #10
 8001730:	23ff      	movs	r3, #255	; 0xff
 8001732:	029b      	lsls	r3, r3, #10
 8001734:	4013      	ands	r3, r2
 8001736:	0ada      	lsrs	r2, r3, #11
 8001738:	193b      	adds	r3, r7, r4
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	e00b      	b.n	8001756 <execute_flash_erase+0xa2>

		} else {


			FlashEraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800173e:	210c      	movs	r1, #12
 8001740:	187b      	adds	r3, r7, r1
 8001742:	2202      	movs	r2, #2
 8001744:	601a      	str	r2, [r3, #0]
			FlashEraseInitStruct.Page = sectorNumber;
 8001746:	1dfb      	adds	r3, r7, #7
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	187b      	adds	r3, r7, r1
 800174c:	609a      	str	r2, [r3, #8]

			FlashEraseInitStruct.NbPages = numberOfSector;
 800174e:	1dbb      	adds	r3, r7, #6
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	187b      	adds	r3, r7, r1
 8001754:	60da      	str	r2, [r3, #12]
		}
		FlashEraseInitStruct.Banks = FLASH_BANK_1;
 8001756:	250c      	movs	r5, #12
 8001758:	197b      	adds	r3, r7, r5
 800175a:	2204      	movs	r2, #4
 800175c:	605a      	str	r2, [r3, #4]

		HAL_FLASH_Unlock();
 800175e:	f002 fdaf 	bl	80042c0 <HAL_FLASH_Unlock>
		status = (uint8_t) HAL_FLASHEx_Erase(&FlashEraseInitStruct, &SectorError);
 8001762:	261f      	movs	r6, #31
 8001764:	19bc      	adds	r4, r7, r6
 8001766:	2308      	movs	r3, #8
 8001768:	18fa      	adds	r2, r7, r3
 800176a:	197b      	adds	r3, r7, r5
 800176c:	0011      	movs	r1, r2
 800176e:	0018      	movs	r0, r3
 8001770:	f002 fe9a 	bl	80044a8 <HAL_FLASHEx_Erase>
 8001774:	0003      	movs	r3, r0
 8001776:	7023      	strb	r3, [r4, #0]
		HAL_FLASH_Lock();
 8001778:	f002 fdc6 	bl	8004308 <HAL_FLASH_Lock>

		return status;
 800177c:	19bb      	adds	r3, r7, r6
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	e000      	b.n	8001784 <execute_flash_erase+0xd0>
	}

	return INVALID_SECTOR;
 8001782:	2304      	movs	r3, #4
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b009      	add	sp, #36	; 0x24
 800178a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178c:	1fff75e0 	.word	0x1fff75e0
 8001790:	0000efff 	.word	0x0000efff

08001794 <execute_memory_write>:

uint8_t execute_memory_write(uint8_t *Buffer, uint32_t memAddress, uint32_t len) {
 8001794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001796:	b0b7      	sub	sp, #220	; 0xdc
 8001798:	af00      	add	r7, sp, #0
 800179a:	23bc      	movs	r3, #188	; 0xbc
 800179c:	2408      	movs	r4, #8
 800179e:	191b      	adds	r3, r3, r4
 80017a0:	19db      	adds	r3, r3, r7
 80017a2:	6018      	str	r0, [r3, #0]
 80017a4:	23b8      	movs	r3, #184	; 0xb8
 80017a6:	2008      	movs	r0, #8
 80017a8:	181b      	adds	r3, r3, r0
 80017aa:	19db      	adds	r3, r3, r7
 80017ac:	6019      	str	r1, [r3, #0]
 80017ae:	23b4      	movs	r3, #180	; 0xb4
 80017b0:	2108      	movs	r1, #8
 80017b2:	185b      	adds	r3, r3, r1
 80017b4:	19db      	adds	r3, r3, r7
 80017b6:	601a      	str	r2, [r3, #0]
	uint8_t status = HAL_ERROR;
 80017b8:	231b      	movs	r3, #27
 80017ba:	22b0      	movs	r2, #176	; 0xb0
 80017bc:	189b      	adds	r3, r3, r2
 80017be:	2208      	movs	r2, #8
 80017c0:	18ba      	adds	r2, r7, r2
 80017c2:	189a      	adds	r2, r3, r2
 80017c4:	2301      	movs	r3, #1
 80017c6:	7013      	strb	r3, [r2, #0]
	__HAL_FLASH_CLEAR_FLAG(FLASH_ECCR_ECCD);
	__HAL_FLASH_CLEAR_FLAG(FLASH_ECCR_ECCC);
	__HAL_FLASH_CLEAR_FLAG(FLASH_ECCR_ECCCIE );
	__HAL_FLASH_CLEAR_FLAG(FLASH_ECCR_SYSF_ECC);
	__HAL_FLASH_CLEAR_FLAG(FLASH_ECCR_ADDR_ECC );
	HAL_FLASH_Lock();
 80017c8:	f002 fd9e 	bl	8004308 <HAL_FLASH_Lock>

	for (uint32_t i = 0; i < len; i= i+8) {
 80017cc:	2300      	movs	r3, #0
 80017ce:	22cc      	movs	r2, #204	; 0xcc
 80017d0:	2108      	movs	r1, #8
 80017d2:	1852      	adds	r2, r2, r1
 80017d4:	19d2      	adds	r2, r2, r7
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e207      	b.n	8001bea <execute_memory_write+0x456>
			//while ((FLASH->SR & FLASH_SR_BSY1)) {}
			HAL_FLASH_Unlock();
 80017da:	f002 fd71 	bl	80042c0 <HAL_FLASH_Unlock>

			data=0;
 80017de:	2200      	movs	r2, #0
 80017e0:	2300      	movs	r3, #0
 80017e2:	21c0      	movs	r1, #192	; 0xc0
 80017e4:	2008      	movs	r0, #8
 80017e6:	1808      	adds	r0, r1, r0
 80017e8:	19c0      	adds	r0, r0, r7
 80017ea:	6002      	str	r2, [r0, #0]
 80017ec:	6043      	str	r3, [r0, #4]
			data |= ((uint64_t)(Buffer[i+7] &0xFFFFFFFF))<<56;
 80017ee:	23cc      	movs	r3, #204	; 0xcc
 80017f0:	001e      	movs	r6, r3
 80017f2:	2208      	movs	r2, #8
 80017f4:	189b      	adds	r3, r3, r2
 80017f6:	19da      	adds	r2, r3, r7
 80017f8:	6813      	ldr	r3, [r2, #0]
 80017fa:	1dda      	adds	r2, r3, #7
 80017fc:	20bc      	movs	r0, #188	; 0xbc
 80017fe:	2308      	movs	r3, #8
 8001800:	18c3      	adds	r3, r0, r3
 8001802:	19dc      	adds	r4, r3, r7
 8001804:	6823      	ldr	r3, [r4, #0]
 8001806:	189b      	adds	r3, r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	22a0      	movs	r2, #160	; 0xa0
 800180c:	2008      	movs	r0, #8
 800180e:	1810      	adds	r0, r2, r0
 8001810:	19c4      	adds	r4, r0, r7
 8001812:	6023      	str	r3, [r4, #0]
 8001814:	2300      	movs	r3, #0
 8001816:	24a4      	movs	r4, #164	; 0xa4
 8001818:	2008      	movs	r0, #8
 800181a:	1820      	adds	r0, r4, r0
 800181c:	19c4      	adds	r4, r0, r7
 800181e:	6023      	str	r3, [r4, #0]
 8001820:	2308      	movs	r3, #8
 8001822:	18d3      	adds	r3, r2, r3
 8001824:	19da      	adds	r2, r3, r7
 8001826:	6813      	ldr	r3, [r2, #0]
 8001828:	061b      	lsls	r3, r3, #24
 800182a:	229c      	movs	r2, #156	; 0x9c
 800182c:	2008      	movs	r0, #8
 800182e:	1812      	adds	r2, r2, r0
 8001830:	19d2      	adds	r2, r2, r7
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	2300      	movs	r3, #0
 8001836:	2298      	movs	r2, #152	; 0x98
 8001838:	2008      	movs	r0, #8
 800183a:	1810      	adds	r0, r2, r0
 800183c:	19c4      	adds	r4, r0, r7
 800183e:	6023      	str	r3, [r4, #0]
 8001840:	000d      	movs	r5, r1
 8001842:	2308      	movs	r3, #8
 8001844:	18cb      	adds	r3, r1, r3
 8001846:	19dc      	adds	r4, r3, r7
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	2108      	movs	r1, #8
 800184c:	1852      	adds	r2, r2, r1
 800184e:	19d2      	adds	r2, r2, r7
 8001850:	6811      	ldr	r1, [r2, #0]
 8001852:	6852      	ldr	r2, [r2, #4]
 8001854:	0008      	movs	r0, r1
 8001856:	4318      	orrs	r0, r3
 8001858:	6438      	str	r0, [r7, #64]	; 0x40
 800185a:	24c4      	movs	r4, #196	; 0xc4
 800185c:	2308      	movs	r3, #8
 800185e:	18e3      	adds	r3, r4, r3
 8001860:	19db      	adds	r3, r3, r7
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	431a      	orrs	r2, r3
 8001866:	647a      	str	r2, [r7, #68]	; 0x44
 8001868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800186a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800186c:	0029      	movs	r1, r5
 800186e:	2208      	movs	r2, #8
 8001870:	188a      	adds	r2, r1, r2
 8001872:	19d2      	adds	r2, r2, r7
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	6054      	str	r4, [r2, #4]
			data |= ((uint64_t)(Buffer[i+6] &0xFFFFFFFF))<<48;
 8001878:	0033      	movs	r3, r6
 800187a:	001e      	movs	r6, r3
 800187c:	2208      	movs	r2, #8
 800187e:	189b      	adds	r3, r3, r2
 8001880:	19da      	adds	r2, r3, r7
 8001882:	6813      	ldr	r3, [r2, #0]
 8001884:	1d9a      	adds	r2, r3, #6
 8001886:	20bc      	movs	r0, #188	; 0xbc
 8001888:	2308      	movs	r3, #8
 800188a:	18c3      	adds	r3, r0, r3
 800188c:	19db      	adds	r3, r3, r7
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	189b      	adds	r3, r3, r2
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2290      	movs	r2, #144	; 0x90
 8001896:	2008      	movs	r0, #8
 8001898:	1810      	adds	r0, r2, r0
 800189a:	19c5      	adds	r5, r0, r7
 800189c:	602b      	str	r3, [r5, #0]
 800189e:	2300      	movs	r3, #0
 80018a0:	2594      	movs	r5, #148	; 0x94
 80018a2:	2008      	movs	r0, #8
 80018a4:	1828      	adds	r0, r5, r0
 80018a6:	19c5      	adds	r5, r0, r7
 80018a8:	602b      	str	r3, [r5, #0]
 80018aa:	2308      	movs	r3, #8
 80018ac:	18d3      	adds	r3, r2, r3
 80018ae:	19da      	adds	r2, r3, r7
 80018b0:	6813      	ldr	r3, [r2, #0]
 80018b2:	041b      	lsls	r3, r3, #16
 80018b4:	228c      	movs	r2, #140	; 0x8c
 80018b6:	2008      	movs	r0, #8
 80018b8:	1812      	adds	r2, r2, r0
 80018ba:	19d2      	adds	r2, r2, r7
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	2300      	movs	r3, #0
 80018c0:	2288      	movs	r2, #136	; 0x88
 80018c2:	2008      	movs	r0, #8
 80018c4:	1810      	adds	r0, r2, r0
 80018c6:	19c5      	adds	r5, r0, r7
 80018c8:	602b      	str	r3, [r5, #0]
 80018ca:	000d      	movs	r5, r1
 80018cc:	2308      	movs	r3, #8
 80018ce:	18cb      	adds	r3, r1, r3
 80018d0:	19db      	adds	r3, r3, r7
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2108      	movs	r1, #8
 80018d6:	1852      	adds	r2, r2, r1
 80018d8:	19d2      	adds	r2, r2, r7
 80018da:	6811      	ldr	r1, [r2, #0]
 80018dc:	6852      	ldr	r2, [r2, #4]
 80018de:	0008      	movs	r0, r1
 80018e0:	4318      	orrs	r0, r3
 80018e2:	63b8      	str	r0, [r7, #56]	; 0x38
 80018e4:	24c4      	movs	r4, #196	; 0xc4
 80018e6:	2308      	movs	r3, #8
 80018e8:	18e3      	adds	r3, r4, r3
 80018ea:	19db      	adds	r3, r3, r7
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f4:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80018f6:	0029      	movs	r1, r5
 80018f8:	2208      	movs	r2, #8
 80018fa:	188a      	adds	r2, r1, r2
 80018fc:	19d2      	adds	r2, r2, r7
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	6054      	str	r4, [r2, #4]
			data |= ((uint64_t)(Buffer[i+5] &0xFFFFFFFF))<<40;
 8001902:	0033      	movs	r3, r6
 8001904:	001e      	movs	r6, r3
 8001906:	2208      	movs	r2, #8
 8001908:	189b      	adds	r3, r3, r2
 800190a:	19da      	adds	r2, r3, r7
 800190c:	6813      	ldr	r3, [r2, #0]
 800190e:	1d5a      	adds	r2, r3, #5
 8001910:	20bc      	movs	r0, #188	; 0xbc
 8001912:	2308      	movs	r3, #8
 8001914:	18c3      	adds	r3, r0, r3
 8001916:	19d8      	adds	r0, r3, r7
 8001918:	6803      	ldr	r3, [r0, #0]
 800191a:	189b      	adds	r3, r3, r2
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2280      	movs	r2, #128	; 0x80
 8001920:	2008      	movs	r0, #8
 8001922:	1810      	adds	r0, r2, r0
 8001924:	19c5      	adds	r5, r0, r7
 8001926:	602b      	str	r3, [r5, #0]
 8001928:	2300      	movs	r3, #0
 800192a:	2584      	movs	r5, #132	; 0x84
 800192c:	2008      	movs	r0, #8
 800192e:	1828      	adds	r0, r5, r0
 8001930:	19c5      	adds	r5, r0, r7
 8001932:	602b      	str	r3, [r5, #0]
 8001934:	2308      	movs	r3, #8
 8001936:	18d3      	adds	r3, r2, r3
 8001938:	19da      	adds	r2, r3, r7
 800193a:	6813      	ldr	r3, [r2, #0]
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	2284      	movs	r2, #132	; 0x84
 8001940:	18ba      	adds	r2, r7, r2
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	2300      	movs	r3, #0
 8001946:	2280      	movs	r2, #128	; 0x80
 8001948:	18ba      	adds	r2, r7, r2
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	000d      	movs	r5, r1
 800194e:	2308      	movs	r3, #8
 8001950:	18cb      	adds	r3, r1, r3
 8001952:	19da      	adds	r2, r3, r7
 8001954:	6813      	ldr	r3, [r2, #0]
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	18ba      	adds	r2, r7, r2
 800195a:	6811      	ldr	r1, [r2, #0]
 800195c:	6852      	ldr	r2, [r2, #4]
 800195e:	0008      	movs	r0, r1
 8001960:	4318      	orrs	r0, r3
 8001962:	6338      	str	r0, [r7, #48]	; 0x30
 8001964:	24c4      	movs	r4, #196	; 0xc4
 8001966:	2308      	movs	r3, #8
 8001968:	18e3      	adds	r3, r4, r3
 800196a:	19d8      	adds	r0, r3, r7
 800196c:	6803      	ldr	r3, [r0, #0]
 800196e:	431a      	orrs	r2, r3
 8001970:	637a      	str	r2, [r7, #52]	; 0x34
 8001972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001974:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001976:	0029      	movs	r1, r5
 8001978:	2208      	movs	r2, #8
 800197a:	188a      	adds	r2, r1, r2
 800197c:	19d2      	adds	r2, r2, r7
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	6054      	str	r4, [r2, #4]
			data |= ((uint64_t)(Buffer[i+4] &0xFFFFFFFF))<<32;
 8001982:	0033      	movs	r3, r6
 8001984:	001e      	movs	r6, r3
 8001986:	2208      	movs	r2, #8
 8001988:	189b      	adds	r3, r3, r2
 800198a:	19da      	adds	r2, r3, r7
 800198c:	6813      	ldr	r3, [r2, #0]
 800198e:	1d1a      	adds	r2, r3, #4
 8001990:	20bc      	movs	r0, #188	; 0xbc
 8001992:	2308      	movs	r3, #8
 8001994:	18c3      	adds	r3, r0, r3
 8001996:	19d8      	adds	r0, r3, r7
 8001998:	6803      	ldr	r3, [r0, #0]
 800199a:	189b      	adds	r3, r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	67bb      	str	r3, [r7, #120]	; 0x78
 80019a0:	2300      	movs	r3, #0
 80019a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80019a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019a6:	001b      	movs	r3, r3
 80019a8:	677b      	str	r3, [r7, #116]	; 0x74
 80019aa:	2300      	movs	r3, #0
 80019ac:	673b      	str	r3, [r7, #112]	; 0x70
 80019ae:	000d      	movs	r5, r1
 80019b0:	2308      	movs	r3, #8
 80019b2:	18cb      	adds	r3, r1, r3
 80019b4:	19da      	adds	r2, r3, r7
 80019b6:	6813      	ldr	r3, [r2, #0]
 80019b8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80019ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019bc:	0008      	movs	r0, r1
 80019be:	4318      	orrs	r0, r3
 80019c0:	62b8      	str	r0, [r7, #40]	; 0x28
 80019c2:	24c4      	movs	r4, #196	; 0xc4
 80019c4:	2308      	movs	r3, #8
 80019c6:	18e3      	adds	r3, r4, r3
 80019c8:	19d8      	adds	r0, r3, r7
 80019ca:	6803      	ldr	r3, [r0, #0]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80019d4:	0029      	movs	r1, r5
 80019d6:	2208      	movs	r2, #8
 80019d8:	188a      	adds	r2, r1, r2
 80019da:	19d2      	adds	r2, r2, r7
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	6054      	str	r4, [r2, #4]
			data |= ((uint64_t)(Buffer[i+3] &0xFFFFFFFF))<<24;
 80019e0:	0033      	movs	r3, r6
 80019e2:	001e      	movs	r6, r3
 80019e4:	2208      	movs	r2, #8
 80019e6:	189b      	adds	r3, r3, r2
 80019e8:	19da      	adds	r2, r3, r7
 80019ea:	6813      	ldr	r3, [r2, #0]
 80019ec:	1cda      	adds	r2, r3, #3
 80019ee:	20bc      	movs	r0, #188	; 0xbc
 80019f0:	2308      	movs	r3, #8
 80019f2:	18c3      	adds	r3, r0, r3
 80019f4:	19d8      	adds	r0, r3, r7
 80019f6:	6803      	ldr	r3, [r0, #0]
 80019f8:	189b      	adds	r3, r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80019fe:	2300      	movs	r3, #0
 8001a00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a04:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8001a06:	001a      	movs	r2, r3
 8001a08:	0a12      	lsrs	r2, r2, #8
 8001a0a:	667a      	str	r2, [r7, #100]	; 0x64
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	663b      	str	r3, [r7, #96]	; 0x60
 8001a10:	000d      	movs	r5, r1
 8001a12:	2308      	movs	r3, #8
 8001a14:	18cb      	adds	r3, r1, r3
 8001a16:	19da      	adds	r2, r3, r7
 8001a18:	6813      	ldr	r3, [r2, #0]
 8001a1a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a1e:	0008      	movs	r0, r1
 8001a20:	4318      	orrs	r0, r3
 8001a22:	6238      	str	r0, [r7, #32]
 8001a24:	24c4      	movs	r4, #196	; 0xc4
 8001a26:	2308      	movs	r3, #8
 8001a28:	18e3      	adds	r3, r4, r3
 8001a2a:	19db      	adds	r3, r3, r7
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	627a      	str	r2, [r7, #36]	; 0x24
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001a36:	0028      	movs	r0, r5
 8001a38:	2208      	movs	r2, #8
 8001a3a:	1882      	adds	r2, r0, r2
 8001a3c:	19d2      	adds	r2, r2, r7
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	6054      	str	r4, [r2, #4]
			data |= ((uint64_t)(Buffer[i+2] &0xFFFFFFFF))<<16;
 8001a42:	0033      	movs	r3, r6
 8001a44:	001e      	movs	r6, r3
 8001a46:	2208      	movs	r2, #8
 8001a48:	189b      	adds	r3, r3, r2
 8001a4a:	19da      	adds	r2, r3, r7
 8001a4c:	6813      	ldr	r3, [r2, #0]
 8001a4e:	1c9a      	adds	r2, r3, #2
 8001a50:	21bc      	movs	r1, #188	; 0xbc
 8001a52:	2308      	movs	r3, #8
 8001a54:	18cb      	adds	r3, r1, r3
 8001a56:	19db      	adds	r3, r3, r7
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	189b      	adds	r3, r3, r2
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a60:	2300      	movs	r3, #0
 8001a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001a66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a68:	000b      	movs	r3, r1
 8001a6a:	0c1b      	lsrs	r3, r3, #16
 8001a6c:	0010      	movs	r0, r2
 8001a6e:	0400      	lsls	r0, r0, #16
 8001a70:	24ac      	movs	r4, #172	; 0xac
 8001a72:	2508      	movs	r5, #8
 8001a74:	1965      	adds	r5, r4, r5
 8001a76:	19ed      	adds	r5, r5, r7
 8001a78:	6028      	str	r0, [r5, #0]
 8001a7a:	2008      	movs	r0, #8
 8001a7c:	1820      	adds	r0, r4, r0
 8001a7e:	19c0      	adds	r0, r0, r7
 8001a80:	6800      	ldr	r0, [r0, #0]
 8001a82:	4318      	orrs	r0, r3
 8001a84:	2308      	movs	r3, #8
 8001a86:	18e3      	adds	r3, r4, r3
 8001a88:	19db      	adds	r3, r3, r7
 8001a8a:	6018      	str	r0, [r3, #0]
 8001a8c:	000b      	movs	r3, r1
 8001a8e:	041b      	lsls	r3, r3, #16
 8001a90:	22a8      	movs	r2, #168	; 0xa8
 8001a92:	2108      	movs	r1, #8
 8001a94:	1851      	adds	r1, r2, r1
 8001a96:	19cc      	adds	r4, r1, r7
 8001a98:	6023      	str	r3, [r4, #0]
 8001a9a:	20c0      	movs	r0, #192	; 0xc0
 8001a9c:	0005      	movs	r5, r0
 8001a9e:	2308      	movs	r3, #8
 8001aa0:	18c3      	adds	r3, r0, r3
 8001aa2:	19d9      	adds	r1, r3, r7
 8001aa4:	680b      	ldr	r3, [r1, #0]
 8001aa6:	2108      	movs	r1, #8
 8001aa8:	1852      	adds	r2, r2, r1
 8001aaa:	19d2      	adds	r2, r2, r7
 8001aac:	6811      	ldr	r1, [r2, #0]
 8001aae:	6852      	ldr	r2, [r2, #4]
 8001ab0:	0008      	movs	r0, r1
 8001ab2:	4318      	orrs	r0, r3
 8001ab4:	61b8      	str	r0, [r7, #24]
 8001ab6:	24c4      	movs	r4, #196	; 0xc4
 8001ab8:	2308      	movs	r3, #8
 8001aba:	18e3      	adds	r3, r4, r3
 8001abc:	19dc      	adds	r4, r3, r7
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	61fa      	str	r2, [r7, #28]
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	69fc      	ldr	r4, [r7, #28]
 8001ac8:	0028      	movs	r0, r5
 8001aca:	2208      	movs	r2, #8
 8001acc:	1882      	adds	r2, r0, r2
 8001ace:	19d2      	adds	r2, r2, r7
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	6054      	str	r4, [r2, #4]
			data |= ((uint64_t)(Buffer[i+1] &0xFFFFFFFF))<<8;
 8001ad4:	0033      	movs	r3, r6
 8001ad6:	001e      	movs	r6, r3
 8001ad8:	2208      	movs	r2, #8
 8001ada:	189b      	adds	r3, r3, r2
 8001adc:	19da      	adds	r2, r3, r7
 8001ade:	6813      	ldr	r3, [r2, #0]
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	21bc      	movs	r1, #188	; 0xbc
 8001ae4:	000d      	movs	r5, r1
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	18cb      	adds	r3, r1, r3
 8001aea:	19d9      	adds	r1, r3, r7
 8001aec:	680b      	ldr	r3, [r1, #0]
 8001aee:	189b      	adds	r3, r3, r2
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	653b      	str	r3, [r7, #80]	; 0x50
 8001af4:	2300      	movs	r3, #0
 8001af6:	657b      	str	r3, [r7, #84]	; 0x54
 8001af8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001afa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001afc:	000b      	movs	r3, r1
 8001afe:	0e1b      	lsrs	r3, r3, #24
 8001b00:	0010      	movs	r0, r2
 8001b02:	0200      	lsls	r0, r0, #8
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	4318      	orrs	r0, r3
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	000b      	movs	r3, r1
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	20c0      	movs	r0, #192	; 0xc0
 8001b14:	2308      	movs	r3, #8
 8001b16:	18c3      	adds	r3, r0, r3
 8001b18:	19da      	adds	r2, r3, r7
 8001b1a:	6813      	ldr	r3, [r2, #0]
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	24c4      	movs	r4, #196	; 0xc4
 8001b24:	2308      	movs	r3, #8
 8001b26:	18e3      	adds	r3, r4, r3
 8001b28:	19da      	adds	r2, r3, r7
 8001b2a:	6813      	ldr	r3, [r2, #0]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	697c      	ldr	r4, [r7, #20]
 8001b36:	2208      	movs	r2, #8
 8001b38:	1882      	adds	r2, r0, r2
 8001b3a:	19d2      	adds	r2, r2, r7
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	6054      	str	r4, [r2, #4]
			data |= ((uint64_t)(Buffer[i]   &0xFFFFFFFF));
 8001b40:	0029      	movs	r1, r5
 8001b42:	2308      	movs	r3, #8
 8001b44:	18cb      	adds	r3, r1, r3
 8001b46:	19d9      	adds	r1, r3, r7
 8001b48:	680a      	ldr	r2, [r1, #0]
 8001b4a:	0033      	movs	r3, r6
 8001b4c:	001e      	movs	r6, r3
 8001b4e:	2108      	movs	r1, #8
 8001b50:	185b      	adds	r3, r3, r1
 8001b52:	19d9      	adds	r1, r3, r7
 8001b54:	680b      	ldr	r3, [r1, #0]
 8001b56:	18d3      	adds	r3, r2, r3
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b60:	0005      	movs	r5, r0
 8001b62:	2308      	movs	r3, #8
 8001b64:	18c3      	adds	r3, r0, r3
 8001b66:	19d9      	adds	r1, r3, r7
 8001b68:	680b      	ldr	r3, [r1, #0]
 8001b6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b6e:	0008      	movs	r0, r1
 8001b70:	4318      	orrs	r0, r3
 8001b72:	60b8      	str	r0, [r7, #8]
 8001b74:	24c4      	movs	r4, #196	; 0xc4
 8001b76:	2308      	movs	r3, #8
 8001b78:	18e3      	adds	r3, r4, r3
 8001b7a:	19dc      	adds	r4, r3, r7
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	60fa      	str	r2, [r7, #12]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	68fc      	ldr	r4, [r7, #12]
 8001b86:	0028      	movs	r0, r5
 8001b88:	2208      	movs	r2, #8
 8001b8a:	1882      	adds	r2, r0, r2
 8001b8c:	19d1      	adds	r1, r2, r7
 8001b8e:	600b      	str	r3, [r1, #0]
 8001b90:	604c      	str	r4, [r1, #4]


			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, memAddress+i, data);
 8001b92:	21b8      	movs	r1, #184	; 0xb8
 8001b94:	2308      	movs	r3, #8
 8001b96:	18cb      	adds	r3, r1, r3
 8001b98:	19d9      	adds	r1, r3, r7
 8001b9a:	680a      	ldr	r2, [r1, #0]
 8001b9c:	0033      	movs	r3, r6
 8001b9e:	001d      	movs	r5, r3
 8001ba0:	2108      	movs	r1, #8
 8001ba2:	185b      	adds	r3, r3, r1
 8001ba4:	19d9      	adds	r1, r3, r7
 8001ba6:	680b      	ldr	r3, [r1, #0]
 8001ba8:	18d1      	adds	r1, r2, r3
 8001baa:	231b      	movs	r3, #27
 8001bac:	24b0      	movs	r4, #176	; 0xb0
 8001bae:	191c      	adds	r4, r3, r4
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	469c      	mov	ip, r3
 8001bb4:	44bc      	add	ip, r7
 8001bb6:	4464      	add	r4, ip
 8001bb8:	2308      	movs	r3, #8
 8001bba:	18c3      	adds	r3, r0, r3
 8001bbc:	19d8      	adds	r0, r3, r7
 8001bbe:	6802      	ldr	r2, [r0, #0]
 8001bc0:	6843      	ldr	r3, [r0, #4]
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f002 fa9c 	bl	8004100 <HAL_FLASH_Program>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	7023      	strb	r3, [r4, #0]
			HAL_Delay(3);
 8001bcc:	2003      	movs	r0, #3
 8001bce:	f001 fbb9 	bl	8003344 <HAL_Delay>
			HAL_FLASH_Lock();
 8001bd2:	f002 fb99 	bl	8004308 <HAL_FLASH_Lock>
	for (uint32_t i = 0; i < len; i= i+8) {
 8001bd6:	002a      	movs	r2, r5
 8001bd8:	2308      	movs	r3, #8
 8001bda:	18d3      	adds	r3, r2, r3
 8001bdc:	19db      	adds	r3, r3, r7
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3308      	adds	r3, #8
 8001be2:	2108      	movs	r1, #8
 8001be4:	1852      	adds	r2, r2, r1
 8001be6:	19d2      	adds	r2, r2, r7
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	23cc      	movs	r3, #204	; 0xcc
 8001bec:	2208      	movs	r2, #8
 8001bee:	189b      	adds	r3, r3, r2
 8001bf0:	19db      	adds	r3, r3, r7
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	23b4      	movs	r3, #180	; 0xb4
 8001bf6:	2108      	movs	r1, #8
 8001bf8:	185b      	adds	r3, r3, r1
 8001bfa:	19db      	adds	r3, r3, r7
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d200      	bcs.n	8001c04 <execute_memory_write+0x470>
 8001c02:	e5ea      	b.n	80017da <execute_memory_write+0x46>
	}

	return status;
 8001c04:	231b      	movs	r3, #27
 8001c06:	22b0      	movs	r2, #176	; 0xb0
 8001c08:	189b      	adds	r3, r3, r2
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	4694      	mov	ip, r2
 8001c0e:	44bc      	add	ip, r7
 8001c10:	4463      	add	r3, ip
 8001c12:	781b      	ldrb	r3, [r3, #0]
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b037      	add	sp, #220	; 0xdc
 8001c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c1c <execute_ext_mem_write>:
uint8_t execute_ext_mem_write(uint8_t *Buffer, uint32_t len)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
	//uint8_t status = HAL_ERROR;

	W25Q_Buf_Program(EXT_Flash_Write_Start_Addr, Buffer, len);
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <execute_ext_mem_write+0x30>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7fe fc65 	bl	8000500 <W25Q_Buf_Program>
	EXT_Flash_Write_Start_Addr = 256 + EXT_Flash_Write_Start_Addr;
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <execute_ext_mem_write+0x30>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	32ff      	adds	r2, #255	; 0xff
 8001c3e:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <execute_ext_mem_write+0x30>)
 8001c40:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b002      	add	sp, #8
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000260 	.word	0x20000260

08001c50 <configure_flash_sector_r_w_protection>:

uint8_t configure_flash_sector_r_w_protection(uint8_t sector_details,
		uint8_t protection_mode, uint8_t enableOrDisable) {
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	0004      	movs	r4, r0
 8001c58:	0008      	movs	r0, r1
 8001c5a:	0011      	movs	r1, r2
 8001c5c:	1dfb      	adds	r3, r7, #7
 8001c5e:	1c22      	adds	r2, r4, #0
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	1dbb      	adds	r3, r7, #6
 8001c64:	1c02      	adds	r2, r0, #0
 8001c66:	701a      	strb	r2, [r3, #0]
 8001c68:	1d7b      	adds	r3, r7, #5
 8001c6a:	1c0a      	adds	r2, r1, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
	volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 8001c6e:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <configure_flash_sector_r_w_protection+0x124>)
 8001c70:	60fb      	str	r3, [r7, #12]

	// enableOrDisable == 0 -> en_w_r_protect | enableOrDisable == 1 -> dis_r_w_protect

	if (enableOrDisable) {
 8001c72:	1d7b      	adds	r3, r7, #5
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d020      	beq.n	8001cbc <configure_flash_sector_r_w_protection+0x6c>
		HAL_FLASH_OB_Unlock();
 8001c7a:	f002 fb61 	bl	8004340 <HAL_FLASH_OB_Unlock>

		while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <configure_flash_sector_r_w_protection+0x128>)
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	025b      	lsls	r3, r3, #9
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d1f9      	bne.n	8001c80 <configure_flash_sector_r_w_protection+0x30>
			;

		*pOPTCR |= (0xFF << 16);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	22ff      	movs	r2, #255	; 0xff
 8001c92:	0412      	lsls	r2, r2, #16
 8001c94:	431a      	orrs	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	601a      	str	r2, [r3, #0]

		*pOPTCR |= (1 << 1);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	601a      	str	r2, [r3, #0]

		while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <configure_flash_sector_r_w_protection+0x128>)
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d1f9      	bne.n	8001ca8 <configure_flash_sector_r_w_protection+0x58>
			;

		HAL_FLASH_OB_Lock();
 8001cb4:	f002 fb6c 	bl	8004390 <HAL_FLASH_OB_Lock>

		return 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e057      	b.n	8001d6c <configure_flash_sector_r_w_protection+0x11c>
	}

	if (protection_mode == 1)	// write protection
 8001cbc:	1dbb      	adds	r3, r7, #6
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d121      	bne.n	8001d08 <configure_flash_sector_r_w_protection+0xb8>
			{
		HAL_FLASH_OB_Unlock();
 8001cc4:	f002 fb3c 	bl	8004340 <HAL_FLASH_OB_Unlock>

		while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001cc8:	46c0      	nop			; (mov r8, r8)
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <configure_flash_sector_r_w_protection+0x128>)
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	025b      	lsls	r3, r3, #9
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d1f9      	bne.n	8001cca <configure_flash_sector_r_w_protection+0x7a>
			;

		*pOPTCR &= ~(sector_details << 16);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1dfa      	adds	r2, r7, #7
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	0412      	lsls	r2, r2, #16
 8001ce0:	43d2      	mvns	r2, r2
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	601a      	str	r2, [r3, #0]

		*pOPTCR |= (1 << 1);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2202      	movs	r2, #2
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	601a      	str	r2, [r3, #0]

		while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <configure_flash_sector_r_w_protection+0x128>)
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	025b      	lsls	r3, r3, #9
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d1f9      	bne.n	8001cf6 <configure_flash_sector_r_w_protection+0xa6>
			;

		HAL_FLASH_OB_Lock();
 8001d02:	f002 fb45 	bl	8004390 <HAL_FLASH_OB_Lock>
 8001d06:	e030      	b.n	8001d6a <configure_flash_sector_r_w_protection+0x11a>
	} else if (protection_mode == 2) // read / write protection
 8001d08:	1dbb      	adds	r3, r7, #6
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d12c      	bne.n	8001d6a <configure_flash_sector_r_w_protection+0x11a>
			{
		HAL_FLASH_OB_Unlock();
 8001d10:	f002 fb16 	bl	8004340 <HAL_FLASH_OB_Unlock>

		while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <configure_flash_sector_r_w_protection+0x128>)
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	025b      	lsls	r3, r3, #9
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d1f9      	bne.n	8001d16 <configure_flash_sector_r_w_protection+0xc6>
			;

		*pOPTCR &= ~(0xFF << 16);				// write protecton all sector
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a15      	ldr	r2, [pc, #84]	; (8001d7c <configure_flash_sector_r_w_protection+0x12c>)
 8001d28:	401a      	ands	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (sector_details << 16);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	1dfa      	adds	r2, r7, #7
 8001d34:	7812      	ldrb	r2, [r2, #0]
 8001d36:	0412      	lsls	r2, r2, #16
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	601a      	str	r2, [r3, #0]

		*pOPTCR |= (0xFF << 8);					// read protection all sector
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	22ff      	movs	r2, #255	; 0xff
 8001d44:	0212      	lsls	r2, r2, #8
 8001d46:	431a      	orrs	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	601a      	str	r2, [r3, #0]

		*pOPTCR |= (1 << 1);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2202      	movs	r2, #2
 8001d52:	431a      	orrs	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	601a      	str	r2, [r3, #0]

		while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <configure_flash_sector_r_w_protection+0x128>)
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	025b      	lsls	r3, r3, #9
 8001d62:	4013      	ands	r3, r2
 8001d64:	d1f9      	bne.n	8001d5a <configure_flash_sector_r_w_protection+0x10a>
			;

		HAL_FLASH_OB_Lock();
 8001d66:	f002 fb13 	bl	8004390 <HAL_FLASH_OB_Lock>
	}

	return 0;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b005      	add	sp, #20
 8001d72:	bd90      	pop	{r4, r7, pc}
 8001d74:	40023c14 	.word	0x40023c14
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	ff00ffff 	.word	0xff00ffff

08001d80 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	000a      	movs	r2, r1
 8001d8a:	1cbb      	adds	r3, r7, #2
 8001d8c:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART3)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_UARTEx_RxEventCallback+0x34>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d109      	bne.n	8001dac <HAL_UARTEx_RxEventCallback+0x2c>
	{
		Boot_Receive_Flag =1;
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <HAL_UARTEx_RxEventCallback+0x38>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
		memcpy(Bootloader_Main_Buf, bootloader_rx_data,Size);
 8001d9e:	1cbb      	adds	r3, r7, #2
 8001da0:	881a      	ldrh	r2, [r3, #0]
 8001da2:	4906      	ldr	r1, [pc, #24]	; (8001dbc <HAL_UARTEx_RxEventCallback+0x3c>)
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_UARTEx_RxEventCallback+0x40>)
 8001da6:	0018      	movs	r0, r3
 8001da8:	f006 fdd4 	bl	8008954 <memcpy>

	}
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b002      	add	sp, #8
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40004800 	.word	0x40004800
 8001db8:	20000d5c 	.word	0x20000d5c
 8001dbc:	200004c4 	.word	0x200004c4
 8001dc0:	2000058c 	.word	0x2000058c

08001dc4 <printMessage>:

void printMessage(char *format, ...) {
 8001dc4:	b40f      	push	{r0, r1, r2, r3}
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b09a      	sub	sp, #104	; 0x68
 8001dca:	af00      	add	r7, sp, #0
	char comingMessage[100] = { 0 };
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	2260      	movs	r2, #96	; 0x60
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f006 fdc4 	bl	8008966 <memset>
	va_list vaList;
	va_start(vaList, format);
 8001dde:	2374      	movs	r3, #116	; 0x74
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	603b      	str	r3, [r7, #0]
	vsprintf(comingMessage, format, vaList);
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	0018      	movs	r0, r3
 8001dec:	f006 fdda 	bl	80089a4 <vsiprintf>
	SSD1306_GotoXY(0, 0);
 8001df0:	2100      	movs	r1, #0
 8001df2:	2000      	movs	r0, #0
 8001df4:	f000 fda0 	bl	8002938 <SSD1306_GotoXY>
	SSD1306_Puts(comingMessage, &Font_7x10, 1);
 8001df8:	4907      	ldr	r1, [pc, #28]	; (8001e18 <printMessage+0x54>)
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f000 fe34 	bl	8002a6c <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001e04:	f000 fcdc 	bl	80027c0 <SSD1306_UpdateScreen>
	va_end(vaList);
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b01a      	add	sp, #104	; 0x68
 8001e0e:	bc80      	pop	{r7}
 8001e10:	bc08      	pop	{r3}
 8001e12:	b004      	add	sp, #16
 8001e14:	4718      	bx	r3
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	20000000 	.word	0x20000000

08001e1c <bootloader_jump_to_user_application>:

void bootloader_jump_to_user_application(void) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
	//  Kesmeleri kapa
	/*__disable_irq();// __disable_irq deyince hal_delay çalışmıyor unutma !!!!!*/

	printMessage("bootloader_jump_to_user_application() \n");
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <bootloader_jump_to_user_application+0xa0>)
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff ffcd 	bl	8001dc4 <printMessage>

	//  MSP'nin değerini tut
	uint32_t mspValue = *(volatile uint32_t*) FLASH_APP_BASE_ADDRESS;
 8001e2a:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <bootloader_jump_to_user_application+0xa4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60fb      	str	r3, [r7, #12]
	printMessage("MSP Value: %#x \n", mspValue);
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <bootloader_jump_to_user_application+0xa8>)
 8001e34:	0011      	movs	r1, r2
 8001e36:	0018      	movs	r0, r3
 8001e38:	f7ff ffc4 	bl	8001dc4 <printMessage>

	// Sıfırlama işleyicisinin değerini tut
	uint32_t resetValue = *(volatile uint32_t*) (FLASH_APP_BASE_ADDRESS + 4);
 8001e3c:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <bootloader_jump_to_user_application+0xac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60bb      	str	r3, [r7, #8]
	printMessage("Reset Value: %#x \n", resetValue);
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <bootloader_jump_to_user_application+0xb0>)
 8001e46:	0011      	movs	r1, r2
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7ff ffbb 	bl	8001dc4 <printMessage>

	//  Periferleri sıfırla ve devre dışı bırak

	SCB->VTOR = FLASH_APP_BASE_ADDRESS;
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <bootloader_jump_to_user_application+0xb4>)
 8001e50:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <bootloader_jump_to_user_application+0xa4>)
 8001e52:	609a      	str	r2, [r3, #8]
	//__set_MSP(mspValue);	// Bu fonksiyon F407 De calisiyordu ama
	//L053 de çalışmıyor
	SysTick->CTRL = 0;
 8001e54:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <bootloader_jump_to_user_application+0xb8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <bootloader_jump_to_user_application+0xb8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001e60:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <bootloader_jump_to_user_application+0xb8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
	HAL_I2C_DeInit(&hi2c1);
 8001e66:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <bootloader_jump_to_user_application+0xbc>)
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f002 fec5 	bl	8004bf8 <HAL_I2C_DeInit>
	HAL_UART_MspDeInit(&huart3);
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <bootloader_jump_to_user_application+0xc0>)
 8001e70:	0018      	movs	r0, r3
 8001e72:	f001 f8d7 	bl	8003024 <HAL_UART_MspDeInit>
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	019b      	lsls	r3, r3, #6
 8001e7a:	4a19      	ldr	r2, [pc, #100]	; (8001ee0 <bootloader_jump_to_user_application+0xc4>)
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	0010      	movs	r0, r2
 8001e80:	f002 fd1a 	bl	80048b8 <HAL_GPIO_DeInit>
	HAL_UART_MspDeInit(&huart2);
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <bootloader_jump_to_user_application+0xc8>)
 8001e86:	0018      	movs	r0, r3
 8001e88:	f001 f8cc 	bl	8003024 <HAL_UART_MspDeInit>
	HAL_DMA_DeInit(&hdma_usart3_rx);
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <bootloader_jump_to_user_application+0xcc>)
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f001 fe2a 	bl	8003ae8 <HAL_DMA_DeInit>
	HAL_CRC_DeInit(&hcrc);
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <bootloader_jump_to_user_application+0xd0>)
 8001e96:	0018      	movs	r0, r3
 8001e98:	f001 fbee 	bl	8003678 <HAL_CRC_DeInit>
	HAL_RCC_DeInit();
 8001e9c:	f003 fbf8 	bl	8005690 <HAL_RCC_DeInit>

	HAL_DeInit();
 8001ea0:	f001 f9be 	bl	8003220 <HAL_DeInit>
	resetValue = *((volatile uint32_t*) (FLASH_APP_BASE_ADDRESS + 4));
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <bootloader_jump_to_user_application+0xac>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60bb      	str	r3, [r7, #8]
	void (*jump_to_app)(void) = (void *)resetValue;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	607b      	str	r3, [r7, #4]
	jump_to_app();
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4798      	blx	r3

}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b004      	add	sp, #16
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	080095a8 	.word	0x080095a8
 8001ec0:	08011000 	.word	0x08011000
 8001ec4:	080095d0 	.word	0x080095d0
 8001ec8:	08011004 	.word	0x08011004
 8001ecc:	080095e4 	.word	0x080095e4
 8001ed0:	e000ed00 	.word	0xe000ed00
 8001ed4:	e000e010 	.word	0xe000e010
 8001ed8:	20000288 	.word	0x20000288
 8001edc:	200003d4 	.word	0x200003d4
 8001ee0:	50000800 	.word	0x50000800
 8001ee4:	20000340 	.word	0x20000340
 8001ee8:	20000468 	.word	0x20000468
 8001eec:	20000264 	.word	0x20000264

08001ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef4:	f001 f974 	bl	80031e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef8:	f000 f982 	bl	8002200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001efc:	f000 fb1c 	bl	8002538 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f00:	f000 fafc 	bl	80024fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f04:	f000 fa78 	bl	80023f8 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001f08:	f000 f9d4 	bl	80022b4 <MX_CRC_Init>
  MX_I2C1_Init();
 8001f0c:	f000 f9f6 	bl	80022fc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001f10:	f000 fac0 	bl	8002494 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001f14:	f000 fa32 	bl	800237c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8001f18:	f000 fb8e 	bl	8002638 <SSD1306_Init>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bootloader_rx_data, BL_RX_DATA_LENGTH);
 8001f1c:	49ad      	ldr	r1, [pc, #692]	; (80021d4 <main+0x2e4>)
 8001f1e:	4bae      	ldr	r3, [pc, #696]	; (80021d8 <main+0x2e8>)
 8001f20:	22c8      	movs	r2, #200	; 0xc8
 8001f22:	0018      	movs	r0, r3
 8001f24:	f006 fc26 	bl	8008774 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001f28:	4bac      	ldr	r3, [pc, #688]	; (80021dc <main+0x2ec>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4bab      	ldr	r3, [pc, #684]	; (80021dc <main+0x2ec>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2104      	movs	r1, #4
 8001f34:	438a      	bics	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		SSD1306_GotoXY(0, 32);
 8001f38:	2120      	movs	r1, #32
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f000 fcfc 	bl	8002938 <SSD1306_GotoXY>
		SSD1306_Puts("BOOTLAODER", &Font_7x10, 1);
 8001f40:	49a7      	ldr	r1, [pc, #668]	; (80021e0 <main+0x2f0>)
 8001f42:	4ba8      	ldr	r3, [pc, #672]	; (80021e4 <main+0x2f4>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 fd90 	bl	8002a6c <SSD1306_Puts>
		SSD1306_UpdateScreen(); //display
 8001f4c:	f000 fc38 	bl	80027c0 <SSD1306_UpdateScreen>

	  if(Boot_Receive_Flag==1){
 8001f50:	4ba5      	ldr	r3, [pc, #660]	; (80021e8 <main+0x2f8>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d000      	beq.n	8001f5a <main+0x6a>
 8001f58:	e119      	b.n	800218e <main+0x29e>
		switch (bootloader_rx_data[1]) {
 8001f5a:	4b9e      	ldr	r3, [pc, #632]	; (80021d4 <main+0x2e4>)
 8001f5c:	785b      	ldrb	r3, [r3, #1]
 8001f5e:	3b51      	subs	r3, #81	; 0x51
 8001f60:	2b0e      	cmp	r3, #14
 8001f62:	d900      	bls.n	8001f66 <main+0x76>
 8001f64:	e10c      	b.n	8002180 <main+0x290>
 8001f66:	009a      	lsls	r2, r3, #2
 8001f68:	4ba0      	ldr	r3, [pc, #640]	; (80021ec <main+0x2fc>)
 8001f6a:	18d3      	adds	r3, r2, r3
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	469f      	mov	pc, r3
		case BL_GET_VER:/*TAMAMEN CALISIYOR*/
			bootloader_get_ver_cmd(bootloader_rx_data);
 8001f70:	4b98      	ldr	r3, [pc, #608]	; (80021d4 <main+0x2e4>)
 8001f72:	0018      	movs	r0, r3
 8001f74:	f7fe fbea 	bl	800074c <bootloader_get_ver_cmd>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bootloader_rx_data, BL_RX_DATA_LENGTH);
 8001f78:	4996      	ldr	r1, [pc, #600]	; (80021d4 <main+0x2e4>)
 8001f7a:	4b97      	ldr	r3, [pc, #604]	; (80021d8 <main+0x2e8>)
 8001f7c:	22c8      	movs	r2, #200	; 0xc8
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f006 fbf8 	bl	8008774 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001f84:	4b95      	ldr	r3, [pc, #596]	; (80021dc <main+0x2ec>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b94      	ldr	r3, [pc, #592]	; (80021dc <main+0x2ec>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2104      	movs	r1, #4
 8001f90:	438a      	bics	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
			Boot_Receive_Flag=0;
 8001f94:	4b94      	ldr	r3, [pc, #592]	; (80021e8 <main+0x2f8>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
			break;
 8001f9a:	e0f2      	b.n	8002182 <main+0x292>
		case BL_GET_HELP:/*TAMAMEN CALISIYOR*/
			bootloader_get_help_cmd(bootloader_rx_data);
 8001f9c:	4b8d      	ldr	r3, [pc, #564]	; (80021d4 <main+0x2e4>)
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f7fe fc52 	bl	8000848 <bootloader_get_help_cmd>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bootloader_rx_data, BL_RX_DATA_LENGTH);
 8001fa4:	498b      	ldr	r1, [pc, #556]	; (80021d4 <main+0x2e4>)
 8001fa6:	4b8c      	ldr	r3, [pc, #560]	; (80021d8 <main+0x2e8>)
 8001fa8:	22c8      	movs	r2, #200	; 0xc8
 8001faa:	0018      	movs	r0, r3
 8001fac:	f006 fbe2 	bl	8008774 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001fb0:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <main+0x2ec>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4b89      	ldr	r3, [pc, #548]	; (80021dc <main+0x2ec>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2104      	movs	r1, #4
 8001fbc:	438a      	bics	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
			Boot_Receive_Flag=0;
 8001fc0:	4b89      	ldr	r3, [pc, #548]	; (80021e8 <main+0x2f8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
			break;
 8001fc6:	e0dc      	b.n	8002182 <main+0x292>
		case BL_GET_CID:/*TAMAMEN CALISIYOR */
			bootloader_get_cid_cmd(bootloader_rx_data); //calıisiyor
 8001fc8:	4b82      	ldr	r3, [pc, #520]	; (80021d4 <main+0x2e4>)
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7fe fcb4 	bl	8000938 <bootloader_get_cid_cmd>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bootloader_rx_data, BL_RX_DATA_LENGTH);
 8001fd0:	4980      	ldr	r1, [pc, #512]	; (80021d4 <main+0x2e4>)
 8001fd2:	4b81      	ldr	r3, [pc, #516]	; (80021d8 <main+0x2e8>)
 8001fd4:	22c8      	movs	r2, #200	; 0xc8
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f006 fbcc 	bl	8008774 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001fdc:	4b7f      	ldr	r3, [pc, #508]	; (80021dc <main+0x2ec>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b7e      	ldr	r3, [pc, #504]	; (80021dc <main+0x2ec>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2104      	movs	r1, #4
 8001fe8:	438a      	bics	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]
			Boot_Receive_Flag=0;
 8001fec:	4b7e      	ldr	r3, [pc, #504]	; (80021e8 <main+0x2f8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
			break;
 8001ff2:	e0c6      	b.n	8002182 <main+0x292>
		case BL_GET_RDP_STATUS:/*TAMAMEN CALISIYOR*/
			bootloader_get_rdp_cmd(bootloader_rx_data);// calısiyor
 8001ff4:	4b77      	ldr	r3, [pc, #476]	; (80021d4 <main+0x2e4>)
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f7ff fa6c 	bl	80014d4 <bootloader_get_rdp_cmd>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bootloader_rx_data, BL_RX_DATA_LENGTH);
 8001ffc:	4975      	ldr	r1, [pc, #468]	; (80021d4 <main+0x2e4>)
 8001ffe:	4b76      	ldr	r3, [pc, #472]	; (80021d8 <main+0x2e8>)
 8002000:	22c8      	movs	r2, #200	; 0xc8
 8002002:	0018      	movs	r0, r3
 8002004:	f006 fbb6 	bl	8008774 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002008:	4b74      	ldr	r3, [pc, #464]	; (80021dc <main+0x2ec>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4b73      	ldr	r3, [pc, #460]	; (80021dc <main+0x2ec>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2104      	movs	r1, #4
 8002014:	438a      	bics	r2, r1
 8002016:	601a      	str	r2, [r3, #0]
			Boot_Receive_Flag=0;
 8002018:	4b73      	ldr	r3, [pc, #460]	; (80021e8 <main+0x2f8>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
			break;
 800201e:	e0b0      	b.n	8002182 <main+0x292>
		case BL_GO_TO_ADDR:/*TAMAMEN CALISIYOR*/
			bootloader_go_to_addr_cmd(bootloader_rx_data);// calısiyor
 8002020:	4b6c      	ldr	r3, [pc, #432]	; (80021d4 <main+0x2e4>)
 8002022:	0018      	movs	r0, r3
 8002024:	f7fe fd0c 	bl	8000a40 <bootloader_go_to_addr_cmd>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bootloader_rx_data, BL_RX_DATA_LENGTH);
 8002028:	496a      	ldr	r1, [pc, #424]	; (80021d4 <main+0x2e4>)
 800202a:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <main+0x2e8>)
 800202c:	22c8      	movs	r2, #200	; 0xc8
 800202e:	0018      	movs	r0, r3
 8002030:	f006 fba0 	bl	8008774 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002034:	4b69      	ldr	r3, [pc, #420]	; (80021dc <main+0x2ec>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b68      	ldr	r3, [pc, #416]	; (80021dc <main+0x2ec>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2104      	movs	r1, #4
 8002040:	438a      	bics	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
			Boot_Receive_Flag=0;
 8002044:	4b68      	ldr	r3, [pc, #416]	; (80021e8 <main+0x2f8>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
			break;
 800204a:	e09a      	b.n	8002182 <main+0x292>
			/*	Once page sonra ondan sonraki kaç tane page silincek ise o girilecek  */
		case BL_FLASH_ERASE:/*TAMAMEN CALISIYOR*/
			bootloader_flash_erase_cmd(bootloader_rx_data);
 800204c:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <main+0x2e4>)
 800204e:	0018      	movs	r0, r3
 8002050:	f7fe fddc 	bl	8000c0c <bootloader_flash_erase_cmd>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bootloader_rx_data, BL_RX_DATA_LENGTH);
 8002054:	495f      	ldr	r1, [pc, #380]	; (80021d4 <main+0x2e4>)
 8002056:	4b60      	ldr	r3, [pc, #384]	; (80021d8 <main+0x2e8>)
 8002058:	22c8      	movs	r2, #200	; 0xc8
 800205a:	0018      	movs	r0, r3
 800205c:	f006 fb8a 	bl	8008774 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002060:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <main+0x2ec>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b5d      	ldr	r3, [pc, #372]	; (80021dc <main+0x2ec>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2104      	movs	r1, #4
 800206c:	438a      	bics	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
			Boot_Receive_Flag=0;
 8002070:	4b5d      	ldr	r3, [pc, #372]	; (80021e8 <main+0x2f8>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
			break;
 8002076:	e084      	b.n	8002182 <main+0x292>
			/*	Yazma yapılmadan önce kullanılacak pageler flash erase yapılmalı*/
		case BL_MEM_WRITE:/*TAMAMEN CALISIYOR*/
			bootloader_mem_write_cmd(bootloader_rx_data);
 8002078:	4b56      	ldr	r3, [pc, #344]	; (80021d4 <main+0x2e4>)
 800207a:	0018      	movs	r0, r3
 800207c:	f7fe fe52 	bl	8000d24 <bootloader_mem_write_cmd>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bootloader_rx_data, BL_RX_DATA_LENGTH);
 8002080:	4954      	ldr	r1, [pc, #336]	; (80021d4 <main+0x2e4>)
 8002082:	4b55      	ldr	r3, [pc, #340]	; (80021d8 <main+0x2e8>)
 8002084:	22c8      	movs	r2, #200	; 0xc8
 8002086:	0018      	movs	r0, r3
 8002088:	f006 fb74 	bl	8008774 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800208c:	4b53      	ldr	r3, [pc, #332]	; (80021dc <main+0x2ec>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	4b52      	ldr	r3, [pc, #328]	; (80021dc <main+0x2ec>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2104      	movs	r1, #4
 8002098:	438a      	bics	r2, r1
 800209a:	601a      	str	r2, [r3, #0]
			Boot_Receive_Flag=0;
 800209c:	4b52      	ldr	r3, [pc, #328]	; (80021e8 <main+0x2f8>)
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
			break;
 80020a2:	e06e      	b.n	8002182 <main+0x292>
		case BL_EN_RW_PROTECT:
			bootloader_enable_read_write_protect_cmd(bootloader_rx_data);
 80020a4:	4b4b      	ldr	r3, [pc, #300]	; (80021d4 <main+0x2e4>)
 80020a6:	0018      	movs	r0, r3
 80020a8:	f7fe ff18 	bl	8000edc <bootloader_enable_read_write_protect_cmd>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bootloader_rx_data, BL_RX_DATA_LENGTH);
 80020ac:	4949      	ldr	r1, [pc, #292]	; (80021d4 <main+0x2e4>)
 80020ae:	4b4a      	ldr	r3, [pc, #296]	; (80021d8 <main+0x2e8>)
 80020b0:	22c8      	movs	r2, #200	; 0xc8
 80020b2:	0018      	movs	r0, r3
 80020b4:	f006 fb5e 	bl	8008774 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80020b8:	4b48      	ldr	r3, [pc, #288]	; (80021dc <main+0x2ec>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b47      	ldr	r3, [pc, #284]	; (80021dc <main+0x2ec>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2104      	movs	r1, #4
 80020c4:	438a      	bics	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
			Boot_Receive_Flag=0;
 80020c8:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <main+0x2f8>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
			break;
 80020ce:	e058      	b.n	8002182 <main+0x292>
		case BL_DIS_R_W_PROTECT:
			bootloader_disable_read_write_protect_cmd(bootloader_rx_data);
 80020d0:	4b40      	ldr	r3, [pc, #256]	; (80021d4 <main+0x2e4>)
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7ff f94a 	bl	800136c <bootloader_disable_read_write_protect_cmd>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bootloader_rx_data, BL_RX_DATA_LENGTH);
 80020d8:	493e      	ldr	r1, [pc, #248]	; (80021d4 <main+0x2e4>)
 80020da:	4b3f      	ldr	r3, [pc, #252]	; (80021d8 <main+0x2e8>)
 80020dc:	22c8      	movs	r2, #200	; 0xc8
 80020de:	0018      	movs	r0, r3
 80020e0:	f006 fb48 	bl	8008774 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80020e4:	4b3d      	ldr	r3, [pc, #244]	; (80021dc <main+0x2ec>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b3c      	ldr	r3, [pc, #240]	; (80021dc <main+0x2ec>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2104      	movs	r1, #4
 80020f0:	438a      	bics	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
			Boot_Receive_Flag=0;
 80020f4:	4b3c      	ldr	r3, [pc, #240]	; (80021e8 <main+0x2f8>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
			break;
 80020fa:	e042      	b.n	8002182 <main+0x292>
		case BL_GO_TO_BOOTLOADER:
			bootloader_go_to_bootloader_cmd(bootloader_rx_data);
 80020fc:	4b35      	ldr	r3, [pc, #212]	; (80021d4 <main+0x2e4>)
 80020fe:	0018      	movs	r0, r3
 8002100:	f7fe ff58 	bl	8000fb4 <bootloader_go_to_bootloader_cmd>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bootloader_rx_data, BL_RX_DATA_LENGTH);
 8002104:	4933      	ldr	r1, [pc, #204]	; (80021d4 <main+0x2e4>)
 8002106:	4b34      	ldr	r3, [pc, #208]	; (80021d8 <main+0x2e8>)
 8002108:	22c8      	movs	r2, #200	; 0xc8
 800210a:	0018      	movs	r0, r3
 800210c:	f006 fb32 	bl	8008774 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002110:	4b32      	ldr	r3, [pc, #200]	; (80021dc <main+0x2ec>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <main+0x2ec>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2104      	movs	r1, #4
 800211c:	438a      	bics	r2, r1
 800211e:	601a      	str	r2, [r3, #0]
			Boot_Receive_Flag=0;
 8002120:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <main+0x2f8>)
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
			break;
 8002126:	e02c      	b.n	8002182 <main+0x292>
		case BL_EXT_MEM_WRITE:
			bootloader_ext_mem_write_cmd(bootloader_rx_data);
 8002128:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <main+0x2e4>)
 800212a:	0018      	movs	r0, r3
 800212c:	f7ff f832 	bl	8001194 <bootloader_ext_mem_write_cmd>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bootloader_rx_data, BL_RX_DATA_LENGTH);
 8002130:	4928      	ldr	r1, [pc, #160]	; (80021d4 <main+0x2e4>)
 8002132:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <main+0x2e8>)
 8002134:	22c8      	movs	r2, #200	; 0xc8
 8002136:	0018      	movs	r0, r3
 8002138:	f006 fb1c 	bl	8008774 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800213c:	4b27      	ldr	r3, [pc, #156]	; (80021dc <main+0x2ec>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <main+0x2ec>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2104      	movs	r1, #4
 8002148:	438a      	bics	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
			Boot_Receive_Flag=0;
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <main+0x2f8>)
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
			break;
 8002152:	e016      	b.n	8002182 <main+0x292>
		case BL_EXT_MEM_TO_MEM_WRITE:
			bootloader_ext_mem_to_mem_write_cmd(bootloader_rx_data);
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <main+0x2e4>)
 8002156:	0018      	movs	r0, r3
 8002158:	f7fe ff8a 	bl	8001070 <bootloader_ext_mem_to_mem_write_cmd>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bootloader_rx_data, BL_RX_DATA_LENGTH);
 800215c:	491d      	ldr	r1, [pc, #116]	; (80021d4 <main+0x2e4>)
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <main+0x2e8>)
 8002160:	22c8      	movs	r2, #200	; 0xc8
 8002162:	0018      	movs	r0, r3
 8002164:	f006 fb06 	bl	8008774 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002168:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <main+0x2ec>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <main+0x2ec>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2104      	movs	r1, #4
 8002174:	438a      	bics	r2, r1
 8002176:	601a      	str	r2, [r3, #0]
			Boot_Receive_Flag=0;
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <main+0x2f8>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
			break;
 800217e:	e000      	b.n	8002182 <main+0x292>
			default:
			break;
 8002180:	46c0      	nop			; (mov r8, r8)
		}
		memset(bootloader_rx_data, '\0',200);
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <main+0x2e4>)
 8002184:	22c8      	movs	r2, #200	; 0xc8
 8002186:	2100      	movs	r1, #0
 8002188:	0018      	movs	r0, r3
 800218a:	f006 fbec 	bl	8008966 <memset>

	  }
	  else{}

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {//bunu direk Set olarak yaptım
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	019b      	lsls	r3, r3, #6
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <main+0x300>)
 8002194:	0019      	movs	r1, r3
 8002196:	0010      	movs	r0, r2
 8002198:	f002 fc5e 	bl	8004a58 <HAL_GPIO_ReadPin>
 800219c:	0003      	movs	r3, r0
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d104      	bne.n	80021ac <main+0x2bc>
		  														   //tuş basılı değilse bootloaderda kalacak
		  		printMessage(" Going to bootloader mode.\n");
 80021a2:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <main+0x304>)
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7ff fe0d 	bl	8001dc4 <printMessage>
 80021aa:	e005      	b.n	80021b8 <main+0x2c8>

		  	} else {
		  		printMessage(" Executing user application.\n");
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <main+0x308>)
 80021ae:	0018      	movs	r0, r3
 80021b0:	f7ff fe08 	bl	8001dc4 <printMessage>

		  		bootloader_jump_to_user_application();
 80021b4:	f7ff fe32 	bl	8001e1c <bootloader_jump_to_user_application>
		  	}
		SSD1306_GotoXY(0, 32);
 80021b8:	2120      	movs	r1, #32
 80021ba:	2000      	movs	r0, #0
 80021bc:	f000 fbbc 	bl	8002938 <SSD1306_GotoXY>
		SSD1306_Puts("WORKING", &Font_7x10, 1);
 80021c0:	4907      	ldr	r1, [pc, #28]	; (80021e0 <main+0x2f0>)
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <main+0x30c>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 fc50 	bl	8002a6c <SSD1306_Puts>
		SSD1306_UpdateScreen(); //display
 80021cc:	f000 faf8 	bl	80027c0 <SSD1306_UpdateScreen>
		SSD1306_GotoXY(0, 32);
 80021d0:	e6b2      	b.n	8001f38 <main+0x48>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	200004c4 	.word	0x200004c4
 80021d8:	200003d4 	.word	0x200003d4
 80021dc:	20000468 	.word	0x20000468
 80021e0:	20000000 	.word	0x20000000
 80021e4:	080095f8 	.word	0x080095f8
 80021e8:	20000d5c 	.word	0x20000d5c
 80021ec:	08009db4 	.word	0x08009db4
 80021f0:	50000800 	.word	0x50000800
 80021f4:	08009604 	.word	0x08009604
 80021f8:	08009620 	.word	0x08009620
 80021fc:	08009640 	.word	0x08009640

08002200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b093      	sub	sp, #76	; 0x4c
 8002204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002206:	2414      	movs	r4, #20
 8002208:	193b      	adds	r3, r7, r4
 800220a:	0018      	movs	r0, r3
 800220c:	2334      	movs	r3, #52	; 0x34
 800220e:	001a      	movs	r2, r3
 8002210:	2100      	movs	r1, #0
 8002212:	f006 fba8 	bl	8008966 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	0018      	movs	r0, r3
 800221a:	2310      	movs	r3, #16
 800221c:	001a      	movs	r2, r3
 800221e:	2100      	movs	r1, #0
 8002220:	f006 fba1 	bl	8008966 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	0018      	movs	r0, r3
 800222a:	f003 f9e5 	bl	80055f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800222e:	193b      	adds	r3, r7, r4
 8002230:	2202      	movs	r2, #2
 8002232:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002234:	193b      	adds	r3, r7, r4
 8002236:	2280      	movs	r2, #128	; 0x80
 8002238:	0052      	lsls	r2, r2, #1
 800223a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800223c:	0021      	movs	r1, r4
 800223e:	187b      	adds	r3, r7, r1
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002244:	187b      	adds	r3, r7, r1
 8002246:	2240      	movs	r2, #64	; 0x40
 8002248:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800224a:	187b      	adds	r3, r7, r1
 800224c:	2202      	movs	r2, #2
 800224e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002250:	187b      	adds	r3, r7, r1
 8002252:	2202      	movs	r2, #2
 8002254:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002256:	187b      	adds	r3, r7, r1
 8002258:	2200      	movs	r2, #0
 800225a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800225c:	187b      	adds	r3, r7, r1
 800225e:	2208      	movs	r2, #8
 8002260:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002262:	187b      	adds	r3, r7, r1
 8002264:	2280      	movs	r2, #128	; 0x80
 8002266:	0292      	lsls	r2, r2, #10
 8002268:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800226a:	187b      	adds	r3, r7, r1
 800226c:	2280      	movs	r2, #128	; 0x80
 800226e:	0592      	lsls	r2, r2, #22
 8002270:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002272:	187b      	adds	r3, r7, r1
 8002274:	0018      	movs	r0, r3
 8002276:	f003 fa87 	bl	8005788 <HAL_RCC_OscConfig>
 800227a:	1e03      	subs	r3, r0, #0
 800227c:	d001      	beq.n	8002282 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800227e:	f000 f9d5 	bl	800262c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	2207      	movs	r2, #7
 8002286:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	2202      	movs	r2, #2
 800228c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	2102      	movs	r1, #2
 800229e:	0018      	movs	r0, r3
 80022a0:	f003 fd82 	bl	8005da8 <HAL_RCC_ClockConfig>
 80022a4:	1e03      	subs	r3, r0, #0
 80022a6:	d001      	beq.n	80022ac <SystemClock_Config+0xac>
  {
    Error_Handler();
 80022a8:	f000 f9c0 	bl	800262c <Error_Handler>
  }
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b013      	add	sp, #76	; 0x4c
 80022b2:	bd90      	pop	{r4, r7, pc}

080022b4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <MX_CRC_Init+0x40>)
 80022ba:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <MX_CRC_Init+0x44>)
 80022bc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <MX_CRC_Init+0x40>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <MX_CRC_Init+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <MX_CRC_Init+0x40>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80022d0:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <MX_CRC_Init+0x40>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 80022d6:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <MX_CRC_Init+0x40>)
 80022d8:	2203      	movs	r2, #3
 80022da:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <MX_CRC_Init+0x40>)
 80022de:	0018      	movs	r0, r3
 80022e0:	f001 f964 	bl	80035ac <HAL_CRC_Init>
 80022e4:	1e03      	subs	r3, r0, #0
 80022e6:	d001      	beq.n	80022ec <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80022e8:	f000 f9a0 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	20000264 	.word	0x20000264
 80022f8:	40023000 	.word	0x40023000

080022fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <MX_I2C1_Init+0x74>)
 8002302:	4a1c      	ldr	r2, [pc, #112]	; (8002374 <MX_I2C1_Init+0x78>)
 8002304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8002306:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <MX_I2C1_Init+0x74>)
 8002308:	4a1b      	ldr	r2, [pc, #108]	; (8002378 <MX_I2C1_Init+0x7c>)
 800230a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800230c:	4b18      	ldr	r3, [pc, #96]	; (8002370 <MX_I2C1_Init+0x74>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002312:	4b17      	ldr	r3, [pc, #92]	; (8002370 <MX_I2C1_Init+0x74>)
 8002314:	2201      	movs	r2, #1
 8002316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002318:	4b15      	ldr	r3, [pc, #84]	; (8002370 <MX_I2C1_Init+0x74>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <MX_I2C1_Init+0x74>)
 8002320:	2200      	movs	r2, #0
 8002322:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <MX_I2C1_Init+0x74>)
 8002326:	2200      	movs	r2, #0
 8002328:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_I2C1_Init+0x74>)
 800232c:	2200      	movs	r2, #0
 800232e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <MX_I2C1_Init+0x74>)
 8002332:	2200      	movs	r2, #0
 8002334:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_I2C1_Init+0x74>)
 8002338:	0018      	movs	r0, r3
 800233a:	f002 fbc7 	bl	8004acc <HAL_I2C_Init>
 800233e:	1e03      	subs	r3, r0, #0
 8002340:	d001      	beq.n	8002346 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002342:	f000 f973 	bl	800262c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <MX_I2C1_Init+0x74>)
 8002348:	2100      	movs	r1, #0
 800234a:	0018      	movs	r0, r3
 800234c:	f003 f8bc 	bl	80054c8 <HAL_I2CEx_ConfigAnalogFilter>
 8002350:	1e03      	subs	r3, r0, #0
 8002352:	d001      	beq.n	8002358 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002354:	f000 f96a 	bl	800262c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <MX_I2C1_Init+0x74>)
 800235a:	2100      	movs	r1, #0
 800235c:	0018      	movs	r0, r3
 800235e:	f003 f8ff 	bl	8005560 <HAL_I2CEx_ConfigDigitalFilter>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d001      	beq.n	800236a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002366:	f000 f961 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000288 	.word	0x20000288
 8002374:	40005400 	.word	0x40005400
 8002378:	00602173 	.word	0x00602173

0800237c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <MX_SPI1_Init+0x74>)
 8002382:	4a1c      	ldr	r2, [pc, #112]	; (80023f4 <MX_SPI1_Init+0x78>)
 8002384:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <MX_SPI1_Init+0x74>)
 8002388:	2282      	movs	r2, #130	; 0x82
 800238a:	0052      	lsls	r2, r2, #1
 800238c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <MX_SPI1_Init+0x74>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002394:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <MX_SPI1_Init+0x74>)
 8002396:	22e0      	movs	r2, #224	; 0xe0
 8002398:	00d2      	lsls	r2, r2, #3
 800239a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800239c:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <MX_SPI1_Init+0x74>)
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023a2:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <MX_SPI1_Init+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <MX_SPI1_Init+0x74>)
 80023aa:	2280      	movs	r2, #128	; 0x80
 80023ac:	0092      	lsls	r2, r2, #2
 80023ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <MX_SPI1_Init+0x74>)
 80023b2:	2220      	movs	r2, #32
 80023b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <MX_SPI1_Init+0x74>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <MX_SPI1_Init+0x74>)
 80023be:	2200      	movs	r2, #0
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <MX_SPI1_Init+0x74>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <MX_SPI1_Init+0x74>)
 80023ca:	2207      	movs	r2, #7
 80023cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <MX_SPI1_Init+0x74>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <MX_SPI1_Init+0x74>)
 80023d6:	2208      	movs	r2, #8
 80023d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <MX_SPI1_Init+0x74>)
 80023dc:	0018      	movs	r0, r3
 80023de:	f003 ffc1 	bl	8006364 <HAL_SPI_Init>
 80023e2:	1e03      	subs	r3, r0, #0
 80023e4:	d001      	beq.n	80023ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023e6:	f000 f921 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200002dc 	.word	0x200002dc
 80023f4:	40013000 	.word	0x40013000

080023f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023fc:	4b23      	ldr	r3, [pc, #140]	; (800248c <MX_USART2_UART_Init+0x94>)
 80023fe:	4a24      	ldr	r2, [pc, #144]	; (8002490 <MX_USART2_UART_Init+0x98>)
 8002400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002402:	4b22      	ldr	r3, [pc, #136]	; (800248c <MX_USART2_UART_Init+0x94>)
 8002404:	22e1      	movs	r2, #225	; 0xe1
 8002406:	0252      	lsls	r2, r2, #9
 8002408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <MX_USART2_UART_Init+0x94>)
 800240c:	2280      	movs	r2, #128	; 0x80
 800240e:	0552      	lsls	r2, r2, #21
 8002410:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <MX_USART2_UART_Init+0x94>)
 8002414:	2200      	movs	r2, #0
 8002416:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002418:	4b1c      	ldr	r3, [pc, #112]	; (800248c <MX_USART2_UART_Init+0x94>)
 800241a:	2200      	movs	r2, #0
 800241c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <MX_USART2_UART_Init+0x94>)
 8002420:	220c      	movs	r2, #12
 8002422:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <MX_USART2_UART_Init+0x94>)
 8002426:	2200      	movs	r2, #0
 8002428:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <MX_USART2_UART_Init+0x94>)
 800242c:	2200      	movs	r2, #0
 800242e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002430:	4b16      	ldr	r3, [pc, #88]	; (800248c <MX_USART2_UART_Init+0x94>)
 8002432:	2200      	movs	r2, #0
 8002434:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <MX_USART2_UART_Init+0x94>)
 8002438:	2200      	movs	r2, #0
 800243a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <MX_USART2_UART_Init+0x94>)
 800243e:	2200      	movs	r2, #0
 8002440:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <MX_USART2_UART_Init+0x94>)
 8002444:	0018      	movs	r0, r3
 8002446:	f004 fe8f 	bl	8007168 <HAL_UART_Init>
 800244a:	1e03      	subs	r3, r0, #0
 800244c:	d001      	beq.n	8002452 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800244e:	f000 f8ed 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <MX_USART2_UART_Init+0x94>)
 8002454:	2100      	movs	r1, #0
 8002456:	0018      	movs	r0, r3
 8002458:	f006 f90a 	bl	8008670 <HAL_UARTEx_SetTxFifoThreshold>
 800245c:	1e03      	subs	r3, r0, #0
 800245e:	d001      	beq.n	8002464 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002460:	f000 f8e4 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <MX_USART2_UART_Init+0x94>)
 8002466:	2100      	movs	r1, #0
 8002468:	0018      	movs	r0, r3
 800246a:	f006 f941 	bl	80086f0 <HAL_UARTEx_SetRxFifoThreshold>
 800246e:	1e03      	subs	r3, r0, #0
 8002470:	d001      	beq.n	8002476 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002472:	f000 f8db 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <MX_USART2_UART_Init+0x94>)
 8002478:	0018      	movs	r0, r3
 800247a:	f006 f8bf 	bl	80085fc <HAL_UARTEx_DisableFifoMode>
 800247e:	1e03      	subs	r3, r0, #0
 8002480:	d001      	beq.n	8002486 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002482:	f000 f8d3 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000340 	.word	0x20000340
 8002490:	40004400 	.word	0x40004400

08002494 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <MX_USART3_UART_Init+0x60>)
 800249a:	4a17      	ldr	r2, [pc, #92]	; (80024f8 <MX_USART3_UART_Init+0x64>)
 800249c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <MX_USART3_UART_Init+0x60>)
 80024a0:	2296      	movs	r2, #150	; 0x96
 80024a2:	0192      	lsls	r2, r2, #6
 80024a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <MX_USART3_UART_Init+0x60>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <MX_USART3_UART_Init+0x60>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <MX_USART3_UART_Init+0x60>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <MX_USART3_UART_Init+0x60>)
 80024ba:	220c      	movs	r2, #12
 80024bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <MX_USART3_UART_Init+0x60>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <MX_USART3_UART_Init+0x60>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <MX_USART3_UART_Init+0x60>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <MX_USART3_UART_Init+0x60>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <MX_USART3_UART_Init+0x60>)
 80024d8:	2200      	movs	r2, #0
 80024da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <MX_USART3_UART_Init+0x60>)
 80024de:	0018      	movs	r0, r3
 80024e0:	f004 fe42 	bl	8007168 <HAL_UART_Init>
 80024e4:	1e03      	subs	r3, r0, #0
 80024e6:	d001      	beq.n	80024ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80024e8:	f000 f8a0 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	200003d4 	.word	0x200003d4
 80024f8:	40004800 	.word	0x40004800

080024fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <MX_DMA_Init+0x38>)
 8002504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <MX_DMA_Init+0x38>)
 8002508:	2101      	movs	r1, #1
 800250a:	430a      	orrs	r2, r1
 800250c:	639a      	str	r2, [r3, #56]	; 0x38
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <MX_DMA_Init+0x38>)
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	2201      	movs	r2, #1
 8002514:	4013      	ands	r3, r2
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	2009      	movs	r0, #9
 8002520:	f001 f802 	bl	8003528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002524:	2009      	movs	r0, #9
 8002526:	f001 f814 	bl	8003552 <HAL_NVIC_EnableIRQ>

}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b002      	add	sp, #8
 8002530:	bd80      	pop	{r7, pc}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	40021000 	.word	0x40021000

08002538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b08b      	sub	sp, #44	; 0x2c
 800253c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253e:	2414      	movs	r4, #20
 8002540:	193b      	adds	r3, r7, r4
 8002542:	0018      	movs	r0, r3
 8002544:	2314      	movs	r3, #20
 8002546:	001a      	movs	r2, r3
 8002548:	2100      	movs	r1, #0
 800254a:	f006 fa0c 	bl	8008966 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800254e:	4b34      	ldr	r3, [pc, #208]	; (8002620 <MX_GPIO_Init+0xe8>)
 8002550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002552:	4b33      	ldr	r3, [pc, #204]	; (8002620 <MX_GPIO_Init+0xe8>)
 8002554:	2104      	movs	r1, #4
 8002556:	430a      	orrs	r2, r1
 8002558:	635a      	str	r2, [r3, #52]	; 0x34
 800255a:	4b31      	ldr	r3, [pc, #196]	; (8002620 <MX_GPIO_Init+0xe8>)
 800255c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255e:	2204      	movs	r2, #4
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002566:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <MX_GPIO_Init+0xe8>)
 8002568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800256a:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <MX_GPIO_Init+0xe8>)
 800256c:	2120      	movs	r1, #32
 800256e:	430a      	orrs	r2, r1
 8002570:	635a      	str	r2, [r3, #52]	; 0x34
 8002572:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <MX_GPIO_Init+0xe8>)
 8002574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002576:	2220      	movs	r2, #32
 8002578:	4013      	ands	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	4b28      	ldr	r3, [pc, #160]	; (8002620 <MX_GPIO_Init+0xe8>)
 8002580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002582:	4b27      	ldr	r3, [pc, #156]	; (8002620 <MX_GPIO_Init+0xe8>)
 8002584:	2101      	movs	r1, #1
 8002586:	430a      	orrs	r2, r1
 8002588:	635a      	str	r2, [r3, #52]	; 0x34
 800258a:	4b25      	ldr	r3, [pc, #148]	; (8002620 <MX_GPIO_Init+0xe8>)
 800258c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258e:	2201      	movs	r2, #1
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002596:	4b22      	ldr	r3, [pc, #136]	; (8002620 <MX_GPIO_Init+0xe8>)
 8002598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800259a:	4b21      	ldr	r3, [pc, #132]	; (8002620 <MX_GPIO_Init+0xe8>)
 800259c:	2102      	movs	r1, #2
 800259e:	430a      	orrs	r2, r1
 80025a0:	635a      	str	r2, [r3, #52]	; 0x34
 80025a2:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <MX_GPIO_Init+0xe8>)
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	2202      	movs	r2, #2
 80025a8:	4013      	ands	r3, r2
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ae:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <MX_GPIO_Init+0xe8>)
 80025b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <MX_GPIO_Init+0xe8>)
 80025b4:	2108      	movs	r1, #8
 80025b6:	430a      	orrs	r2, r1
 80025b8:	635a      	str	r2, [r3, #52]	; 0x34
 80025ba:	4b19      	ldr	r3, [pc, #100]	; (8002620 <MX_GPIO_Init+0xe8>)
 80025bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025be:	2208      	movs	r2, #8
 80025c0:	4013      	ands	r3, r2
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <MX_GPIO_Init+0xec>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	2101      	movs	r1, #1
 80025cc:	0018      	movs	r0, r3
 80025ce:	f002 fa60 	bl	8004a92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025d2:	193b      	adds	r3, r7, r4
 80025d4:	2280      	movs	r2, #128	; 0x80
 80025d6:	0192      	lsls	r2, r2, #6
 80025d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025da:	193b      	adds	r3, r7, r4
 80025dc:	2200      	movs	r2, #0
 80025de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	193b      	adds	r3, r7, r4
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e6:	193b      	adds	r3, r7, r4
 80025e8:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <MX_GPIO_Init+0xf0>)
 80025ea:	0019      	movs	r1, r3
 80025ec:	0010      	movs	r0, r2
 80025ee:	f001 ffff 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025f2:	0021      	movs	r1, r4
 80025f4:	187b      	adds	r3, r7, r1
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fa:	187b      	adds	r3, r7, r1
 80025fc:	2201      	movs	r2, #1
 80025fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	187b      	adds	r3, r7, r1
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002606:	187b      	adds	r3, r7, r1
 8002608:	2203      	movs	r2, #3
 800260a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260c:	187b      	adds	r3, r7, r1
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <MX_GPIO_Init+0xec>)
 8002610:	0019      	movs	r1, r3
 8002612:	0010      	movs	r0, r2
 8002614:	f001 ffec 	bl	80045f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b00b      	add	sp, #44	; 0x2c
 800261e:	bd90      	pop	{r4, r7, pc}
 8002620:	40021000 	.word	0x40021000
 8002624:	50000400 	.word	0x50000400
 8002628:	50000800 	.word	0x50000800

0800262c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002630:	b672      	cpsid	i
}
 8002632:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002634:	e7fe      	b.n	8002634 <Error_Handler+0x8>
	...

08002638 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800263e:	f000 fa3b 	bl	8002ab8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002642:	4b5b      	ldr	r3, [pc, #364]	; (80027b0 <SSD1306_Init+0x178>)
 8002644:	485b      	ldr	r0, [pc, #364]	; (80027b4 <SSD1306_Init+0x17c>)
 8002646:	2201      	movs	r2, #1
 8002648:	2178      	movs	r1, #120	; 0x78
 800264a:	f002 fc0d 	bl	8004e68 <HAL_I2C_IsDeviceReady>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d001      	beq.n	8002656 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8002652:	2300      	movs	r3, #0
 8002654:	e0a8      	b.n	80027a8 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002656:	4b58      	ldr	r3, [pc, #352]	; (80027b8 <SSD1306_Init+0x180>)
 8002658:	607b      	str	r3, [r7, #4]
	while(p>0)
 800265a:	e002      	b.n	8002662 <SSD1306_Init+0x2a>
		p--;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3b01      	subs	r3, #1
 8002660:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f9      	bne.n	800265c <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002668:	22ae      	movs	r2, #174	; 0xae
 800266a:	2100      	movs	r1, #0
 800266c:	2078      	movs	r0, #120	; 0x78
 800266e:	f000 faa3 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002672:	2220      	movs	r2, #32
 8002674:	2100      	movs	r1, #0
 8002676:	2078      	movs	r0, #120	; 0x78
 8002678:	f000 fa9e 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800267c:	2210      	movs	r2, #16
 800267e:	2100      	movs	r1, #0
 8002680:	2078      	movs	r0, #120	; 0x78
 8002682:	f000 fa99 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002686:	22b0      	movs	r2, #176	; 0xb0
 8002688:	2100      	movs	r1, #0
 800268a:	2078      	movs	r0, #120	; 0x78
 800268c:	f000 fa94 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002690:	22c8      	movs	r2, #200	; 0xc8
 8002692:	2100      	movs	r1, #0
 8002694:	2078      	movs	r0, #120	; 0x78
 8002696:	f000 fa8f 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	2078      	movs	r0, #120	; 0x78
 80026a0:	f000 fa8a 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80026a4:	2210      	movs	r2, #16
 80026a6:	2100      	movs	r1, #0
 80026a8:	2078      	movs	r0, #120	; 0x78
 80026aa:	f000 fa85 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80026ae:	2240      	movs	r2, #64	; 0x40
 80026b0:	2100      	movs	r1, #0
 80026b2:	2078      	movs	r0, #120	; 0x78
 80026b4:	f000 fa80 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80026b8:	2281      	movs	r2, #129	; 0x81
 80026ba:	2100      	movs	r1, #0
 80026bc:	2078      	movs	r0, #120	; 0x78
 80026be:	f000 fa7b 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80026c2:	22ff      	movs	r2, #255	; 0xff
 80026c4:	2100      	movs	r1, #0
 80026c6:	2078      	movs	r0, #120	; 0x78
 80026c8:	f000 fa76 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80026cc:	22a1      	movs	r2, #161	; 0xa1
 80026ce:	2100      	movs	r1, #0
 80026d0:	2078      	movs	r0, #120	; 0x78
 80026d2:	f000 fa71 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80026d6:	22a6      	movs	r2, #166	; 0xa6
 80026d8:	2100      	movs	r1, #0
 80026da:	2078      	movs	r0, #120	; 0x78
 80026dc:	f000 fa6c 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80026e0:	22a8      	movs	r2, #168	; 0xa8
 80026e2:	2100      	movs	r1, #0
 80026e4:	2078      	movs	r0, #120	; 0x78
 80026e6:	f000 fa67 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80026ea:	223f      	movs	r2, #63	; 0x3f
 80026ec:	2100      	movs	r1, #0
 80026ee:	2078      	movs	r0, #120	; 0x78
 80026f0:	f000 fa62 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80026f4:	22a4      	movs	r2, #164	; 0xa4
 80026f6:	2100      	movs	r1, #0
 80026f8:	2078      	movs	r0, #120	; 0x78
 80026fa:	f000 fa5d 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80026fe:	22d3      	movs	r2, #211	; 0xd3
 8002700:	2100      	movs	r1, #0
 8002702:	2078      	movs	r0, #120	; 0x78
 8002704:	f000 fa58 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002708:	2200      	movs	r2, #0
 800270a:	2100      	movs	r1, #0
 800270c:	2078      	movs	r0, #120	; 0x78
 800270e:	f000 fa53 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002712:	22d5      	movs	r2, #213	; 0xd5
 8002714:	2100      	movs	r1, #0
 8002716:	2078      	movs	r0, #120	; 0x78
 8002718:	f000 fa4e 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800271c:	22f0      	movs	r2, #240	; 0xf0
 800271e:	2100      	movs	r1, #0
 8002720:	2078      	movs	r0, #120	; 0x78
 8002722:	f000 fa49 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002726:	22d9      	movs	r2, #217	; 0xd9
 8002728:	2100      	movs	r1, #0
 800272a:	2078      	movs	r0, #120	; 0x78
 800272c:	f000 fa44 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002730:	2222      	movs	r2, #34	; 0x22
 8002732:	2100      	movs	r1, #0
 8002734:	2078      	movs	r0, #120	; 0x78
 8002736:	f000 fa3f 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800273a:	22da      	movs	r2, #218	; 0xda
 800273c:	2100      	movs	r1, #0
 800273e:	2078      	movs	r0, #120	; 0x78
 8002740:	f000 fa3a 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002744:	2212      	movs	r2, #18
 8002746:	2100      	movs	r1, #0
 8002748:	2078      	movs	r0, #120	; 0x78
 800274a:	f000 fa35 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800274e:	22db      	movs	r2, #219	; 0xdb
 8002750:	2100      	movs	r1, #0
 8002752:	2078      	movs	r0, #120	; 0x78
 8002754:	f000 fa30 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002758:	2220      	movs	r2, #32
 800275a:	2100      	movs	r1, #0
 800275c:	2078      	movs	r0, #120	; 0x78
 800275e:	f000 fa2b 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002762:	228d      	movs	r2, #141	; 0x8d
 8002764:	2100      	movs	r1, #0
 8002766:	2078      	movs	r0, #120	; 0x78
 8002768:	f000 fa26 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800276c:	2214      	movs	r2, #20
 800276e:	2100      	movs	r1, #0
 8002770:	2078      	movs	r0, #120	; 0x78
 8002772:	f000 fa21 	bl	8002bb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002776:	22af      	movs	r2, #175	; 0xaf
 8002778:	2100      	movs	r1, #0
 800277a:	2078      	movs	r0, #120	; 0x78
 800277c:	f000 fa1c 	bl	8002bb8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002780:	222e      	movs	r2, #46	; 0x2e
 8002782:	2100      	movs	r1, #0
 8002784:	2078      	movs	r0, #120	; 0x78
 8002786:	f000 fa17 	bl	8002bb8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800278a:	2000      	movs	r0, #0
 800278c:	f000 f84c 	bl	8002828 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002790:	f000 f816 	bl	80027c0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <SSD1306_Init+0x184>)
 8002796:	2200      	movs	r2, #0
 8002798:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <SSD1306_Init+0x184>)
 800279c:	2200      	movs	r2, #0
 800279e:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <SSD1306_Init+0x184>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	00004e20 	.word	0x00004e20
 80027b4:	20000288 	.word	0x20000288
 80027b8:	000009c4 	.word	0x000009c4
 80027bc:	20001160 	.word	0x20001160

080027c0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80027c6:	1dfb      	adds	r3, r7, #7
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e021      	b.n	8002812 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	3b50      	subs	r3, #80	; 0x50
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	001a      	movs	r2, r3
 80027d8:	2100      	movs	r1, #0
 80027da:	2078      	movs	r0, #120	; 0x78
 80027dc:	f000 f9ec 	bl	8002bb8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2100      	movs	r1, #0
 80027e4:	2078      	movs	r0, #120	; 0x78
 80027e6:	f000 f9e7 	bl	8002bb8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80027ea:	2210      	movs	r2, #16
 80027ec:	2100      	movs	r1, #0
 80027ee:	2078      	movs	r0, #120	; 0x78
 80027f0:	f000 f9e2 	bl	8002bb8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80027f4:	1dfb      	adds	r3, r7, #7
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	01da      	lsls	r2, r3, #7
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <SSD1306_UpdateScreen+0x64>)
 80027fc:	18d2      	adds	r2, r2, r3
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	2140      	movs	r1, #64	; 0x40
 8002802:	2078      	movs	r0, #120	; 0x78
 8002804:	f000 f96c 	bl	8002ae0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002808:	1dfb      	adds	r3, r7, #7
 800280a:	781a      	ldrb	r2, [r3, #0]
 800280c:	1dfb      	adds	r3, r7, #7
 800280e:	3201      	adds	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	1dfb      	adds	r3, r7, #7
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b07      	cmp	r3, #7
 8002818:	d9d9      	bls.n	80027ce <SSD1306_UpdateScreen+0xe>
	}
}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b002      	add	sp, #8
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000d60 	.word	0x20000d60

08002828 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	0002      	movs	r2, r0
 8002830:	1dfb      	adds	r3, r7, #7
 8002832:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002834:	1dfb      	adds	r3, r7, #7
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <SSD1306_Fill+0x18>
 800283c:	2300      	movs	r3, #0
 800283e:	e000      	b.n	8002842 <SSD1306_Fill+0x1a>
 8002840:	23ff      	movs	r3, #255	; 0xff
 8002842:	2280      	movs	r2, #128	; 0x80
 8002844:	00d2      	lsls	r2, r2, #3
 8002846:	4804      	ldr	r0, [pc, #16]	; (8002858 <SSD1306_Fill+0x30>)
 8002848:	0019      	movs	r1, r3
 800284a:	f006 f88c 	bl	8008966 <memset>
}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	46bd      	mov	sp, r7
 8002852:	b002      	add	sp, #8
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	20000d60 	.word	0x20000d60

0800285c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800285c:	b590      	push	{r4, r7, lr}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	0004      	movs	r4, r0
 8002864:	0008      	movs	r0, r1
 8002866:	0011      	movs	r1, r2
 8002868:	1dbb      	adds	r3, r7, #6
 800286a:	1c22      	adds	r2, r4, #0
 800286c:	801a      	strh	r2, [r3, #0]
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	1c02      	adds	r2, r0, #0
 8002872:	801a      	strh	r2, [r3, #0]
 8002874:	1cfb      	adds	r3, r7, #3
 8002876:	1c0a      	adds	r2, r1, #0
 8002878:	701a      	strb	r2, [r3, #0]
	if (
 800287a:	1dbb      	adds	r3, r7, #6
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	2b7f      	cmp	r3, #127	; 0x7f
 8002880:	d852      	bhi.n	8002928 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	2b3f      	cmp	r3, #63	; 0x3f
 8002888:	d84e      	bhi.n	8002928 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800288a:	4b29      	ldr	r3, [pc, #164]	; (8002930 <SSD1306_DrawPixel+0xd4>)
 800288c:	791b      	ldrb	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8002892:	1cfb      	adds	r3, r7, #3
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	425a      	negs	r2, r3
 8002898:	4153      	adcs	r3, r2
 800289a:	b2da      	uxtb	r2, r3
 800289c:	1cfb      	adds	r3, r7, #3
 800289e:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80028a0:	1cfb      	adds	r3, r7, #3
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d11e      	bne.n	80028e6 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80028a8:	1dbb      	adds	r3, r7, #6
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	1d3b      	adds	r3, r7, #4
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	08db      	lsrs	r3, r3, #3
 80028b2:	b298      	uxth	r0, r3
 80028b4:	0003      	movs	r3, r0
 80028b6:	01db      	lsls	r3, r3, #7
 80028b8:	18d3      	adds	r3, r2, r3
 80028ba:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <SSD1306_DrawPixel+0xd8>)
 80028bc:	5cd3      	ldrb	r3, [r2, r3]
 80028be:	b25a      	sxtb	r2, r3
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	2107      	movs	r1, #7
 80028c6:	400b      	ands	r3, r1
 80028c8:	2101      	movs	r1, #1
 80028ca:	4099      	lsls	r1, r3
 80028cc:	000b      	movs	r3, r1
 80028ce:	b25b      	sxtb	r3, r3
 80028d0:	4313      	orrs	r3, r2
 80028d2:	b259      	sxtb	r1, r3
 80028d4:	1dbb      	adds	r3, r7, #6
 80028d6:	881a      	ldrh	r2, [r3, #0]
 80028d8:	0003      	movs	r3, r0
 80028da:	01db      	lsls	r3, r3, #7
 80028dc:	18d3      	adds	r3, r2, r3
 80028de:	b2c9      	uxtb	r1, r1
 80028e0:	4a14      	ldr	r2, [pc, #80]	; (8002934 <SSD1306_DrawPixel+0xd8>)
 80028e2:	54d1      	strb	r1, [r2, r3]
 80028e4:	e021      	b.n	800292a <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80028e6:	1dbb      	adds	r3, r7, #6
 80028e8:	881a      	ldrh	r2, [r3, #0]
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	08db      	lsrs	r3, r3, #3
 80028f0:	b298      	uxth	r0, r3
 80028f2:	0003      	movs	r3, r0
 80028f4:	01db      	lsls	r3, r3, #7
 80028f6:	18d3      	adds	r3, r2, r3
 80028f8:	4a0e      	ldr	r2, [pc, #56]	; (8002934 <SSD1306_DrawPixel+0xd8>)
 80028fa:	5cd3      	ldrb	r3, [r2, r3]
 80028fc:	b25b      	sxtb	r3, r3
 80028fe:	1d3a      	adds	r2, r7, #4
 8002900:	8812      	ldrh	r2, [r2, #0]
 8002902:	2107      	movs	r1, #7
 8002904:	400a      	ands	r2, r1
 8002906:	2101      	movs	r1, #1
 8002908:	4091      	lsls	r1, r2
 800290a:	000a      	movs	r2, r1
 800290c:	b252      	sxtb	r2, r2
 800290e:	43d2      	mvns	r2, r2
 8002910:	b252      	sxtb	r2, r2
 8002912:	4013      	ands	r3, r2
 8002914:	b259      	sxtb	r1, r3
 8002916:	1dbb      	adds	r3, r7, #6
 8002918:	881a      	ldrh	r2, [r3, #0]
 800291a:	0003      	movs	r3, r0
 800291c:	01db      	lsls	r3, r3, #7
 800291e:	18d3      	adds	r3, r2, r3
 8002920:	b2c9      	uxtb	r1, r1
 8002922:	4a04      	ldr	r2, [pc, #16]	; (8002934 <SSD1306_DrawPixel+0xd8>)
 8002924:	54d1      	strb	r1, [r2, r3]
 8002926:	e000      	b.n	800292a <SSD1306_DrawPixel+0xce>
		return;
 8002928:	46c0      	nop			; (mov r8, r8)
	}
}
 800292a:	46bd      	mov	sp, r7
 800292c:	b003      	add	sp, #12
 800292e:	bd90      	pop	{r4, r7, pc}
 8002930:	20001160 	.word	0x20001160
 8002934:	20000d60 	.word	0x20000d60

08002938 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	0002      	movs	r2, r0
 8002940:	1dbb      	adds	r3, r7, #6
 8002942:	801a      	strh	r2, [r3, #0]
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	1c0a      	adds	r2, r1, #0
 8002948:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <SSD1306_GotoXY+0x2c>)
 800294c:	1dba      	adds	r2, r7, #6
 800294e:	8812      	ldrh	r2, [r2, #0]
 8002950:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8002952:	4b04      	ldr	r3, [pc, #16]	; (8002964 <SSD1306_GotoXY+0x2c>)
 8002954:	1d3a      	adds	r2, r7, #4
 8002956:	8812      	ldrh	r2, [r2, #0]
 8002958:	805a      	strh	r2, [r3, #2]
}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	46bd      	mov	sp, r7
 800295e:	b002      	add	sp, #8
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	20001160 	.word	0x20001160

08002968 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6039      	str	r1, [r7, #0]
 8002970:	0011      	movs	r1, r2
 8002972:	1dfb      	adds	r3, r7, #7
 8002974:	1c02      	adds	r2, r0, #0
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	1dbb      	adds	r3, r7, #6
 800297a:	1c0a      	adds	r2, r1, #0
 800297c:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800297e:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <SSD1306_Putc+0x100>)
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	001a      	movs	r2, r3
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	18d3      	adds	r3, r2, r3
	if (
 800298a:	2b7f      	cmp	r3, #127	; 0x7f
 800298c:	dc07      	bgt.n	800299e <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800298e:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <SSD1306_Putc+0x100>)
 8002990:	885b      	ldrh	r3, [r3, #2]
 8002992:	001a      	movs	r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	785b      	ldrb	r3, [r3, #1]
 8002998:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800299a:	2b3f      	cmp	r3, #63	; 0x3f
 800299c:	dd01      	ble.n	80029a2 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	e05e      	b.n	8002a60 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	e04a      	b.n	8002a3e <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	1dfb      	adds	r3, r7, #7
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	3b20      	subs	r3, #32
 80029b2:	6839      	ldr	r1, [r7, #0]
 80029b4:	7849      	ldrb	r1, [r1, #1]
 80029b6:	434b      	muls	r3, r1
 80029b8:	0019      	movs	r1, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	18cb      	adds	r3, r1, r3
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	18d3      	adds	r3, r2, r3
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	e02f      	b.n	8002a2c <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	409a      	lsls	r2, r3
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	4013      	ands	r3, r2
 80029d8:	d011      	beq.n	80029fe <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80029da:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <SSD1306_Putc+0x100>)
 80029dc:	881a      	ldrh	r2, [r3, #0]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	18d3      	adds	r3, r2, r3
 80029e4:	b298      	uxth	r0, r3
 80029e6:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <SSD1306_Putc+0x100>)
 80029e8:	885a      	ldrh	r2, [r3, #2]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	18d3      	adds	r3, r2, r3
 80029f0:	b299      	uxth	r1, r3
 80029f2:	1dbb      	adds	r3, r7, #6
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	001a      	movs	r2, r3
 80029f8:	f7ff ff30 	bl	800285c <SSD1306_DrawPixel>
 80029fc:	e013      	b.n	8002a26 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80029fe:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <SSD1306_Putc+0x100>)
 8002a00:	881a      	ldrh	r2, [r3, #0]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	18d3      	adds	r3, r2, r3
 8002a08:	b298      	uxth	r0, r3
 8002a0a:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <SSD1306_Putc+0x100>)
 8002a0c:	885a      	ldrh	r2, [r3, #2]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	18d3      	adds	r3, r2, r3
 8002a14:	b299      	uxth	r1, r3
 8002a16:	1dbb      	adds	r3, r7, #6
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	425a      	negs	r2, r3
 8002a1c:	4153      	adcs	r3, r2
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	001a      	movs	r2, r3
 8002a22:	f7ff ff1b 	bl	800285c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	001a      	movs	r2, r3
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d3c9      	bcc.n	80029cc <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	785b      	ldrb	r3, [r3, #1]
 8002a42:	001a      	movs	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d3ae      	bcc.n	80029a8 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <SSD1306_Putc+0x100>)
 8002a4c:	881a      	ldrh	r2, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	18d3      	adds	r3, r2, r3
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <SSD1306_Putc+0x100>)
 8002a5a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002a5c:	1dfb      	adds	r3, r7, #7
 8002a5e:	781b      	ldrb	r3, [r3, #0]
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b006      	add	sp, #24
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20001160 	.word	0x20001160

08002a6c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8002a7a:	e013      	b.n	8002aa4 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	7818      	ldrb	r0, [r3, #0]
 8002a80:	1dfb      	adds	r3, r7, #7
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	0019      	movs	r1, r3
 8002a88:	f7ff ff6e 	bl	8002968 <SSD1306_Putc>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	001a      	movs	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d002      	beq.n	8002a9e <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	e008      	b.n	8002ab0 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e7      	bne.n	8002a7c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	781b      	ldrb	r3, [r3, #0]
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b004      	add	sp, #16
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <ssd1306_I2C_Init+0x24>)
 8002ac0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002ac2:	e002      	b.n	8002aca <ssd1306_I2C_Init+0x12>
		p--;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f9      	bne.n	8002ac4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b002      	add	sp, #8
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	0003d090 	.word	0x0003d090

08002ae0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002ae0:	b5b0      	push	{r4, r5, r7, lr}
 8002ae2:	b0c6      	sub	sp, #280	; 0x118
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	0004      	movs	r4, r0
 8002ae8:	0008      	movs	r0, r1
 8002aea:	603a      	str	r2, [r7, #0]
 8002aec:	0019      	movs	r1, r3
 8002aee:	4b2d      	ldr	r3, [pc, #180]	; (8002ba4 <ssd1306_I2C_WriteMulti+0xc4>)
 8002af0:	2588      	movs	r5, #136	; 0x88
 8002af2:	006d      	lsls	r5, r5, #1
 8002af4:	195b      	adds	r3, r3, r5
 8002af6:	19db      	adds	r3, r3, r7
 8002af8:	1c22      	adds	r2, r4, #0
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <ssd1306_I2C_WriteMulti+0xc8>)
 8002afe:	002c      	movs	r4, r5
 8002b00:	191b      	adds	r3, r3, r4
 8002b02:	19db      	adds	r3, r3, r7
 8002b04:	1c02      	adds	r2, r0, #0
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	4b28      	ldr	r3, [pc, #160]	; (8002bac <ssd1306_I2C_WriteMulti+0xcc>)
 8002b0a:	0020      	movs	r0, r4
 8002b0c:	181b      	adds	r3, r3, r0
 8002b0e:	19db      	adds	r3, r3, r7
 8002b10:	1c0a      	adds	r2, r1, #0
 8002b12:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002b14:	4b26      	ldr	r3, [pc, #152]	; (8002bb0 <ssd1306_I2C_WriteMulti+0xd0>)
 8002b16:	181b      	adds	r3, r3, r0
 8002b18:	19db      	adds	r3, r3, r7
 8002b1a:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <ssd1306_I2C_WriteMulti+0xc8>)
 8002b1c:	1812      	adds	r2, r2, r0
 8002b1e:	19d2      	adds	r2, r2, r7
 8002b20:	7812      	ldrb	r2, [r2, #0]
 8002b22:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002b24:	2310      	movs	r3, #16
 8002b26:	33ff      	adds	r3, #255	; 0xff
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	e014      	b.n	8002b5a <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8002b30:	2010      	movs	r0, #16
 8002b32:	30ff      	adds	r0, #255	; 0xff
 8002b34:	183b      	adds	r3, r7, r0
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	18d2      	adds	r2, r2, r3
 8002b3c:	183b      	adds	r3, r7, r0
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	3301      	adds	r3, #1
 8002b42:	7811      	ldrb	r1, [r2, #0]
 8002b44:	4a1a      	ldr	r2, [pc, #104]	; (8002bb0 <ssd1306_I2C_WriteMulti+0xd0>)
 8002b46:	2488      	movs	r4, #136	; 0x88
 8002b48:	0064      	lsls	r4, r4, #1
 8002b4a:	1912      	adds	r2, r2, r4
 8002b4c:	19d2      	adds	r2, r2, r7
 8002b4e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002b50:	183b      	adds	r3, r7, r0
 8002b52:	781a      	ldrb	r2, [r3, #0]
 8002b54:	183b      	adds	r3, r7, r0
 8002b56:	3201      	adds	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	2310      	movs	r3, #16
 8002b5c:	33ff      	adds	r3, #255	; 0xff
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	4a11      	ldr	r2, [pc, #68]	; (8002bac <ssd1306_I2C_WriteMulti+0xcc>)
 8002b66:	2188      	movs	r1, #136	; 0x88
 8002b68:	0049      	lsls	r1, r1, #1
 8002b6a:	1852      	adds	r2, r2, r1
 8002b6c:	19d2      	adds	r2, r2, r7
 8002b6e:	8812      	ldrh	r2, [r2, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d8dd      	bhi.n	8002b30 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <ssd1306_I2C_WriteMulti+0xc4>)
 8002b76:	000a      	movs	r2, r1
 8002b78:	189b      	adds	r3, r3, r2
 8002b7a:	19db      	adds	r3, r3, r7
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	b299      	uxth	r1, r3
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <ssd1306_I2C_WriteMulti+0xcc>)
 8002b82:	189b      	adds	r3, r3, r2
 8002b84:	19db      	adds	r3, r3, r7
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	220c      	movs	r2, #12
 8002b8e:	18ba      	adds	r2, r7, r2
 8002b90:	4808      	ldr	r0, [pc, #32]	; (8002bb4 <ssd1306_I2C_WriteMulti+0xd4>)
 8002b92:	240a      	movs	r4, #10
 8002b94:	9400      	str	r4, [sp, #0]
 8002b96:	f002 f85f 	bl	8004c58 <HAL_I2C_Master_Transmit>
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b044      	add	sp, #272	; 0x110
 8002ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	fffffef7 	.word	0xfffffef7
 8002ba8:	fffffef6 	.word	0xfffffef6
 8002bac:	fffffef4 	.word	0xfffffef4
 8002bb0:	fffffefc 	.word	0xfffffefc
 8002bb4:	20000288 	.word	0x20000288

08002bb8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	0004      	movs	r4, r0
 8002bc0:	0008      	movs	r0, r1
 8002bc2:	0011      	movs	r1, r2
 8002bc4:	1dfb      	adds	r3, r7, #7
 8002bc6:	1c22      	adds	r2, r4, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	1dbb      	adds	r3, r7, #6
 8002bcc:	1c02      	adds	r2, r0, #0
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	1d7b      	adds	r3, r7, #5
 8002bd2:	1c0a      	adds	r2, r1, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8002bd6:	200c      	movs	r0, #12
 8002bd8:	183b      	adds	r3, r7, r0
 8002bda:	1dba      	adds	r2, r7, #6
 8002bdc:	7812      	ldrb	r2, [r2, #0]
 8002bde:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8002be0:	183b      	adds	r3, r7, r0
 8002be2:	1d7a      	adds	r2, r7, #5
 8002be4:	7812      	ldrb	r2, [r2, #0]
 8002be6:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002be8:	1dfb      	adds	r3, r7, #7
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b299      	uxth	r1, r3
 8002bee:	183a      	adds	r2, r7, r0
 8002bf0:	4804      	ldr	r0, [pc, #16]	; (8002c04 <ssd1306_I2C_Write+0x4c>)
 8002bf2:	230a      	movs	r3, #10
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	f002 f82e 	bl	8004c58 <HAL_I2C_Master_Transmit>
}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b005      	add	sp, #20
 8002c02:	bd90      	pop	{r4, r7, pc}
 8002c04:	20000288 	.word	0x20000288

08002c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <HAL_MspInit+0x54>)
 8002c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c12:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_MspInit+0x54>)
 8002c14:	2101      	movs	r1, #1
 8002c16:	430a      	orrs	r2, r1
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_MspInit+0x54>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4013      	ands	r3, r2
 8002c22:	607b      	str	r3, [r7, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <HAL_MspInit+0x54>)
 8002c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_MspInit+0x54>)
 8002c2c:	2180      	movs	r1, #128	; 0x80
 8002c2e:	0549      	lsls	r1, r1, #21
 8002c30:	430a      	orrs	r2, r1
 8002c32:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_MspInit+0x54>)
 8002c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	055b      	lsls	r3, r3, #21
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 1, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2101      	movs	r1, #1
 8002c46:	2003      	movs	r0, #3
 8002c48:	f000 fc6e 	bl	8003528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002c4c:	2003      	movs	r0, #3
 8002c4e:	f000 fc80 	bl	8003552 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b002      	add	sp, #8
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	40021000 	.word	0x40021000

08002c60 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_CRC_MspInit+0x38>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d10d      	bne.n	8002c8e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_CRC_MspInit+0x3c>)
 8002c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_CRC_MspInit+0x3c>)
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	0149      	lsls	r1, r1, #5
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_CRC_MspInit+0x3c>)
 8002c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	015b      	lsls	r3, r3, #5
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b004      	add	sp, #16
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	40023000 	.word	0x40023000
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <HAL_CRC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a06      	ldr	r2, [pc, #24]	; (8002cc8 <HAL_CRC_MspDeInit+0x28>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d105      	bne.n	8002cbe <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_CRC_MspDeInit+0x2c>)
 8002cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_CRC_MspDeInit+0x2c>)
 8002cb8:	4905      	ldr	r1, [pc, #20]	; (8002cd0 <HAL_CRC_MspDeInit+0x30>)
 8002cba:	400a      	ands	r2, r1
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }

}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b002      	add	sp, #8
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	40023000 	.word	0x40023000
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	ffffefff 	.word	0xffffefff

08002cd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b091      	sub	sp, #68	; 0x44
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	232c      	movs	r3, #44	; 0x2c
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	2314      	movs	r3, #20
 8002ce4:	001a      	movs	r2, r3
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	f005 fe3d 	bl	8008966 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cec:	2410      	movs	r4, #16
 8002cee:	193b      	adds	r3, r7, r4
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	231c      	movs	r3, #28
 8002cf4:	001a      	movs	r2, r3
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	f005 fe35 	bl	8008966 <memset>
  if(hi2c->Instance==I2C1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a22      	ldr	r2, [pc, #136]	; (8002d8c <HAL_I2C_MspInit+0xb8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d13e      	bne.n	8002d84 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d06:	193b      	adds	r3, r7, r4
 8002d08:	2220      	movs	r2, #32
 8002d0a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d0c:	193b      	adds	r3, r7, r4
 8002d0e:	2200      	movs	r2, #0
 8002d10:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d12:	193b      	adds	r3, r7, r4
 8002d14:	0018      	movs	r0, r3
 8002d16:	f003 f9f1 	bl	80060fc <HAL_RCCEx_PeriphCLKConfig>
 8002d1a:	1e03      	subs	r3, r0, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002d1e:	f7ff fc85 	bl	800262c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d22:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <HAL_I2C_MspInit+0xbc>)
 8002d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d26:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <HAL_I2C_MspInit+0xbc>)
 8002d28:	2102      	movs	r1, #2
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d2e:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <HAL_I2C_MspInit+0xbc>)
 8002d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d32:	2202      	movs	r2, #2
 8002d34:	4013      	ands	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	22c0      	movs	r2, #192	; 0xc0
 8002d40:	0092      	lsls	r2, r2, #2
 8002d42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	2212      	movs	r2, #18
 8002d48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	187b      	adds	r3, r7, r1
 8002d52:	2200      	movs	r2, #0
 8002d54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	2206      	movs	r2, #6
 8002d5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	4a0d      	ldr	r2, [pc, #52]	; (8002d94 <HAL_I2C_MspInit+0xc0>)
 8002d60:	0019      	movs	r1, r3
 8002d62:	0010      	movs	r0, r2
 8002d64:	f001 fc44 	bl	80045f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_I2C_MspInit+0xbc>)
 8002d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <HAL_I2C_MspInit+0xbc>)
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	0389      	lsls	r1, r1, #14
 8002d72:	430a      	orrs	r2, r1
 8002d74:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_I2C_MspInit+0xbc>)
 8002d78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d7a:	2380      	movs	r3, #128	; 0x80
 8002d7c:	039b      	lsls	r3, r3, #14
 8002d7e:	4013      	ands	r3, r2
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b011      	add	sp, #68	; 0x44
 8002d8a:	bd90      	pop	{r4, r7, pc}
 8002d8c:	40005400 	.word	0x40005400
 8002d90:	40021000 	.word	0x40021000
 8002d94:	50000400 	.word	0x50000400

08002d98 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0d      	ldr	r2, [pc, #52]	; (8002ddc <HAL_I2C_MspDeInit+0x44>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d113      	bne.n	8002dd2 <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_I2C_MspDeInit+0x48>)
 8002dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dae:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <HAL_I2C_MspDeInit+0x48>)
 8002db0:	490c      	ldr	r1, [pc, #48]	; (8002de4 <HAL_I2C_MspDeInit+0x4c>)
 8002db2:	400a      	ands	r2, r1
 8002db4:	63da      	str	r2, [r3, #60]	; 0x3c

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <HAL_I2C_MspDeInit+0x50>)
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	0010      	movs	r0, r2
 8002dc0:	f001 fd7a 	bl	80048b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <HAL_I2C_MspDeInit+0x50>)
 8002dca:	0019      	movs	r1, r3
 8002dcc:	0010      	movs	r0, r2
 8002dce:	f001 fd73 	bl	80048b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b002      	add	sp, #8
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	40005400 	.word	0x40005400
 8002de0:	40021000 	.word	0x40021000
 8002de4:	ffdfffff 	.word	0xffdfffff
 8002de8:	50000400 	.word	0x50000400

08002dec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b08b      	sub	sp, #44	; 0x2c
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	2414      	movs	r4, #20
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	0018      	movs	r0, r3
 8002dfa:	2314      	movs	r3, #20
 8002dfc:	001a      	movs	r2, r3
 8002dfe:	2100      	movs	r1, #0
 8002e00:	f005 fdb1 	bl	8008966 <memset>
  if(hspi->Instance==SPI1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <HAL_SPI_MspInit+0x8c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d130      	bne.n	8002e70 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_SPI_MspInit+0x90>)
 8002e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_SPI_MspInit+0x90>)
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	0149      	lsls	r1, r1, #5
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e1c:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_SPI_MspInit+0x90>)
 8002e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	015b      	lsls	r3, r3, #5
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <HAL_SPI_MspInit+0x90>)
 8002e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_SPI_MspInit+0x90>)
 8002e30:	2101      	movs	r1, #1
 8002e32:	430a      	orrs	r2, r1
 8002e34:	635a      	str	r2, [r3, #52]	; 0x34
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <HAL_SPI_MspInit+0x90>)
 8002e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e42:	0021      	movs	r1, r4
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	22e0      	movs	r2, #224	; 0xe0
 8002e48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4a:	187b      	adds	r3, r7, r1
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	187b      	adds	r3, r7, r1
 8002e58:	2200      	movs	r2, #0
 8002e5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002e5c:	187b      	adds	r3, r7, r1
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	187a      	adds	r2, r7, r1
 8002e64:	23a0      	movs	r3, #160	; 0xa0
 8002e66:	05db      	lsls	r3, r3, #23
 8002e68:	0011      	movs	r1, r2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f001 fbc0 	bl	80045f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b00b      	add	sp, #44	; 0x2c
 8002e76:	bd90      	pop	{r4, r7, pc}
 8002e78:	40013000 	.word	0x40013000
 8002e7c:	40021000 	.word	0x40021000

08002e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e80:	b590      	push	{r4, r7, lr}
 8002e82:	b093      	sub	sp, #76	; 0x4c
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	2334      	movs	r3, #52	; 0x34
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	2314      	movs	r3, #20
 8002e90:	001a      	movs	r2, r3
 8002e92:	2100      	movs	r1, #0
 8002e94:	f005 fd67 	bl	8008966 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e98:	2418      	movs	r4, #24
 8002e9a:	193b      	adds	r3, r7, r4
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	231c      	movs	r3, #28
 8002ea0:	001a      	movs	r2, r3
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	f005 fd5f 	bl	8008966 <memset>
  if(huart->Instance==USART2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a57      	ldr	r2, [pc, #348]	; (800300c <HAL_UART_MspInit+0x18c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d13f      	bne.n	8002f32 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002eb2:	193b      	adds	r3, r7, r4
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002eb8:	193b      	adds	r3, r7, r4
 8002eba:	2200      	movs	r2, #0
 8002ebc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ebe:	193b      	adds	r3, r7, r4
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f003 f91b 	bl	80060fc <HAL_RCCEx_PeriphCLKConfig>
 8002ec6:	1e03      	subs	r3, r0, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002eca:	f7ff fbaf 	bl	800262c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ece:	4b50      	ldr	r3, [pc, #320]	; (8003010 <HAL_UART_MspInit+0x190>)
 8002ed0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ed2:	4b4f      	ldr	r3, [pc, #316]	; (8003010 <HAL_UART_MspInit+0x190>)
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	0289      	lsls	r1, r1, #10
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	63da      	str	r2, [r3, #60]	; 0x3c
 8002edc:	4b4c      	ldr	r3, [pc, #304]	; (8003010 <HAL_UART_MspInit+0x190>)
 8002ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	029b      	lsls	r3, r3, #10
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eea:	4b49      	ldr	r3, [pc, #292]	; (8003010 <HAL_UART_MspInit+0x190>)
 8002eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eee:	4b48      	ldr	r3, [pc, #288]	; (8003010 <HAL_UART_MspInit+0x190>)
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ef6:	4b46      	ldr	r3, [pc, #280]	; (8003010 <HAL_UART_MspInit+0x190>)
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efa:	2201      	movs	r2, #1
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f02:	2134      	movs	r1, #52	; 0x34
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	220c      	movs	r2, #12
 8002f08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	2201      	movs	r2, #1
 8002f14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	2200      	movs	r2, #0
 8002f1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	2201      	movs	r2, #1
 8002f20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f22:	187a      	adds	r2, r7, r1
 8002f24:	23a0      	movs	r3, #160	; 0xa0
 8002f26:	05db      	lsls	r3, r3, #23
 8002f28:	0011      	movs	r1, r2
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f001 fb60 	bl	80045f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f30:	e067      	b.n	8003002 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a37      	ldr	r2, [pc, #220]	; (8003014 <HAL_UART_MspInit+0x194>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d162      	bne.n	8003002 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f3c:	4b34      	ldr	r3, [pc, #208]	; (8003010 <HAL_UART_MspInit+0x190>)
 8002f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f40:	4b33      	ldr	r3, [pc, #204]	; (8003010 <HAL_UART_MspInit+0x190>)
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	02c9      	lsls	r1, r1, #11
 8002f46:	430a      	orrs	r2, r1
 8002f48:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f4a:	4b31      	ldr	r3, [pc, #196]	; (8003010 <HAL_UART_MspInit+0x190>)
 8002f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	02db      	lsls	r3, r3, #11
 8002f52:	4013      	ands	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f58:	4b2d      	ldr	r3, [pc, #180]	; (8003010 <HAL_UART_MspInit+0x190>)
 8002f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5c:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <HAL_UART_MspInit+0x190>)
 8002f5e:	2108      	movs	r1, #8
 8002f60:	430a      	orrs	r2, r1
 8002f62:	635a      	str	r2, [r3, #52]	; 0x34
 8002f64:	4b2a      	ldr	r3, [pc, #168]	; (8003010 <HAL_UART_MspInit+0x190>)
 8002f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f68:	2208      	movs	r2, #8
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f70:	2134      	movs	r1, #52	; 0x34
 8002f72:	187b      	adds	r3, r7, r1
 8002f74:	22c0      	movs	r2, #192	; 0xc0
 8002f76:	0092      	lsls	r2, r2, #2
 8002f78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	187b      	adds	r3, r7, r1
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	187b      	adds	r3, r7, r1
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f86:	187b      	adds	r3, r7, r1
 8002f88:	2200      	movs	r2, #0
 8002f8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8002f8c:	187b      	adds	r3, r7, r1
 8002f8e:	2200      	movs	r2, #0
 8002f90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f92:	187b      	adds	r3, r7, r1
 8002f94:	4a20      	ldr	r2, [pc, #128]	; (8003018 <HAL_UART_MspInit+0x198>)
 8002f96:	0019      	movs	r1, r3
 8002f98:	0010      	movs	r0, r2
 8002f9a:	f001 fb29 	bl	80045f0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8002f9e:	4b1f      	ldr	r3, [pc, #124]	; (800301c <HAL_UART_MspInit+0x19c>)
 8002fa0:	4a1f      	ldr	r2, [pc, #124]	; (8003020 <HAL_UART_MspInit+0x1a0>)
 8002fa2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_UART_MspInit+0x19c>)
 8002fa6:	2236      	movs	r2, #54	; 0x36
 8002fa8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002faa:	4b1c      	ldr	r3, [pc, #112]	; (800301c <HAL_UART_MspInit+0x19c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <HAL_UART_MspInit+0x19c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_UART_MspInit+0x19c>)
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fbc:	4b17      	ldr	r3, [pc, #92]	; (800301c <HAL_UART_MspInit+0x19c>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_UART_MspInit+0x19c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002fc8:	4b14      	ldr	r3, [pc, #80]	; (800301c <HAL_UART_MspInit+0x19c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <HAL_UART_MspInit+0x19c>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_UART_MspInit+0x19c>)
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f000 fcfc 	bl	80039d4 <HAL_DMA_Init>
 8002fdc:	1e03      	subs	r3, r0, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_UART_MspInit+0x164>
      Error_Handler();
 8002fe0:	f7ff fb24 	bl	800262c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2180      	movs	r1, #128	; 0x80
 8002fe8:	4a0c      	ldr	r2, [pc, #48]	; (800301c <HAL_UART_MspInit+0x19c>)
 8002fea:	505a      	str	r2, [r3, r1]
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_UART_MspInit+0x19c>)
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	201d      	movs	r0, #29
 8002ff8:	f000 fa96 	bl	8003528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002ffc:	201d      	movs	r0, #29
 8002ffe:	f000 faa8 	bl	8003552 <HAL_NVIC_EnableIRQ>
}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	46bd      	mov	sp, r7
 8003006:	b013      	add	sp, #76	; 0x4c
 8003008:	bd90      	pop	{r4, r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	40004400 	.word	0x40004400
 8003010:	40021000 	.word	0x40021000
 8003014:	40004800 	.word	0x40004800
 8003018:	50000c00 	.word	0x50000c00
 800301c:	20000468 	.word	0x20000468
 8003020:	40020008 	.word	0x40020008

08003024 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a17      	ldr	r2, [pc, #92]	; (8003090 <HAL_UART_MspDeInit+0x6c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10c      	bne.n	8003050 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8003036:	4b17      	ldr	r3, [pc, #92]	; (8003094 <HAL_UART_MspDeInit+0x70>)
 8003038:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <HAL_UART_MspDeInit+0x70>)
 800303c:	4916      	ldr	r1, [pc, #88]	; (8003098 <HAL_UART_MspDeInit+0x74>)
 800303e:	400a      	ands	r2, r1
 8003040:	63da      	str	r2, [r3, #60]	; 0x3c

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003042:	23a0      	movs	r3, #160	; 0xa0
 8003044:	05db      	lsls	r3, r3, #23
 8003046:	210c      	movs	r1, #12
 8003048:	0018      	movs	r0, r3
 800304a:	f001 fc35 	bl	80048b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800304e:	e01a      	b.n	8003086 <HAL_UART_MspDeInit+0x62>
  else if(huart->Instance==USART3)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a11      	ldr	r2, [pc, #68]	; (800309c <HAL_UART_MspDeInit+0x78>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d115      	bne.n	8003086 <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART3_CLK_DISABLE();
 800305a:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <HAL_UART_MspDeInit+0x70>)
 800305c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <HAL_UART_MspDeInit+0x70>)
 8003060:	490f      	ldr	r1, [pc, #60]	; (80030a0 <HAL_UART_MspDeInit+0x7c>)
 8003062:	400a      	ands	r2, r1
 8003064:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9);
 8003066:	23c0      	movs	r3, #192	; 0xc0
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4a0e      	ldr	r2, [pc, #56]	; (80030a4 <HAL_UART_MspDeInit+0x80>)
 800306c:	0019      	movs	r1, r3
 800306e:	0010      	movs	r0, r2
 8003070:	f001 fc22 	bl	80048b8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2280      	movs	r2, #128	; 0x80
 8003078:	589b      	ldr	r3, [r3, r2]
 800307a:	0018      	movs	r0, r3
 800307c:	f000 fd34 	bl	8003ae8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_4_IRQn);
 8003080:	201d      	movs	r0, #29
 8003082:	f000 fa76 	bl	8003572 <HAL_NVIC_DisableIRQ>
}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	40004400 	.word	0x40004400
 8003094:	40021000 	.word	0x40021000
 8003098:	fffdffff 	.word	0xfffdffff
 800309c:	40004800 	.word	0x40004800
 80030a0:	fffbffff 	.word	0xfffbffff
 80030a4:	50000c00 	.word	0x50000c00

080030a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <NMI_Handler+0x4>

080030ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b2:	e7fe      	b.n	80030b2 <HardFault_Handler+0x4>

080030b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80030b8:	46c0      	nop			; (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030cc:	f000 f91e 	bl	800330c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80030da:	f001 f85f 	bl	800419c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80030e8:	4b03      	ldr	r3, [pc, #12]	; (80030f8 <DMA1_Channel1_IRQHandler+0x14>)
 80030ea:	0018      	movs	r0, r3
 80030ec:	f000 fec6 	bl	8003e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030f0:	46c0      	nop			; (mov r8, r8)
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	20000468 	.word	0x20000468

080030fc <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <USART3_4_IRQHandler+0x14>)
 8003102:	0018      	movs	r0, r3
 8003104:	f004 f922 	bl	800734c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	200003d4 	.word	0x200003d4

08003114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800311c:	4a14      	ldr	r2, [pc, #80]	; (8003170 <_sbrk+0x5c>)
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <_sbrk+0x60>)
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003128:	4b13      	ldr	r3, [pc, #76]	; (8003178 <_sbrk+0x64>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d102      	bne.n	8003136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <_sbrk+0x64>)
 8003132:	4a12      	ldr	r2, [pc, #72]	; (800317c <_sbrk+0x68>)
 8003134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <_sbrk+0x64>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	18d3      	adds	r3, r2, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	429a      	cmp	r2, r3
 8003142:	d207      	bcs.n	8003154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003144:	f005 fbdc 	bl	8008900 <__errno>
 8003148:	0003      	movs	r3, r0
 800314a:	220c      	movs	r2, #12
 800314c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800314e:	2301      	movs	r3, #1
 8003150:	425b      	negs	r3, r3
 8003152:	e009      	b.n	8003168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <_sbrk+0x64>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <_sbrk+0x64>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	18d2      	adds	r2, r2, r3
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <_sbrk+0x64>)
 8003164:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003166:	68fb      	ldr	r3, [r7, #12]

}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b006      	add	sp, #24
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20009000 	.word	0x20009000
 8003174:	00000400 	.word	0x00000400
 8003178:	20001168 	.word	0x20001168
 800317c:	200011a0 	.word	0x200011a0

08003180 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800318c:	480d      	ldr	r0, [pc, #52]	; (80031c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800318e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003190:	f7ff fff6 	bl	8003180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003194:	480c      	ldr	r0, [pc, #48]	; (80031c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003196:	490d      	ldr	r1, [pc, #52]	; (80031cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003198:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <LoopForever+0xe>)
  movs r3, #0
 800319a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800319c:	e002      	b.n	80031a4 <LoopCopyDataInit>

0800319e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800319e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031a2:	3304      	adds	r3, #4

080031a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031a8:	d3f9      	bcc.n	800319e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031ac:	4c0a      	ldr	r4, [pc, #40]	; (80031d8 <LoopForever+0x16>)
  movs r3, #0
 80031ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031b0:	e001      	b.n	80031b6 <LoopFillZerobss>

080031b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031b4:	3204      	adds	r2, #4

080031b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031b8:	d3fb      	bcc.n	80031b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031ba:	f005 fba7 	bl	800890c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80031be:	f7fe fe97 	bl	8001ef0 <main>

080031c2 <LoopForever>:

LoopForever:
  b LoopForever
 80031c2:	e7fe      	b.n	80031c2 <LoopForever>
  ldr   r0, =_estack
 80031c4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80031c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031cc:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80031d0:	08009eb4 	.word	0x08009eb4
  ldr r2, =_sbss
 80031d4:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80031d8:	2000119c 	.word	0x2000119c

080031dc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031dc:	e7fe      	b.n	80031dc <ADC1_IRQHandler>
	...

080031e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031e6:	1dfb      	adds	r3, r7, #7
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_Init+0x3c>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_Init+0x3c>)
 80031f2:	2180      	movs	r1, #128	; 0x80
 80031f4:	0049      	lsls	r1, r1, #1
 80031f6:	430a      	orrs	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031fa:	2000      	movs	r0, #0
 80031fc:	f000 f83c 	bl	8003278 <HAL_InitTick>
 8003200:	1e03      	subs	r3, r0, #0
 8003202:	d003      	beq.n	800320c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003204:	1dfb      	adds	r3, r7, #7
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e001      	b.n	8003210 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800320c:	f7ff fcfc 	bl	8002c08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003210:	1dfb      	adds	r3, r7, #7
 8003212:	781b      	ldrb	r3, [r3, #0]
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b002      	add	sp, #8
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40022000 	.word	0x40022000

08003220 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_DeInit+0x48>)
 8003226:	2201      	movs	r2, #1
 8003228:	4252      	negs	r2, r2
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_APB1_RELEASE_RESET();
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <HAL_DeInit+0x48>)
 800322e:	2200      	movs	r2, #0
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_APB2_FORCE_RESET();
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <HAL_DeInit+0x48>)
 8003234:	2201      	movs	r2, #1
 8003236:	4252      	negs	r2, r2
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_APB2_RELEASE_RESET();
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_DeInit+0x48>)
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	; 0x30

  __HAL_RCC_AHB_FORCE_RESET();
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_DeInit+0x48>)
 8003242:	2201      	movs	r2, #1
 8003244:	4252      	negs	r2, r2
 8003246:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8003248:	4b07      	ldr	r3, [pc, #28]	; (8003268 <HAL_DeInit+0x48>)
 800324a:	2200      	movs	r2, #0
 800324c:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_IOP_FORCE_RESET();
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_DeInit+0x48>)
 8003250:	2201      	movs	r2, #1
 8003252:	4252      	negs	r2, r2
 8003254:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_IOP_RELEASE_RESET();
 8003256:	4b04      	ldr	r3, [pc, #16]	; (8003268 <HAL_DeInit+0x48>)
 8003258:	2200      	movs	r2, #0
 800325a:	625a      	str	r2, [r3, #36]	; 0x24

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800325c:	f000 f806 	bl	800326c <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	0018      	movs	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40021000 	.word	0x40021000

0800326c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8003270:	46c0      	nop			; (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003280:	230f      	movs	r3, #15
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003288:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <HAL_InitTick+0x88>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d02b      	beq.n	80032e8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003290:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <HAL_InitTick+0x8c>)
 8003292:	681c      	ldr	r4, [r3, #0]
 8003294:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <HAL_InitTick+0x88>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	0019      	movs	r1, r3
 800329a:	23fa      	movs	r3, #250	; 0xfa
 800329c:	0098      	lsls	r0, r3, #2
 800329e:	f7fc ff41 	bl	8000124 <__udivsi3>
 80032a2:	0003      	movs	r3, r0
 80032a4:	0019      	movs	r1, r3
 80032a6:	0020      	movs	r0, r4
 80032a8:	f7fc ff3c 	bl	8000124 <__udivsi3>
 80032ac:	0003      	movs	r3, r0
 80032ae:	0018      	movs	r0, r3
 80032b0:	f000 f96f 	bl	8003592 <HAL_SYSTICK_Config>
 80032b4:	1e03      	subs	r3, r0, #0
 80032b6:	d112      	bne.n	80032de <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d80a      	bhi.n	80032d4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	2301      	movs	r3, #1
 80032c2:	425b      	negs	r3, r3
 80032c4:	2200      	movs	r2, #0
 80032c6:	0018      	movs	r0, r3
 80032c8:	f000 f92e 	bl	8003528 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <HAL_InitTick+0x90>)
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e00d      	b.n	80032f0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80032d4:	230f      	movs	r3, #15
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	2201      	movs	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	e008      	b.n	80032f0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032de:	230f      	movs	r3, #15
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	2201      	movs	r2, #1
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	e003      	b.n	80032f0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032e8:	230f      	movs	r3, #15
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	2201      	movs	r2, #1
 80032ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80032f0:	230f      	movs	r3, #15
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	781b      	ldrb	r3, [r3, #0]
}
 80032f6:	0018      	movs	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b005      	add	sp, #20
 80032fc:	bd90      	pop	{r4, r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	2000001c 	.word	0x2000001c
 8003304:	20000014 	.word	0x20000014
 8003308:	20000018 	.word	0x20000018

0800330c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_IncTick+0x1c>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	001a      	movs	r2, r3
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_IncTick+0x20>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	18d2      	adds	r2, r2, r3
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_IncTick+0x20>)
 800331e:	601a      	str	r2, [r3, #0]
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	2000001c 	.word	0x2000001c
 800332c:	2000116c 	.word	0x2000116c

08003330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  return uwTick;
 8003334:	4b02      	ldr	r3, [pc, #8]	; (8003340 <HAL_GetTick+0x10>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	0018      	movs	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	2000116c 	.word	0x2000116c

08003344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800334c:	f7ff fff0 	bl	8003330 <HAL_GetTick>
 8003350:	0003      	movs	r3, r0
 8003352:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3301      	adds	r3, #1
 800335c:	d005      	beq.n	800336a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <HAL_Delay+0x44>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	001a      	movs	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	189b      	adds	r3, r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	f7ff ffe0 	bl	8003330 <HAL_GetTick>
 8003370:	0002      	movs	r2, r0
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	429a      	cmp	r2, r3
 800337a:	d8f7      	bhi.n	800336c <HAL_Delay+0x28>
  {
  }
}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	46bd      	mov	sp, r7
 8003382:	b004      	add	sp, #16
 8003384:	bd80      	pop	{r7, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	2000001c 	.word	0x2000001c

0800338c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	0002      	movs	r2, r0
 8003394:	1dfb      	adds	r3, r7, #7
 8003396:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003398:	1dfb      	adds	r3, r7, #7
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b7f      	cmp	r3, #127	; 0x7f
 800339e:	d809      	bhi.n	80033b4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a0:	1dfb      	adds	r3, r7, #7
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	001a      	movs	r2, r3
 80033a6:	231f      	movs	r3, #31
 80033a8:	401a      	ands	r2, r3
 80033aa:	4b04      	ldr	r3, [pc, #16]	; (80033bc <__NVIC_EnableIRQ+0x30>)
 80033ac:	2101      	movs	r1, #1
 80033ae:	4091      	lsls	r1, r2
 80033b0:	000a      	movs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b002      	add	sp, #8
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	e000e100 	.word	0xe000e100

080033c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	0002      	movs	r2, r0
 80033c8:	1dfb      	adds	r3, r7, #7
 80033ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033cc:	1dfb      	adds	r3, r7, #7
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b7f      	cmp	r3, #127	; 0x7f
 80033d2:	d810      	bhi.n	80033f6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d4:	1dfb      	adds	r3, r7, #7
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	001a      	movs	r2, r3
 80033da:	231f      	movs	r3, #31
 80033dc:	4013      	ands	r3, r2
 80033de:	4908      	ldr	r1, [pc, #32]	; (8003400 <__NVIC_DisableIRQ+0x40>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	409a      	lsls	r2, r3
 80033e4:	0013      	movs	r3, r2
 80033e6:	2280      	movs	r2, #128	; 0x80
 80033e8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80033ea:	f3bf 8f4f 	dsb	sy
}
 80033ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80033f0:	f3bf 8f6f 	isb	sy
}
 80033f4:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b002      	add	sp, #8
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	e000e100 	.word	0xe000e100

08003404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	0002      	movs	r2, r0
 800340c:	6039      	str	r1, [r7, #0]
 800340e:	1dfb      	adds	r3, r7, #7
 8003410:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003412:	1dfb      	adds	r3, r7, #7
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b7f      	cmp	r3, #127	; 0x7f
 8003418:	d828      	bhi.n	800346c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800341a:	4a2f      	ldr	r2, [pc, #188]	; (80034d8 <__NVIC_SetPriority+0xd4>)
 800341c:	1dfb      	adds	r3, r7, #7
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b25b      	sxtb	r3, r3
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	33c0      	adds	r3, #192	; 0xc0
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	589b      	ldr	r3, [r3, r2]
 800342a:	1dfa      	adds	r2, r7, #7
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	0011      	movs	r1, r2
 8003430:	2203      	movs	r2, #3
 8003432:	400a      	ands	r2, r1
 8003434:	00d2      	lsls	r2, r2, #3
 8003436:	21ff      	movs	r1, #255	; 0xff
 8003438:	4091      	lsls	r1, r2
 800343a:	000a      	movs	r2, r1
 800343c:	43d2      	mvns	r2, r2
 800343e:	401a      	ands	r2, r3
 8003440:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	019b      	lsls	r3, r3, #6
 8003446:	22ff      	movs	r2, #255	; 0xff
 8003448:	401a      	ands	r2, r3
 800344a:	1dfb      	adds	r3, r7, #7
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	0018      	movs	r0, r3
 8003450:	2303      	movs	r3, #3
 8003452:	4003      	ands	r3, r0
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003458:	481f      	ldr	r0, [pc, #124]	; (80034d8 <__NVIC_SetPriority+0xd4>)
 800345a:	1dfb      	adds	r3, r7, #7
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	b25b      	sxtb	r3, r3
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	430a      	orrs	r2, r1
 8003464:	33c0      	adds	r3, #192	; 0xc0
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800346a:	e031      	b.n	80034d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <__NVIC_SetPriority+0xd8>)
 800346e:	1dfb      	adds	r3, r7, #7
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	0019      	movs	r1, r3
 8003474:	230f      	movs	r3, #15
 8003476:	400b      	ands	r3, r1
 8003478:	3b08      	subs	r3, #8
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3306      	adds	r3, #6
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	18d3      	adds	r3, r2, r3
 8003482:	3304      	adds	r3, #4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	1dfa      	adds	r2, r7, #7
 8003488:	7812      	ldrb	r2, [r2, #0]
 800348a:	0011      	movs	r1, r2
 800348c:	2203      	movs	r2, #3
 800348e:	400a      	ands	r2, r1
 8003490:	00d2      	lsls	r2, r2, #3
 8003492:	21ff      	movs	r1, #255	; 0xff
 8003494:	4091      	lsls	r1, r2
 8003496:	000a      	movs	r2, r1
 8003498:	43d2      	mvns	r2, r2
 800349a:	401a      	ands	r2, r3
 800349c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	22ff      	movs	r2, #255	; 0xff
 80034a4:	401a      	ands	r2, r3
 80034a6:	1dfb      	adds	r3, r7, #7
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	0018      	movs	r0, r3
 80034ac:	2303      	movs	r3, #3
 80034ae:	4003      	ands	r3, r0
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b4:	4809      	ldr	r0, [pc, #36]	; (80034dc <__NVIC_SetPriority+0xd8>)
 80034b6:	1dfb      	adds	r3, r7, #7
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	001c      	movs	r4, r3
 80034bc:	230f      	movs	r3, #15
 80034be:	4023      	ands	r3, r4
 80034c0:	3b08      	subs	r3, #8
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	430a      	orrs	r2, r1
 80034c6:	3306      	adds	r3, #6
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	18c3      	adds	r3, r0, r3
 80034cc:	3304      	adds	r3, #4
 80034ce:	601a      	str	r2, [r3, #0]
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b003      	add	sp, #12
 80034d6:	bd90      	pop	{r4, r7, pc}
 80034d8:	e000e100 	.word	0xe000e100
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	1e5a      	subs	r2, r3, #1
 80034ec:	2380      	movs	r3, #128	; 0x80
 80034ee:	045b      	lsls	r3, r3, #17
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d301      	bcc.n	80034f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f4:	2301      	movs	r3, #1
 80034f6:	e010      	b.n	800351a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f8:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <SysTick_Config+0x44>)
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	3a01      	subs	r2, #1
 80034fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003500:	2301      	movs	r3, #1
 8003502:	425b      	negs	r3, r3
 8003504:	2103      	movs	r1, #3
 8003506:	0018      	movs	r0, r3
 8003508:	f7ff ff7c 	bl	8003404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <SysTick_Config+0x44>)
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003512:	4b04      	ldr	r3, [pc, #16]	; (8003524 <SysTick_Config+0x44>)
 8003514:	2207      	movs	r2, #7
 8003516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003518:	2300      	movs	r3, #0
}
 800351a:	0018      	movs	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	b002      	add	sp, #8
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	e000e010 	.word	0xe000e010

08003528 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	210f      	movs	r1, #15
 8003534:	187b      	adds	r3, r7, r1
 8003536:	1c02      	adds	r2, r0, #0
 8003538:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	187b      	adds	r3, r7, r1
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	b25b      	sxtb	r3, r3
 8003542:	0011      	movs	r1, r2
 8003544:	0018      	movs	r0, r3
 8003546:	f7ff ff5d 	bl	8003404 <__NVIC_SetPriority>
}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	46bd      	mov	sp, r7
 800354e:	b004      	add	sp, #16
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	0002      	movs	r2, r0
 800355a:	1dfb      	adds	r3, r7, #7
 800355c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	b25b      	sxtb	r3, r3
 8003564:	0018      	movs	r0, r3
 8003566:	f7ff ff11 	bl	800338c <__NVIC_EnableIRQ>
}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	46bd      	mov	sp, r7
 800356e:	b002      	add	sp, #8
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	0002      	movs	r2, r0
 800357a:	1dfb      	adds	r3, r7, #7
 800357c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800357e:	1dfb      	adds	r3, r7, #7
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	b25b      	sxtb	r3, r3
 8003584:	0018      	movs	r0, r3
 8003586:	f7ff ff1b 	bl	80033c0 <__NVIC_DisableIRQ>
}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b002      	add	sp, #8
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	0018      	movs	r0, r3
 800359e:	f7ff ff9f 	bl	80034e0 <SysTick_Config>
 80035a2:	0003      	movs	r3, r0
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b002      	add	sp, #8
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e056      	b.n	800366c <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7f5b      	ldrb	r3, [r3, #29]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d106      	bne.n	80035d6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	0018      	movs	r0, r3
 80035d2:	f7ff fb45 	bl	8002c60 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2202      	movs	r2, #2
 80035da:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	791b      	ldrb	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10c      	bne.n	80035fe <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a22      	ldr	r2, [pc, #136]	; (8003674 <HAL_CRC_Init+0xc8>)
 80035ea:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2118      	movs	r1, #24
 80035f8:	438a      	bics	r2, r1
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	e00b      	b.n	8003616 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6899      	ldr	r1, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 f975 	bl	80038f8 <HAL_CRCEx_Polynomial_Set>
 800360e:	1e03      	subs	r3, r0, #0
 8003610:	d001      	beq.n	8003616 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e02a      	b.n	800366c <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	795b      	ldrb	r3, [r3, #5]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d105      	bne.n	800362a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2201      	movs	r2, #1
 8003624:	4252      	negs	r2, r2
 8003626:	611a      	str	r2, [r3, #16]
 8003628:	e004      	b.n	8003634 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6912      	ldr	r2, [r2, #16]
 8003632:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2260      	movs	r2, #96	; 0x60
 800363c:	4393      	bics	r3, r2
 800363e:	0019      	movs	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2280      	movs	r2, #128	; 0x80
 8003654:	4393      	bics	r3, r2
 8003656:	0019      	movs	r1, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699a      	ldr	r2, [r3, #24]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	b002      	add	sp, #8
 8003672:	bd80      	pop	{r7, pc}
 8003674:	04c11db7 	.word	0x04c11db7

08003678 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e023      	b.n	80036d2 <HAL_CRC_DeInit+0x5a>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	7f5b      	ldrb	r3, [r3, #29]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d101      	bne.n	8003698 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
 8003696:	e01c      	b.n	80036d2 <HAL_CRC_DeInit+0x5a>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2101      	movs	r1, #1
 80036aa:	430a      	orrs	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2200      	movs	r2, #0
 80036ba:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	0018      	movs	r0, r3
 80036c0:	f7ff faee 	bl	8002ca0 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	0018      	movs	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b002      	add	sp, #8
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b086      	sub	sp, #24
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2202      	movs	r2, #2
 80036ee:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d005      	beq.n	8003704 <HAL_CRC_Accumulate+0x2a>
 80036f8:	d82d      	bhi.n	8003756 <HAL_CRC_Accumulate+0x7c>
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d019      	beq.n	8003732 <HAL_CRC_Accumulate+0x58>
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d020      	beq.n	8003744 <HAL_CRC_Accumulate+0x6a>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8003702:	e028      	b.n	8003756 <HAL_CRC_Accumulate+0x7c>
      for (index = 0U; index < BufferLength; index++)
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	e00a      	b.n	8003720 <HAL_CRC_Accumulate+0x46>
        hcrc->Instance->DR = pBuffer[index];
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	18d2      	adds	r2, r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	3301      	adds	r3, #1
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	429a      	cmp	r2, r3
 8003726:	d3f0      	bcc.n	800370a <HAL_CRC_Accumulate+0x30>
      temp = hcrc->Instance->DR;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	613b      	str	r3, [r7, #16]
      break;
 8003730:	e012      	b.n	8003758 <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	0018      	movs	r0, r3
 800373a:	f000 f815 	bl	8003768 <CRC_Handle_8>
 800373e:	0003      	movs	r3, r0
 8003740:	613b      	str	r3, [r7, #16]
      break;
 8003742:	e009      	b.n	8003758 <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	0018      	movs	r0, r3
 800374c:	f000 f89d 	bl	800388a <CRC_Handle_16>
 8003750:	0003      	movs	r3, r0
 8003752:	613b      	str	r3, [r7, #16]
      break;
 8003754:	e000      	b.n	8003758 <HAL_CRC_Accumulate+0x7e>
      break;
 8003756:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800375e:	693b      	ldr	r3, [r7, #16]
}
 8003760:	0018      	movs	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	b006      	add	sp, #24
 8003766:	bd80      	pop	{r7, pc}

08003768 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
 8003778:	e023      	b.n	80037c2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	18d3      	adds	r3, r2, r3
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	3301      	adds	r3, #1
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	18cb      	adds	r3, r1, r3
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003794:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	3302      	adds	r3, #2
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	18cb      	adds	r3, r1, r3
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80037a4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	3303      	adds	r3, #3
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	18cb      	adds	r3, r1, r3
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80037b8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80037ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	3301      	adds	r3, #1
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d3d6      	bcc.n	800377a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2203      	movs	r2, #3
 80037d0:	4013      	ands	r3, r2
 80037d2:	d053      	beq.n	800387c <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2203      	movs	r2, #3
 80037d8:	4013      	ands	r3, r2
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	18d2      	adds	r2, r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	7812      	ldrb	r2, [r2, #0]
 80037ec:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2203      	movs	r2, #3
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d119      	bne.n	800382c <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	18d3      	adds	r3, r2, r3
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	b21a      	sxth	r2, r3
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	3301      	adds	r3, #1
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	18cb      	adds	r3, r1, r3
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	b21b      	sxth	r3, r3
 8003814:	4313      	orrs	r3, r2
 8003816:	b21a      	sxth	r2, r3
 8003818:	211a      	movs	r1, #26
 800381a:	187b      	adds	r3, r7, r1
 800381c:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	187a      	adds	r2, r7, r1
 8003828:	8812      	ldrh	r2, [r2, #0]
 800382a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2203      	movs	r2, #3
 8003830:	4013      	ands	r3, r2
 8003832:	2b03      	cmp	r3, #3
 8003834:	d122      	bne.n	800387c <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	18d3      	adds	r3, r2, r3
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	b21a      	sxth	r2, r3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	3301      	adds	r3, #1
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	18cb      	adds	r3, r1, r3
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	b21b      	sxth	r3, r3
 8003852:	4313      	orrs	r3, r2
 8003854:	b21a      	sxth	r2, r3
 8003856:	211a      	movs	r1, #26
 8003858:	187b      	adds	r3, r7, r1
 800385a:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	187a      	adds	r2, r7, r1
 8003866:	8812      	ldrh	r2, [r2, #0]
 8003868:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	3302      	adds	r3, #2
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	18d2      	adds	r2, r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	7812      	ldrb	r2, [r2, #0]
 800387a:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
}
 8003882:	0018      	movs	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	b008      	add	sp, #32
 8003888:	bd80      	pop	{r7, pc}

0800388a <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b086      	sub	sp, #24
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	e013      	b.n	80038c4 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	18d3      	adds	r3, r2, r3
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	041a      	lsls	r2, r3, #16
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	3302      	adds	r3, #2
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	18cb      	adds	r3, r1, r3
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	0019      	movs	r1, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	3301      	adds	r3, #1
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	085b      	lsrs	r3, r3, #1
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d3e6      	bcc.n	800389c <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	4013      	ands	r3, r2
 80038d4:	d009      	beq.n	80038ea <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	18d3      	adds	r3, r2, r3
 80038e4:	881a      	ldrh	r2, [r3, #0]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	0018      	movs	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b006      	add	sp, #24
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003904:	2317      	movs	r3, #23
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800390c:	231f      	movs	r3, #31
 800390e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003910:	46c0      	nop			; (mov r8, r8)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1e5a      	subs	r2, r3, #1
 8003916:	613a      	str	r2, [r7, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_CRCEx_Polynomial_Set+0x36>
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	221f      	movs	r2, #31
 8003920:	4013      	ands	r3, r2
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	40da      	lsrs	r2, r3
 8003926:	0013      	movs	r3, r2
 8003928:	2201      	movs	r2, #1
 800392a:	4013      	ands	r3, r2
 800392c:	d0f1      	beq.n	8003912 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b18      	cmp	r3, #24
 8003932:	d00f      	beq.n	8003954 <HAL_CRCEx_Polynomial_Set+0x5c>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b18      	cmp	r3, #24
 8003938:	d824      	bhi.n	8003984 <HAL_CRCEx_Polynomial_Set+0x8c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b10      	cmp	r3, #16
 800393e:	d011      	beq.n	8003964 <HAL_CRCEx_Polynomial_Set+0x6c>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b10      	cmp	r3, #16
 8003944:	d81e      	bhi.n	8003984 <HAL_CRCEx_Polynomial_Set+0x8c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d020      	beq.n	800398e <HAL_CRCEx_Polynomial_Set+0x96>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b08      	cmp	r3, #8
 8003950:	d010      	beq.n	8003974 <HAL_CRCEx_Polynomial_Set+0x7c>
 8003952:	e017      	b.n	8003984 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b06      	cmp	r3, #6
 8003958:	d91b      	bls.n	8003992 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 800395a:	2317      	movs	r3, #23
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	2201      	movs	r2, #1
 8003960:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003962:	e016      	b.n	8003992 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b07      	cmp	r3, #7
 8003968:	d915      	bls.n	8003996 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 800396a:	2317      	movs	r3, #23
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	2201      	movs	r2, #1
 8003970:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003972:	e010      	b.n	8003996 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b0f      	cmp	r3, #15
 8003978:	d90f      	bls.n	800399a <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 800397a:	2317      	movs	r3, #23
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003982:	e00a      	b.n	800399a <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003984:	2317      	movs	r3, #23
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
      break;
 800398c:	e006      	b.n	800399c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	e004      	b.n	800399c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	e002      	b.n	800399c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	e000      	b.n	800399c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800399a:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 800399c:	2317      	movs	r3, #23
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10e      	bne.n	80039c4 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2218      	movs	r2, #24
 80039b6:	4393      	bics	r3, r2
 80039b8:	0019      	movs	r1, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80039c4:	2317      	movs	r3, #23
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	781b      	ldrb	r3, [r3, #0]
}
 80039ca:	0018      	movs	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b006      	add	sp, #24
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e077      	b.n	8003ad6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a3d      	ldr	r2, [pc, #244]	; (8003ae0 <HAL_DMA_Init+0x10c>)
 80039ec:	4694      	mov	ip, r2
 80039ee:	4463      	add	r3, ip
 80039f0:	2114      	movs	r1, #20
 80039f2:	0018      	movs	r0, r3
 80039f4:	f7fc fb96 	bl	8000124 <__udivsi3>
 80039f8:	0003      	movs	r3, r0
 80039fa:	009a      	lsls	r2, r3, #2
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2225      	movs	r2, #37	; 0x25
 8003a04:	2102      	movs	r1, #2
 8003a06:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4934      	ldr	r1, [pc, #208]	; (8003ae4 <HAL_DMA_Init+0x110>)
 8003a14:	400a      	ands	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6819      	ldr	r1, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	0018      	movs	r0, r3
 8003a52:	f000 fb05 	bl	8004060 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	01db      	lsls	r3, r3, #7
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d102      	bne.n	8003a68 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a70:	213f      	movs	r1, #63	; 0x3f
 8003a72:	400a      	ands	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a7e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d011      	beq.n	8003aac <HAL_DMA_Init+0xd8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d80d      	bhi.n	8003aac <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	0018      	movs	r0, r3
 8003a94:	f000 fb10 	bl	80040b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	e008      	b.n	8003abe <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2225      	movs	r2, #37	; 0x25
 8003ac8:	2101      	movs	r1, #1
 8003aca:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	; 0x24
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b002      	add	sp, #8
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	bffdfff8 	.word	0xbffdfff8
 8003ae4:	ffff800f 	.word	0xffff800f

08003ae8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e066      	b.n	8003bc8 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2101      	movs	r1, #1
 8003b06:	438a      	bics	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a30      	ldr	r2, [pc, #192]	; (8003bd0 <HAL_DMA_DeInit+0xe8>)
 8003b10:	4694      	mov	ip, r2
 8003b12:	4463      	add	r3, ip
 8003b14:	2114      	movs	r1, #20
 8003b16:	0018      	movs	r0, r3
 8003b18:	f7fc fb04 	bl	8000124 <__udivsi3>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	009a      	lsls	r2, r3, #2
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003b2c:	4b29      	ldr	r3, [pc, #164]	; (8003bd4 <HAL_DMA_DeInit+0xec>)
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	221c      	movs	r2, #28
 8003b36:	4013      	ands	r3, r2
 8003b38:	2201      	movs	r2, #1
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <HAL_DMA_DeInit+0xec>)
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	0018      	movs	r0, r3
 8003b46:	f000 fa8b 	bl	8004060 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b5a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d010      	beq.n	8003b86 <HAL_DMA_DeInit+0x9e>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d80c      	bhi.n	8003b86 <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 faa2 	bl	80040b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003b84:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	651a      	str	r2, [r3, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	659a      	str	r2, [r3, #88]	; 0x58

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2225      	movs	r2, #37	; 0x25
 8003bba:	2100      	movs	r1, #0
 8003bbc:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2224      	movs	r2, #36	; 0x24
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	0018      	movs	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b002      	add	sp, #8
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	bffdfff8 	.word	0xbffdfff8
 8003bd4:	40020000 	.word	0x40020000

08003bd8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003be6:	2317      	movs	r3, #23
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2224      	movs	r2, #36	; 0x24
 8003bf2:	5c9b      	ldrb	r3, [r3, r2]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_DMA_Start_IT+0x24>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e06f      	b.n	8003cdc <HAL_DMA_Start_IT+0x104>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2224      	movs	r2, #36	; 0x24
 8003c00:	2101      	movs	r1, #1
 8003c02:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2225      	movs	r2, #37	; 0x25
 8003c08:	5c9b      	ldrb	r3, [r3, r2]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d157      	bne.n	8003cc0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2225      	movs	r2, #37	; 0x25
 8003c14:	2102      	movs	r1, #2
 8003c16:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2101      	movs	r1, #1
 8003c2a:	438a      	bics	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f9d3 	bl	8003fe0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	210e      	movs	r1, #14
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	e00f      	b.n	8003c74 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2104      	movs	r1, #4
 8003c60:	438a      	bics	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	210a      	movs	r1, #10
 8003c70:	430a      	orrs	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	025b      	lsls	r3, r3, #9
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d008      	beq.n	8003c94 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	2180      	movs	r1, #128	; 0x80
 8003c8e:	0049      	lsls	r1, r1, #1
 8003c90:	430a      	orrs	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca6:	2180      	movs	r1, #128	; 0x80
 8003ca8:	0049      	lsls	r1, r1, #1
 8003caa:	430a      	orrs	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e00a      	b.n	8003cd6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2280      	movs	r2, #128	; 0x80
 8003cc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2224      	movs	r2, #36	; 0x24
 8003cca:	2100      	movs	r1, #0
 8003ccc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003cce:	2317      	movs	r3, #23
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003cd6:	2317      	movs	r3, #23
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	781b      	ldrb	r3, [r3, #0]
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b006      	add	sp, #24
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e050      	b.n	8003d98 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2225      	movs	r2, #37	; 0x25
 8003cfa:	5c9b      	ldrb	r3, [r3, r2]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d008      	beq.n	8003d14 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2204      	movs	r2, #4
 8003d06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2224      	movs	r2, #36	; 0x24
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e041      	b.n	8003d98 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	210e      	movs	r1, #14
 8003d20:	438a      	bics	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	491c      	ldr	r1, [pc, #112]	; (8003da0 <HAL_DMA_Abort+0xbc>)
 8003d30:	400a      	ands	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2101      	movs	r1, #1
 8003d40:	438a      	bics	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003d44:	4b17      	ldr	r3, [pc, #92]	; (8003da4 <HAL_DMA_Abort+0xc0>)
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	221c      	movs	r2, #28
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2201      	movs	r2, #1
 8003d52:	409a      	lsls	r2, r3
 8003d54:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <HAL_DMA_Abort+0xc0>)
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d62:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00c      	beq.n	8003d86 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d76:	490a      	ldr	r1, [pc, #40]	; (8003da0 <HAL_DMA_Abort+0xbc>)
 8003d78:	400a      	ands	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003d84:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2225      	movs	r2, #37	; 0x25
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2224      	movs	r2, #36	; 0x24
 8003d92:	2100      	movs	r1, #0
 8003d94:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	0018      	movs	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b002      	add	sp, #8
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	fffffeff 	.word	0xfffffeff
 8003da4:	40020000 	.word	0x40020000

08003da8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db0:	210f      	movs	r1, #15
 8003db2:	187b      	adds	r3, r7, r1
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2225      	movs	r2, #37	; 0x25
 8003dbc:	5c9b      	ldrb	r3, [r3, r2]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d006      	beq.n	8003dd2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003dca:	187b      	adds	r3, r7, r1
 8003dcc:	2201      	movs	r2, #1
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	e049      	b.n	8003e66 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	210e      	movs	r1, #14
 8003dde:	438a      	bics	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2101      	movs	r1, #1
 8003dee:	438a      	bics	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	491d      	ldr	r1, [pc, #116]	; (8003e74 <HAL_DMA_Abort_IT+0xcc>)
 8003dfe:	400a      	ands	r2, r1
 8003e00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003e02:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_DMA_Abort_IT+0xd0>)
 8003e04:	6859      	ldr	r1, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	221c      	movs	r2, #28
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2201      	movs	r2, #1
 8003e10:	409a      	lsls	r2, r3
 8003e12:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <HAL_DMA_Abort_IT+0xd0>)
 8003e14:	430a      	orrs	r2, r1
 8003e16:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003e20:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00c      	beq.n	8003e44 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e34:	490f      	ldr	r1, [pc, #60]	; (8003e74 <HAL_DMA_Abort_IT+0xcc>)
 8003e36:	400a      	ands	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003e42:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2225      	movs	r2, #37	; 0x25
 8003e48:	2101      	movs	r1, #1
 8003e4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2224      	movs	r2, #36	; 0x24
 8003e50:	2100      	movs	r1, #0
 8003e52:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	0010      	movs	r0, r2
 8003e64:	4798      	blx	r3
    }
  }
  return status;
 8003e66:	230f      	movs	r3, #15
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	781b      	ldrb	r3, [r3, #0]
}
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b004      	add	sp, #16
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	fffffeff 	.word	0xfffffeff
 8003e78:	40020000 	.word	0x40020000

08003e7c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003e84:	4b55      	ldr	r3, [pc, #340]	; (8003fdc <HAL_DMA_IRQHandler+0x160>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	221c      	movs	r2, #28
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2204      	movs	r2, #4
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	0013      	movs	r3, r2
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d027      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x7a>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d023      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d107      	bne.n	8003eca <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	438a      	bics	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003eca:	4b44      	ldr	r3, [pc, #272]	; (8003fdc <HAL_DMA_IRQHandler+0x160>)
 8003ecc:	6859      	ldr	r1, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	221c      	movs	r2, #28
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	4b40      	ldr	r3, [pc, #256]	; (8003fdc <HAL_DMA_IRQHandler+0x160>)
 8003edc:	430a      	orrs	r2, r1
 8003ede:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d100      	bne.n	8003eea <HAL_DMA_IRQHandler+0x6e>
 8003ee8:	e073      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	0010      	movs	r0, r2
 8003ef2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003ef4:	e06d      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	221c      	movs	r2, #28
 8003efc:	4013      	ands	r3, r2
 8003efe:	2202      	movs	r2, #2
 8003f00:	409a      	lsls	r2, r3
 8003f02:	0013      	movs	r3, r2
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4013      	ands	r3, r2
 8003f08:	d02e      	beq.n	8003f68 <HAL_DMA_IRQHandler+0xec>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d02a      	beq.n	8003f68 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d10b      	bne.n	8003f36 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	210a      	movs	r1, #10
 8003f2a:	438a      	bics	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2225      	movs	r2, #37	; 0x25
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003f36:	4b29      	ldr	r3, [pc, #164]	; (8003fdc <HAL_DMA_IRQHandler+0x160>)
 8003f38:	6859      	ldr	r1, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	221c      	movs	r2, #28
 8003f40:	4013      	ands	r3, r2
 8003f42:	2202      	movs	r2, #2
 8003f44:	409a      	lsls	r2, r3
 8003f46:	4b25      	ldr	r3, [pc, #148]	; (8003fdc <HAL_DMA_IRQHandler+0x160>)
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2224      	movs	r2, #36	; 0x24
 8003f50:	2100      	movs	r1, #0
 8003f52:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d03a      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	0010      	movs	r0, r2
 8003f64:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003f66:	e034      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	221c      	movs	r2, #28
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2208      	movs	r2, #8
 8003f72:	409a      	lsls	r2, r3
 8003f74:	0013      	movs	r3, r2
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d02b      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x158>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2208      	movs	r2, #8
 8003f80:	4013      	ands	r3, r2
 8003f82:	d027      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	210e      	movs	r1, #14
 8003f90:	438a      	bics	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_DMA_IRQHandler+0x160>)
 8003f96:	6859      	ldr	r1, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	221c      	movs	r2, #28
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <HAL_DMA_IRQHandler+0x160>)
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2225      	movs	r2, #37	; 0x25
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2224      	movs	r2, #36	; 0x24
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	0010      	movs	r0, r2
 8003fd0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	46c0      	nop			; (mov r8, r8)
}
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b004      	add	sp, #16
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40020000 	.word	0x40020000

08003fe0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ff6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004008:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800400a:	4b14      	ldr	r3, [pc, #80]	; (800405c <DMA_SetConfig+0x7c>)
 800400c:	6859      	ldr	r1, [r3, #4]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	221c      	movs	r2, #28
 8004014:	4013      	ands	r3, r2
 8004016:	2201      	movs	r2, #1
 8004018:	409a      	lsls	r2, r3
 800401a:	4b10      	ldr	r3, [pc, #64]	; (800405c <DMA_SetConfig+0x7c>)
 800401c:	430a      	orrs	r2, r1
 800401e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b10      	cmp	r3, #16
 800402e:	d108      	bne.n	8004042 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004040:	e007      	b.n	8004052 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]
}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	46bd      	mov	sp, r7
 8004056:	b004      	add	sp, #16
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	40020000 	.word	0x40020000

08004060 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	089b      	lsrs	r3, r3, #2
 800406e:	4a10      	ldr	r2, [pc, #64]	; (80040b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004070:	4694      	mov	ip, r2
 8004072:	4463      	add	r3, ip
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	001a      	movs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	001a      	movs	r2, r3
 8004082:	23ff      	movs	r3, #255	; 0xff
 8004084:	4013      	ands	r3, r2
 8004086:	3b08      	subs	r3, #8
 8004088:	2114      	movs	r1, #20
 800408a:	0018      	movs	r0, r3
 800408c:	f7fc f84a 	bl	8000124 <__udivsi3>
 8004090:	0003      	movs	r3, r0
 8004092:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004098:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	221f      	movs	r2, #31
 800409e:	4013      	ands	r3, r2
 80040a0:	2201      	movs	r2, #1
 80040a2:	409a      	lsls	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b004      	add	sp, #16
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	10008200 	.word	0x10008200
 80040b4:	40020880 	.word	0x40020880

080040b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	223f      	movs	r2, #63	; 0x3f
 80040c6:	4013      	ands	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80040ce:	4694      	mov	ip, r2
 80040d0:	4463      	add	r3, ip
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	001a      	movs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a07      	ldr	r2, [pc, #28]	; (80040fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80040de:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	2203      	movs	r2, #3
 80040e6:	4013      	ands	r3, r2
 80040e8:	2201      	movs	r2, #1
 80040ea:	409a      	lsls	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	659a      	str	r2, [r3, #88]	; 0x58
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b004      	add	sp, #16
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	1000823f 	.word	0x1000823f
 80040fc:	40020940 	.word	0x40020940

08004100 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004100:	b5b0      	push	{r4, r5, r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603a      	str	r2, [r7, #0]
 800410c:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800410e:	4b21      	ldr	r3, [pc, #132]	; (8004194 <HAL_FLASH_Program+0x94>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_FLASH_Program+0x1a>
 8004116:	2302      	movs	r3, #2
 8004118:	e038      	b.n	800418c <HAL_FLASH_Program+0x8c>
 800411a:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <HAL_FLASH_Program+0x94>)
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004120:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <HAL_FLASH_Program+0x94>)
 8004122:	2200      	movs	r2, #0
 8004124:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004126:	2517      	movs	r5, #23
 8004128:	197c      	adds	r4, r7, r5
 800412a:	23fa      	movs	r3, #250	; 0xfa
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	0018      	movs	r0, r3
 8004130:	f000 f94c 	bl	80043cc <FLASH_WaitForLastOperation>
 8004134:	0003      	movs	r3, r0
 8004136:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004138:	197b      	adds	r3, r7, r5
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d11f      	bne.n	8004180 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d106      	bne.n	8004154 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	0008      	movs	r0, r1
 800414e:	f000 f98b 	bl	8004468 <FLASH_Program_DoubleWord>
 8004152:	e005      	b.n	8004160 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	0011      	movs	r1, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f005 f87c 	bl	8009258 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004160:	2317      	movs	r3, #23
 8004162:	18fc      	adds	r4, r7, r3
 8004164:	23fa      	movs	r3, #250	; 0xfa
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	0018      	movs	r0, r3
 800416a:	f000 f92f 	bl	80043cc <FLASH_WaitForLastOperation>
 800416e:	0003      	movs	r3, r0
 8004170:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004172:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_FLASH_Program+0x98>)
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	43d9      	mvns	r1, r3
 800417a:	4b07      	ldr	r3, [pc, #28]	; (8004198 <HAL_FLASH_Program+0x98>)
 800417c:	400a      	ands	r2, r1
 800417e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <HAL_FLASH_Program+0x94>)
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004186:	2317      	movs	r3, #23
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	781b      	ldrb	r3, [r3, #0]
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b006      	add	sp, #24
 8004192:	bdb0      	pop	{r4, r5, r7, pc}
 8004194:	20001170 	.word	0x20001170
 8004198:	40022000 	.word	0x40022000

0800419c <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
  uint32_t param;
  uint32_t error;

  /* Save flash errors. */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80041a2:	4b3a      	ldr	r3, [pc, #232]	; (800428c <HAL_FLASH_IRQHandler+0xf0>)
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	4a3a      	ldr	r2, [pc, #232]	; (8004290 <HAL_FLASH_IRQHandler+0xf4>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	603b      	str	r3, [r7, #0]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & FLASH_TYPEERASE_MASS) != 0x00U)
 80041ac:	4b39      	ldr	r3, [pc, #228]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2204      	movs	r2, #4
 80041b2:	4013      	ands	r3, r2
 80041b4:	d003      	beq.n	80041be <HAL_FLASH_IRQHandler+0x22>
  {
    /* return bank number */
    param = pFlash.Banks;
 80041b6:	4b37      	ldr	r3, [pc, #220]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	607b      	str	r3, [r7, #4]
 80041bc:	e013      	b.n	80041e6 <HAL_FLASH_IRQHandler+0x4a>
  }
  else
  {
    /* Clear operation only for page erase or program */
    CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 80041be:	4b33      	ldr	r3, [pc, #204]	; (800428c <HAL_FLASH_IRQHandler+0xf0>)
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	4b34      	ldr	r3, [pc, #208]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	43d9      	mvns	r1, r3
 80041c8:	4b30      	ldr	r3, [pc, #192]	; (800428c <HAL_FLASH_IRQHandler+0xf0>)
 80041ca:	400a      	ands	r2, r1
 80041cc:	615a      	str	r2, [r3, #20]

    if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0x00U)
 80041ce:	4b31      	ldr	r3, [pc, #196]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	4a31      	ldr	r2, [pc, #196]	; (8004298 <HAL_FLASH_IRQHandler+0xfc>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	d003      	beq.n	80041e0 <HAL_FLASH_IRQHandler+0x44>
    {
      /* return address being programmed */
      param = pFlash.Address;
 80041d8:	4b2e      	ldr	r3, [pc, #184]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	607b      	str	r3, [r7, #4]
 80041de:	e002      	b.n	80041e6 <HAL_FLASH_IRQHandler+0x4a>
    }
    else
    {
      /* return page number being erased */
      param = pFlash.Page;
 80041e0:	4b2c      	ldr	r3, [pc, #176]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	607b      	str	r3, [r7, #4]
    }
  }

  /* B] Check errors */
  if (error != 0x00U)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00f      	beq.n	800420c <HAL_FLASH_IRQHandler+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80041ec:	4b29      	ldr	r3, [pc, #164]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	4b27      	ldr	r3, [pc, #156]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 80041f6:	605a      	str	r2, [r3, #4]

    /* clear error flags */
    FLASH->SR = FLASH_SR_ERRORS;
 80041f8:	4b24      	ldr	r3, [pc, #144]	; (800428c <HAL_FLASH_IRQHandler+0xf0>)
 80041fa:	4a25      	ldr	r2, [pc, #148]	; (8004290 <HAL_FLASH_IRQHandler+0xf4>)
 80041fc:	611a      	str	r2, [r3, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80041fe:	4b25      	ldr	r3, [pc, #148]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 8004200:	2200      	movs	r2, #0
 8004202:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	0018      	movs	r0, r3
 8004208:	f000 f852 	bl	80042b0 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if ((FLASH->SR & FLASH_SR_EOP) != 0x00U)
 800420c:	4b1f      	ldr	r3, [pc, #124]	; (800428c <HAL_FLASH_IRQHandler+0xf0>)
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	2201      	movs	r2, #1
 8004212:	4013      	ands	r3, r2
 8004214:	d028      	beq.n	8004268 <HAL_FLASH_IRQHandler+0xcc>
  {
    /* Clear FLASH End of Operation pending bit */
    FLASH->SR = FLASH_SR_EOP;
 8004216:	4b1d      	ldr	r3, [pc, #116]	; (800428c <HAL_FLASH_IRQHandler+0xf0>)
 8004218:	2201      	movs	r2, #1
 800421a:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 800421c:	4b1d      	ldr	r3, [pc, #116]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d11a      	bne.n	800425a <HAL_FLASH_IRQHandler+0xbe>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8004224:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	1e5a      	subs	r2, r3, #1
 800422a:	4b1a      	ldr	r3, [pc, #104]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 800422c:	619a      	str	r2, [r3, #24]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0x00U)
 800422e:	4b19      	ldr	r3, [pc, #100]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00d      	beq.n	8004252 <HAL_FLASH_IRQHandler+0xb6>
      {
        /* Increment page number */
        pFlash.Page++;
 8004236:	4b17      	ldr	r3, [pc, #92]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	4b15      	ldr	r3, [pc, #84]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 800423e:	615a      	str	r2, [r3, #20]
        FLASH_PageErase(pFlash.Banks, pFlash.Page);
 8004240:	4b14      	ldr	r3, [pc, #80]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	4b13      	ldr	r3, [pc, #76]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	0019      	movs	r1, r3
 800424a:	0010      	movs	r0, r2
 800424c:	f000 f9b4 	bl	80045b8 <FLASH_PageErase>
 8004250:	e006      	b.n	8004260 <HAL_FLASH_IRQHandler+0xc4>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 8004254:	2200      	movs	r2, #0
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	e002      	b.n	8004260 <HAL_FLASH_IRQHandler+0xc4>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800425a:	4b0e      	ldr	r3, [pc, #56]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 800425c:	2200      	movs	r2, #0
 800425e:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	0018      	movs	r0, r3
 8004264:	f000 f81c 	bl	80042a0 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d108      	bne.n	8004282 <HAL_FLASH_IRQHandler+0xe6>
  {
    /* Disable End of Operation and Error interrupts */
    FLASH->CR &= ~(FLASH_CR_EOPIE | FLASH_CR_ERRIE);
 8004270:	4b06      	ldr	r3, [pc, #24]	; (800428c <HAL_FLASH_IRQHandler+0xf0>)
 8004272:	695a      	ldr	r2, [r3, #20]
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_FLASH_IRQHandler+0xf0>)
 8004276:	4909      	ldr	r1, [pc, #36]	; (800429c <HAL_FLASH_IRQHandler+0x100>)
 8004278:	400a      	ands	r2, r1
 800427a:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_FLASH_IRQHandler+0xf8>)
 800427e:	2200      	movs	r2, #0
 8004280:	701a      	strb	r2, [r3, #0]
  }
}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	46bd      	mov	sp, r7
 8004286:	b002      	add	sp, #8
 8004288:	bd80      	pop	{r7, pc}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	40022000 	.word	0x40022000
 8004290:	000083fa 	.word	0x000083fa
 8004294:	20001170 	.word	0x20001170
 8004298:	00040001 	.word	0x00040001
 800429c:	fcffffff 	.word	0xfcffffff

080042a0 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b002      	add	sp, #8
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 80042b8:	46c0      	nop			; (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b002      	add	sp, #8
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80042c6:	1dfb      	adds	r3, r7, #7
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_FLASH_Unlock+0x3c>)
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	da0c      	bge.n	80042ee <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_FLASH_Unlock+0x3c>)
 80042d6:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <HAL_FLASH_Unlock+0x40>)
 80042d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80042da:	4b08      	ldr	r3, [pc, #32]	; (80042fc <HAL_FLASH_Unlock+0x3c>)
 80042dc:	4a09      	ldr	r2, [pc, #36]	; (8004304 <HAL_FLASH_Unlock+0x44>)
 80042de:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <HAL_FLASH_Unlock+0x3c>)
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	da02      	bge.n	80042ee <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80042e8:	1dfb      	adds	r3, r7, #7
 80042ea:	2201      	movs	r2, #1
 80042ec:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80042ee:	1dfb      	adds	r3, r7, #7
 80042f0:	781b      	ldrb	r3, [r3, #0]
}
 80042f2:	0018      	movs	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b002      	add	sp, #8
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	40022000 	.word	0x40022000
 8004300:	45670123 	.word	0x45670123
 8004304:	cdef89ab 	.word	0xcdef89ab

08004308 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800430e:	1dfb      	adds	r3, r7, #7
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <HAL_FLASH_Lock+0x34>)
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	4b08      	ldr	r3, [pc, #32]	; (800433c <HAL_FLASH_Lock+0x34>)
 800431a:	2180      	movs	r1, #128	; 0x80
 800431c:	0609      	lsls	r1, r1, #24
 800431e:	430a      	orrs	r2, r1
 8004320:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8004322:	4b06      	ldr	r3, [pc, #24]	; (800433c <HAL_FLASH_Lock+0x34>)
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	da02      	bge.n	8004330 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 800432a:	1dfb      	adds	r3, r7, #7
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004330:	1dfb      	adds	r3, r7, #7
 8004332:	781b      	ldrb	r3, [r3, #0]
}
 8004334:	0018      	movs	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	b002      	add	sp, #8
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40022000 	.word	0x40022000

08004340 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8004346:	1dfb      	adds	r3, r7, #7
 8004348:	2201      	movs	r2, #1
 800434a:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 800434c:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <HAL_FLASH_OB_Unlock+0x44>)
 800434e:	695a      	ldr	r2, [r3, #20]
 8004350:	2380      	movs	r3, #128	; 0x80
 8004352:	05db      	lsls	r3, r3, #23
 8004354:	4013      	ands	r3, r2
 8004356:	d00e      	beq.n	8004376 <HAL_FLASH_OB_Unlock+0x36>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <HAL_FLASH_OB_Unlock+0x44>)
 800435a:	4a0b      	ldr	r2, [pc, #44]	; (8004388 <HAL_FLASH_OB_Unlock+0x48>)
 800435c:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800435e:	4b09      	ldr	r3, [pc, #36]	; (8004384 <HAL_FLASH_OB_Unlock+0x44>)
 8004360:	4a0a      	ldr	r2, [pc, #40]	; (800438c <HAL_FLASH_OB_Unlock+0x4c>)
 8004362:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 8004364:	4b07      	ldr	r3, [pc, #28]	; (8004384 <HAL_FLASH_OB_Unlock+0x44>)
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	2380      	movs	r3, #128	; 0x80
 800436a:	05db      	lsls	r3, r3, #23
 800436c:	4013      	ands	r3, r2
 800436e:	d102      	bne.n	8004376 <HAL_FLASH_OB_Unlock+0x36>
    {
      status = HAL_OK;
 8004370:	1dfb      	adds	r3, r7, #7
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004376:	1dfb      	adds	r3, r7, #7
 8004378:	781b      	ldrb	r3, [r3, #0]
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	b002      	add	sp, #8
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	40022000 	.word	0x40022000
 8004388:	08192a3b 	.word	0x08192a3b
 800438c:	4c5d6e7f 	.word	0x4c5d6e7f

08004390 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8004396:	1dfb      	adds	r3, r7, #7
 8004398:	2201      	movs	r2, #1
 800439a:	701a      	strb	r2, [r3, #0]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <HAL_FLASH_OB_Lock+0x38>)
 800439e:	695a      	ldr	r2, [r3, #20]
 80043a0:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <HAL_FLASH_OB_Lock+0x38>)
 80043a2:	2180      	movs	r1, #128	; 0x80
 80043a4:	05c9      	lsls	r1, r1, #23
 80043a6:	430a      	orrs	r2, r1
 80043a8:	615a      	str	r2, [r3, #20]

  /* verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 80043aa:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <HAL_FLASH_OB_Lock+0x38>)
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	05db      	lsls	r3, r3, #23
 80043b2:	4013      	ands	r3, r2
 80043b4:	d002      	beq.n	80043bc <HAL_FLASH_OB_Lock+0x2c>
  {
    status = HAL_OK;
 80043b6:	1dfb      	adds	r3, r7, #7
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80043bc:	1dfb      	adds	r3, r7, #7
 80043be:	781b      	ldrb	r3, [r3, #0]
}
 80043c0:	0018      	movs	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b002      	add	sp, #8
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40022000 	.word	0x40022000

080043cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 80043d4:	f7fe ffac 	bl	8003330 <HAL_GetTick>
 80043d8:	0002      	movs	r2, r0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	189b      	adds	r3, r3, r2
 80043de:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	025b      	lsls	r3, r3, #9
 80043e4:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80043e6:	e007      	b.n	80043f8 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 80043e8:	f7fe ffa2 	bl	8003330 <HAL_GetTick>
 80043ec:	0002      	movs	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d801      	bhi.n	80043f8 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e02a      	b.n	800444e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80043f8:	4b17      	ldr	r3, [pc, #92]	; (8004458 <FLASH_WaitForLastOperation+0x8c>)
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	4013      	ands	r3, r2
 8004400:	d1f2      	bne.n	80043e8 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8004402:	4b15      	ldr	r3, [pc, #84]	; (8004458 <FLASH_WaitForLastOperation+0x8c>)
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	4a15      	ldr	r2, [pc, #84]	; (800445c <FLASH_WaitForLastOperation+0x90>)
 8004408:	4013      	ands	r3, r2
 800440a:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800440c:	4b12      	ldr	r3, [pc, #72]	; (8004458 <FLASH_WaitForLastOperation+0x8c>)
 800440e:	4a14      	ldr	r2, [pc, #80]	; (8004460 <FLASH_WaitForLastOperation+0x94>)
 8004410:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d004      	beq.n	8004422 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004418:	4b12      	ldr	r3, [pc, #72]	; (8004464 <FLASH_WaitForLastOperation+0x98>)
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e015      	b.n	800444e <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8004422:	f7fe ff85 	bl	8003330 <HAL_GetTick>
 8004426:	0002      	movs	r2, r0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	189b      	adds	r3, r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800442e:	e007      	b.n	8004440 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8004430:	f7fe ff7e 	bl	8003330 <HAL_GetTick>
 8004434:	0002      	movs	r2, r0
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4293      	cmp	r3, r2
 800443a:	d801      	bhi.n	8004440 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e006      	b.n	800444e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <FLASH_WaitForLastOperation+0x8c>)
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	02db      	lsls	r3, r3, #11
 8004448:	4013      	ands	r3, r2
 800444a:	d1f1      	bne.n	8004430 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	0018      	movs	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	b004      	add	sp, #16
 8004454:	bd80      	pop	{r7, pc}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	40022000 	.word	0x40022000
 800445c:	000083fa 	.word	0x000083fa
 8004460:	000083fb 	.word	0x000083fb
 8004464:	20001170 	.word	0x20001170

08004468 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004468:	b5b0      	push	{r4, r5, r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	603a      	str	r2, [r7, #0]
 8004472:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <FLASH_Program_DoubleWord+0x3c>)
 8004476:	695a      	ldr	r2, [r3, #20]
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <FLASH_Program_DoubleWord+0x3c>)
 800447a:	2101      	movs	r1, #1
 800447c:	430a      	orrs	r2, r1
 800447e:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004486:	f3bf 8f6f 	isb	sy
}
 800448a:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	001c      	movs	r4, r3
 8004490:	2300      	movs	r3, #0
 8004492:	001d      	movs	r5, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3304      	adds	r3, #4
 8004498:	0022      	movs	r2, r4
 800449a:	601a      	str	r2, [r3, #0]
}
 800449c:	46c0      	nop			; (mov r8, r8)
 800449e:	46bd      	mov	sp, r7
 80044a0:	b004      	add	sp, #16
 80044a2:	bdb0      	pop	{r4, r5, r7, pc}
 80044a4:	40022000 	.word	0x40022000

080044a8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80044a8:	b5b0      	push	{r4, r5, r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80044b2:	4b35      	ldr	r3, [pc, #212]	; (8004588 <HAL_FLASHEx_Erase+0xe0>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_FLASHEx_Erase+0x16>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e05f      	b.n	800457e <HAL_FLASHEx_Erase+0xd6>
 80044be:	4b32      	ldr	r3, [pc, #200]	; (8004588 <HAL_FLASHEx_Erase+0xe0>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044c4:	4b30      	ldr	r3, [pc, #192]	; (8004588 <HAL_FLASHEx_Erase+0xe0>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044ca:	250f      	movs	r5, #15
 80044cc:	197c      	adds	r4, r7, r5
 80044ce:	23fa      	movs	r3, #250	; 0xfa
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	0018      	movs	r0, r3
 80044d4:	f7ff ff7a 	bl	80043cc <FLASH_WaitForLastOperation>
 80044d8:	0003      	movs	r3, r0
 80044da:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80044dc:	002c      	movs	r4, r5
 80044de:	193b      	adds	r3, r7, r4
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d145      	bne.n	8004572 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2204      	movs	r2, #4
 80044ea:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d10d      	bne.n	8004510 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	0018      	movs	r0, r3
 80044fa:	f000 f849 	bl	8004590 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044fe:	193c      	adds	r4, r7, r4
 8004500:	23fa      	movs	r3, #250	; 0xfa
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	0018      	movs	r0, r3
 8004506:	f7ff ff61 	bl	80043cc <FLASH_WaitForLastOperation>
 800450a:	0003      	movs	r3, r0
 800450c:	7023      	strb	r3, [r4, #0]
 800450e:	e030      	b.n	8004572 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2201      	movs	r2, #1
 8004514:	4252      	negs	r2, r2
 8004516:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	e01a      	b.n	8004556 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	0011      	movs	r1, r2
 8004528:	0018      	movs	r0, r3
 800452a:	f000 f845 	bl	80045b8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800452e:	250f      	movs	r5, #15
 8004530:	197c      	adds	r4, r7, r5
 8004532:	23fa      	movs	r3, #250	; 0xfa
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	0018      	movs	r0, r3
 8004538:	f7ff ff48 	bl	80043cc <FLASH_WaitForLastOperation>
 800453c:	0003      	movs	r3, r0
 800453e:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8004540:	197b      	adds	r3, r7, r5
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	601a      	str	r2, [r3, #0]
          break;
 800454e:	e00a      	b.n	8004566 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	3301      	adds	r3, #1
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	18d3      	adds	r3, r2, r3
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	429a      	cmp	r2, r3
 8004564:	d3dc      	bcc.n	8004520 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004566:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_FLASHEx_Erase+0xe4>)
 8004568:	695a      	ldr	r2, [r3, #20]
 800456a:	4b08      	ldr	r3, [pc, #32]	; (800458c <HAL_FLASHEx_Erase+0xe4>)
 800456c:	2102      	movs	r1, #2
 800456e:	438a      	bics	r2, r1
 8004570:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_FLASHEx_Erase+0xe0>)
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004578:	230f      	movs	r3, #15
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	781b      	ldrb	r3, [r3, #0]
}
 800457e:	0018      	movs	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	b004      	add	sp, #16
 8004584:	bdb0      	pop	{r4, r5, r7, pc}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	20001170 	.word	0x20001170
 800458c:	40022000 	.word	0x40022000

08004590 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <FLASH_MassErase+0x24>)
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	431a      	orrs	r2, r3
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <FLASH_MassErase+0x24>)
 80045a2:	2180      	movs	r1, #128	; 0x80
 80045a4:	0249      	lsls	r1, r1, #9
 80045a6:	430a      	orrs	r2, r1
 80045a8:	615a      	str	r2, [r3, #20]
}
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b002      	add	sp, #8
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	40022000 	.word	0x40022000

080045b8 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <FLASH_PageErase+0x2c>)
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	4a08      	ldr	r2, [pc, #32]	; (80045e8 <FLASH_PageErase+0x30>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	00da      	lsls	r2, r3, #3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <FLASH_PageErase+0x2c>)
 80045d6:	4905      	ldr	r1, [pc, #20]	; (80045ec <FLASH_PageErase+0x34>)
 80045d8:	430a      	orrs	r2, r1
 80045da:	615a      	str	r2, [r3, #20]
}
 80045dc:	46c0      	nop			; (mov r8, r8)
 80045de:	46bd      	mov	sp, r7
 80045e0:	b004      	add	sp, #16
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40022000 	.word	0x40022000
 80045e8:	ffffe007 	.word	0xffffe007
 80045ec:	00010002 	.word	0x00010002

080045f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045fe:	e147      	b.n	8004890 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2101      	movs	r1, #1
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4091      	lsls	r1, r2
 800460a:	000a      	movs	r2, r1
 800460c:	4013      	ands	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d100      	bne.n	8004618 <HAL_GPIO_Init+0x28>
 8004616:	e138      	b.n	800488a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2203      	movs	r2, #3
 800461e:	4013      	ands	r3, r2
 8004620:	2b01      	cmp	r3, #1
 8004622:	d005      	beq.n	8004630 <HAL_GPIO_Init+0x40>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2203      	movs	r2, #3
 800462a:	4013      	ands	r3, r2
 800462c:	2b02      	cmp	r3, #2
 800462e:	d130      	bne.n	8004692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	2203      	movs	r2, #3
 800463c:	409a      	lsls	r2, r3
 800463e:	0013      	movs	r3, r2
 8004640:	43da      	mvns	r2, r3
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4013      	ands	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	409a      	lsls	r2, r3
 8004652:	0013      	movs	r3, r2
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004666:	2201      	movs	r2, #1
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	409a      	lsls	r2, r3
 800466c:	0013      	movs	r3, r2
 800466e:	43da      	mvns	r2, r3
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4013      	ands	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	2201      	movs	r2, #1
 800467e:	401a      	ands	r2, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	409a      	lsls	r2, r3
 8004684:	0013      	movs	r3, r2
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2203      	movs	r2, #3
 8004698:	4013      	ands	r3, r2
 800469a:	2b03      	cmp	r3, #3
 800469c:	d017      	beq.n	80046ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	2203      	movs	r2, #3
 80046aa:	409a      	lsls	r2, r3
 80046ac:	0013      	movs	r3, r2
 80046ae:	43da      	mvns	r2, r3
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4013      	ands	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	409a      	lsls	r2, r3
 80046c0:	0013      	movs	r3, r2
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2203      	movs	r2, #3
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d123      	bne.n	8004722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	08da      	lsrs	r2, r3, #3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3208      	adds	r2, #8
 80046e2:	0092      	lsls	r2, r2, #2
 80046e4:	58d3      	ldr	r3, [r2, r3]
 80046e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2207      	movs	r2, #7
 80046ec:	4013      	ands	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	220f      	movs	r2, #15
 80046f2:	409a      	lsls	r2, r3
 80046f4:	0013      	movs	r3, r2
 80046f6:	43da      	mvns	r2, r3
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4013      	ands	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2107      	movs	r1, #7
 8004706:	400b      	ands	r3, r1
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	409a      	lsls	r2, r3
 800470c:	0013      	movs	r3, r2
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	08da      	lsrs	r2, r3, #3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3208      	adds	r2, #8
 800471c:	0092      	lsls	r2, r2, #2
 800471e:	6939      	ldr	r1, [r7, #16]
 8004720:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	2203      	movs	r2, #3
 800472e:	409a      	lsls	r2, r3
 8004730:	0013      	movs	r3, r2
 8004732:	43da      	mvns	r2, r3
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4013      	ands	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2203      	movs	r2, #3
 8004740:	401a      	ands	r2, r3
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	409a      	lsls	r2, r3
 8004748:	0013      	movs	r3, r2
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	23c0      	movs	r3, #192	; 0xc0
 800475c:	029b      	lsls	r3, r3, #10
 800475e:	4013      	ands	r3, r2
 8004760:	d100      	bne.n	8004764 <HAL_GPIO_Init+0x174>
 8004762:	e092      	b.n	800488a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004764:	4a50      	ldr	r2, [pc, #320]	; (80048a8 <HAL_GPIO_Init+0x2b8>)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	089b      	lsrs	r3, r3, #2
 800476a:	3318      	adds	r3, #24
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	589b      	ldr	r3, [r3, r2]
 8004770:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2203      	movs	r2, #3
 8004776:	4013      	ands	r3, r2
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	220f      	movs	r2, #15
 800477c:	409a      	lsls	r2, r3
 800477e:	0013      	movs	r3, r2
 8004780:	43da      	mvns	r2, r3
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4013      	ands	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	23a0      	movs	r3, #160	; 0xa0
 800478c:	05db      	lsls	r3, r3, #23
 800478e:	429a      	cmp	r2, r3
 8004790:	d013      	beq.n	80047ba <HAL_GPIO_Init+0x1ca>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a45      	ldr	r2, [pc, #276]	; (80048ac <HAL_GPIO_Init+0x2bc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00d      	beq.n	80047b6 <HAL_GPIO_Init+0x1c6>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a44      	ldr	r2, [pc, #272]	; (80048b0 <HAL_GPIO_Init+0x2c0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d007      	beq.n	80047b2 <HAL_GPIO_Init+0x1c2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a43      	ldr	r2, [pc, #268]	; (80048b4 <HAL_GPIO_Init+0x2c4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d101      	bne.n	80047ae <HAL_GPIO_Init+0x1be>
 80047aa:	2303      	movs	r3, #3
 80047ac:	e006      	b.n	80047bc <HAL_GPIO_Init+0x1cc>
 80047ae:	2305      	movs	r3, #5
 80047b0:	e004      	b.n	80047bc <HAL_GPIO_Init+0x1cc>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e002      	b.n	80047bc <HAL_GPIO_Init+0x1cc>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <HAL_GPIO_Init+0x1cc>
 80047ba:	2300      	movs	r3, #0
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	2103      	movs	r1, #3
 80047c0:	400a      	ands	r2, r1
 80047c2:	00d2      	lsls	r2, r2, #3
 80047c4:	4093      	lsls	r3, r2
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80047cc:	4936      	ldr	r1, [pc, #216]	; (80048a8 <HAL_GPIO_Init+0x2b8>)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	089b      	lsrs	r3, r3, #2
 80047d2:	3318      	adds	r3, #24
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047da:	4b33      	ldr	r3, [pc, #204]	; (80048a8 <HAL_GPIO_Init+0x2b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	43da      	mvns	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4013      	ands	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	035b      	lsls	r3, r3, #13
 80047f2:	4013      	ands	r3, r2
 80047f4:	d003      	beq.n	80047fe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047fe:	4b2a      	ldr	r3, [pc, #168]	; (80048a8 <HAL_GPIO_Init+0x2b8>)
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004804:	4b28      	ldr	r3, [pc, #160]	; (80048a8 <HAL_GPIO_Init+0x2b8>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	43da      	mvns	r2, r3
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4013      	ands	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	2380      	movs	r3, #128	; 0x80
 800481a:	039b      	lsls	r3, r3, #14
 800481c:	4013      	ands	r3, r2
 800481e:	d003      	beq.n	8004828 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004828:	4b1f      	ldr	r3, [pc, #124]	; (80048a8 <HAL_GPIO_Init+0x2b8>)
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800482e:	4a1e      	ldr	r2, [pc, #120]	; (80048a8 <HAL_GPIO_Init+0x2b8>)
 8004830:	2384      	movs	r3, #132	; 0x84
 8004832:	58d3      	ldr	r3, [r2, r3]
 8004834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	43da      	mvns	r2, r3
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	029b      	lsls	r3, r3, #10
 8004848:	4013      	ands	r3, r2
 800484a:	d003      	beq.n	8004854 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004854:	4914      	ldr	r1, [pc, #80]	; (80048a8 <HAL_GPIO_Init+0x2b8>)
 8004856:	2284      	movs	r2, #132	; 0x84
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800485c:	4a12      	ldr	r2, [pc, #72]	; (80048a8 <HAL_GPIO_Init+0x2b8>)
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	58d3      	ldr	r3, [r2, r3]
 8004862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	43da      	mvns	r2, r3
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4013      	ands	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	025b      	lsls	r3, r3, #9
 8004876:	4013      	ands	r3, r2
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004882:	4909      	ldr	r1, [pc, #36]	; (80048a8 <HAL_GPIO_Init+0x2b8>)
 8004884:	2280      	movs	r2, #128	; 0x80
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	3301      	adds	r3, #1
 800488e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	40da      	lsrs	r2, r3
 8004898:	1e13      	subs	r3, r2, #0
 800489a:	d000      	beq.n	800489e <HAL_GPIO_Init+0x2ae>
 800489c:	e6b0      	b.n	8004600 <HAL_GPIO_Init+0x10>
  }
}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	46c0      	nop			; (mov r8, r8)
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b006      	add	sp, #24
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40021800 	.word	0x40021800
 80048ac:	50000400 	.word	0x50000400
 80048b0:	50000800 	.word	0x50000800
 80048b4:	50000c00 	.word	0x50000c00

080048b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80048c6:	e0b4      	b.n	8004a32 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80048c8:	2201      	movs	r2, #1
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	409a      	lsls	r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	4013      	ands	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d100      	bne.n	80048dc <HAL_GPIO_DeInit+0x24>
 80048da:	e0a7      	b.n	8004a2c <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80048dc:	4a5a      	ldr	r2, [pc, #360]	; (8004a48 <HAL_GPIO_DeInit+0x190>)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	089b      	lsrs	r3, r3, #2
 80048e2:	3318      	adds	r3, #24
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	589b      	ldr	r3, [r3, r2]
 80048e8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2203      	movs	r2, #3
 80048ee:	4013      	ands	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	220f      	movs	r2, #15
 80048f4:	409a      	lsls	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4013      	ands	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	23a0      	movs	r3, #160	; 0xa0
 8004900:	05db      	lsls	r3, r3, #23
 8004902:	429a      	cmp	r2, r3
 8004904:	d013      	beq.n	800492e <HAL_GPIO_DeInit+0x76>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a50      	ldr	r2, [pc, #320]	; (8004a4c <HAL_GPIO_DeInit+0x194>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00d      	beq.n	800492a <HAL_GPIO_DeInit+0x72>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a4f      	ldr	r2, [pc, #316]	; (8004a50 <HAL_GPIO_DeInit+0x198>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d007      	beq.n	8004926 <HAL_GPIO_DeInit+0x6e>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a4e      	ldr	r2, [pc, #312]	; (8004a54 <HAL_GPIO_DeInit+0x19c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d101      	bne.n	8004922 <HAL_GPIO_DeInit+0x6a>
 800491e:	2303      	movs	r3, #3
 8004920:	e006      	b.n	8004930 <HAL_GPIO_DeInit+0x78>
 8004922:	2305      	movs	r3, #5
 8004924:	e004      	b.n	8004930 <HAL_GPIO_DeInit+0x78>
 8004926:	2302      	movs	r3, #2
 8004928:	e002      	b.n	8004930 <HAL_GPIO_DeInit+0x78>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <HAL_GPIO_DeInit+0x78>
 800492e:	2300      	movs	r3, #0
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	2103      	movs	r1, #3
 8004934:	400a      	ands	r2, r1
 8004936:	00d2      	lsls	r2, r2, #3
 8004938:	4093      	lsls	r3, r2
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	429a      	cmp	r2, r3
 800493e:	d136      	bne.n	80049ae <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004940:	4a41      	ldr	r2, [pc, #260]	; (8004a48 <HAL_GPIO_DeInit+0x190>)
 8004942:	2380      	movs	r3, #128	; 0x80
 8004944:	58d3      	ldr	r3, [r2, r3]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	43d2      	mvns	r2, r2
 800494a:	493f      	ldr	r1, [pc, #252]	; (8004a48 <HAL_GPIO_DeInit+0x190>)
 800494c:	4013      	ands	r3, r2
 800494e:	2280      	movs	r2, #128	; 0x80
 8004950:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004952:	4a3d      	ldr	r2, [pc, #244]	; (8004a48 <HAL_GPIO_DeInit+0x190>)
 8004954:	2384      	movs	r3, #132	; 0x84
 8004956:	58d3      	ldr	r3, [r2, r3]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	43d2      	mvns	r2, r2
 800495c:	493a      	ldr	r1, [pc, #232]	; (8004a48 <HAL_GPIO_DeInit+0x190>)
 800495e:	4013      	ands	r3, r2
 8004960:	2284      	movs	r2, #132	; 0x84
 8004962:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004964:	4b38      	ldr	r3, [pc, #224]	; (8004a48 <HAL_GPIO_DeInit+0x190>)
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	43d9      	mvns	r1, r3
 800496c:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <HAL_GPIO_DeInit+0x190>)
 800496e:	400a      	ands	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004972:	4b35      	ldr	r3, [pc, #212]	; (8004a48 <HAL_GPIO_DeInit+0x190>)
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	43d9      	mvns	r1, r3
 800497a:	4b33      	ldr	r3, [pc, #204]	; (8004a48 <HAL_GPIO_DeInit+0x190>)
 800497c:	400a      	ands	r2, r1
 800497e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2203      	movs	r2, #3
 8004984:	4013      	ands	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	220f      	movs	r2, #15
 800498a:	409a      	lsls	r2, r3
 800498c:	0013      	movs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004990:	4a2d      	ldr	r2, [pc, #180]	; (8004a48 <HAL_GPIO_DeInit+0x190>)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	089b      	lsrs	r3, r3, #2
 8004996:	3318      	adds	r3, #24
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	589a      	ldr	r2, [r3, r2]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	43d9      	mvns	r1, r3
 80049a0:	4829      	ldr	r0, [pc, #164]	; (8004a48 <HAL_GPIO_DeInit+0x190>)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	089b      	lsrs	r3, r3, #2
 80049a6:	400a      	ands	r2, r1
 80049a8:	3318      	adds	r3, #24
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	2103      	movs	r1, #3
 80049b8:	4099      	lsls	r1, r3
 80049ba:	000b      	movs	r3, r1
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	08da      	lsrs	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	3208      	adds	r2, #8
 80049ca:	0092      	lsls	r2, r2, #2
 80049cc:	58d3      	ldr	r3, [r2, r3]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	2107      	movs	r1, #7
 80049d2:	400a      	ands	r2, r1
 80049d4:	0092      	lsls	r2, r2, #2
 80049d6:	210f      	movs	r1, #15
 80049d8:	4091      	lsls	r1, r2
 80049da:	000a      	movs	r2, r1
 80049dc:	43d1      	mvns	r1, r2
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	08d2      	lsrs	r2, r2, #3
 80049e2:	4019      	ands	r1, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3208      	adds	r2, #8
 80049e8:	0092      	lsls	r2, r2, #2
 80049ea:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	0052      	lsls	r2, r2, #1
 80049f4:	2103      	movs	r1, #3
 80049f6:	4091      	lsls	r1, r2
 80049f8:	000a      	movs	r2, r1
 80049fa:	43d2      	mvns	r2, r2
 80049fc:	401a      	ands	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2101      	movs	r1, #1
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4091      	lsls	r1, r2
 8004a0c:	000a      	movs	r2, r1
 8004a0e:	43d2      	mvns	r2, r2
 8004a10:	401a      	ands	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	0052      	lsls	r2, r2, #1
 8004a1e:	2103      	movs	r1, #3
 8004a20:	4091      	lsls	r1, r2
 8004a22:	000a      	movs	r2, r1
 8004a24:	43d2      	mvns	r2, r2
 8004a26:	401a      	ands	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	40da      	lsrs	r2, r3
 8004a38:	1e13      	subs	r3, r2, #0
 8004a3a:	d000      	beq.n	8004a3e <HAL_GPIO_DeInit+0x186>
 8004a3c:	e744      	b.n	80048c8 <HAL_GPIO_DeInit+0x10>
  }
}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	46c0      	nop			; (mov r8, r8)
 8004a42:	46bd      	mov	sp, r7
 8004a44:	b006      	add	sp, #24
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40021800 	.word	0x40021800
 8004a4c:	50000400 	.word	0x50000400
 8004a50:	50000800 	.word	0x50000800
 8004a54:	50000c00 	.word	0x50000c00

08004a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	000a      	movs	r2, r1
 8004a62:	1cbb      	adds	r3, r7, #2
 8004a64:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	1cba      	adds	r2, r7, #2
 8004a6c:	8812      	ldrh	r2, [r2, #0]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004a72:	230f      	movs	r3, #15
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	2201      	movs	r2, #1
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	e003      	b.n	8004a84 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a7c:	230f      	movs	r3, #15
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004a84:	230f      	movs	r3, #15
 8004a86:	18fb      	adds	r3, r7, r3
 8004a88:	781b      	ldrb	r3, [r3, #0]
}
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b004      	add	sp, #16
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	0008      	movs	r0, r1
 8004a9c:	0011      	movs	r1, r2
 8004a9e:	1cbb      	adds	r3, r7, #2
 8004aa0:	1c02      	adds	r2, r0, #0
 8004aa2:	801a      	strh	r2, [r3, #0]
 8004aa4:	1c7b      	adds	r3, r7, #1
 8004aa6:	1c0a      	adds	r2, r1, #0
 8004aa8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004aaa:	1c7b      	adds	r3, r7, #1
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d004      	beq.n	8004abc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ab2:	1cbb      	adds	r3, r7, #2
 8004ab4:	881a      	ldrh	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004aba:	e003      	b.n	8004ac4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004abc:	1cbb      	adds	r3, r7, #2
 8004abe:	881a      	ldrh	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ac4:	46c0      	nop			; (mov r8, r8)
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b002      	add	sp, #8
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e082      	b.n	8004be4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2241      	movs	r2, #65	; 0x41
 8004ae2:	5c9b      	ldrb	r3, [r3, r2]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d107      	bne.n	8004afa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2240      	movs	r2, #64	; 0x40
 8004aee:	2100      	movs	r1, #0
 8004af0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	0018      	movs	r0, r3
 8004af6:	f7fe f8ed 	bl	8002cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2241      	movs	r2, #65	; 0x41
 8004afe:	2124      	movs	r1, #36	; 0x24
 8004b00:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	438a      	bics	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4934      	ldr	r1, [pc, #208]	; (8004bec <HAL_I2C_Init+0x120>)
 8004b1c:	400a      	ands	r2, r1
 8004b1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4931      	ldr	r1, [pc, #196]	; (8004bf0 <HAL_I2C_Init+0x124>)
 8004b2c:	400a      	ands	r2, r1
 8004b2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d108      	bne.n	8004b4a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2180      	movs	r1, #128	; 0x80
 8004b42:	0209      	lsls	r1, r1, #8
 8004b44:	430a      	orrs	r2, r1
 8004b46:	609a      	str	r2, [r3, #8]
 8004b48:	e007      	b.n	8004b5a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2184      	movs	r1, #132	; 0x84
 8004b54:	0209      	lsls	r1, r1, #8
 8004b56:	430a      	orrs	r2, r1
 8004b58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d104      	bne.n	8004b6c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2280      	movs	r2, #128	; 0x80
 8004b68:	0112      	lsls	r2, r2, #4
 8004b6a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	491f      	ldr	r1, [pc, #124]	; (8004bf4 <HAL_I2C_Init+0x128>)
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	491a      	ldr	r1, [pc, #104]	; (8004bf0 <HAL_I2C_Init+0x124>)
 8004b88:	400a      	ands	r2, r1
 8004b8a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	431a      	orrs	r2, r3
 8004b96:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69d9      	ldr	r1, [r3, #28]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1a      	ldr	r2, [r3, #32]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2241      	movs	r2, #65	; 0x41
 8004bd0:	2120      	movs	r1, #32
 8004bd2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2242      	movs	r2, #66	; 0x42
 8004bde:	2100      	movs	r1, #0
 8004be0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	0018      	movs	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b002      	add	sp, #8
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	f0ffffff 	.word	0xf0ffffff
 8004bf0:	ffff7fff 	.word	0xffff7fff
 8004bf4:	02008000 	.word	0x02008000

08004bf8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e022      	b.n	8004c50 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2241      	movs	r2, #65	; 0x41
 8004c0e:	2124      	movs	r1, #36	; 0x24
 8004c10:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	438a      	bics	r2, r1
 8004c20:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f7fe f8b7 	bl	8002d98 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2241      	movs	r2, #65	; 0x41
 8004c34:	2100      	movs	r1, #0
 8004c36:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2242      	movs	r2, #66	; 0x42
 8004c42:	2100      	movs	r1, #0
 8004c44:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2240      	movs	r2, #64	; 0x40
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	0018      	movs	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b002      	add	sp, #8
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c58:	b590      	push	{r4, r7, lr}
 8004c5a:	b089      	sub	sp, #36	; 0x24
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	0008      	movs	r0, r1
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	0019      	movs	r1, r3
 8004c66:	230a      	movs	r3, #10
 8004c68:	18fb      	adds	r3, r7, r3
 8004c6a:	1c02      	adds	r2, r0, #0
 8004c6c:	801a      	strh	r2, [r3, #0]
 8004c6e:	2308      	movs	r3, #8
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	1c0a      	adds	r2, r1, #0
 8004c74:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2241      	movs	r2, #65	; 0x41
 8004c7a:	5c9b      	ldrb	r3, [r3, r2]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d000      	beq.n	8004c84 <HAL_I2C_Master_Transmit+0x2c>
 8004c82:	e0e7      	b.n	8004e54 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2240      	movs	r2, #64	; 0x40
 8004c88:	5c9b      	ldrb	r3, [r3, r2]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_I2C_Master_Transmit+0x3a>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e0e1      	b.n	8004e56 <HAL_I2C_Master_Transmit+0x1fe>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2240      	movs	r2, #64	; 0x40
 8004c96:	2101      	movs	r1, #1
 8004c98:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c9a:	f7fe fb49 	bl	8003330 <HAL_GetTick>
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ca2:	2380      	movs	r3, #128	; 0x80
 8004ca4:	0219      	lsls	r1, r3, #8
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	2319      	movs	r3, #25
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f000 fa16 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 8004cb4:	1e03      	subs	r3, r0, #0
 8004cb6:	d001      	beq.n	8004cbc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0cc      	b.n	8004e56 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2241      	movs	r2, #65	; 0x41
 8004cc0:	2121      	movs	r1, #33	; 0x21
 8004cc2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2242      	movs	r2, #66	; 0x42
 8004cc8:	2110      	movs	r1, #16
 8004cca:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2208      	movs	r2, #8
 8004cdc:	18ba      	adds	r2, r7, r2
 8004cde:	8812      	ldrh	r2, [r2, #0]
 8004ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2bff      	cmp	r3, #255	; 0xff
 8004cf0:	d911      	bls.n	8004d16 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	22ff      	movs	r2, #255	; 0xff
 8004cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	2380      	movs	r3, #128	; 0x80
 8004d00:	045c      	lsls	r4, r3, #17
 8004d02:	230a      	movs	r3, #10
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	8819      	ldrh	r1, [r3, #0]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	4b55      	ldr	r3, [pc, #340]	; (8004e60 <HAL_I2C_Master_Transmit+0x208>)
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	0023      	movs	r3, r4
 8004d10:	f000 fba0 	bl	8005454 <I2C_TransferConfig>
 8004d14:	e075      	b.n	8004e02 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	2380      	movs	r3, #128	; 0x80
 8004d28:	049c      	lsls	r4, r3, #18
 8004d2a:	230a      	movs	r3, #10
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	8819      	ldrh	r1, [r3, #0]
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	4b4b      	ldr	r3, [pc, #300]	; (8004e60 <HAL_I2C_Master_Transmit+0x208>)
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	0023      	movs	r3, r4
 8004d38:	f000 fb8c 	bl	8005454 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d3c:	e061      	b.n	8004e02 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	0018      	movs	r0, r3
 8004d46:	f000 fa0a 	bl	800515e <I2C_WaitOnTXISFlagUntilTimeout>
 8004d4a:	1e03      	subs	r3, r0, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e081      	b.n	8004e56 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	781a      	ldrb	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d03a      	beq.n	8004e02 <HAL_I2C_Master_Transmit+0x1aa>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d136      	bne.n	8004e02 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	0013      	movs	r3, r2
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2180      	movs	r1, #128	; 0x80
 8004da2:	f000 f99d 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 8004da6:	1e03      	subs	r3, r0, #0
 8004da8:	d001      	beq.n	8004dae <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e053      	b.n	8004e56 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2bff      	cmp	r3, #255	; 0xff
 8004db6:	d911      	bls.n	8004ddc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	22ff      	movs	r2, #255	; 0xff
 8004dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	2380      	movs	r3, #128	; 0x80
 8004dc6:	045c      	lsls	r4, r3, #17
 8004dc8:	230a      	movs	r3, #10
 8004dca:	18fb      	adds	r3, r7, r3
 8004dcc:	8819      	ldrh	r1, [r3, #0]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	0023      	movs	r3, r4
 8004dd6:	f000 fb3d 	bl	8005454 <I2C_TransferConfig>
 8004dda:	e012      	b.n	8004e02 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	2380      	movs	r3, #128	; 0x80
 8004dee:	049c      	lsls	r4, r3, #18
 8004df0:	230a      	movs	r3, #10
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	8819      	ldrh	r1, [r3, #0]
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	0023      	movs	r3, r4
 8004dfe:	f000 fb29 	bl	8005454 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d198      	bne.n	8004d3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	0018      	movs	r0, r3
 8004e14:	f000 f9e2 	bl	80051dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e18:	1e03      	subs	r3, r0, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e01a      	b.n	8004e56 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2220      	movs	r2, #32
 8004e26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	490c      	ldr	r1, [pc, #48]	; (8004e64 <HAL_I2C_Master_Transmit+0x20c>)
 8004e34:	400a      	ands	r2, r1
 8004e36:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2241      	movs	r2, #65	; 0x41
 8004e3c:	2120      	movs	r1, #32
 8004e3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2242      	movs	r2, #66	; 0x42
 8004e44:	2100      	movs	r1, #0
 8004e46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2240      	movs	r2, #64	; 0x40
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	e000      	b.n	8004e56 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004e54:	2302      	movs	r3, #2
  }
}
 8004e56:	0018      	movs	r0, r3
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	b007      	add	sp, #28
 8004e5c:	bd90      	pop	{r4, r7, pc}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	80002000 	.word	0x80002000
 8004e64:	fe00e800 	.word	0xfe00e800

08004e68 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08a      	sub	sp, #40	; 0x28
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	607a      	str	r2, [r7, #4]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	230a      	movs	r3, #10
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	1c0a      	adds	r2, r1, #0
 8004e7a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2241      	movs	r2, #65	; 0x41
 8004e84:	5c9b      	ldrb	r3, [r3, r2]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d000      	beq.n	8004e8e <HAL_I2C_IsDeviceReady+0x26>
 8004e8c:	e0fe      	b.n	800508c <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699a      	ldr	r2, [r3, #24]
 8004e94:	2380      	movs	r3, #128	; 0x80
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	401a      	ands	r2, r3
 8004e9a:	2380      	movs	r3, #128	; 0x80
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d101      	bne.n	8004ea6 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e0f3      	b.n	800508e <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2240      	movs	r2, #64	; 0x40
 8004eaa:	5c9b      	ldrb	r3, [r3, r2]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <HAL_I2C_IsDeviceReady+0x4c>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e0ec      	b.n	800508e <HAL_I2C_IsDeviceReady+0x226>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2240      	movs	r2, #64	; 0x40
 8004eb8:	2101      	movs	r1, #1
 8004eba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2241      	movs	r2, #65	; 0x41
 8004ec0:	2124      	movs	r1, #36	; 0x24
 8004ec2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d107      	bne.n	8004ee2 <HAL_I2C_IsDeviceReady+0x7a>
 8004ed2:	230a      	movs	r3, #10
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	059b      	lsls	r3, r3, #22
 8004eda:	0d9b      	lsrs	r3, r3, #22
 8004edc:	4a6e      	ldr	r2, [pc, #440]	; (8005098 <HAL_I2C_IsDeviceReady+0x230>)
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	e007      	b.n	8004ef2 <HAL_I2C_IsDeviceReady+0x8a>
 8004ee2:	230a      	movs	r3, #10
 8004ee4:	18fb      	adds	r3, r7, r3
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	059b      	lsls	r3, r3, #22
 8004eea:	0d9b      	lsrs	r3, r3, #22
 8004eec:	22a0      	movs	r2, #160	; 0xa0
 8004eee:	0192      	lsls	r2, r2, #6
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004ef8:	f7fe fa1a 	bl	8003330 <HAL_GetTick>
 8004efc:	0003      	movs	r3, r0
 8004efe:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	2220      	movs	r2, #32
 8004f08:	4013      	ands	r3, r2
 8004f0a:	3b20      	subs	r3, #32
 8004f0c:	425a      	negs	r2, r3
 8004f0e:	4153      	adcs	r3, r2
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	231f      	movs	r3, #31
 8004f14:	18fb      	adds	r3, r7, r3
 8004f16:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	2210      	movs	r2, #16
 8004f20:	4013      	ands	r3, r2
 8004f22:	3b10      	subs	r3, #16
 8004f24:	425a      	negs	r2, r3
 8004f26:	4153      	adcs	r3, r2
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	231e      	movs	r3, #30
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004f30:	e035      	b.n	8004f9e <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	3301      	adds	r3, #1
 8004f36:	d01a      	beq.n	8004f6e <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f38:	f7fe f9fa 	bl	8003330 <HAL_GetTick>
 8004f3c:	0002      	movs	r2, r0
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d302      	bcc.n	8004f4e <HAL_I2C_IsDeviceReady+0xe6>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10f      	bne.n	8004f6e <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2241      	movs	r2, #65	; 0x41
 8004f52:	2120      	movs	r1, #32
 8004f54:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2240      	movs	r2, #64	; 0x40
 8004f66:	2100      	movs	r1, #0
 8004f68:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e08f      	b.n	800508e <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	2220      	movs	r2, #32
 8004f76:	4013      	ands	r3, r2
 8004f78:	3b20      	subs	r3, #32
 8004f7a:	425a      	negs	r2, r3
 8004f7c:	4153      	adcs	r3, r2
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	231f      	movs	r3, #31
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	2210      	movs	r2, #16
 8004f8e:	4013      	ands	r3, r2
 8004f90:	3b10      	subs	r3, #16
 8004f92:	425a      	negs	r2, r3
 8004f94:	4153      	adcs	r3, r2
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	231e      	movs	r3, #30
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004f9e:	231f      	movs	r3, #31
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d104      	bne.n	8004fb2 <HAL_I2C_IsDeviceReady+0x14a>
 8004fa8:	231e      	movs	r3, #30
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0bf      	beq.n	8004f32 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	2210      	movs	r2, #16
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d01a      	beq.n	8004ff6 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	0013      	movs	r3, r2
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2120      	movs	r1, #32
 8004fce:	f000 f887 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 8004fd2:	1e03      	subs	r3, r0, #0
 8004fd4:	d001      	beq.n	8004fda <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e059      	b.n	800508e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2241      	movs	r2, #65	; 0x41
 8004fe6:	2120      	movs	r1, #32
 8004fe8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2240      	movs	r2, #64	; 0x40
 8004fee:	2100      	movs	r1, #0
 8004ff0:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e04b      	b.n	800508e <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	0013      	movs	r3, r2
 8005000:	2200      	movs	r2, #0
 8005002:	2120      	movs	r1, #32
 8005004:	f000 f86c 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 8005008:	1e03      	subs	r3, r0, #0
 800500a:	d001      	beq.n	8005010 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e03e      	b.n	800508e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2210      	movs	r2, #16
 8005016:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2220      	movs	r2, #32
 800501e:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	429a      	cmp	r2, r3
 8005026:	d119      	bne.n	800505c <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2180      	movs	r1, #128	; 0x80
 8005034:	01c9      	lsls	r1, r1, #7
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	0013      	movs	r3, r2
 8005044:	2200      	movs	r2, #0
 8005046:	2120      	movs	r1, #32
 8005048:	f000 f84a 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 800504c:	1e03      	subs	r3, r0, #0
 800504e:	d001      	beq.n	8005054 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e01c      	b.n	800508e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2220      	movs	r2, #32
 800505a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	3301      	adds	r3, #1
 8005060:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	429a      	cmp	r2, r3
 8005068:	d900      	bls.n	800506c <HAL_I2C_IsDeviceReady+0x204>
 800506a:	e72e      	b.n	8004eca <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2241      	movs	r2, #65	; 0x41
 8005070:	2120      	movs	r1, #32
 8005072:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005078:	2220      	movs	r2, #32
 800507a:	431a      	orrs	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2240      	movs	r2, #64	; 0x40
 8005084:	2100      	movs	r1, #0
 8005086:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 800508c:	2302      	movs	r3, #2
  }
}
 800508e:	0018      	movs	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	b008      	add	sp, #32
 8005094:	bd80      	pop	{r7, pc}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	02002000 	.word	0x02002000

0800509c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	2202      	movs	r2, #2
 80050ac:	4013      	ands	r3, r2
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d103      	bne.n	80050ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2200      	movs	r2, #0
 80050b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	2201      	movs	r2, #1
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d007      	beq.n	80050d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2101      	movs	r1, #1
 80050d4:	430a      	orrs	r2, r1
 80050d6:	619a      	str	r2, [r3, #24]
  }
}
 80050d8:	46c0      	nop			; (mov r8, r8)
 80050da:	46bd      	mov	sp, r7
 80050dc:	b002      	add	sp, #8
 80050de:	bd80      	pop	{r7, pc}

080050e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	1dfb      	adds	r3, r7, #7
 80050ee:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050f0:	e021      	b.n	8005136 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	3301      	adds	r3, #1
 80050f6:	d01e      	beq.n	8005136 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f8:	f7fe f91a 	bl	8003330 <HAL_GetTick>
 80050fc:	0002      	movs	r2, r0
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d302      	bcc.n	800510e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d113      	bne.n	8005136 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005112:	2220      	movs	r2, #32
 8005114:	431a      	orrs	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2241      	movs	r2, #65	; 0x41
 800511e:	2120      	movs	r1, #32
 8005120:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2242      	movs	r2, #66	; 0x42
 8005126:	2100      	movs	r1, #0
 8005128:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2240      	movs	r2, #64	; 0x40
 800512e:	2100      	movs	r1, #0
 8005130:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e00f      	b.n	8005156 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	4013      	ands	r3, r2
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	425a      	negs	r2, r3
 8005146:	4153      	adcs	r3, r2
 8005148:	b2db      	uxtb	r3, r3
 800514a:	001a      	movs	r2, r3
 800514c:	1dfb      	adds	r3, r7, #7
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d0ce      	beq.n	80050f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	0018      	movs	r0, r3
 8005158:	46bd      	mov	sp, r7
 800515a:	b004      	add	sp, #16
 800515c:	bd80      	pop	{r7, pc}

0800515e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800516a:	e02b      	b.n	80051c4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	0018      	movs	r0, r3
 8005174:	f000 f86e 	bl	8005254 <I2C_IsErrorOccurred>
 8005178:	1e03      	subs	r3, r0, #0
 800517a:	d001      	beq.n	8005180 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e029      	b.n	80051d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	3301      	adds	r3, #1
 8005184:	d01e      	beq.n	80051c4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005186:	f7fe f8d3 	bl	8003330 <HAL_GetTick>
 800518a:	0002      	movs	r2, r0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	d302      	bcc.n	800519c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d113      	bne.n	80051c4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a0:	2220      	movs	r2, #32
 80051a2:	431a      	orrs	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2241      	movs	r2, #65	; 0x41
 80051ac:	2120      	movs	r1, #32
 80051ae:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2242      	movs	r2, #66	; 0x42
 80051b4:	2100      	movs	r1, #0
 80051b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2240      	movs	r2, #64	; 0x40
 80051bc:	2100      	movs	r1, #0
 80051be:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e007      	b.n	80051d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	2202      	movs	r2, #2
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d1cc      	bne.n	800516c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	0018      	movs	r0, r3
 80051d6:	46bd      	mov	sp, r7
 80051d8:	b004      	add	sp, #16
 80051da:	bd80      	pop	{r7, pc}

080051dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051e8:	e028      	b.n	800523c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f000 f82f 	bl	8005254 <I2C_IsErrorOccurred>
 80051f6:	1e03      	subs	r3, r0, #0
 80051f8:	d001      	beq.n	80051fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e026      	b.n	800524c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fe:	f7fe f897 	bl	8003330 <HAL_GetTick>
 8005202:	0002      	movs	r2, r0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	429a      	cmp	r2, r3
 800520c:	d302      	bcc.n	8005214 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d113      	bne.n	800523c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005218:	2220      	movs	r2, #32
 800521a:	431a      	orrs	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2241      	movs	r2, #65	; 0x41
 8005224:	2120      	movs	r1, #32
 8005226:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2242      	movs	r2, #66	; 0x42
 800522c:	2100      	movs	r1, #0
 800522e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2240      	movs	r2, #64	; 0x40
 8005234:	2100      	movs	r1, #0
 8005236:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e007      	b.n	800524c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	2220      	movs	r2, #32
 8005244:	4013      	ands	r3, r2
 8005246:	2b20      	cmp	r3, #32
 8005248:	d1cf      	bne.n	80051ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	0018      	movs	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	b004      	add	sp, #16
 8005252:	bd80      	pop	{r7, pc}

08005254 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b590      	push	{r4, r7, lr}
 8005256:	b08b      	sub	sp, #44	; 0x2c
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	2327      	movs	r3, #39	; 0x27
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	2200      	movs	r2, #0
 8005266:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2210      	movs	r2, #16
 800527c:	4013      	ands	r3, r2
 800527e:	d100      	bne.n	8005282 <I2C_IsErrorOccurred+0x2e>
 8005280:	e082      	b.n	8005388 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2210      	movs	r2, #16
 8005288:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800528a:	e060      	b.n	800534e <I2C_IsErrorOccurred+0xfa>
 800528c:	2427      	movs	r4, #39	; 0x27
 800528e:	193b      	adds	r3, r7, r4
 8005290:	193a      	adds	r2, r7, r4
 8005292:	7812      	ldrb	r2, [r2, #0]
 8005294:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	3301      	adds	r3, #1
 800529a:	d058      	beq.n	800534e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800529c:	f7fe f848 	bl	8003330 <HAL_GetTick>
 80052a0:	0002      	movs	r2, r0
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d306      	bcc.n	80052ba <I2C_IsErrorOccurred+0x66>
 80052ac:	193b      	adds	r3, r7, r4
 80052ae:	193a      	adds	r2, r7, r4
 80052b0:	7812      	ldrb	r2, [r2, #0]
 80052b2:	701a      	strb	r2, [r3, #0]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d149      	bne.n	800534e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	2380      	movs	r3, #128	; 0x80
 80052c2:	01db      	lsls	r3, r3, #7
 80052c4:	4013      	ands	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80052c8:	2013      	movs	r0, #19
 80052ca:	183b      	adds	r3, r7, r0
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	2142      	movs	r1, #66	; 0x42
 80052d0:	5c52      	ldrb	r2, [r2, r1]
 80052d2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699a      	ldr	r2, [r3, #24]
 80052da:	2380      	movs	r3, #128	; 0x80
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	401a      	ands	r2, r3
 80052e0:	2380      	movs	r3, #128	; 0x80
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d126      	bne.n	8005336 <I2C_IsErrorOccurred+0xe2>
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	2380      	movs	r3, #128	; 0x80
 80052ec:	01db      	lsls	r3, r3, #7
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d021      	beq.n	8005336 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80052f2:	183b      	adds	r3, r7, r0
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d01d      	beq.n	8005336 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2180      	movs	r1, #128	; 0x80
 8005306:	01c9      	lsls	r1, r1, #7
 8005308:	430a      	orrs	r2, r1
 800530a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800530c:	f7fe f810 	bl	8003330 <HAL_GetTick>
 8005310:	0003      	movs	r3, r0
 8005312:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005314:	e00f      	b.n	8005336 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005316:	f7fe f80b 	bl	8003330 <HAL_GetTick>
 800531a:	0002      	movs	r2, r0
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b19      	cmp	r3, #25
 8005322:	d908      	bls.n	8005336 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	2220      	movs	r2, #32
 8005328:	4313      	orrs	r3, r2
 800532a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800532c:	2327      	movs	r3, #39	; 0x27
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	2201      	movs	r2, #1
 8005332:	701a      	strb	r2, [r3, #0]

              break;
 8005334:	e00b      	b.n	800534e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	2220      	movs	r2, #32
 800533e:	4013      	ands	r3, r2
 8005340:	2127      	movs	r1, #39	; 0x27
 8005342:	187a      	adds	r2, r7, r1
 8005344:	1879      	adds	r1, r7, r1
 8005346:	7809      	ldrb	r1, [r1, #0]
 8005348:	7011      	strb	r1, [r2, #0]
 800534a:	2b20      	cmp	r3, #32
 800534c:	d1e3      	bne.n	8005316 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	2220      	movs	r2, #32
 8005356:	4013      	ands	r3, r2
 8005358:	2b20      	cmp	r3, #32
 800535a:	d004      	beq.n	8005366 <I2C_IsErrorOccurred+0x112>
 800535c:	2327      	movs	r3, #39	; 0x27
 800535e:	18fb      	adds	r3, r7, r3
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d092      	beq.n	800528c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005366:	2327      	movs	r3, #39	; 0x27
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d103      	bne.n	8005378 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2220      	movs	r2, #32
 8005376:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	2204      	movs	r2, #4
 800537c:	4313      	orrs	r3, r2
 800537e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005380:	2327      	movs	r3, #39	; 0x27
 8005382:	18fb      	adds	r3, r7, r3
 8005384:	2201      	movs	r2, #1
 8005386:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	2380      	movs	r3, #128	; 0x80
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	4013      	ands	r3, r2
 8005398:	d00c      	beq.n	80053b4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	2201      	movs	r2, #1
 800539e:	4313      	orrs	r3, r2
 80053a0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2280      	movs	r2, #128	; 0x80
 80053a8:	0052      	lsls	r2, r2, #1
 80053aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053ac:	2327      	movs	r3, #39	; 0x27
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	2201      	movs	r2, #1
 80053b2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	2380      	movs	r3, #128	; 0x80
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	4013      	ands	r3, r2
 80053bc:	d00c      	beq.n	80053d8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2208      	movs	r2, #8
 80053c2:	4313      	orrs	r3, r2
 80053c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2280      	movs	r2, #128	; 0x80
 80053cc:	00d2      	lsls	r2, r2, #3
 80053ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053d0:	2327      	movs	r3, #39	; 0x27
 80053d2:	18fb      	adds	r3, r7, r3
 80053d4:	2201      	movs	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	2380      	movs	r3, #128	; 0x80
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4013      	ands	r3, r2
 80053e0:	d00c      	beq.n	80053fc <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	2202      	movs	r2, #2
 80053e6:	4313      	orrs	r3, r2
 80053e8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2280      	movs	r2, #128	; 0x80
 80053f0:	0092      	lsls	r2, r2, #2
 80053f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053f4:	2327      	movs	r3, #39	; 0x27
 80053f6:	18fb      	adds	r3, r7, r3
 80053f8:	2201      	movs	r2, #1
 80053fa:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80053fc:	2327      	movs	r3, #39	; 0x27
 80053fe:	18fb      	adds	r3, r7, r3
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d01d      	beq.n	8005442 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	0018      	movs	r0, r3
 800540a:	f7ff fe47 	bl	800509c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	490d      	ldr	r1, [pc, #52]	; (8005450 <I2C_IsErrorOccurred+0x1fc>)
 800541a:	400a      	ands	r2, r1
 800541c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	431a      	orrs	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2241      	movs	r2, #65	; 0x41
 800542e:	2120      	movs	r1, #32
 8005430:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2242      	movs	r2, #66	; 0x42
 8005436:	2100      	movs	r1, #0
 8005438:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2240      	movs	r2, #64	; 0x40
 800543e:	2100      	movs	r1, #0
 8005440:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005442:	2327      	movs	r3, #39	; 0x27
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	781b      	ldrb	r3, [r3, #0]
}
 8005448:	0018      	movs	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	b00b      	add	sp, #44	; 0x2c
 800544e:	bd90      	pop	{r4, r7, pc}
 8005450:	fe00e800 	.word	0xfe00e800

08005454 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	0008      	movs	r0, r1
 800545e:	0011      	movs	r1, r2
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	240a      	movs	r4, #10
 8005464:	193b      	adds	r3, r7, r4
 8005466:	1c02      	adds	r2, r0, #0
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	2009      	movs	r0, #9
 800546c:	183b      	adds	r3, r7, r0
 800546e:	1c0a      	adds	r2, r1, #0
 8005470:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005472:	193b      	adds	r3, r7, r4
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	059b      	lsls	r3, r3, #22
 8005478:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800547a:	183b      	adds	r3, r7, r0
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	0419      	lsls	r1, r3, #16
 8005480:	23ff      	movs	r3, #255	; 0xff
 8005482:	041b      	lsls	r3, r3, #16
 8005484:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005486:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	4313      	orrs	r3, r2
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800549e:	0d51      	lsrs	r1, r2, #21
 80054a0:	2280      	movs	r2, #128	; 0x80
 80054a2:	00d2      	lsls	r2, r2, #3
 80054a4:	400a      	ands	r2, r1
 80054a6:	4907      	ldr	r1, [pc, #28]	; (80054c4 <I2C_TransferConfig+0x70>)
 80054a8:	430a      	orrs	r2, r1
 80054aa:	43d2      	mvns	r2, r2
 80054ac:	401a      	ands	r2, r3
 80054ae:	0011      	movs	r1, r2
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	46bd      	mov	sp, r7
 80054be:	b007      	add	sp, #28
 80054c0:	bd90      	pop	{r4, r7, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	03ff63ff 	.word	0x03ff63ff

080054c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2241      	movs	r2, #65	; 0x41
 80054d6:	5c9b      	ldrb	r3, [r3, r2]
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d138      	bne.n	8005550 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2240      	movs	r2, #64	; 0x40
 80054e2:	5c9b      	ldrb	r3, [r3, r2]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d101      	bne.n	80054ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e032      	b.n	8005552 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2240      	movs	r2, #64	; 0x40
 80054f0:	2101      	movs	r1, #1
 80054f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2241      	movs	r2, #65	; 0x41
 80054f8:	2124      	movs	r1, #36	; 0x24
 80054fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2101      	movs	r1, #1
 8005508:	438a      	bics	r2, r1
 800550a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4911      	ldr	r1, [pc, #68]	; (800555c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005518:	400a      	ands	r2, r1
 800551a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6819      	ldr	r1, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2101      	movs	r1, #1
 8005538:	430a      	orrs	r2, r1
 800553a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2241      	movs	r2, #65	; 0x41
 8005540:	2120      	movs	r1, #32
 8005542:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2240      	movs	r2, #64	; 0x40
 8005548:	2100      	movs	r1, #0
 800554a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	e000      	b.n	8005552 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005550:	2302      	movs	r3, #2
  }
}
 8005552:	0018      	movs	r0, r3
 8005554:	46bd      	mov	sp, r7
 8005556:	b002      	add	sp, #8
 8005558:	bd80      	pop	{r7, pc}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	ffffefff 	.word	0xffffefff

08005560 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2241      	movs	r2, #65	; 0x41
 800556e:	5c9b      	ldrb	r3, [r3, r2]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b20      	cmp	r3, #32
 8005574:	d139      	bne.n	80055ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2240      	movs	r2, #64	; 0x40
 800557a:	5c9b      	ldrb	r3, [r3, r2]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005580:	2302      	movs	r3, #2
 8005582:	e033      	b.n	80055ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2240      	movs	r2, #64	; 0x40
 8005588:	2101      	movs	r1, #1
 800558a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2241      	movs	r2, #65	; 0x41
 8005590:	2124      	movs	r1, #36	; 0x24
 8005592:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2101      	movs	r1, #1
 80055a0:	438a      	bics	r2, r1
 80055a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a11      	ldr	r2, [pc, #68]	; (80055f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2101      	movs	r1, #1
 80055d2:	430a      	orrs	r2, r1
 80055d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2241      	movs	r2, #65	; 0x41
 80055da:	2120      	movs	r1, #32
 80055dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2240      	movs	r2, #64	; 0x40
 80055e2:	2100      	movs	r1, #0
 80055e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	e000      	b.n	80055ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055ea:	2302      	movs	r3, #2
  }
}
 80055ec:	0018      	movs	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b004      	add	sp, #16
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	fffff0ff 	.word	0xfffff0ff

080055f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005600:	4b19      	ldr	r3, [pc, #100]	; (8005668 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a19      	ldr	r2, [pc, #100]	; (800566c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005606:	4013      	ands	r3, r2
 8005608:	0019      	movs	r1, r3
 800560a:	4b17      	ldr	r3, [pc, #92]	; (8005668 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	430a      	orrs	r2, r1
 8005610:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	429a      	cmp	r2, r3
 800561a:	d11f      	bne.n	800565c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800561c:	4b14      	ldr	r3, [pc, #80]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	0013      	movs	r3, r2
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	189b      	adds	r3, r3, r2
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	4912      	ldr	r1, [pc, #72]	; (8005674 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800562a:	0018      	movs	r0, r3
 800562c:	f7fa fd7a 	bl	8000124 <__udivsi3>
 8005630:	0003      	movs	r3, r0
 8005632:	3301      	adds	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005636:	e008      	b.n	800564a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3b01      	subs	r3, #1
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e001      	b.n	800564a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e009      	b.n	800565e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800564a:	4b07      	ldr	r3, [pc, #28]	; (8005668 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	2380      	movs	r3, #128	; 0x80
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	401a      	ands	r2, r3
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	429a      	cmp	r2, r3
 800565a:	d0ed      	beq.n	8005638 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	0018      	movs	r0, r3
 8005660:	46bd      	mov	sp, r7
 8005662:	b004      	add	sp, #16
 8005664:	bd80      	pop	{r7, pc}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	40007000 	.word	0x40007000
 800566c:	fffff9ff 	.word	0xfffff9ff
 8005670:	20000014 	.word	0x20000014
 8005674:	000f4240 	.word	0x000f4240

08005678 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800567c:	4b03      	ldr	r3, [pc, #12]	; (800568c <LL_RCC_GetAPB1Prescaler+0x14>)
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	23e0      	movs	r3, #224	; 0xe0
 8005682:	01db      	lsls	r3, r3, #7
 8005684:	4013      	ands	r3, r2
}
 8005686:	0018      	movs	r0, r3
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40021000 	.word	0x40021000

08005690 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005696:	f7fd fe4b 	bl	8003330 <HAL_GetTick>
 800569a:	0003      	movs	r3, r0
 800569c:	607b      	str	r3, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800569e:	4b35      	ldr	r3, [pc, #212]	; (8005774 <HAL_RCC_DeInit+0xe4>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b34      	ldr	r3, [pc, #208]	; (8005774 <HAL_RCC_DeInit+0xe4>)
 80056a4:	2180      	movs	r1, #128	; 0x80
 80056a6:	0049      	lsls	r1, r1, #1
 80056a8:	430a      	orrs	r2, r1
 80056aa:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_DeInit+0x30>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ae:	f7fd fe3f 	bl	8003330 <HAL_GetTick>
 80056b2:	0002      	movs	r2, r0
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e054      	b.n	800576a <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056c0:	4b2c      	ldr	r3, [pc, #176]	; (8005774 <HAL_RCC_DeInit+0xe4>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	2380      	movs	r3, #128	; 0x80
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	4013      	ands	r3, r2
 80056ca:	d0f0      	beq.n	80056ae <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 80056cc:	4b29      	ldr	r3, [pc, #164]	; (8005774 <HAL_RCC_DeInit+0xe4>)
 80056ce:	2280      	movs	r2, #128	; 0x80
 80056d0:	01d2      	lsls	r2, r2, #7
 80056d2:	605a      	str	r2, [r3, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056d4:	f7fd fe2c 	bl	8003330 <HAL_GetTick>
 80056d8:	0003      	movs	r3, r0
 80056da:	607b      	str	r3, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000000u;
 80056dc:	4b25      	ldr	r3, [pc, #148]	; (8005774 <HAL_RCC_DeInit+0xe4>)
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80056e2:	e009      	b.n	80056f8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056e4:	f7fd fe24 	bl	8003330 <HAL_GetTick>
 80056e8:	0002      	movs	r2, r0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	4a22      	ldr	r2, [pc, #136]	; (8005778 <HAL_RCC_DeInit+0xe8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e038      	b.n	800576a <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80056f8:	4b1e      	ldr	r3, [pc, #120]	; (8005774 <HAL_RCC_DeInit+0xe4>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2238      	movs	r2, #56	; 0x38
 80056fe:	4013      	ands	r3, r2
 8005700:	d1f0      	bne.n	80056e4 <HAL_RCC_DeInit+0x54>
    }
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8005702:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <HAL_RCC_DeInit+0xe4>)
 8005704:	2280      	movs	r2, #128	; 0x80
 8005706:	0052      	lsls	r2, r2, #1
 8005708:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 800570a:	4b1a      	ldr	r3, [pc, #104]	; (8005774 <HAL_RCC_DeInit+0xe4>)
 800570c:	2280      	movs	r2, #128	; 0x80
 800570e:	0052      	lsls	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005712:	f7fd fe0d 	bl	8003330 <HAL_GetTick>
 8005716:	0003      	movs	r3, r0
 8005718:	607b      	str	r3, [r7, #4]

  /* Wait till PLL is ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800571a:	e008      	b.n	800572e <HAL_RCC_DeInit+0x9e>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800571c:	f7fd fe08 	bl	8003330 <HAL_GetTick>
 8005720:	0002      	movs	r2, r0
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_DeInit+0x9e>
    {
      return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e01d      	b.n	800576a <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800572e:	4b11      	ldr	r3, [pc, #68]	; (8005774 <HAL_RCC_DeInit+0xe4>)
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	2380      	movs	r3, #128	; 0x80
 8005734:	049b      	lsls	r3, r3, #18
 8005736:	4013      	ands	r3, r2
 8005738:	d1f0      	bne.n	800571c <HAL_RCC_DeInit+0x8c>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 800573a:	4b0e      	ldr	r3, [pc, #56]	; (8005774 <HAL_RCC_DeInit+0xe4>)
 800573c:	2280      	movs	r2, #128	; 0x80
 800573e:	0152      	lsls	r2, r2, #5
 8005740:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000u;
 8005742:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <HAL_RCC_DeInit+0xe4>)
 8005744:	2200      	movs	r2, #0
 8005746:	619a      	str	r2, [r3, #24]

  /* Clear all flags */
  RCC->CICR = 0xFFFFFFFFu;
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <HAL_RCC_DeInit+0xe4>)
 800574a:	2201      	movs	r2, #1
 800574c:	4252      	negs	r2, r2
 800574e:	621a      	str	r2, [r3, #32]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8005750:	4b0a      	ldr	r3, [pc, #40]	; (800577c <HAL_RCC_DeInit+0xec>)
 8005752:	4a0b      	ldr	r2, [pc, #44]	; (8005780 <HAL_RCC_DeInit+0xf0>)
 8005754:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005756:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <HAL_RCC_DeInit+0xf4>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	0018      	movs	r0, r3
 800575c:	f7fd fd8c 	bl	8003278 <HAL_InitTick>
 8005760:	1e03      	subs	r3, r0, #0
 8005762:	d001      	beq.n	8005768 <HAL_RCC_DeInit+0xd8>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <HAL_RCC_DeInit+0xda>
  }
  else
  {
    return HAL_OK;
 8005768:	2300      	movs	r3, #0
  }
}
 800576a:	0018      	movs	r0, r3
 800576c:	46bd      	mov	sp, r7
 800576e:	b002      	add	sp, #8
 8005770:	bd80      	pop	{r7, pc}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	40021000 	.word	0x40021000
 8005778:	00001388 	.word	0x00001388
 800577c:	20000014 	.word	0x20000014
 8005780:	00f42400 	.word	0x00f42400
 8005784:	20000018 	.word	0x20000018

08005788 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e2f3      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2201      	movs	r2, #1
 80057a0:	4013      	ands	r3, r2
 80057a2:	d100      	bne.n	80057a6 <HAL_RCC_OscConfig+0x1e>
 80057a4:	e07c      	b.n	80058a0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057a6:	4bc3      	ldr	r3, [pc, #780]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2238      	movs	r2, #56	; 0x38
 80057ac:	4013      	ands	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057b0:	4bc0      	ldr	r3, [pc, #768]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	2203      	movs	r2, #3
 80057b6:	4013      	ands	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b10      	cmp	r3, #16
 80057be:	d102      	bne.n	80057c6 <HAL_RCC_OscConfig+0x3e>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d002      	beq.n	80057cc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d10b      	bne.n	80057e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057cc:	4bb9      	ldr	r3, [pc, #740]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	2380      	movs	r3, #128	; 0x80
 80057d2:	029b      	lsls	r3, r3, #10
 80057d4:	4013      	ands	r3, r2
 80057d6:	d062      	beq.n	800589e <HAL_RCC_OscConfig+0x116>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d15e      	bne.n	800589e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e2ce      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	025b      	lsls	r3, r3, #9
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d107      	bne.n	8005800 <HAL_RCC_OscConfig+0x78>
 80057f0:	4bb0      	ldr	r3, [pc, #704]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4baf      	ldr	r3, [pc, #700]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80057f6:	2180      	movs	r1, #128	; 0x80
 80057f8:	0249      	lsls	r1, r1, #9
 80057fa:	430a      	orrs	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e020      	b.n	8005842 <HAL_RCC_OscConfig+0xba>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	23a0      	movs	r3, #160	; 0xa0
 8005806:	02db      	lsls	r3, r3, #11
 8005808:	429a      	cmp	r2, r3
 800580a:	d10e      	bne.n	800582a <HAL_RCC_OscConfig+0xa2>
 800580c:	4ba9      	ldr	r3, [pc, #676]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	4ba8      	ldr	r3, [pc, #672]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005812:	2180      	movs	r1, #128	; 0x80
 8005814:	02c9      	lsls	r1, r1, #11
 8005816:	430a      	orrs	r2, r1
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	4ba6      	ldr	r3, [pc, #664]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	4ba5      	ldr	r3, [pc, #660]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005820:	2180      	movs	r1, #128	; 0x80
 8005822:	0249      	lsls	r1, r1, #9
 8005824:	430a      	orrs	r2, r1
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	e00b      	b.n	8005842 <HAL_RCC_OscConfig+0xba>
 800582a:	4ba2      	ldr	r3, [pc, #648]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4ba1      	ldr	r3, [pc, #644]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005830:	49a1      	ldr	r1, [pc, #644]	; (8005ab8 <HAL_RCC_OscConfig+0x330>)
 8005832:	400a      	ands	r2, r1
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	4b9f      	ldr	r3, [pc, #636]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4b9e      	ldr	r3, [pc, #632]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 800583c:	499f      	ldr	r1, [pc, #636]	; (8005abc <HAL_RCC_OscConfig+0x334>)
 800583e:	400a      	ands	r2, r1
 8005840:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d014      	beq.n	8005874 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584a:	f7fd fd71 	bl	8003330 <HAL_GetTick>
 800584e:	0003      	movs	r3, r0
 8005850:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005854:	f7fd fd6c 	bl	8003330 <HAL_GetTick>
 8005858:	0002      	movs	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b64      	cmp	r3, #100	; 0x64
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e28d      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005866:	4b93      	ldr	r3, [pc, #588]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	2380      	movs	r3, #128	; 0x80
 800586c:	029b      	lsls	r3, r3, #10
 800586e:	4013      	ands	r3, r2
 8005870:	d0f0      	beq.n	8005854 <HAL_RCC_OscConfig+0xcc>
 8005872:	e015      	b.n	80058a0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005874:	f7fd fd5c 	bl	8003330 <HAL_GetTick>
 8005878:	0003      	movs	r3, r0
 800587a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800587e:	f7fd fd57 	bl	8003330 <HAL_GetTick>
 8005882:	0002      	movs	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b64      	cmp	r3, #100	; 0x64
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e278      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005890:	4b88      	ldr	r3, [pc, #544]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	029b      	lsls	r3, r3, #10
 8005898:	4013      	ands	r3, r2
 800589a:	d1f0      	bne.n	800587e <HAL_RCC_OscConfig+0xf6>
 800589c:	e000      	b.n	80058a0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800589e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2202      	movs	r2, #2
 80058a6:	4013      	ands	r3, r2
 80058a8:	d100      	bne.n	80058ac <HAL_RCC_OscConfig+0x124>
 80058aa:	e099      	b.n	80059e0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ac:	4b81      	ldr	r3, [pc, #516]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2238      	movs	r2, #56	; 0x38
 80058b2:	4013      	ands	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058b6:	4b7f      	ldr	r3, [pc, #508]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	2203      	movs	r2, #3
 80058bc:	4013      	ands	r3, r2
 80058be:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2b10      	cmp	r3, #16
 80058c4:	d102      	bne.n	80058cc <HAL_RCC_OscConfig+0x144>
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d002      	beq.n	80058d2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d135      	bne.n	800593e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058d2:	4b78      	ldr	r3, [pc, #480]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	2380      	movs	r3, #128	; 0x80
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	4013      	ands	r3, r2
 80058dc:	d005      	beq.n	80058ea <HAL_RCC_OscConfig+0x162>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e24b      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ea:	4b72      	ldr	r3, [pc, #456]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	4a74      	ldr	r2, [pc, #464]	; (8005ac0 <HAL_RCC_OscConfig+0x338>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	0019      	movs	r1, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	021a      	lsls	r2, r3, #8
 80058fa:	4b6e      	ldr	r3, [pc, #440]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80058fc:	430a      	orrs	r2, r1
 80058fe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d112      	bne.n	800592c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005906:	4b6b      	ldr	r3, [pc, #428]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a6e      	ldr	r2, [pc, #440]	; (8005ac4 <HAL_RCC_OscConfig+0x33c>)
 800590c:	4013      	ands	r3, r2
 800590e:	0019      	movs	r1, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	4b67      	ldr	r3, [pc, #412]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005916:	430a      	orrs	r2, r1
 8005918:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800591a:	4b66      	ldr	r3, [pc, #408]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	0adb      	lsrs	r3, r3, #11
 8005920:	2207      	movs	r2, #7
 8005922:	4013      	ands	r3, r2
 8005924:	4a68      	ldr	r2, [pc, #416]	; (8005ac8 <HAL_RCC_OscConfig+0x340>)
 8005926:	40da      	lsrs	r2, r3
 8005928:	4b68      	ldr	r3, [pc, #416]	; (8005acc <HAL_RCC_OscConfig+0x344>)
 800592a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800592c:	4b68      	ldr	r3, [pc, #416]	; (8005ad0 <HAL_RCC_OscConfig+0x348>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	0018      	movs	r0, r3
 8005932:	f7fd fca1 	bl	8003278 <HAL_InitTick>
 8005936:	1e03      	subs	r3, r0, #0
 8005938:	d051      	beq.n	80059de <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e221      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d030      	beq.n	80059a8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005946:	4b5b      	ldr	r3, [pc, #364]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a5e      	ldr	r2, [pc, #376]	; (8005ac4 <HAL_RCC_OscConfig+0x33c>)
 800594c:	4013      	ands	r3, r2
 800594e:	0019      	movs	r1, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	4b57      	ldr	r3, [pc, #348]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005956:	430a      	orrs	r2, r1
 8005958:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800595a:	4b56      	ldr	r3, [pc, #344]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	4b55      	ldr	r3, [pc, #340]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005960:	2180      	movs	r1, #128	; 0x80
 8005962:	0049      	lsls	r1, r1, #1
 8005964:	430a      	orrs	r2, r1
 8005966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005968:	f7fd fce2 	bl	8003330 <HAL_GetTick>
 800596c:	0003      	movs	r3, r0
 800596e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005972:	f7fd fcdd 	bl	8003330 <HAL_GetTick>
 8005976:	0002      	movs	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e1fe      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005984:	4b4b      	ldr	r3, [pc, #300]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	2380      	movs	r3, #128	; 0x80
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	4013      	ands	r3, r2
 800598e:	d0f0      	beq.n	8005972 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005990:	4b48      	ldr	r3, [pc, #288]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	4a4a      	ldr	r2, [pc, #296]	; (8005ac0 <HAL_RCC_OscConfig+0x338>)
 8005996:	4013      	ands	r3, r2
 8005998:	0019      	movs	r1, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	021a      	lsls	r2, r3, #8
 80059a0:	4b44      	ldr	r3, [pc, #272]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	e01b      	b.n	80059e0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80059a8:	4b42      	ldr	r3, [pc, #264]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	4b41      	ldr	r3, [pc, #260]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80059ae:	4949      	ldr	r1, [pc, #292]	; (8005ad4 <HAL_RCC_OscConfig+0x34c>)
 80059b0:	400a      	ands	r2, r1
 80059b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b4:	f7fd fcbc 	bl	8003330 <HAL_GetTick>
 80059b8:	0003      	movs	r3, r0
 80059ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059be:	f7fd fcb7 	bl	8003330 <HAL_GetTick>
 80059c2:	0002      	movs	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e1d8      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059d0:	4b38      	ldr	r3, [pc, #224]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	4013      	ands	r3, r2
 80059da:	d1f0      	bne.n	80059be <HAL_RCC_OscConfig+0x236>
 80059dc:	e000      	b.n	80059e0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2208      	movs	r2, #8
 80059e6:	4013      	ands	r3, r2
 80059e8:	d047      	beq.n	8005a7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80059ea:	4b32      	ldr	r3, [pc, #200]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2238      	movs	r2, #56	; 0x38
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b18      	cmp	r3, #24
 80059f4:	d10a      	bne.n	8005a0c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80059f6:	4b2f      	ldr	r3, [pc, #188]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 80059f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fa:	2202      	movs	r2, #2
 80059fc:	4013      	ands	r3, r2
 80059fe:	d03c      	beq.n	8005a7a <HAL_RCC_OscConfig+0x2f2>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d138      	bne.n	8005a7a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e1ba      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d019      	beq.n	8005a48 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005a14:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005a16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a18:	4b26      	ldr	r3, [pc, #152]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a20:	f7fd fc86 	bl	8003330 <HAL_GetTick>
 8005a24:	0003      	movs	r3, r0
 8005a26:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a2a:	f7fd fc81 	bl	8003330 <HAL_GetTick>
 8005a2e:	0002      	movs	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e1a2      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a3c:	4b1d      	ldr	r3, [pc, #116]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a40:	2202      	movs	r2, #2
 8005a42:	4013      	ands	r3, r2
 8005a44:	d0f1      	beq.n	8005a2a <HAL_RCC_OscConfig+0x2a2>
 8005a46:	e018      	b.n	8005a7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005a48:	4b1a      	ldr	r3, [pc, #104]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005a4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a4c:	4b19      	ldr	r3, [pc, #100]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005a4e:	2101      	movs	r1, #1
 8005a50:	438a      	bics	r2, r1
 8005a52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a54:	f7fd fc6c 	bl	8003330 <HAL_GetTick>
 8005a58:	0003      	movs	r3, r0
 8005a5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a5e:	f7fd fc67 	bl	8003330 <HAL_GetTick>
 8005a62:	0002      	movs	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e188      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a70:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a74:	2202      	movs	r2, #2
 8005a76:	4013      	ands	r3, r2
 8005a78:	d1f1      	bne.n	8005a5e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2204      	movs	r2, #4
 8005a80:	4013      	ands	r3, r2
 8005a82:	d100      	bne.n	8005a86 <HAL_RCC_OscConfig+0x2fe>
 8005a84:	e0c6      	b.n	8005c14 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a86:	231f      	movs	r3, #31
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005a8e:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2238      	movs	r2, #56	; 0x38
 8005a94:	4013      	ands	r3, r2
 8005a96:	2b20      	cmp	r3, #32
 8005a98:	d11e      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005a9a:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <HAL_RCC_OscConfig+0x32c>)
 8005a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	d100      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x31e>
 8005aa4:	e0b6      	b.n	8005c14 <HAL_RCC_OscConfig+0x48c>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d000      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x328>
 8005aae:	e0b1      	b.n	8005c14 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e166      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	fffeffff 	.word	0xfffeffff
 8005abc:	fffbffff 	.word	0xfffbffff
 8005ac0:	ffff80ff 	.word	0xffff80ff
 8005ac4:	ffffc7ff 	.word	0xffffc7ff
 8005ac8:	00f42400 	.word	0x00f42400
 8005acc:	20000014 	.word	0x20000014
 8005ad0:	20000018 	.word	0x20000018
 8005ad4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ad8:	4bac      	ldr	r3, [pc, #688]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005adc:	2380      	movs	r3, #128	; 0x80
 8005ade:	055b      	lsls	r3, r3, #21
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d101      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x360>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <HAL_RCC_OscConfig+0x362>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d011      	beq.n	8005b12 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005aee:	4ba7      	ldr	r3, [pc, #668]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005af2:	4ba6      	ldr	r3, [pc, #664]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005af4:	2180      	movs	r1, #128	; 0x80
 8005af6:	0549      	lsls	r1, r1, #21
 8005af8:	430a      	orrs	r2, r1
 8005afa:	63da      	str	r2, [r3, #60]	; 0x3c
 8005afc:	4ba3      	ldr	r3, [pc, #652]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b00:	2380      	movs	r3, #128	; 0x80
 8005b02:	055b      	lsls	r3, r3, #21
 8005b04:	4013      	ands	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005b0a:	231f      	movs	r3, #31
 8005b0c:	18fb      	adds	r3, r7, r3
 8005b0e:	2201      	movs	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b12:	4b9f      	ldr	r3, [pc, #636]	; (8005d90 <HAL_RCC_OscConfig+0x608>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	2380      	movs	r3, #128	; 0x80
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d11a      	bne.n	8005b54 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b1e:	4b9c      	ldr	r3, [pc, #624]	; (8005d90 <HAL_RCC_OscConfig+0x608>)
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b9b      	ldr	r3, [pc, #620]	; (8005d90 <HAL_RCC_OscConfig+0x608>)
 8005b24:	2180      	movs	r1, #128	; 0x80
 8005b26:	0049      	lsls	r1, r1, #1
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005b2c:	f7fd fc00 	bl	8003330 <HAL_GetTick>
 8005b30:	0003      	movs	r3, r0
 8005b32:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b34:	e008      	b.n	8005b48 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b36:	f7fd fbfb 	bl	8003330 <HAL_GetTick>
 8005b3a:	0002      	movs	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e11c      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b48:	4b91      	ldr	r3, [pc, #580]	; (8005d90 <HAL_RCC_OscConfig+0x608>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	2380      	movs	r3, #128	; 0x80
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	4013      	ands	r3, r2
 8005b52:	d0f0      	beq.n	8005b36 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d106      	bne.n	8005b6a <HAL_RCC_OscConfig+0x3e2>
 8005b5c:	4b8b      	ldr	r3, [pc, #556]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005b5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b60:	4b8a      	ldr	r3, [pc, #552]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005b62:	2101      	movs	r1, #1
 8005b64:	430a      	orrs	r2, r1
 8005b66:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b68:	e01c      	b.n	8005ba4 <HAL_RCC_OscConfig+0x41c>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	2b05      	cmp	r3, #5
 8005b70:	d10c      	bne.n	8005b8c <HAL_RCC_OscConfig+0x404>
 8005b72:	4b86      	ldr	r3, [pc, #536]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005b74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b76:	4b85      	ldr	r3, [pc, #532]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005b78:	2104      	movs	r1, #4
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b7e:	4b83      	ldr	r3, [pc, #524]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005b80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b82:	4b82      	ldr	r3, [pc, #520]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005b84:	2101      	movs	r1, #1
 8005b86:	430a      	orrs	r2, r1
 8005b88:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b8a:	e00b      	b.n	8005ba4 <HAL_RCC_OscConfig+0x41c>
 8005b8c:	4b7f      	ldr	r3, [pc, #508]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005b8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b90:	4b7e      	ldr	r3, [pc, #504]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005b92:	2101      	movs	r1, #1
 8005b94:	438a      	bics	r2, r1
 8005b96:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b98:	4b7c      	ldr	r3, [pc, #496]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005b9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b9c:	4b7b      	ldr	r3, [pc, #492]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005b9e:	2104      	movs	r1, #4
 8005ba0:	438a      	bics	r2, r1
 8005ba2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d014      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bac:	f7fd fbc0 	bl	8003330 <HAL_GetTick>
 8005bb0:	0003      	movs	r3, r0
 8005bb2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bb4:	e009      	b.n	8005bca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb6:	f7fd fbbb 	bl	8003330 <HAL_GetTick>
 8005bba:	0002      	movs	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	4a74      	ldr	r2, [pc, #464]	; (8005d94 <HAL_RCC_OscConfig+0x60c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e0db      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bca:	4b70      	ldr	r3, [pc, #448]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bce:	2202      	movs	r2, #2
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d0f0      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x42e>
 8005bd4:	e013      	b.n	8005bfe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd6:	f7fd fbab 	bl	8003330 <HAL_GetTick>
 8005bda:	0003      	movs	r3, r0
 8005bdc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bde:	e009      	b.n	8005bf4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be0:	f7fd fba6 	bl	8003330 <HAL_GetTick>
 8005be4:	0002      	movs	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	4a6a      	ldr	r2, [pc, #424]	; (8005d94 <HAL_RCC_OscConfig+0x60c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e0c6      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bf4:	4b65      	ldr	r3, [pc, #404]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d1f0      	bne.n	8005be0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005bfe:	231f      	movs	r3, #31
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d105      	bne.n	8005c14 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005c08:	4b60      	ldr	r3, [pc, #384]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c0c:	4b5f      	ldr	r3, [pc, #380]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005c0e:	4962      	ldr	r1, [pc, #392]	; (8005d98 <HAL_RCC_OscConfig+0x610>)
 8005c10:	400a      	ands	r2, r1
 8005c12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d100      	bne.n	8005c1e <HAL_RCC_OscConfig+0x496>
 8005c1c:	e0b0      	b.n	8005d80 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c1e:	4b5b      	ldr	r3, [pc, #364]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2238      	movs	r2, #56	; 0x38
 8005c24:	4013      	ands	r3, r2
 8005c26:	2b10      	cmp	r3, #16
 8005c28:	d100      	bne.n	8005c2c <HAL_RCC_OscConfig+0x4a4>
 8005c2a:	e078      	b.n	8005d1e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d153      	bne.n	8005cdc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c34:	4b55      	ldr	r3, [pc, #340]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	4b54      	ldr	r3, [pc, #336]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005c3a:	4958      	ldr	r1, [pc, #352]	; (8005d9c <HAL_RCC_OscConfig+0x614>)
 8005c3c:	400a      	ands	r2, r1
 8005c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c40:	f7fd fb76 	bl	8003330 <HAL_GetTick>
 8005c44:	0003      	movs	r3, r0
 8005c46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c48:	e008      	b.n	8005c5c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c4a:	f7fd fb71 	bl	8003330 <HAL_GetTick>
 8005c4e:	0002      	movs	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e092      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c5c:	4b4b      	ldr	r3, [pc, #300]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	2380      	movs	r3, #128	; 0x80
 8005c62:	049b      	lsls	r3, r3, #18
 8005c64:	4013      	ands	r3, r2
 8005c66:	d1f0      	bne.n	8005c4a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c68:	4b48      	ldr	r3, [pc, #288]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	4a4c      	ldr	r2, [pc, #304]	; (8005da0 <HAL_RCC_OscConfig+0x618>)
 8005c6e:	4013      	ands	r3, r2
 8005c70:	0019      	movs	r1, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1a      	ldr	r2, [r3, #32]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	4b3e      	ldr	r3, [pc, #248]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005c92:	430a      	orrs	r2, r1
 8005c94:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c96:	4b3d      	ldr	r3, [pc, #244]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4b3c      	ldr	r3, [pc, #240]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005c9c:	2180      	movs	r1, #128	; 0x80
 8005c9e:	0449      	lsls	r1, r1, #17
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005ca4:	4b39      	ldr	r3, [pc, #228]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	4b38      	ldr	r3, [pc, #224]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005caa:	2180      	movs	r1, #128	; 0x80
 8005cac:	0549      	lsls	r1, r1, #21
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb2:	f7fd fb3d 	bl	8003330 <HAL_GetTick>
 8005cb6:	0003      	movs	r3, r0
 8005cb8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cbc:	f7fd fb38 	bl	8003330 <HAL_GetTick>
 8005cc0:	0002      	movs	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e059      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cce:	4b2f      	ldr	r3, [pc, #188]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	2380      	movs	r3, #128	; 0x80
 8005cd4:	049b      	lsls	r3, r3, #18
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	d0f0      	beq.n	8005cbc <HAL_RCC_OscConfig+0x534>
 8005cda:	e051      	b.n	8005d80 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cdc:	4b2b      	ldr	r3, [pc, #172]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	4b2a      	ldr	r3, [pc, #168]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005ce2:	492e      	ldr	r1, [pc, #184]	; (8005d9c <HAL_RCC_OscConfig+0x614>)
 8005ce4:	400a      	ands	r2, r1
 8005ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce8:	f7fd fb22 	bl	8003330 <HAL_GetTick>
 8005cec:	0003      	movs	r3, r0
 8005cee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf2:	f7fd fb1d 	bl	8003330 <HAL_GetTick>
 8005cf6:	0002      	movs	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e03e      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d04:	4b21      	ldr	r3, [pc, #132]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	2380      	movs	r3, #128	; 0x80
 8005d0a:	049b      	lsls	r3, r3, #18
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	d1f0      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005d10:	4b1e      	ldr	r3, [pc, #120]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005d16:	4923      	ldr	r1, [pc, #140]	; (8005da4 <HAL_RCC_OscConfig+0x61c>)
 8005d18:	400a      	ands	r2, r1
 8005d1a:	60da      	str	r2, [r3, #12]
 8005d1c:	e030      	b.n	8005d80 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e02b      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005d2a:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <HAL_RCC_OscConfig+0x604>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2203      	movs	r2, #3
 8005d34:	401a      	ands	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d11e      	bne.n	8005d7c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2270      	movs	r2, #112	; 0x70
 8005d42:	401a      	ands	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d117      	bne.n	8005d7c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	23fe      	movs	r3, #254	; 0xfe
 8005d50:	01db      	lsls	r3, r3, #7
 8005d52:	401a      	ands	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d10e      	bne.n	8005d7c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	23f8      	movs	r3, #248	; 0xf8
 8005d62:	039b      	lsls	r3, r3, #14
 8005d64:	401a      	ands	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d106      	bne.n	8005d7c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	0f5b      	lsrs	r3, r3, #29
 8005d72:	075a      	lsls	r2, r3, #29
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d001      	beq.n	8005d80 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	0018      	movs	r0, r3
 8005d84:	46bd      	mov	sp, r7
 8005d86:	b008      	add	sp, #32
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	40007000 	.word	0x40007000
 8005d94:	00001388 	.word	0x00001388
 8005d98:	efffffff 	.word	0xefffffff
 8005d9c:	feffffff 	.word	0xfeffffff
 8005da0:	1fc1808c 	.word	0x1fc1808c
 8005da4:	effefffc 	.word	0xeffefffc

08005da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e0e9      	b.n	8005f90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dbc:	4b76      	ldr	r3, [pc, #472]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2207      	movs	r2, #7
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d91e      	bls.n	8005e08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dca:	4b73      	ldr	r3, [pc, #460]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2207      	movs	r2, #7
 8005dd0:	4393      	bics	r3, r2
 8005dd2:	0019      	movs	r1, r3
 8005dd4:	4b70      	ldr	r3, [pc, #448]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ddc:	f7fd faa8 	bl	8003330 <HAL_GetTick>
 8005de0:	0003      	movs	r3, r0
 8005de2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005de4:	e009      	b.n	8005dfa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005de6:	f7fd faa3 	bl	8003330 <HAL_GetTick>
 8005dea:	0002      	movs	r2, r0
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	4a6a      	ldr	r2, [pc, #424]	; (8005f9c <HAL_RCC_ClockConfig+0x1f4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e0ca      	b.n	8005f90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005dfa:	4b67      	ldr	r3, [pc, #412]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2207      	movs	r2, #7
 8005e00:	4013      	ands	r3, r2
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d1ee      	bne.n	8005de6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	4013      	ands	r3, r2
 8005e10:	d015      	beq.n	8005e3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2204      	movs	r2, #4
 8005e18:	4013      	ands	r3, r2
 8005e1a:	d006      	beq.n	8005e2a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005e1c:	4b60      	ldr	r3, [pc, #384]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	4b5f      	ldr	r3, [pc, #380]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005e22:	21e0      	movs	r1, #224	; 0xe0
 8005e24:	01c9      	lsls	r1, r1, #7
 8005e26:	430a      	orrs	r2, r1
 8005e28:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e2a:	4b5d      	ldr	r3, [pc, #372]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	4a5d      	ldr	r2, [pc, #372]	; (8005fa4 <HAL_RCC_ClockConfig+0x1fc>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	0019      	movs	r1, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	4b59      	ldr	r3, [pc, #356]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2201      	movs	r2, #1
 8005e44:	4013      	ands	r3, r2
 8005e46:	d057      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d107      	bne.n	8005e60 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e50:	4b53      	ldr	r3, [pc, #332]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	029b      	lsls	r3, r3, #10
 8005e58:	4013      	ands	r3, r2
 8005e5a:	d12b      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e097      	b.n	8005f90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d107      	bne.n	8005e78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e68:	4b4d      	ldr	r3, [pc, #308]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	2380      	movs	r3, #128	; 0x80
 8005e6e:	049b      	lsls	r3, r3, #18
 8005e70:	4013      	ands	r3, r2
 8005e72:	d11f      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e08b      	b.n	8005f90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d107      	bne.n	8005e90 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e80:	4b47      	ldr	r3, [pc, #284]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	2380      	movs	r3, #128	; 0x80
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	4013      	ands	r3, r2
 8005e8a:	d113      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e07f      	b.n	8005f90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d106      	bne.n	8005ea6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e98:	4b41      	ldr	r3, [pc, #260]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d108      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e074      	b.n	8005f90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ea6:	4b3e      	ldr	r3, [pc, #248]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eaa:	2202      	movs	r2, #2
 8005eac:	4013      	ands	r3, r2
 8005eae:	d101      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e06d      	b.n	8005f90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005eb4:	4b3a      	ldr	r3, [pc, #232]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	2207      	movs	r2, #7
 8005eba:	4393      	bics	r3, r2
 8005ebc:	0019      	movs	r1, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	4b37      	ldr	r3, [pc, #220]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ec8:	f7fd fa32 	bl	8003330 <HAL_GetTick>
 8005ecc:	0003      	movs	r3, r0
 8005ece:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ed0:	e009      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed2:	f7fd fa2d 	bl	8003330 <HAL_GetTick>
 8005ed6:	0002      	movs	r2, r0
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	4a2f      	ldr	r2, [pc, #188]	; (8005f9c <HAL_RCC_ClockConfig+0x1f4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e054      	b.n	8005f90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee6:	4b2e      	ldr	r3, [pc, #184]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2238      	movs	r2, #56	; 0x38
 8005eec:	401a      	ands	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d1ec      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ef8:	4b27      	ldr	r3, [pc, #156]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2207      	movs	r2, #7
 8005efe:	4013      	ands	r3, r2
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d21e      	bcs.n	8005f44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f06:	4b24      	ldr	r3, [pc, #144]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2207      	movs	r2, #7
 8005f0c:	4393      	bics	r3, r2
 8005f0e:	0019      	movs	r1, r3
 8005f10:	4b21      	ldr	r3, [pc, #132]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f18:	f7fd fa0a 	bl	8003330 <HAL_GetTick>
 8005f1c:	0003      	movs	r3, r0
 8005f1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f20:	e009      	b.n	8005f36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f22:	f7fd fa05 	bl	8003330 <HAL_GetTick>
 8005f26:	0002      	movs	r2, r0
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	4a1b      	ldr	r2, [pc, #108]	; (8005f9c <HAL_RCC_ClockConfig+0x1f4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e02c      	b.n	8005f90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f36:	4b18      	ldr	r3, [pc, #96]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2207      	movs	r2, #7
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d1ee      	bne.n	8005f22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2204      	movs	r2, #4
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	d009      	beq.n	8005f62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005f4e:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	4a15      	ldr	r2, [pc, #84]	; (8005fa8 <HAL_RCC_ClockConfig+0x200>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	0019      	movs	r1, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	4b10      	ldr	r3, [pc, #64]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005f62:	f000 f829 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
 8005f66:	0001      	movs	r1, r0
 8005f68:	4b0d      	ldr	r3, [pc, #52]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	0a1b      	lsrs	r3, r3, #8
 8005f6e:	220f      	movs	r2, #15
 8005f70:	401a      	ands	r2, r3
 8005f72:	4b0e      	ldr	r3, [pc, #56]	; (8005fac <HAL_RCC_ClockConfig+0x204>)
 8005f74:	0092      	lsls	r2, r2, #2
 8005f76:	58d3      	ldr	r3, [r2, r3]
 8005f78:	221f      	movs	r2, #31
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	000a      	movs	r2, r1
 8005f7e:	40da      	lsrs	r2, r3
 8005f80:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <HAL_RCC_ClockConfig+0x208>)
 8005f82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f84:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <HAL_RCC_ClockConfig+0x20c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f7fd f975 	bl	8003278 <HAL_InitTick>
 8005f8e:	0003      	movs	r3, r0
}
 8005f90:	0018      	movs	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b004      	add	sp, #16
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40022000 	.word	0x40022000
 8005f9c:	00001388 	.word	0x00001388
 8005fa0:	40021000 	.word	0x40021000
 8005fa4:	fffff0ff 	.word	0xfffff0ff
 8005fa8:	ffff8fff 	.word	0xffff8fff
 8005fac:	08009df0 	.word	0x08009df0
 8005fb0:	20000014 	.word	0x20000014
 8005fb4:	20000018 	.word	0x20000018

08005fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fbe:	4b3c      	ldr	r3, [pc, #240]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	2238      	movs	r2, #56	; 0x38
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	d10f      	bne.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005fc8:	4b39      	ldr	r3, [pc, #228]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	0adb      	lsrs	r3, r3, #11
 8005fce:	2207      	movs	r2, #7
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	409a      	lsls	r2, r3
 8005fd6:	0013      	movs	r3, r2
 8005fd8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	4835      	ldr	r0, [pc, #212]	; (80060b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005fde:	f7fa f8a1 	bl	8000124 <__udivsi3>
 8005fe2:	0003      	movs	r3, r0
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	e05d      	b.n	80060a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fe8:	4b31      	ldr	r3, [pc, #196]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	2238      	movs	r2, #56	; 0x38
 8005fee:	4013      	ands	r3, r2
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d102      	bne.n	8005ffa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ff4:	4b30      	ldr	r3, [pc, #192]	; (80060b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	e054      	b.n	80060a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ffa:	4b2d      	ldr	r3, [pc, #180]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	2238      	movs	r2, #56	; 0x38
 8006000:	4013      	ands	r3, r2
 8006002:	2b10      	cmp	r3, #16
 8006004:	d138      	bne.n	8006078 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006006:	4b2a      	ldr	r3, [pc, #168]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	2203      	movs	r2, #3
 800600c:	4013      	ands	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006010:	4b27      	ldr	r3, [pc, #156]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	091b      	lsrs	r3, r3, #4
 8006016:	2207      	movs	r2, #7
 8006018:	4013      	ands	r3, r2
 800601a:	3301      	adds	r3, #1
 800601c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b03      	cmp	r3, #3
 8006022:	d10d      	bne.n	8006040 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	4824      	ldr	r0, [pc, #144]	; (80060b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8006028:	f7fa f87c 	bl	8000124 <__udivsi3>
 800602c:	0003      	movs	r3, r0
 800602e:	0019      	movs	r1, r3
 8006030:	4b1f      	ldr	r3, [pc, #124]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	0a1b      	lsrs	r3, r3, #8
 8006036:	227f      	movs	r2, #127	; 0x7f
 8006038:	4013      	ands	r3, r2
 800603a:	434b      	muls	r3, r1
 800603c:	617b      	str	r3, [r7, #20]
        break;
 800603e:	e00d      	b.n	800605c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006040:	68b9      	ldr	r1, [r7, #8]
 8006042:	481c      	ldr	r0, [pc, #112]	; (80060b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006044:	f7fa f86e 	bl	8000124 <__udivsi3>
 8006048:	0003      	movs	r3, r0
 800604a:	0019      	movs	r1, r3
 800604c:	4b18      	ldr	r3, [pc, #96]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	0a1b      	lsrs	r3, r3, #8
 8006052:	227f      	movs	r2, #127	; 0x7f
 8006054:	4013      	ands	r3, r2
 8006056:	434b      	muls	r3, r1
 8006058:	617b      	str	r3, [r7, #20]
        break;
 800605a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800605c:	4b14      	ldr	r3, [pc, #80]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	0f5b      	lsrs	r3, r3, #29
 8006062:	2207      	movs	r2, #7
 8006064:	4013      	ands	r3, r2
 8006066:	3301      	adds	r3, #1
 8006068:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	6978      	ldr	r0, [r7, #20]
 800606e:	f7fa f859 	bl	8000124 <__udivsi3>
 8006072:	0003      	movs	r3, r0
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	e015      	b.n	80060a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006078:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	2238      	movs	r2, #56	; 0x38
 800607e:	4013      	ands	r3, r2
 8006080:	2b20      	cmp	r3, #32
 8006082:	d103      	bne.n	800608c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006084:	2380      	movs	r3, #128	; 0x80
 8006086:	021b      	lsls	r3, r3, #8
 8006088:	613b      	str	r3, [r7, #16]
 800608a:	e00b      	b.n	80060a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800608c:	4b08      	ldr	r3, [pc, #32]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2238      	movs	r2, #56	; 0x38
 8006092:	4013      	ands	r3, r2
 8006094:	2b18      	cmp	r3, #24
 8006096:	d103      	bne.n	80060a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006098:	23fa      	movs	r3, #250	; 0xfa
 800609a:	01db      	lsls	r3, r3, #7
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	e001      	b.n	80060a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80060a4:	693b      	ldr	r3, [r7, #16]
}
 80060a6:	0018      	movs	r0, r3
 80060a8:	46bd      	mov	sp, r7
 80060aa:	b006      	add	sp, #24
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	40021000 	.word	0x40021000
 80060b4:	00f42400 	.word	0x00f42400
 80060b8:	007a1200 	.word	0x007a1200

080060bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060c0:	4b02      	ldr	r3, [pc, #8]	; (80060cc <HAL_RCC_GetHCLKFreq+0x10>)
 80060c2:	681b      	ldr	r3, [r3, #0]
}
 80060c4:	0018      	movs	r0, r3
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	20000014 	.word	0x20000014

080060d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060d0:	b5b0      	push	{r4, r5, r7, lr}
 80060d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80060d4:	f7ff fff2 	bl	80060bc <HAL_RCC_GetHCLKFreq>
 80060d8:	0004      	movs	r4, r0
 80060da:	f7ff facd 	bl	8005678 <LL_RCC_GetAPB1Prescaler>
 80060de:	0003      	movs	r3, r0
 80060e0:	0b1a      	lsrs	r2, r3, #12
 80060e2:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060e4:	0092      	lsls	r2, r2, #2
 80060e6:	58d3      	ldr	r3, [r2, r3]
 80060e8:	221f      	movs	r2, #31
 80060ea:	4013      	ands	r3, r2
 80060ec:	40dc      	lsrs	r4, r3
 80060ee:	0023      	movs	r3, r4
}
 80060f0:	0018      	movs	r0, r3
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bdb0      	pop	{r4, r5, r7, pc}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	08009e30 	.word	0x08009e30

080060fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006104:	2313      	movs	r3, #19
 8006106:	18fb      	adds	r3, r7, r3
 8006108:	2200      	movs	r2, #0
 800610a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800610c:	2312      	movs	r3, #18
 800610e:	18fb      	adds	r3, r7, r3
 8006110:	2200      	movs	r2, #0
 8006112:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	2380      	movs	r3, #128	; 0x80
 800611a:	029b      	lsls	r3, r3, #10
 800611c:	4013      	ands	r3, r2
 800611e:	d100      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006120:	e0a3      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006122:	2011      	movs	r0, #17
 8006124:	183b      	adds	r3, r7, r0
 8006126:	2200      	movs	r2, #0
 8006128:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800612a:	4b86      	ldr	r3, [pc, #536]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800612c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800612e:	2380      	movs	r3, #128	; 0x80
 8006130:	055b      	lsls	r3, r3, #21
 8006132:	4013      	ands	r3, r2
 8006134:	d110      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006136:	4b83      	ldr	r3, [pc, #524]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800613a:	4b82      	ldr	r3, [pc, #520]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800613c:	2180      	movs	r1, #128	; 0x80
 800613e:	0549      	lsls	r1, r1, #21
 8006140:	430a      	orrs	r2, r1
 8006142:	63da      	str	r2, [r3, #60]	; 0x3c
 8006144:	4b7f      	ldr	r3, [pc, #508]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	055b      	lsls	r3, r3, #21
 800614c:	4013      	ands	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]
 8006150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006152:	183b      	adds	r3, r7, r0
 8006154:	2201      	movs	r2, #1
 8006156:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006158:	4b7b      	ldr	r3, [pc, #492]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	4b7a      	ldr	r3, [pc, #488]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800615e:	2180      	movs	r1, #128	; 0x80
 8006160:	0049      	lsls	r1, r1, #1
 8006162:	430a      	orrs	r2, r1
 8006164:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006166:	f7fd f8e3 	bl	8003330 <HAL_GetTick>
 800616a:	0003      	movs	r3, r0
 800616c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800616e:	e00b      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006170:	f7fd f8de 	bl	8003330 <HAL_GetTick>
 8006174:	0002      	movs	r2, r0
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d904      	bls.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800617e:	2313      	movs	r3, #19
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	2203      	movs	r2, #3
 8006184:	701a      	strb	r2, [r3, #0]
        break;
 8006186:	e005      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006188:	4b6f      	ldr	r3, [pc, #444]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	2380      	movs	r3, #128	; 0x80
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	4013      	ands	r3, r2
 8006192:	d0ed      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006194:	2313      	movs	r3, #19
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d154      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800619e:	4b69      	ldr	r3, [pc, #420]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80061a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061a2:	23c0      	movs	r3, #192	; 0xc0
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4013      	ands	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d019      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d014      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061ba:	4b62      	ldr	r3, [pc, #392]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80061bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061be:	4a63      	ldr	r2, [pc, #396]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061c4:	4b5f      	ldr	r3, [pc, #380]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80061c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061c8:	4b5e      	ldr	r3, [pc, #376]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80061ca:	2180      	movs	r1, #128	; 0x80
 80061cc:	0249      	lsls	r1, r1, #9
 80061ce:	430a      	orrs	r2, r1
 80061d0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061d2:	4b5c      	ldr	r3, [pc, #368]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80061d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061d6:	4b5b      	ldr	r3, [pc, #364]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80061d8:	495d      	ldr	r1, [pc, #372]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061da:	400a      	ands	r2, r1
 80061dc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061de:	4b59      	ldr	r3, [pc, #356]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2201      	movs	r2, #1
 80061e8:	4013      	ands	r3, r2
 80061ea:	d016      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ec:	f7fd f8a0 	bl	8003330 <HAL_GetTick>
 80061f0:	0003      	movs	r3, r0
 80061f2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061f4:	e00c      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f6:	f7fd f89b 	bl	8003330 <HAL_GetTick>
 80061fa:	0002      	movs	r2, r0
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	4a54      	ldr	r2, [pc, #336]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d904      	bls.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006206:	2313      	movs	r3, #19
 8006208:	18fb      	adds	r3, r7, r3
 800620a:	2203      	movs	r2, #3
 800620c:	701a      	strb	r2, [r3, #0]
            break;
 800620e:	e004      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006210:	4b4c      	ldr	r3, [pc, #304]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006214:	2202      	movs	r2, #2
 8006216:	4013      	ands	r3, r2
 8006218:	d0ed      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800621a:	2313      	movs	r3, #19
 800621c:	18fb      	adds	r3, r7, r3
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006224:	4b47      	ldr	r3, [pc, #284]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006228:	4a48      	ldr	r2, [pc, #288]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800622a:	4013      	ands	r3, r2
 800622c:	0019      	movs	r1, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	4b44      	ldr	r3, [pc, #272]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006234:	430a      	orrs	r2, r1
 8006236:	65da      	str	r2, [r3, #92]	; 0x5c
 8006238:	e00c      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800623a:	2312      	movs	r3, #18
 800623c:	18fb      	adds	r3, r7, r3
 800623e:	2213      	movs	r2, #19
 8006240:	18ba      	adds	r2, r7, r2
 8006242:	7812      	ldrb	r2, [r2, #0]
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	e005      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006248:	2312      	movs	r3, #18
 800624a:	18fb      	adds	r3, r7, r3
 800624c:	2213      	movs	r2, #19
 800624e:	18ba      	adds	r2, r7, r2
 8006250:	7812      	ldrb	r2, [r2, #0]
 8006252:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006254:	2311      	movs	r3, #17
 8006256:	18fb      	adds	r3, r7, r3
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d105      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800625e:	4b39      	ldr	r3, [pc, #228]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006262:	4b38      	ldr	r3, [pc, #224]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006264:	493c      	ldr	r1, [pc, #240]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006266:	400a      	ands	r2, r1
 8006268:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2201      	movs	r2, #1
 8006270:	4013      	ands	r3, r2
 8006272:	d009      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006274:	4b33      	ldr	r3, [pc, #204]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006278:	2203      	movs	r2, #3
 800627a:	4393      	bics	r3, r2
 800627c:	0019      	movs	r1, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	4b30      	ldr	r3, [pc, #192]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006284:	430a      	orrs	r2, r1
 8006286:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2202      	movs	r2, #2
 800628e:	4013      	ands	r3, r2
 8006290:	d009      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006292:	4b2c      	ldr	r3, [pc, #176]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006296:	220c      	movs	r2, #12
 8006298:	4393      	bics	r3, r2
 800629a:	0019      	movs	r1, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	4b28      	ldr	r3, [pc, #160]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80062a2:	430a      	orrs	r2, r1
 80062a4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2220      	movs	r2, #32
 80062ac:	4013      	ands	r3, r2
 80062ae:	d009      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062b0:	4b24      	ldr	r3, [pc, #144]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80062b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b4:	4a29      	ldr	r2, [pc, #164]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	0019      	movs	r1, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	4b21      	ldr	r3, [pc, #132]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80062c0:	430a      	orrs	r2, r1
 80062c2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	2380      	movs	r3, #128	; 0x80
 80062ca:	01db      	lsls	r3, r3, #7
 80062cc:	4013      	ands	r3, r2
 80062ce:	d015      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062d0:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80062d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	0899      	lsrs	r1, r3, #2
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	4b19      	ldr	r3, [pc, #100]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80062de:	430a      	orrs	r2, r1
 80062e0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	695a      	ldr	r2, [r3, #20]
 80062e6:	2380      	movs	r3, #128	; 0x80
 80062e8:	05db      	lsls	r3, r3, #23
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d106      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80062ee:	4b15      	ldr	r3, [pc, #84]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	4b14      	ldr	r3, [pc, #80]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80062f4:	2180      	movs	r1, #128	; 0x80
 80062f6:	0249      	lsls	r1, r1, #9
 80062f8:	430a      	orrs	r2, r1
 80062fa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	2380      	movs	r3, #128	; 0x80
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	4013      	ands	r3, r2
 8006306:	d016      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006308:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800630a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630c:	4a14      	ldr	r2, [pc, #80]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800630e:	4013      	ands	r3, r2
 8006310:	0019      	movs	r1, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691a      	ldr	r2, [r3, #16]
 8006316:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006318:	430a      	orrs	r2, r1
 800631a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	01db      	lsls	r3, r3, #7
 8006324:	429a      	cmp	r2, r3
 8006326:	d106      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006328:	4b06      	ldr	r3, [pc, #24]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	4b05      	ldr	r3, [pc, #20]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800632e:	2180      	movs	r1, #128	; 0x80
 8006330:	0249      	lsls	r1, r1, #9
 8006332:	430a      	orrs	r2, r1
 8006334:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006336:	2312      	movs	r3, #18
 8006338:	18fb      	adds	r3, r7, r3
 800633a:	781b      	ldrb	r3, [r3, #0]
}
 800633c:	0018      	movs	r0, r3
 800633e:	46bd      	mov	sp, r7
 8006340:	b006      	add	sp, #24
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40021000 	.word	0x40021000
 8006348:	40007000 	.word	0x40007000
 800634c:	fffffcff 	.word	0xfffffcff
 8006350:	fffeffff 	.word	0xfffeffff
 8006354:	00001388 	.word	0x00001388
 8006358:	efffffff 	.word	0xefffffff
 800635c:	ffffcfff 	.word	0xffffcfff
 8006360:	ffff3fff 	.word	0xffff3fff

08006364 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e0a8      	b.n	80064c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	2382      	movs	r3, #130	; 0x82
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	429a      	cmp	r2, r3
 8006388:	d009      	beq.n	800639e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	61da      	str	r2, [r3, #28]
 8006390:	e005      	b.n	800639e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	225d      	movs	r2, #93	; 0x5d
 80063a8:	5c9b      	ldrb	r3, [r3, r2]
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d107      	bne.n	80063c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	225c      	movs	r2, #92	; 0x5c
 80063b4:	2100      	movs	r1, #0
 80063b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	0018      	movs	r0, r3
 80063bc:	f7fc fd16 	bl	8002dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	225d      	movs	r2, #93	; 0x5d
 80063c4:	2102      	movs	r1, #2
 80063c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2140      	movs	r1, #64	; 0x40
 80063d4:	438a      	bics	r2, r1
 80063d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	23e0      	movs	r3, #224	; 0xe0
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d902      	bls.n	80063ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	e002      	b.n	80063f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	015b      	lsls	r3, r3, #5
 80063ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	23f0      	movs	r3, #240	; 0xf0
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d008      	beq.n	800640e <HAL_SPI_Init+0xaa>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	23e0      	movs	r3, #224	; 0xe0
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	429a      	cmp	r2, r3
 8006406:	d002      	beq.n	800640e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	2382      	movs	r3, #130	; 0x82
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	401a      	ands	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6899      	ldr	r1, [r3, #8]
 800641c:	2384      	movs	r3, #132	; 0x84
 800641e:	021b      	lsls	r3, r3, #8
 8006420:	400b      	ands	r3, r1
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	2102      	movs	r1, #2
 800642a:	400b      	ands	r3, r1
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	2101      	movs	r1, #1
 8006434:	400b      	ands	r3, r1
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6999      	ldr	r1, [r3, #24]
 800643c:	2380      	movs	r3, #128	; 0x80
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	400b      	ands	r3, r1
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	2138      	movs	r1, #56	; 0x38
 800644a:	400b      	ands	r3, r1
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	2180      	movs	r1, #128	; 0x80
 8006454:	400b      	ands	r3, r1
 8006456:	431a      	orrs	r2, r3
 8006458:	0011      	movs	r1, r2
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800645e:	2380      	movs	r3, #128	; 0x80
 8006460:	019b      	lsls	r3, r3, #6
 8006462:	401a      	ands	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	0c1b      	lsrs	r3, r3, #16
 8006472:	2204      	movs	r2, #4
 8006474:	401a      	ands	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	2110      	movs	r1, #16
 800647c:	400b      	ands	r3, r1
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006484:	2108      	movs	r1, #8
 8006486:	400b      	ands	r3, r1
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68d9      	ldr	r1, [r3, #12]
 800648e:	23f0      	movs	r3, #240	; 0xf0
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	400b      	ands	r3, r1
 8006494:	431a      	orrs	r2, r3
 8006496:	0011      	movs	r1, r2
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	2380      	movs	r3, #128	; 0x80
 800649c:	015b      	lsls	r3, r3, #5
 800649e:	401a      	ands	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69da      	ldr	r2, [r3, #28]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4907      	ldr	r1, [pc, #28]	; (80064d0 <HAL_SPI_Init+0x16c>)
 80064b4:	400a      	ands	r2, r1
 80064b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	225d      	movs	r2, #93	; 0x5d
 80064c2:	2101      	movs	r1, #1
 80064c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	0018      	movs	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	b004      	add	sp, #16
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	fffff7ff 	.word	0xfffff7ff

080064d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	1dbb      	adds	r3, r7, #6
 80064e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064e4:	231f      	movs	r3, #31
 80064e6:	18fb      	adds	r3, r7, r3
 80064e8:	2200      	movs	r2, #0
 80064ea:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	225c      	movs	r2, #92	; 0x5c
 80064f0:	5c9b      	ldrb	r3, [r3, r2]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <HAL_SPI_Transmit+0x26>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e140      	b.n	800677c <HAL_SPI_Transmit+0x2a8>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	225c      	movs	r2, #92	; 0x5c
 80064fe:	2101      	movs	r1, #1
 8006500:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006502:	f7fc ff15 	bl	8003330 <HAL_GetTick>
 8006506:	0003      	movs	r3, r0
 8006508:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800650a:	2316      	movs	r3, #22
 800650c:	18fb      	adds	r3, r7, r3
 800650e:	1dba      	adds	r2, r7, #6
 8006510:	8812      	ldrh	r2, [r2, #0]
 8006512:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	225d      	movs	r2, #93	; 0x5d
 8006518:	5c9b      	ldrb	r3, [r3, r2]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b01      	cmp	r3, #1
 800651e:	d004      	beq.n	800652a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006520:	231f      	movs	r3, #31
 8006522:	18fb      	adds	r3, r7, r3
 8006524:	2202      	movs	r2, #2
 8006526:	701a      	strb	r2, [r3, #0]
    goto error;
 8006528:	e11d      	b.n	8006766 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <HAL_SPI_Transmit+0x64>
 8006530:	1dbb      	adds	r3, r7, #6
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d104      	bne.n	8006542 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006538:	231f      	movs	r3, #31
 800653a:	18fb      	adds	r3, r7, r3
 800653c:	2201      	movs	r2, #1
 800653e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006540:	e111      	b.n	8006766 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	225d      	movs	r2, #93	; 0x5d
 8006546:	2103      	movs	r1, #3
 8006548:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1dba      	adds	r2, r7, #6
 800655a:	8812      	ldrh	r2, [r2, #0]
 800655c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	1dba      	adds	r2, r7, #6
 8006562:	8812      	ldrh	r2, [r2, #0]
 8006564:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2244      	movs	r2, #68	; 0x44
 8006570:	2100      	movs	r1, #0
 8006572:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2246      	movs	r2, #70	; 0x46
 8006578:	2100      	movs	r1, #0
 800657a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	2380      	movs	r3, #128	; 0x80
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	429a      	cmp	r2, r3
 8006592:	d110      	bne.n	80065b6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2140      	movs	r1, #64	; 0x40
 80065a0:	438a      	bics	r2, r1
 80065a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2180      	movs	r1, #128	; 0x80
 80065b0:	01c9      	lsls	r1, r1, #7
 80065b2:	430a      	orrs	r2, r1
 80065b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2240      	movs	r2, #64	; 0x40
 80065be:	4013      	ands	r3, r2
 80065c0:	2b40      	cmp	r3, #64	; 0x40
 80065c2:	d007      	beq.n	80065d4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2140      	movs	r1, #64	; 0x40
 80065d0:	430a      	orrs	r2, r1
 80065d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	23e0      	movs	r3, #224	; 0xe0
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	429a      	cmp	r2, r3
 80065de:	d94e      	bls.n	800667e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d004      	beq.n	80065f2 <HAL_SPI_Transmit+0x11e>
 80065e8:	2316      	movs	r3, #22
 80065ea:	18fb      	adds	r3, r7, r3
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d13f      	bne.n	8006672 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f6:	881a      	ldrh	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	1c9a      	adds	r2, r3, #2
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006616:	e02c      	b.n	8006672 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	2202      	movs	r2, #2
 8006620:	4013      	ands	r3, r2
 8006622:	2b02      	cmp	r3, #2
 8006624:	d112      	bne.n	800664c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662a:	881a      	ldrh	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006636:	1c9a      	adds	r2, r3, #2
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	87da      	strh	r2, [r3, #62]	; 0x3e
 800664a:	e012      	b.n	8006672 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800664c:	f7fc fe70 	bl	8003330 <HAL_GetTick>
 8006650:	0002      	movs	r2, r0
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	429a      	cmp	r2, r3
 800665a:	d802      	bhi.n	8006662 <HAL_SPI_Transmit+0x18e>
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	3301      	adds	r3, #1
 8006660:	d102      	bne.n	8006668 <HAL_SPI_Transmit+0x194>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d104      	bne.n	8006672 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006668:	231f      	movs	r3, #31
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	2203      	movs	r2, #3
 800666e:	701a      	strb	r2, [r3, #0]
          goto error;
 8006670:	e079      	b.n	8006766 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006676:	b29b      	uxth	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1cd      	bne.n	8006618 <HAL_SPI_Transmit+0x144>
 800667c:	e04f      	b.n	800671e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d004      	beq.n	8006690 <HAL_SPI_Transmit+0x1bc>
 8006686:	2316      	movs	r3, #22
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d141      	bne.n	8006714 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	330c      	adds	r3, #12
 800669a:	7812      	ldrb	r2, [r2, #0]
 800669c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80066b6:	e02d      	b.n	8006714 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	2202      	movs	r2, #2
 80066c0:	4013      	ands	r3, r2
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d113      	bne.n	80066ee <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	330c      	adds	r3, #12
 80066d0:	7812      	ldrb	r2, [r2, #0]
 80066d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066ec:	e012      	b.n	8006714 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066ee:	f7fc fe1f 	bl	8003330 <HAL_GetTick>
 80066f2:	0002      	movs	r2, r0
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d802      	bhi.n	8006704 <HAL_SPI_Transmit+0x230>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	3301      	adds	r3, #1
 8006702:	d102      	bne.n	800670a <HAL_SPI_Transmit+0x236>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d104      	bne.n	8006714 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800670a:	231f      	movs	r3, #31
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	2203      	movs	r2, #3
 8006710:	701a      	strb	r2, [r3, #0]
          goto error;
 8006712:	e028      	b.n	8006766 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1cc      	bne.n	80066b8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	0018      	movs	r0, r3
 8006726:	f000 fcd9 	bl	80070dc <SPI_EndRxTxTransaction>
 800672a:	1e03      	subs	r3, r0, #0
 800672c:	d002      	beq.n	8006734 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2220      	movs	r2, #32
 8006732:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800673c:	2300      	movs	r3, #0
 800673e:	613b      	str	r3, [r7, #16]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	613b      	str	r3, [r7, #16]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006756:	2b00      	cmp	r3, #0
 8006758:	d004      	beq.n	8006764 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800675a:	231f      	movs	r3, #31
 800675c:	18fb      	adds	r3, r7, r3
 800675e:	2201      	movs	r2, #1
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	e000      	b.n	8006766 <HAL_SPI_Transmit+0x292>
  }

error:
 8006764:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	225d      	movs	r2, #93	; 0x5d
 800676a:	2101      	movs	r1, #1
 800676c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	225c      	movs	r2, #92	; 0x5c
 8006772:	2100      	movs	r1, #0
 8006774:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006776:	231f      	movs	r3, #31
 8006778:	18fb      	adds	r3, r7, r3
 800677a:	781b      	ldrb	r3, [r3, #0]
}
 800677c:	0018      	movs	r0, r3
 800677e:	46bd      	mov	sp, r7
 8006780:	b008      	add	sp, #32
 8006782:	bd80      	pop	{r7, pc}

08006784 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006784:	b590      	push	{r4, r7, lr}
 8006786:	b089      	sub	sp, #36	; 0x24
 8006788:	af02      	add	r7, sp, #8
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	1dbb      	adds	r3, r7, #6
 8006792:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006794:	2317      	movs	r3, #23
 8006796:	18fb      	adds	r3, r7, r3
 8006798:	2200      	movs	r2, #0
 800679a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	2382      	movs	r3, #130	; 0x82
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d113      	bne.n	80067d0 <HAL_SPI_Receive+0x4c>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10f      	bne.n	80067d0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	225d      	movs	r2, #93	; 0x5d
 80067b4:	2104      	movs	r1, #4
 80067b6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80067b8:	1dbb      	adds	r3, r7, #6
 80067ba:	881c      	ldrh	r4, [r3, #0]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	0023      	movs	r3, r4
 80067c8:	f000 f928 	bl	8006a1c <HAL_SPI_TransmitReceive>
 80067cc:	0003      	movs	r3, r0
 80067ce:	e11c      	b.n	8006a0a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	225c      	movs	r2, #92	; 0x5c
 80067d4:	5c9b      	ldrb	r3, [r3, r2]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d101      	bne.n	80067de <HAL_SPI_Receive+0x5a>
 80067da:	2302      	movs	r3, #2
 80067dc:	e115      	b.n	8006a0a <HAL_SPI_Receive+0x286>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	225c      	movs	r2, #92	; 0x5c
 80067e2:	2101      	movs	r1, #1
 80067e4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067e6:	f7fc fda3 	bl	8003330 <HAL_GetTick>
 80067ea:	0003      	movs	r3, r0
 80067ec:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	225d      	movs	r2, #93	; 0x5d
 80067f2:	5c9b      	ldrb	r3, [r3, r2]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d004      	beq.n	8006804 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80067fa:	2317      	movs	r3, #23
 80067fc:	18fb      	adds	r3, r7, r3
 80067fe:	2202      	movs	r2, #2
 8006800:	701a      	strb	r2, [r3, #0]
    goto error;
 8006802:	e0f7      	b.n	80069f4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_SPI_Receive+0x8e>
 800680a:	1dbb      	adds	r3, r7, #6
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d104      	bne.n	800681c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8006812:	2317      	movs	r3, #23
 8006814:	18fb      	adds	r3, r7, r3
 8006816:	2201      	movs	r2, #1
 8006818:	701a      	strb	r2, [r3, #0]
    goto error;
 800681a:	e0eb      	b.n	80069f4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	225d      	movs	r2, #93	; 0x5d
 8006820:	2104      	movs	r1, #4
 8006822:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	1dba      	adds	r2, r7, #6
 8006834:	2144      	movs	r1, #68	; 0x44
 8006836:	8812      	ldrh	r2, [r2, #0]
 8006838:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	1dba      	adds	r2, r7, #6
 800683e:	2146      	movs	r1, #70	; 0x46
 8006840:	8812      	ldrh	r2, [r2, #0]
 8006842:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	23e0      	movs	r3, #224	; 0xe0
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	429a      	cmp	r2, r3
 800686c:	d908      	bls.n	8006880 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4966      	ldr	r1, [pc, #408]	; (8006a14 <HAL_SPI_Receive+0x290>)
 800687a:	400a      	ands	r2, r1
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	e008      	b.n	8006892 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2180      	movs	r1, #128	; 0x80
 800688c:	0149      	lsls	r1, r1, #5
 800688e:	430a      	orrs	r2, r1
 8006890:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	2380      	movs	r3, #128	; 0x80
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	429a      	cmp	r2, r3
 800689c:	d10f      	bne.n	80068be <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2140      	movs	r1, #64	; 0x40
 80068aa:	438a      	bics	r2, r1
 80068ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4957      	ldr	r1, [pc, #348]	; (8006a18 <HAL_SPI_Receive+0x294>)
 80068ba:	400a      	ands	r2, r1
 80068bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2240      	movs	r2, #64	; 0x40
 80068c6:	4013      	ands	r3, r2
 80068c8:	2b40      	cmp	r3, #64	; 0x40
 80068ca:	d007      	beq.n	80068dc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2140      	movs	r1, #64	; 0x40
 80068d8:	430a      	orrs	r2, r1
 80068da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	23e0      	movs	r3, #224	; 0xe0
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d900      	bls.n	80068ea <HAL_SPI_Receive+0x166>
 80068e8:	e069      	b.n	80069be <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80068ea:	e031      	b.n	8006950 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2201      	movs	r2, #1
 80068f4:	4013      	ands	r3, r2
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d117      	bne.n	800692a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	330c      	adds	r3, #12
 8006900:	001a      	movs	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	7812      	ldrb	r2, [r2, #0]
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2246      	movs	r2, #70	; 0x46
 800691a:	5a9b      	ldrh	r3, [r3, r2]
 800691c:	b29b      	uxth	r3, r3
 800691e:	3b01      	subs	r3, #1
 8006920:	b299      	uxth	r1, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2246      	movs	r2, #70	; 0x46
 8006926:	5299      	strh	r1, [r3, r2]
 8006928:	e012      	b.n	8006950 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800692a:	f7fc fd01 	bl	8003330 <HAL_GetTick>
 800692e:	0002      	movs	r2, r0
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d802      	bhi.n	8006940 <HAL_SPI_Receive+0x1bc>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	3301      	adds	r3, #1
 800693e:	d102      	bne.n	8006946 <HAL_SPI_Receive+0x1c2>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d104      	bne.n	8006950 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8006946:	2317      	movs	r3, #23
 8006948:	18fb      	adds	r3, r7, r3
 800694a:	2203      	movs	r2, #3
 800694c:	701a      	strb	r2, [r3, #0]
          goto error;
 800694e:	e051      	b.n	80069f4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2246      	movs	r2, #70	; 0x46
 8006954:	5a9b      	ldrh	r3, [r3, r2]
 8006956:	b29b      	uxth	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1c7      	bne.n	80068ec <HAL_SPI_Receive+0x168>
 800695c:	e035      	b.n	80069ca <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	2201      	movs	r2, #1
 8006966:	4013      	ands	r3, r2
 8006968:	2b01      	cmp	r3, #1
 800696a:	d115      	bne.n	8006998 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	b292      	uxth	r2, r2
 8006978:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	1c9a      	adds	r2, r3, #2
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2246      	movs	r2, #70	; 0x46
 8006988:	5a9b      	ldrh	r3, [r3, r2]
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b299      	uxth	r1, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2246      	movs	r2, #70	; 0x46
 8006994:	5299      	strh	r1, [r3, r2]
 8006996:	e012      	b.n	80069be <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006998:	f7fc fcca 	bl	8003330 <HAL_GetTick>
 800699c:	0002      	movs	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d802      	bhi.n	80069ae <HAL_SPI_Receive+0x22a>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	3301      	adds	r3, #1
 80069ac:	d102      	bne.n	80069b4 <HAL_SPI_Receive+0x230>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d104      	bne.n	80069be <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80069b4:	2317      	movs	r3, #23
 80069b6:	18fb      	adds	r3, r7, r3
 80069b8:	2203      	movs	r2, #3
 80069ba:	701a      	strb	r2, [r3, #0]
          goto error;
 80069bc:	e01a      	b.n	80069f4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2246      	movs	r2, #70	; 0x46
 80069c2:	5a9b      	ldrh	r3, [r3, r2]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1c9      	bne.n	800695e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	0018      	movs	r0, r3
 80069d2:	f000 fb25 	bl	8007020 <SPI_EndRxTransaction>
 80069d6:	1e03      	subs	r3, r0, #0
 80069d8:	d002      	beq.n	80069e0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80069e8:	2317      	movs	r3, #23
 80069ea:	18fb      	adds	r3, r7, r3
 80069ec:	2201      	movs	r2, #1
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	e000      	b.n	80069f4 <HAL_SPI_Receive+0x270>
  }

error :
 80069f2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	225d      	movs	r2, #93	; 0x5d
 80069f8:	2101      	movs	r1, #1
 80069fa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	225c      	movs	r2, #92	; 0x5c
 8006a00:	2100      	movs	r1, #0
 8006a02:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006a04:	2317      	movs	r3, #23
 8006a06:	18fb      	adds	r3, r7, r3
 8006a08:	781b      	ldrb	r3, [r3, #0]
}
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	b007      	add	sp, #28
 8006a10:	bd90      	pop	{r4, r7, pc}
 8006a12:	46c0      	nop			; (mov r8, r8)
 8006a14:	ffffefff 	.word	0xffffefff
 8006a18:	ffffbfff 	.word	0xffffbfff

08006a1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08a      	sub	sp, #40	; 0x28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	001a      	movs	r2, r3
 8006a2a:	1cbb      	adds	r3, r7, #2
 8006a2c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a32:	2323      	movs	r3, #35	; 0x23
 8006a34:	18fb      	adds	r3, r7, r3
 8006a36:	2200      	movs	r2, #0
 8006a38:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	225c      	movs	r2, #92	; 0x5c
 8006a3e:	5c9b      	ldrb	r3, [r3, r2]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_SPI_TransmitReceive+0x2c>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e1b5      	b.n	8006db4 <HAL_SPI_TransmitReceive+0x398>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	225c      	movs	r2, #92	; 0x5c
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a50:	f7fc fc6e 	bl	8003330 <HAL_GetTick>
 8006a54:	0003      	movs	r3, r0
 8006a56:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a58:	201b      	movs	r0, #27
 8006a5a:	183b      	adds	r3, r7, r0
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	215d      	movs	r1, #93	; 0x5d
 8006a60:	5c52      	ldrb	r2, [r2, r1]
 8006a62:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006a6a:	2312      	movs	r3, #18
 8006a6c:	18fb      	adds	r3, r7, r3
 8006a6e:	1cba      	adds	r2, r7, #2
 8006a70:	8812      	ldrh	r2, [r2, #0]
 8006a72:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a74:	183b      	adds	r3, r7, r0
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d011      	beq.n	8006aa0 <HAL_SPI_TransmitReceive+0x84>
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	2382      	movs	r3, #130	; 0x82
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d107      	bne.n	8006a96 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d103      	bne.n	8006a96 <HAL_SPI_TransmitReceive+0x7a>
 8006a8e:	183b      	adds	r3, r7, r0
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	d004      	beq.n	8006aa0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006a96:	2323      	movs	r3, #35	; 0x23
 8006a98:	18fb      	adds	r3, r7, r3
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	701a      	strb	r2, [r3, #0]
    goto error;
 8006a9e:	e17e      	b.n	8006d9e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d006      	beq.n	8006ab4 <HAL_SPI_TransmitReceive+0x98>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <HAL_SPI_TransmitReceive+0x98>
 8006aac:	1cbb      	adds	r3, r7, #2
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d104      	bne.n	8006abe <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006ab4:	2323      	movs	r3, #35	; 0x23
 8006ab6:	18fb      	adds	r3, r7, r3
 8006ab8:	2201      	movs	r2, #1
 8006aba:	701a      	strb	r2, [r3, #0]
    goto error;
 8006abc:	e16f      	b.n	8006d9e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	225d      	movs	r2, #93	; 0x5d
 8006ac2:	5c9b      	ldrb	r3, [r3, r2]
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d003      	beq.n	8006ad2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	225d      	movs	r2, #93	; 0x5d
 8006ace:	2105      	movs	r1, #5
 8006ad0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	1cba      	adds	r2, r7, #2
 8006ae2:	2146      	movs	r1, #70	; 0x46
 8006ae4:	8812      	ldrh	r2, [r2, #0]
 8006ae6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	1cba      	adds	r2, r7, #2
 8006aec:	2144      	movs	r1, #68	; 0x44
 8006aee:	8812      	ldrh	r2, [r2, #0]
 8006af0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	1cba      	adds	r2, r7, #2
 8006afc:	8812      	ldrh	r2, [r2, #0]
 8006afe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	1cba      	adds	r2, r7, #2
 8006b04:	8812      	ldrh	r2, [r2, #0]
 8006b06:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	23e0      	movs	r3, #224	; 0xe0
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d908      	bls.n	8006b32 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	49a4      	ldr	r1, [pc, #656]	; (8006dbc <HAL_SPI_TransmitReceive+0x3a0>)
 8006b2c:	400a      	ands	r2, r1
 8006b2e:	605a      	str	r2, [r3, #4]
 8006b30:	e008      	b.n	8006b44 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2180      	movs	r1, #128	; 0x80
 8006b3e:	0149      	lsls	r1, r1, #5
 8006b40:	430a      	orrs	r2, r1
 8006b42:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2240      	movs	r2, #64	; 0x40
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	2b40      	cmp	r3, #64	; 0x40
 8006b50:	d007      	beq.n	8006b62 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2140      	movs	r1, #64	; 0x40
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	23e0      	movs	r3, #224	; 0xe0
 8006b68:	00db      	lsls	r3, r3, #3
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d800      	bhi.n	8006b70 <HAL_SPI_TransmitReceive+0x154>
 8006b6e:	e07f      	b.n	8006c70 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <HAL_SPI_TransmitReceive+0x168>
 8006b78:	2312      	movs	r3, #18
 8006b7a:	18fb      	adds	r3, r7, r3
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d000      	beq.n	8006b84 <HAL_SPI_TransmitReceive+0x168>
 8006b82:	e069      	b.n	8006c58 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	881a      	ldrh	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	1c9a      	adds	r2, r3, #2
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ba8:	e056      	b.n	8006c58 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d11b      	bne.n	8006bf0 <HAL_SPI_TransmitReceive+0x1d4>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d016      	beq.n	8006bf0 <HAL_SPI_TransmitReceive+0x1d4>
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d113      	bne.n	8006bf0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	881a      	ldrh	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	1c9a      	adds	r2, r3, #2
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d11c      	bne.n	8006c38 <HAL_SPI_TransmitReceive+0x21c>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2246      	movs	r2, #70	; 0x46
 8006c02:	5a9b      	ldrh	r3, [r3, r2]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d016      	beq.n	8006c38 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	b292      	uxth	r2, r2
 8006c16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	1c9a      	adds	r2, r3, #2
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2246      	movs	r2, #70	; 0x46
 8006c26:	5a9b      	ldrh	r3, [r3, r2]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b299      	uxth	r1, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2246      	movs	r2, #70	; 0x46
 8006c32:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c34:	2301      	movs	r3, #1
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c38:	f7fc fb7a 	bl	8003330 <HAL_GetTick>
 8006c3c:	0002      	movs	r2, r0
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d807      	bhi.n	8006c58 <HAL_SPI_TransmitReceive+0x23c>
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	d004      	beq.n	8006c58 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006c4e:	2323      	movs	r3, #35	; 0x23
 8006c50:	18fb      	adds	r3, r7, r3
 8006c52:	2203      	movs	r2, #3
 8006c54:	701a      	strb	r2, [r3, #0]
        goto error;
 8006c56:	e0a2      	b.n	8006d9e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1a3      	bne.n	8006baa <HAL_SPI_TransmitReceive+0x18e>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2246      	movs	r2, #70	; 0x46
 8006c66:	5a9b      	ldrh	r3, [r3, r2]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d19d      	bne.n	8006baa <HAL_SPI_TransmitReceive+0x18e>
 8006c6e:	e085      	b.n	8006d7c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_SPI_TransmitReceive+0x268>
 8006c78:	2312      	movs	r3, #18
 8006c7a:	18fb      	adds	r3, r7, r3
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d000      	beq.n	8006c84 <HAL_SPI_TransmitReceive+0x268>
 8006c82:	e070      	b.n	8006d66 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	330c      	adds	r3, #12
 8006c8e:	7812      	ldrb	r2, [r2, #0]
 8006c90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006caa:	e05c      	b.n	8006d66 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d11c      	bne.n	8006cf4 <HAL_SPI_TransmitReceive+0x2d8>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d017      	beq.n	8006cf4 <HAL_SPI_TransmitReceive+0x2d8>
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d114      	bne.n	8006cf4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	330c      	adds	r3, #12
 8006cd4:	7812      	ldrb	r2, [r2, #0]
 8006cd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d11e      	bne.n	8006d40 <HAL_SPI_TransmitReceive+0x324>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2246      	movs	r2, #70	; 0x46
 8006d06:	5a9b      	ldrh	r3, [r3, r2]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d018      	beq.n	8006d40 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	330c      	adds	r3, #12
 8006d14:	001a      	movs	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	7812      	ldrb	r2, [r2, #0]
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2246      	movs	r2, #70	; 0x46
 8006d2e:	5a9b      	ldrh	r3, [r3, r2]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	3b01      	subs	r3, #1
 8006d34:	b299      	uxth	r1, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2246      	movs	r2, #70	; 0x46
 8006d3a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d40:	f7fc faf6 	bl	8003330 <HAL_GetTick>
 8006d44:	0002      	movs	r2, r0
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d802      	bhi.n	8006d56 <HAL_SPI_TransmitReceive+0x33a>
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	3301      	adds	r3, #1
 8006d54:	d102      	bne.n	8006d5c <HAL_SPI_TransmitReceive+0x340>
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d104      	bne.n	8006d66 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006d5c:	2323      	movs	r3, #35	; 0x23
 8006d5e:	18fb      	adds	r3, r7, r3
 8006d60:	2203      	movs	r2, #3
 8006d62:	701a      	strb	r2, [r3, #0]
        goto error;
 8006d64:	e01b      	b.n	8006d9e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d19d      	bne.n	8006cac <HAL_SPI_TransmitReceive+0x290>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2246      	movs	r2, #70	; 0x46
 8006d74:	5a9b      	ldrh	r3, [r3, r2]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d197      	bne.n	8006cac <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d7c:	69fa      	ldr	r2, [r7, #28]
 8006d7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	0018      	movs	r0, r3
 8006d84:	f000 f9aa 	bl	80070dc <SPI_EndRxTxTransaction>
 8006d88:	1e03      	subs	r3, r0, #0
 8006d8a:	d007      	beq.n	8006d9c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006d8c:	2323      	movs	r3, #35	; 0x23
 8006d8e:	18fb      	adds	r3, r7, r3
 8006d90:	2201      	movs	r2, #1
 8006d92:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	661a      	str	r2, [r3, #96]	; 0x60
 8006d9a:	e000      	b.n	8006d9e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006d9c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	225d      	movs	r2, #93	; 0x5d
 8006da2:	2101      	movs	r1, #1
 8006da4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	225c      	movs	r2, #92	; 0x5c
 8006daa:	2100      	movs	r1, #0
 8006dac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006dae:	2323      	movs	r3, #35	; 0x23
 8006db0:	18fb      	adds	r3, r7, r3
 8006db2:	781b      	ldrb	r3, [r3, #0]
}
 8006db4:	0018      	movs	r0, r3
 8006db6:	46bd      	mov	sp, r7
 8006db8:	b00a      	add	sp, #40	; 0x28
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	ffffefff 	.word	0xffffefff

08006dc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	1dfb      	adds	r3, r7, #7
 8006dce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006dd0:	f7fc faae 	bl	8003330 <HAL_GetTick>
 8006dd4:	0002      	movs	r2, r0
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	1a9b      	subs	r3, r3, r2
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	18d3      	adds	r3, r2, r3
 8006dde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006de0:	f7fc faa6 	bl	8003330 <HAL_GetTick>
 8006de4:	0003      	movs	r3, r0
 8006de6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006de8:	4b3a      	ldr	r3, [pc, #232]	; (8006ed4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	015b      	lsls	r3, r3, #5
 8006dee:	0d1b      	lsrs	r3, r3, #20
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	4353      	muls	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006df6:	e058      	b.n	8006eaa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	d055      	beq.n	8006eaa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dfe:	f7fc fa97 	bl	8003330 <HAL_GetTick>
 8006e02:	0002      	movs	r2, r0
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d902      	bls.n	8006e14 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d142      	bne.n	8006e9a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	21e0      	movs	r1, #224	; 0xe0
 8006e20:	438a      	bics	r2, r1
 8006e22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	2382      	movs	r3, #130	; 0x82
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d113      	bne.n	8006e58 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	2380      	movs	r3, #128	; 0x80
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d005      	beq.n	8006e48 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	2380      	movs	r3, #128	; 0x80
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d107      	bne.n	8006e58 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2140      	movs	r1, #64	; 0x40
 8006e54:	438a      	bics	r2, r1
 8006e56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e5c:	2380      	movs	r3, #128	; 0x80
 8006e5e:	019b      	lsls	r3, r3, #6
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d110      	bne.n	8006e86 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	491a      	ldr	r1, [pc, #104]	; (8006ed8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006e70:	400a      	ands	r2, r1
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2180      	movs	r1, #128	; 0x80
 8006e80:	0189      	lsls	r1, r1, #6
 8006e82:	430a      	orrs	r2, r1
 8006e84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	225d      	movs	r2, #93	; 0x5d
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	225c      	movs	r2, #92	; 0x5c
 8006e92:	2100      	movs	r1, #0
 8006e94:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e017      	b.n	8006eca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	425a      	negs	r2, r3
 8006eba:	4153      	adcs	r3, r2
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	001a      	movs	r2, r3
 8006ec0:	1dfb      	adds	r3, r7, #7
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d197      	bne.n	8006df8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	0018      	movs	r0, r3
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	b008      	add	sp, #32
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	20000014 	.word	0x20000014
 8006ed8:	ffffdfff 	.word	0xffffdfff

08006edc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08a      	sub	sp, #40	; 0x28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006eea:	2317      	movs	r3, #23
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	2200      	movs	r2, #0
 8006ef0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ef2:	f7fc fa1d 	bl	8003330 <HAL_GetTick>
 8006ef6:	0002      	movs	r2, r0
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	1a9b      	subs	r3, r3, r2
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	18d3      	adds	r3, r2, r3
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006f02:	f7fc fa15 	bl	8003330 <HAL_GetTick>
 8006f06:	0003      	movs	r3, r0
 8006f08:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f12:	4b41      	ldr	r3, [pc, #260]	; (8007018 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	0013      	movs	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	189b      	adds	r3, r3, r2
 8006f1c:	00da      	lsls	r2, r3, #3
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	0d1b      	lsrs	r3, r3, #20
 8006f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f24:	4353      	muls	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006f28:	e068      	b.n	8006ffc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	23c0      	movs	r3, #192	; 0xc0
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d10a      	bne.n	8006f4a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d107      	bne.n	8006f4a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	2117      	movs	r1, #23
 8006f42:	187b      	adds	r3, r7, r1
 8006f44:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006f46:	187b      	adds	r3, r7, r1
 8006f48:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	d055      	beq.n	8006ffc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f50:	f7fc f9ee 	bl	8003330 <HAL_GetTick>
 8006f54:	0002      	movs	r2, r0
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d902      	bls.n	8006f66 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d142      	bne.n	8006fec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	21e0      	movs	r1, #224	; 0xe0
 8006f72:	438a      	bics	r2, r1
 8006f74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	2382      	movs	r3, #130	; 0x82
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d113      	bne.n	8006faa <SPI_WaitFifoStateUntilTimeout+0xce>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	2380      	movs	r3, #128	; 0x80
 8006f88:	021b      	lsls	r3, r3, #8
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d005      	beq.n	8006f9a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	2380      	movs	r3, #128	; 0x80
 8006f94:	00db      	lsls	r3, r3, #3
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d107      	bne.n	8006faa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2140      	movs	r1, #64	; 0x40
 8006fa6:	438a      	bics	r2, r1
 8006fa8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fae:	2380      	movs	r3, #128	; 0x80
 8006fb0:	019b      	lsls	r3, r3, #6
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d110      	bne.n	8006fd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4916      	ldr	r1, [pc, #88]	; (800701c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006fc2:	400a      	ands	r2, r1
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2180      	movs	r1, #128	; 0x80
 8006fd2:	0189      	lsls	r1, r1, #6
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	225d      	movs	r2, #93	; 0x5d
 8006fdc:	2101      	movs	r1, #1
 8006fde:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	225c      	movs	r2, #92	; 0x5c
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e010      	b.n	800700e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	4013      	ands	r3, r2
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	429a      	cmp	r2, r3
 800700a:	d18e      	bne.n	8006f2a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	0018      	movs	r0, r3
 8007010:	46bd      	mov	sp, r7
 8007012:	b00a      	add	sp, #40	; 0x28
 8007014:	bd80      	pop	{r7, pc}
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	20000014 	.word	0x20000014
 800701c:	ffffdfff 	.word	0xffffdfff

08007020 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af02      	add	r7, sp, #8
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	2382      	movs	r3, #130	; 0x82
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	429a      	cmp	r2, r3
 8007036:	d113      	bne.n	8007060 <SPI_EndRxTransaction+0x40>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	2380      	movs	r3, #128	; 0x80
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	429a      	cmp	r2, r3
 8007042:	d005      	beq.n	8007050 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	2380      	movs	r3, #128	; 0x80
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	429a      	cmp	r2, r3
 800704e:	d107      	bne.n	8007060 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2140      	movs	r1, #64	; 0x40
 800705c:	438a      	bics	r2, r1
 800705e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	0013      	movs	r3, r2
 800706a:	2200      	movs	r2, #0
 800706c:	2180      	movs	r1, #128	; 0x80
 800706e:	f7ff fea7 	bl	8006dc0 <SPI_WaitFlagStateUntilTimeout>
 8007072:	1e03      	subs	r3, r0, #0
 8007074:	d007      	beq.n	8007086 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800707a:	2220      	movs	r2, #32
 800707c:	431a      	orrs	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e026      	b.n	80070d4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	2382      	movs	r3, #130	; 0x82
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	429a      	cmp	r2, r3
 8007090:	d11f      	bne.n	80070d2 <SPI_EndRxTransaction+0xb2>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689a      	ldr	r2, [r3, #8]
 8007096:	2380      	movs	r3, #128	; 0x80
 8007098:	021b      	lsls	r3, r3, #8
 800709a:	429a      	cmp	r2, r3
 800709c:	d005      	beq.n	80070aa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	2380      	movs	r3, #128	; 0x80
 80070a4:	00db      	lsls	r3, r3, #3
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d113      	bne.n	80070d2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	23c0      	movs	r3, #192	; 0xc0
 80070ae:	00d9      	lsls	r1, r3, #3
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	0013      	movs	r3, r2
 80070b8:	2200      	movs	r2, #0
 80070ba:	f7ff ff0f 	bl	8006edc <SPI_WaitFifoStateUntilTimeout>
 80070be:	1e03      	subs	r3, r0, #0
 80070c0:	d007      	beq.n	80070d2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c6:	2220      	movs	r2, #32
 80070c8:	431a      	orrs	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e000      	b.n	80070d4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	0018      	movs	r0, r3
 80070d6:	46bd      	mov	sp, r7
 80070d8:	b004      	add	sp, #16
 80070da:	bd80      	pop	{r7, pc}

080070dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af02      	add	r7, sp, #8
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	23c0      	movs	r3, #192	; 0xc0
 80070ec:	0159      	lsls	r1, r3, #5
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	0013      	movs	r3, r2
 80070f6:	2200      	movs	r2, #0
 80070f8:	f7ff fef0 	bl	8006edc <SPI_WaitFifoStateUntilTimeout>
 80070fc:	1e03      	subs	r3, r0, #0
 80070fe:	d007      	beq.n	8007110 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007104:	2220      	movs	r2, #32
 8007106:	431a      	orrs	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e027      	b.n	8007160 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	0013      	movs	r3, r2
 800711a:	2200      	movs	r2, #0
 800711c:	2180      	movs	r1, #128	; 0x80
 800711e:	f7ff fe4f 	bl	8006dc0 <SPI_WaitFlagStateUntilTimeout>
 8007122:	1e03      	subs	r3, r0, #0
 8007124:	d007      	beq.n	8007136 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800712a:	2220      	movs	r2, #32
 800712c:	431a      	orrs	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e014      	b.n	8007160 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	23c0      	movs	r3, #192	; 0xc0
 800713a:	00d9      	lsls	r1, r3, #3
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	0013      	movs	r3, r2
 8007144:	2200      	movs	r2, #0
 8007146:	f7ff fec9 	bl	8006edc <SPI_WaitFifoStateUntilTimeout>
 800714a:	1e03      	subs	r3, r0, #0
 800714c:	d007      	beq.n	800715e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007152:	2220      	movs	r2, #32
 8007154:	431a      	orrs	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e000      	b.n	8007160 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	0018      	movs	r0, r3
 8007162:	46bd      	mov	sp, r7
 8007164:	b004      	add	sp, #16
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e046      	b.n	8007208 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2288      	movs	r2, #136	; 0x88
 800717e:	589b      	ldr	r3, [r3, r2]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d107      	bne.n	8007194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2284      	movs	r2, #132	; 0x84
 8007188:	2100      	movs	r1, #0
 800718a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	0018      	movs	r0, r3
 8007190:	f7fb fe76 	bl	8002e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2288      	movs	r2, #136	; 0x88
 8007198:	2124      	movs	r1, #36	; 0x24
 800719a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2101      	movs	r1, #1
 80071a8:	438a      	bics	r2, r1
 80071aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	0018      	movs	r0, r3
 80071b0:	f000 fc12 	bl	80079d8 <UART_SetConfig>
 80071b4:	0003      	movs	r3, r0
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d101      	bne.n	80071be <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e024      	b.n	8007208 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	0018      	movs	r0, r3
 80071ca:	f000 fda9 	bl	8007d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	490d      	ldr	r1, [pc, #52]	; (8007210 <HAL_UART_Init+0xa8>)
 80071da:	400a      	ands	r2, r1
 80071dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	212a      	movs	r1, #42	; 0x2a
 80071ea:	438a      	bics	r2, r1
 80071ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2101      	movs	r1, #1
 80071fa:	430a      	orrs	r2, r1
 80071fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	0018      	movs	r0, r3
 8007202:	f000 fe41 	bl	8007e88 <UART_CheckIdleState>
 8007206:	0003      	movs	r3, r0
}
 8007208:	0018      	movs	r0, r3
 800720a:	46bd      	mov	sp, r7
 800720c:	b002      	add	sp, #8
 800720e:	bd80      	pop	{r7, pc}
 8007210:	ffffb7ff 	.word	0xffffb7ff

08007214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08a      	sub	sp, #40	; 0x28
 8007218:	af02      	add	r7, sp, #8
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	603b      	str	r3, [r7, #0]
 8007220:	1dbb      	adds	r3, r7, #6
 8007222:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2288      	movs	r2, #136	; 0x88
 8007228:	589b      	ldr	r3, [r3, r2]
 800722a:	2b20      	cmp	r3, #32
 800722c:	d000      	beq.n	8007230 <HAL_UART_Transmit+0x1c>
 800722e:	e088      	b.n	8007342 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <HAL_UART_Transmit+0x2a>
 8007236:	1dbb      	adds	r3, r7, #6
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e080      	b.n	8007344 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	2380      	movs	r3, #128	; 0x80
 8007248:	015b      	lsls	r3, r3, #5
 800724a:	429a      	cmp	r2, r3
 800724c:	d109      	bne.n	8007262 <HAL_UART_Transmit+0x4e>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d105      	bne.n	8007262 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2201      	movs	r2, #1
 800725a:	4013      	ands	r3, r2
 800725c:	d001      	beq.n	8007262 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e070      	b.n	8007344 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2290      	movs	r2, #144	; 0x90
 8007266:	2100      	movs	r1, #0
 8007268:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2288      	movs	r2, #136	; 0x88
 800726e:	2121      	movs	r1, #33	; 0x21
 8007270:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007272:	f7fc f85d 	bl	8003330 <HAL_GetTick>
 8007276:	0003      	movs	r3, r0
 8007278:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	1dba      	adds	r2, r7, #6
 800727e:	2154      	movs	r1, #84	; 0x54
 8007280:	8812      	ldrh	r2, [r2, #0]
 8007282:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	1dba      	adds	r2, r7, #6
 8007288:	2156      	movs	r1, #86	; 0x56
 800728a:	8812      	ldrh	r2, [r2, #0]
 800728c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	2380      	movs	r3, #128	; 0x80
 8007294:	015b      	lsls	r3, r3, #5
 8007296:	429a      	cmp	r2, r3
 8007298:	d108      	bne.n	80072ac <HAL_UART_Transmit+0x98>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d104      	bne.n	80072ac <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	61bb      	str	r3, [r7, #24]
 80072aa:	e003      	b.n	80072b4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072b4:	e02c      	b.n	8007310 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	0013      	movs	r3, r2
 80072c0:	2200      	movs	r2, #0
 80072c2:	2180      	movs	r1, #128	; 0x80
 80072c4:	f000 fe2e 	bl	8007f24 <UART_WaitOnFlagUntilTimeout>
 80072c8:	1e03      	subs	r3, r0, #0
 80072ca:	d001      	beq.n	80072d0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e039      	b.n	8007344 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10b      	bne.n	80072ee <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	001a      	movs	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	05d2      	lsls	r2, r2, #23
 80072e2:	0dd2      	lsrs	r2, r2, #23
 80072e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	3302      	adds	r3, #2
 80072ea:	61bb      	str	r3, [r7, #24]
 80072ec:	e007      	b.n	80072fe <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	781a      	ldrb	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	3301      	adds	r3, #1
 80072fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2256      	movs	r2, #86	; 0x56
 8007302:	5a9b      	ldrh	r3, [r3, r2]
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b299      	uxth	r1, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2256      	movs	r2, #86	; 0x56
 800730e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2256      	movs	r2, #86	; 0x56
 8007314:	5a9b      	ldrh	r3, [r3, r2]
 8007316:	b29b      	uxth	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1cc      	bne.n	80072b6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	0013      	movs	r3, r2
 8007326:	2200      	movs	r2, #0
 8007328:	2140      	movs	r1, #64	; 0x40
 800732a:	f000 fdfb 	bl	8007f24 <UART_WaitOnFlagUntilTimeout>
 800732e:	1e03      	subs	r3, r0, #0
 8007330:	d001      	beq.n	8007336 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e006      	b.n	8007344 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2288      	movs	r2, #136	; 0x88
 800733a:	2120      	movs	r1, #32
 800733c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	e000      	b.n	8007344 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8007342:	2302      	movs	r3, #2
  }
}
 8007344:	0018      	movs	r0, r3
 8007346:	46bd      	mov	sp, r7
 8007348:	b008      	add	sp, #32
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800734c:	b5b0      	push	{r4, r5, r7, lr}
 800734e:	b0aa      	sub	sp, #168	; 0xa8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	22a4      	movs	r2, #164	; 0xa4
 800735c:	18b9      	adds	r1, r7, r2
 800735e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	20a0      	movs	r0, #160	; 0xa0
 8007368:	1839      	adds	r1, r7, r0
 800736a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	249c      	movs	r4, #156	; 0x9c
 8007374:	1939      	adds	r1, r7, r4
 8007376:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007378:	0011      	movs	r1, r2
 800737a:	18bb      	adds	r3, r7, r2
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4aa2      	ldr	r2, [pc, #648]	; (8007608 <HAL_UART_IRQHandler+0x2bc>)
 8007380:	4013      	ands	r3, r2
 8007382:	2298      	movs	r2, #152	; 0x98
 8007384:	18bd      	adds	r5, r7, r2
 8007386:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8007388:	18bb      	adds	r3, r7, r2
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d11a      	bne.n	80073c6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007390:	187b      	adds	r3, r7, r1
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2220      	movs	r2, #32
 8007396:	4013      	ands	r3, r2
 8007398:	d015      	beq.n	80073c6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800739a:	183b      	adds	r3, r7, r0
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2220      	movs	r2, #32
 80073a0:	4013      	ands	r3, r2
 80073a2:	d105      	bne.n	80073b0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073a4:	193b      	adds	r3, r7, r4
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	2380      	movs	r3, #128	; 0x80
 80073aa:	055b      	lsls	r3, r3, #21
 80073ac:	4013      	ands	r3, r2
 80073ae:	d00a      	beq.n	80073c6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d100      	bne.n	80073ba <HAL_UART_IRQHandler+0x6e>
 80073b8:	e2dc      	b.n	8007974 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	0010      	movs	r0, r2
 80073c2:	4798      	blx	r3
      }
      return;
 80073c4:	e2d6      	b.n	8007974 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073c6:	2398      	movs	r3, #152	; 0x98
 80073c8:	18fb      	adds	r3, r7, r3
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d100      	bne.n	80073d2 <HAL_UART_IRQHandler+0x86>
 80073d0:	e122      	b.n	8007618 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80073d2:	239c      	movs	r3, #156	; 0x9c
 80073d4:	18fb      	adds	r3, r7, r3
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a8c      	ldr	r2, [pc, #560]	; (800760c <HAL_UART_IRQHandler+0x2c0>)
 80073da:	4013      	ands	r3, r2
 80073dc:	d106      	bne.n	80073ec <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80073de:	23a0      	movs	r3, #160	; 0xa0
 80073e0:	18fb      	adds	r3, r7, r3
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a8a      	ldr	r2, [pc, #552]	; (8007610 <HAL_UART_IRQHandler+0x2c4>)
 80073e6:	4013      	ands	r3, r2
 80073e8:	d100      	bne.n	80073ec <HAL_UART_IRQHandler+0xa0>
 80073ea:	e115      	b.n	8007618 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073ec:	23a4      	movs	r3, #164	; 0xa4
 80073ee:	18fb      	adds	r3, r7, r3
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2201      	movs	r2, #1
 80073f4:	4013      	ands	r3, r2
 80073f6:	d012      	beq.n	800741e <HAL_UART_IRQHandler+0xd2>
 80073f8:	23a0      	movs	r3, #160	; 0xa0
 80073fa:	18fb      	adds	r3, r7, r3
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	2380      	movs	r3, #128	; 0x80
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	4013      	ands	r3, r2
 8007404:	d00b      	beq.n	800741e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2201      	movs	r2, #1
 800740c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2290      	movs	r2, #144	; 0x90
 8007412:	589b      	ldr	r3, [r3, r2]
 8007414:	2201      	movs	r2, #1
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2190      	movs	r1, #144	; 0x90
 800741c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800741e:	23a4      	movs	r3, #164	; 0xa4
 8007420:	18fb      	adds	r3, r7, r3
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2202      	movs	r2, #2
 8007426:	4013      	ands	r3, r2
 8007428:	d011      	beq.n	800744e <HAL_UART_IRQHandler+0x102>
 800742a:	239c      	movs	r3, #156	; 0x9c
 800742c:	18fb      	adds	r3, r7, r3
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2201      	movs	r2, #1
 8007432:	4013      	ands	r3, r2
 8007434:	d00b      	beq.n	800744e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2202      	movs	r2, #2
 800743c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2290      	movs	r2, #144	; 0x90
 8007442:	589b      	ldr	r3, [r3, r2]
 8007444:	2204      	movs	r2, #4
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2190      	movs	r1, #144	; 0x90
 800744c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800744e:	23a4      	movs	r3, #164	; 0xa4
 8007450:	18fb      	adds	r3, r7, r3
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2204      	movs	r2, #4
 8007456:	4013      	ands	r3, r2
 8007458:	d011      	beq.n	800747e <HAL_UART_IRQHandler+0x132>
 800745a:	239c      	movs	r3, #156	; 0x9c
 800745c:	18fb      	adds	r3, r7, r3
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2201      	movs	r2, #1
 8007462:	4013      	ands	r3, r2
 8007464:	d00b      	beq.n	800747e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2204      	movs	r2, #4
 800746c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2290      	movs	r2, #144	; 0x90
 8007472:	589b      	ldr	r3, [r3, r2]
 8007474:	2202      	movs	r2, #2
 8007476:	431a      	orrs	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2190      	movs	r1, #144	; 0x90
 800747c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800747e:	23a4      	movs	r3, #164	; 0xa4
 8007480:	18fb      	adds	r3, r7, r3
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2208      	movs	r2, #8
 8007486:	4013      	ands	r3, r2
 8007488:	d017      	beq.n	80074ba <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800748a:	23a0      	movs	r3, #160	; 0xa0
 800748c:	18fb      	adds	r3, r7, r3
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2220      	movs	r2, #32
 8007492:	4013      	ands	r3, r2
 8007494:	d105      	bne.n	80074a2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007496:	239c      	movs	r3, #156	; 0x9c
 8007498:	18fb      	adds	r3, r7, r3
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a5b      	ldr	r2, [pc, #364]	; (800760c <HAL_UART_IRQHandler+0x2c0>)
 800749e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074a0:	d00b      	beq.n	80074ba <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2208      	movs	r2, #8
 80074a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2290      	movs	r2, #144	; 0x90
 80074ae:	589b      	ldr	r3, [r3, r2]
 80074b0:	2208      	movs	r2, #8
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2190      	movs	r1, #144	; 0x90
 80074b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074ba:	23a4      	movs	r3, #164	; 0xa4
 80074bc:	18fb      	adds	r3, r7, r3
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	2380      	movs	r3, #128	; 0x80
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	4013      	ands	r3, r2
 80074c6:	d013      	beq.n	80074f0 <HAL_UART_IRQHandler+0x1a4>
 80074c8:	23a0      	movs	r3, #160	; 0xa0
 80074ca:	18fb      	adds	r3, r7, r3
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	2380      	movs	r3, #128	; 0x80
 80074d0:	04db      	lsls	r3, r3, #19
 80074d2:	4013      	ands	r3, r2
 80074d4:	d00c      	beq.n	80074f0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2280      	movs	r2, #128	; 0x80
 80074dc:	0112      	lsls	r2, r2, #4
 80074de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2290      	movs	r2, #144	; 0x90
 80074e4:	589b      	ldr	r3, [r3, r2]
 80074e6:	2220      	movs	r2, #32
 80074e8:	431a      	orrs	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2190      	movs	r1, #144	; 0x90
 80074ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2290      	movs	r2, #144	; 0x90
 80074f4:	589b      	ldr	r3, [r3, r2]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d100      	bne.n	80074fc <HAL_UART_IRQHandler+0x1b0>
 80074fa:	e23d      	b.n	8007978 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074fc:	23a4      	movs	r3, #164	; 0xa4
 80074fe:	18fb      	adds	r3, r7, r3
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2220      	movs	r2, #32
 8007504:	4013      	ands	r3, r2
 8007506:	d015      	beq.n	8007534 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007508:	23a0      	movs	r3, #160	; 0xa0
 800750a:	18fb      	adds	r3, r7, r3
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2220      	movs	r2, #32
 8007510:	4013      	ands	r3, r2
 8007512:	d106      	bne.n	8007522 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007514:	239c      	movs	r3, #156	; 0x9c
 8007516:	18fb      	adds	r3, r7, r3
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	2380      	movs	r3, #128	; 0x80
 800751c:	055b      	lsls	r3, r3, #21
 800751e:	4013      	ands	r3, r2
 8007520:	d008      	beq.n	8007534 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007526:	2b00      	cmp	r3, #0
 8007528:	d004      	beq.n	8007534 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	0010      	movs	r0, r2
 8007532:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2290      	movs	r2, #144	; 0x90
 8007538:	589b      	ldr	r3, [r3, r2]
 800753a:	2194      	movs	r1, #148	; 0x94
 800753c:	187a      	adds	r2, r7, r1
 800753e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	2240      	movs	r2, #64	; 0x40
 8007548:	4013      	ands	r3, r2
 800754a:	2b40      	cmp	r3, #64	; 0x40
 800754c:	d004      	beq.n	8007558 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800754e:	187b      	adds	r3, r7, r1
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2228      	movs	r2, #40	; 0x28
 8007554:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007556:	d04c      	beq.n	80075f2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	0018      	movs	r0, r3
 800755c:	f000 fe90 	bl	8008280 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	2240      	movs	r2, #64	; 0x40
 8007568:	4013      	ands	r3, r2
 800756a:	2b40      	cmp	r3, #64	; 0x40
 800756c:	d13c      	bne.n	80075e8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800756e:	f3ef 8310 	mrs	r3, PRIMASK
 8007572:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007576:	2090      	movs	r0, #144	; 0x90
 8007578:	183a      	adds	r2, r7, r0
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	2301      	movs	r3, #1
 800757e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007582:	f383 8810 	msr	PRIMASK, r3
}
 8007586:	46c0      	nop			; (mov r8, r8)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689a      	ldr	r2, [r3, #8]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2140      	movs	r1, #64	; 0x40
 8007594:	438a      	bics	r2, r1
 8007596:	609a      	str	r2, [r3, #8]
 8007598:	183b      	adds	r3, r7, r0
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800759e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075a0:	f383 8810 	msr	PRIMASK, r3
}
 80075a4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2280      	movs	r2, #128	; 0x80
 80075aa:	589b      	ldr	r3, [r3, r2]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d016      	beq.n	80075de <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2280      	movs	r2, #128	; 0x80
 80075b4:	589b      	ldr	r3, [r3, r2]
 80075b6:	4a17      	ldr	r2, [pc, #92]	; (8007614 <HAL_UART_IRQHandler+0x2c8>)
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2280      	movs	r2, #128	; 0x80
 80075be:	589b      	ldr	r3, [r3, r2]
 80075c0:	0018      	movs	r0, r3
 80075c2:	f7fc fbf1 	bl	8003da8 <HAL_DMA_Abort_IT>
 80075c6:	1e03      	subs	r3, r0, #0
 80075c8:	d01c      	beq.n	8007604 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2280      	movs	r2, #128	; 0x80
 80075ce:	589b      	ldr	r3, [r3, r2]
 80075d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	2180      	movs	r1, #128	; 0x80
 80075d6:	5852      	ldr	r2, [r2, r1]
 80075d8:	0010      	movs	r0, r2
 80075da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075dc:	e012      	b.n	8007604 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	0018      	movs	r0, r3
 80075e2:	f000 f9f1 	bl	80079c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e6:	e00d      	b.n	8007604 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	0018      	movs	r0, r3
 80075ec:	f000 f9ec 	bl	80079c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f0:	e008      	b.n	8007604 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	0018      	movs	r0, r3
 80075f6:	f000 f9e7 	bl	80079c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2290      	movs	r2, #144	; 0x90
 80075fe:	2100      	movs	r1, #0
 8007600:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007602:	e1b9      	b.n	8007978 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007604:	46c0      	nop			; (mov r8, r8)
    return;
 8007606:	e1b7      	b.n	8007978 <HAL_UART_IRQHandler+0x62c>
 8007608:	0000080f 	.word	0x0000080f
 800760c:	10000001 	.word	0x10000001
 8007610:	04000120 	.word	0x04000120
 8007614:	08008545 	.word	0x08008545

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800761c:	2b01      	cmp	r3, #1
 800761e:	d000      	beq.n	8007622 <HAL_UART_IRQHandler+0x2d6>
 8007620:	e13e      	b.n	80078a0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007622:	23a4      	movs	r3, #164	; 0xa4
 8007624:	18fb      	adds	r3, r7, r3
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2210      	movs	r2, #16
 800762a:	4013      	ands	r3, r2
 800762c:	d100      	bne.n	8007630 <HAL_UART_IRQHandler+0x2e4>
 800762e:	e137      	b.n	80078a0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007630:	23a0      	movs	r3, #160	; 0xa0
 8007632:	18fb      	adds	r3, r7, r3
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2210      	movs	r2, #16
 8007638:	4013      	ands	r3, r2
 800763a:	d100      	bne.n	800763e <HAL_UART_IRQHandler+0x2f2>
 800763c:	e130      	b.n	80078a0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2210      	movs	r2, #16
 8007644:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	2240      	movs	r2, #64	; 0x40
 800764e:	4013      	ands	r3, r2
 8007650:	2b40      	cmp	r3, #64	; 0x40
 8007652:	d000      	beq.n	8007656 <HAL_UART_IRQHandler+0x30a>
 8007654:	e0a4      	b.n	80077a0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2280      	movs	r2, #128	; 0x80
 800765a:	589b      	ldr	r3, [r3, r2]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	217e      	movs	r1, #126	; 0x7e
 8007662:	187b      	adds	r3, r7, r1
 8007664:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007666:	187b      	adds	r3, r7, r1
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d100      	bne.n	8007670 <HAL_UART_IRQHandler+0x324>
 800766e:	e185      	b.n	800797c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	225c      	movs	r2, #92	; 0x5c
 8007674:	5a9b      	ldrh	r3, [r3, r2]
 8007676:	187a      	adds	r2, r7, r1
 8007678:	8812      	ldrh	r2, [r2, #0]
 800767a:	429a      	cmp	r2, r3
 800767c:	d300      	bcc.n	8007680 <HAL_UART_IRQHandler+0x334>
 800767e:	e17d      	b.n	800797c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	187a      	adds	r2, r7, r1
 8007684:	215e      	movs	r1, #94	; 0x5e
 8007686:	8812      	ldrh	r2, [r2, #0]
 8007688:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2280      	movs	r2, #128	; 0x80
 800768e:	589b      	ldr	r3, [r3, r2]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2220      	movs	r2, #32
 8007696:	4013      	ands	r3, r2
 8007698:	d170      	bne.n	800777c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800769a:	f3ef 8310 	mrs	r3, PRIMASK
 800769e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80076a4:	2301      	movs	r3, #1
 80076a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076aa:	f383 8810 	msr	PRIMASK, r3
}
 80076ae:	46c0      	nop			; (mov r8, r8)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	49b4      	ldr	r1, [pc, #720]	; (800798c <HAL_UART_IRQHandler+0x640>)
 80076bc:	400a      	ands	r2, r1
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	f383 8810 	msr	PRIMASK, r3
}
 80076ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076cc:	f3ef 8310 	mrs	r3, PRIMASK
 80076d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80076d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d4:	677b      	str	r3, [r7, #116]	; 0x74
 80076d6:	2301      	movs	r3, #1
 80076d8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076dc:	f383 8810 	msr	PRIMASK, r3
}
 80076e0:	46c0      	nop			; (mov r8, r8)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2101      	movs	r1, #1
 80076ee:	438a      	bics	r2, r1
 80076f0:	609a      	str	r2, [r3, #8]
 80076f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076f4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076f8:	f383 8810 	msr	PRIMASK, r3
}
 80076fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007702:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007704:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007706:	673b      	str	r3, [r7, #112]	; 0x70
 8007708:	2301      	movs	r3, #1
 800770a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800770c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800770e:	f383 8810 	msr	PRIMASK, r3
}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2140      	movs	r1, #64	; 0x40
 8007720:	438a      	bics	r2, r1
 8007722:	609a      	str	r2, [r3, #8]
 8007724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007726:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800772a:	f383 8810 	msr	PRIMASK, r3
}
 800772e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	228c      	movs	r2, #140	; 0x8c
 8007734:	2120      	movs	r1, #32
 8007736:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800773e:	f3ef 8310 	mrs	r3, PRIMASK
 8007742:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007744:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007746:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007748:	2301      	movs	r3, #1
 800774a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800774c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800774e:	f383 8810 	msr	PRIMASK, r3
}
 8007752:	46c0      	nop			; (mov r8, r8)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2110      	movs	r1, #16
 8007760:	438a      	bics	r2, r1
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007766:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800776a:	f383 8810 	msr	PRIMASK, r3
}
 800776e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2280      	movs	r2, #128	; 0x80
 8007774:	589b      	ldr	r3, [r3, r2]
 8007776:	0018      	movs	r0, r3
 8007778:	f7fc fab4 	bl	8003ce4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	225c      	movs	r2, #92	; 0x5c
 8007786:	5a9a      	ldrh	r2, [r3, r2]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	215e      	movs	r1, #94	; 0x5e
 800778c:	5a5b      	ldrh	r3, [r3, r1]
 800778e:	b29b      	uxth	r3, r3
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	b29a      	uxth	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	0011      	movs	r1, r2
 8007798:	0018      	movs	r0, r3
 800779a:	f7fa faf1 	bl	8001d80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800779e:	e0ed      	b.n	800797c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	225c      	movs	r2, #92	; 0x5c
 80077a4:	5a99      	ldrh	r1, [r3, r2]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	225e      	movs	r2, #94	; 0x5e
 80077aa:	5a9b      	ldrh	r3, [r3, r2]
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	208e      	movs	r0, #142	; 0x8e
 80077b0:	183b      	adds	r3, r7, r0
 80077b2:	1a8a      	subs	r2, r1, r2
 80077b4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	225e      	movs	r2, #94	; 0x5e
 80077ba:	5a9b      	ldrh	r3, [r3, r2]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d100      	bne.n	80077c4 <HAL_UART_IRQHandler+0x478>
 80077c2:	e0dd      	b.n	8007980 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80077c4:	183b      	adds	r3, r7, r0
 80077c6:	881b      	ldrh	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d100      	bne.n	80077ce <HAL_UART_IRQHandler+0x482>
 80077cc:	e0d8      	b.n	8007980 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077ce:	f3ef 8310 	mrs	r3, PRIMASK
 80077d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80077d4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077d6:	2488      	movs	r4, #136	; 0x88
 80077d8:	193a      	adds	r2, r7, r4
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	2301      	movs	r3, #1
 80077de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f383 8810 	msr	PRIMASK, r3
}
 80077e6:	46c0      	nop			; (mov r8, r8)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4967      	ldr	r1, [pc, #412]	; (8007990 <HAL_UART_IRQHandler+0x644>)
 80077f4:	400a      	ands	r2, r1
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	193b      	adds	r3, r7, r4
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f383 8810 	msr	PRIMASK, r3
}
 8007804:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007806:	f3ef 8310 	mrs	r3, PRIMASK
 800780a:	61bb      	str	r3, [r7, #24]
  return(result);
 800780c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800780e:	2484      	movs	r4, #132	; 0x84
 8007810:	193a      	adds	r2, r7, r4
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	2301      	movs	r3, #1
 8007816:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	f383 8810 	msr	PRIMASK, r3
}
 800781e:	46c0      	nop			; (mov r8, r8)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	495a      	ldr	r1, [pc, #360]	; (8007994 <HAL_UART_IRQHandler+0x648>)
 800782c:	400a      	ands	r2, r1
 800782e:	609a      	str	r2, [r3, #8]
 8007830:	193b      	adds	r3, r7, r4
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	f383 8810 	msr	PRIMASK, r3
}
 800783c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	228c      	movs	r2, #140	; 0x8c
 8007842:	2120      	movs	r1, #32
 8007844:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007852:	f3ef 8310 	mrs	r3, PRIMASK
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800785a:	2480      	movs	r4, #128	; 0x80
 800785c:	193a      	adds	r2, r7, r4
 800785e:	6013      	str	r3, [r2, #0]
 8007860:	2301      	movs	r3, #1
 8007862:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007866:	f383 8810 	msr	PRIMASK, r3
}
 800786a:	46c0      	nop			; (mov r8, r8)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2110      	movs	r1, #16
 8007878:	438a      	bics	r2, r1
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	193b      	adds	r3, r7, r4
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007884:	f383 8810 	msr	PRIMASK, r3
}
 8007888:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2202      	movs	r2, #2
 800788e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007890:	183b      	adds	r3, r7, r0
 8007892:	881a      	ldrh	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	0011      	movs	r1, r2
 8007898:	0018      	movs	r0, r3
 800789a:	f7fa fa71 	bl	8001d80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800789e:	e06f      	b.n	8007980 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078a0:	23a4      	movs	r3, #164	; 0xa4
 80078a2:	18fb      	adds	r3, r7, r3
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	2380      	movs	r3, #128	; 0x80
 80078a8:	035b      	lsls	r3, r3, #13
 80078aa:	4013      	ands	r3, r2
 80078ac:	d010      	beq.n	80078d0 <HAL_UART_IRQHandler+0x584>
 80078ae:	239c      	movs	r3, #156	; 0x9c
 80078b0:	18fb      	adds	r3, r7, r3
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	2380      	movs	r3, #128	; 0x80
 80078b6:	03db      	lsls	r3, r3, #15
 80078b8:	4013      	ands	r3, r2
 80078ba:	d009      	beq.n	80078d0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2280      	movs	r2, #128	; 0x80
 80078c2:	0352      	lsls	r2, r2, #13
 80078c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	0018      	movs	r0, r3
 80078ca:	f000 fe7e 	bl	80085ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078ce:	e05a      	b.n	8007986 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80078d0:	23a4      	movs	r3, #164	; 0xa4
 80078d2:	18fb      	adds	r3, r7, r3
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2280      	movs	r2, #128	; 0x80
 80078d8:	4013      	ands	r3, r2
 80078da:	d016      	beq.n	800790a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80078dc:	23a0      	movs	r3, #160	; 0xa0
 80078de:	18fb      	adds	r3, r7, r3
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2280      	movs	r2, #128	; 0x80
 80078e4:	4013      	ands	r3, r2
 80078e6:	d106      	bne.n	80078f6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80078e8:	239c      	movs	r3, #156	; 0x9c
 80078ea:	18fb      	adds	r3, r7, r3
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	2380      	movs	r3, #128	; 0x80
 80078f0:	041b      	lsls	r3, r3, #16
 80078f2:	4013      	ands	r3, r2
 80078f4:	d009      	beq.n	800790a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d042      	beq.n	8007984 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	0010      	movs	r0, r2
 8007906:	4798      	blx	r3
    }
    return;
 8007908:	e03c      	b.n	8007984 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800790a:	23a4      	movs	r3, #164	; 0xa4
 800790c:	18fb      	adds	r3, r7, r3
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2240      	movs	r2, #64	; 0x40
 8007912:	4013      	ands	r3, r2
 8007914:	d00a      	beq.n	800792c <HAL_UART_IRQHandler+0x5e0>
 8007916:	23a0      	movs	r3, #160	; 0xa0
 8007918:	18fb      	adds	r3, r7, r3
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2240      	movs	r2, #64	; 0x40
 800791e:	4013      	ands	r3, r2
 8007920:	d004      	beq.n	800792c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	0018      	movs	r0, r3
 8007926:	f000 fe24 	bl	8008572 <UART_EndTransmit_IT>
    return;
 800792a:	e02c      	b.n	8007986 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800792c:	23a4      	movs	r3, #164	; 0xa4
 800792e:	18fb      	adds	r3, r7, r3
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	2380      	movs	r3, #128	; 0x80
 8007934:	041b      	lsls	r3, r3, #16
 8007936:	4013      	ands	r3, r2
 8007938:	d00b      	beq.n	8007952 <HAL_UART_IRQHandler+0x606>
 800793a:	23a0      	movs	r3, #160	; 0xa0
 800793c:	18fb      	adds	r3, r7, r3
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	2380      	movs	r3, #128	; 0x80
 8007942:	05db      	lsls	r3, r3, #23
 8007944:	4013      	ands	r3, r2
 8007946:	d004      	beq.n	8007952 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	0018      	movs	r0, r3
 800794c:	f000 fe4d 	bl	80085ea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007950:	e019      	b.n	8007986 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007952:	23a4      	movs	r3, #164	; 0xa4
 8007954:	18fb      	adds	r3, r7, r3
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	2380      	movs	r3, #128	; 0x80
 800795a:	045b      	lsls	r3, r3, #17
 800795c:	4013      	ands	r3, r2
 800795e:	d012      	beq.n	8007986 <HAL_UART_IRQHandler+0x63a>
 8007960:	23a0      	movs	r3, #160	; 0xa0
 8007962:	18fb      	adds	r3, r7, r3
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	da0d      	bge.n	8007986 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	0018      	movs	r0, r3
 800796e:	f000 fe34 	bl	80085da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007972:	e008      	b.n	8007986 <HAL_UART_IRQHandler+0x63a>
      return;
 8007974:	46c0      	nop			; (mov r8, r8)
 8007976:	e006      	b.n	8007986 <HAL_UART_IRQHandler+0x63a>
    return;
 8007978:	46c0      	nop			; (mov r8, r8)
 800797a:	e004      	b.n	8007986 <HAL_UART_IRQHandler+0x63a>
      return;
 800797c:	46c0      	nop			; (mov r8, r8)
 800797e:	e002      	b.n	8007986 <HAL_UART_IRQHandler+0x63a>
      return;
 8007980:	46c0      	nop			; (mov r8, r8)
 8007982:	e000      	b.n	8007986 <HAL_UART_IRQHandler+0x63a>
    return;
 8007984:	46c0      	nop			; (mov r8, r8)
  }
}
 8007986:	46bd      	mov	sp, r7
 8007988:	b02a      	add	sp, #168	; 0xa8
 800798a:	bdb0      	pop	{r4, r5, r7, pc}
 800798c:	fffffeff 	.word	0xfffffeff
 8007990:	fffffedf 	.word	0xfffffedf
 8007994:	effffffe 	.word	0xeffffffe

08007998 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80079a0:	46c0      	nop			; (mov r8, r8)
 80079a2:	46bd      	mov	sp, r7
 80079a4:	b002      	add	sp, #8
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80079b0:	46c0      	nop			; (mov r8, r8)
 80079b2:	46bd      	mov	sp, r7
 80079b4:	b002      	add	sp, #8
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80079c0:	46c0      	nop			; (mov r8, r8)
 80079c2:	46bd      	mov	sp, r7
 80079c4:	b002      	add	sp, #8
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079d0:	46c0      	nop			; (mov r8, r8)
 80079d2:	46bd      	mov	sp, r7
 80079d4:	b002      	add	sp, #8
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079e0:	231a      	movs	r3, #26
 80079e2:	18fb      	adds	r3, r7, r3
 80079e4:	2200      	movs	r2, #0
 80079e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	431a      	orrs	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4abc      	ldr	r2, [pc, #752]	; (8007cf8 <UART_SetConfig+0x320>)
 8007a08:	4013      	ands	r3, r2
 8007a0a:	0019      	movs	r1, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	4ab7      	ldr	r2, [pc, #732]	; (8007cfc <UART_SetConfig+0x324>)
 8007a1e:	4013      	ands	r3, r2
 8007a20:	0019      	movs	r1, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	69fa      	ldr	r2, [r7, #28]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	4aae      	ldr	r2, [pc, #696]	; (8007d00 <UART_SetConfig+0x328>)
 8007a46:	4013      	ands	r3, r2
 8007a48:	0019      	movs	r1, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	69fa      	ldr	r2, [r7, #28]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5a:	220f      	movs	r2, #15
 8007a5c:	4393      	bics	r3, r2
 8007a5e:	0019      	movs	r1, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4aa4      	ldr	r2, [pc, #656]	; (8007d04 <UART_SetConfig+0x32c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d127      	bne.n	8007ac6 <UART_SetConfig+0xee>
 8007a76:	4ba4      	ldr	r3, [pc, #656]	; (8007d08 <UART_SetConfig+0x330>)
 8007a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7a:	2203      	movs	r2, #3
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	d017      	beq.n	8007ab2 <UART_SetConfig+0xda>
 8007a82:	d81b      	bhi.n	8007abc <UART_SetConfig+0xe4>
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d00a      	beq.n	8007a9e <UART_SetConfig+0xc6>
 8007a88:	d818      	bhi.n	8007abc <UART_SetConfig+0xe4>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d002      	beq.n	8007a94 <UART_SetConfig+0xbc>
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d00a      	beq.n	8007aa8 <UART_SetConfig+0xd0>
 8007a92:	e013      	b.n	8007abc <UART_SetConfig+0xe4>
 8007a94:	231b      	movs	r3, #27
 8007a96:	18fb      	adds	r3, r7, r3
 8007a98:	2200      	movs	r2, #0
 8007a9a:	701a      	strb	r2, [r3, #0]
 8007a9c:	e058      	b.n	8007b50 <UART_SetConfig+0x178>
 8007a9e:	231b      	movs	r3, #27
 8007aa0:	18fb      	adds	r3, r7, r3
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	701a      	strb	r2, [r3, #0]
 8007aa6:	e053      	b.n	8007b50 <UART_SetConfig+0x178>
 8007aa8:	231b      	movs	r3, #27
 8007aaa:	18fb      	adds	r3, r7, r3
 8007aac:	2204      	movs	r2, #4
 8007aae:	701a      	strb	r2, [r3, #0]
 8007ab0:	e04e      	b.n	8007b50 <UART_SetConfig+0x178>
 8007ab2:	231b      	movs	r3, #27
 8007ab4:	18fb      	adds	r3, r7, r3
 8007ab6:	2208      	movs	r2, #8
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	e049      	b.n	8007b50 <UART_SetConfig+0x178>
 8007abc:	231b      	movs	r3, #27
 8007abe:	18fb      	adds	r3, r7, r3
 8007ac0:	2210      	movs	r2, #16
 8007ac2:	701a      	strb	r2, [r3, #0]
 8007ac4:	e044      	b.n	8007b50 <UART_SetConfig+0x178>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a90      	ldr	r2, [pc, #576]	; (8007d0c <UART_SetConfig+0x334>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d127      	bne.n	8007b20 <UART_SetConfig+0x148>
 8007ad0:	4b8d      	ldr	r3, [pc, #564]	; (8007d08 <UART_SetConfig+0x330>)
 8007ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad4:	220c      	movs	r2, #12
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	2b0c      	cmp	r3, #12
 8007ada:	d017      	beq.n	8007b0c <UART_SetConfig+0x134>
 8007adc:	d81b      	bhi.n	8007b16 <UART_SetConfig+0x13e>
 8007ade:	2b08      	cmp	r3, #8
 8007ae0:	d00a      	beq.n	8007af8 <UART_SetConfig+0x120>
 8007ae2:	d818      	bhi.n	8007b16 <UART_SetConfig+0x13e>
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <UART_SetConfig+0x116>
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d00a      	beq.n	8007b02 <UART_SetConfig+0x12a>
 8007aec:	e013      	b.n	8007b16 <UART_SetConfig+0x13e>
 8007aee:	231b      	movs	r3, #27
 8007af0:	18fb      	adds	r3, r7, r3
 8007af2:	2200      	movs	r2, #0
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	e02b      	b.n	8007b50 <UART_SetConfig+0x178>
 8007af8:	231b      	movs	r3, #27
 8007afa:	18fb      	adds	r3, r7, r3
 8007afc:	2202      	movs	r2, #2
 8007afe:	701a      	strb	r2, [r3, #0]
 8007b00:	e026      	b.n	8007b50 <UART_SetConfig+0x178>
 8007b02:	231b      	movs	r3, #27
 8007b04:	18fb      	adds	r3, r7, r3
 8007b06:	2204      	movs	r2, #4
 8007b08:	701a      	strb	r2, [r3, #0]
 8007b0a:	e021      	b.n	8007b50 <UART_SetConfig+0x178>
 8007b0c:	231b      	movs	r3, #27
 8007b0e:	18fb      	adds	r3, r7, r3
 8007b10:	2208      	movs	r2, #8
 8007b12:	701a      	strb	r2, [r3, #0]
 8007b14:	e01c      	b.n	8007b50 <UART_SetConfig+0x178>
 8007b16:	231b      	movs	r3, #27
 8007b18:	18fb      	adds	r3, r7, r3
 8007b1a:	2210      	movs	r2, #16
 8007b1c:	701a      	strb	r2, [r3, #0]
 8007b1e:	e017      	b.n	8007b50 <UART_SetConfig+0x178>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a7a      	ldr	r2, [pc, #488]	; (8007d10 <UART_SetConfig+0x338>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d104      	bne.n	8007b34 <UART_SetConfig+0x15c>
 8007b2a:	231b      	movs	r3, #27
 8007b2c:	18fb      	adds	r3, r7, r3
 8007b2e:	2200      	movs	r2, #0
 8007b30:	701a      	strb	r2, [r3, #0]
 8007b32:	e00d      	b.n	8007b50 <UART_SetConfig+0x178>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a76      	ldr	r2, [pc, #472]	; (8007d14 <UART_SetConfig+0x33c>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d104      	bne.n	8007b48 <UART_SetConfig+0x170>
 8007b3e:	231b      	movs	r3, #27
 8007b40:	18fb      	adds	r3, r7, r3
 8007b42:	2200      	movs	r2, #0
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	e003      	b.n	8007b50 <UART_SetConfig+0x178>
 8007b48:	231b      	movs	r3, #27
 8007b4a:	18fb      	adds	r3, r7, r3
 8007b4c:	2210      	movs	r2, #16
 8007b4e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	69da      	ldr	r2, [r3, #28]
 8007b54:	2380      	movs	r3, #128	; 0x80
 8007b56:	021b      	lsls	r3, r3, #8
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d000      	beq.n	8007b5e <UART_SetConfig+0x186>
 8007b5c:	e065      	b.n	8007c2a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8007b5e:	231b      	movs	r3, #27
 8007b60:	18fb      	adds	r3, r7, r3
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	2b08      	cmp	r3, #8
 8007b66:	d015      	beq.n	8007b94 <UART_SetConfig+0x1bc>
 8007b68:	dc18      	bgt.n	8007b9c <UART_SetConfig+0x1c4>
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d00d      	beq.n	8007b8a <UART_SetConfig+0x1b2>
 8007b6e:	dc15      	bgt.n	8007b9c <UART_SetConfig+0x1c4>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <UART_SetConfig+0x1a2>
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d005      	beq.n	8007b84 <UART_SetConfig+0x1ac>
 8007b78:	e010      	b.n	8007b9c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b7a:	f7fe faa9 	bl	80060d0 <HAL_RCC_GetPCLK1Freq>
 8007b7e:	0003      	movs	r3, r0
 8007b80:	617b      	str	r3, [r7, #20]
        break;
 8007b82:	e012      	b.n	8007baa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b84:	4b64      	ldr	r3, [pc, #400]	; (8007d18 <UART_SetConfig+0x340>)
 8007b86:	617b      	str	r3, [r7, #20]
        break;
 8007b88:	e00f      	b.n	8007baa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b8a:	f7fe fa15 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
 8007b8e:	0003      	movs	r3, r0
 8007b90:	617b      	str	r3, [r7, #20]
        break;
 8007b92:	e00a      	b.n	8007baa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b94:	2380      	movs	r3, #128	; 0x80
 8007b96:	021b      	lsls	r3, r3, #8
 8007b98:	617b      	str	r3, [r7, #20]
        break;
 8007b9a:	e006      	b.n	8007baa <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007ba0:	231a      	movs	r3, #26
 8007ba2:	18fb      	adds	r3, r7, r3
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	701a      	strb	r2, [r3, #0]
        break;
 8007ba8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d100      	bne.n	8007bb2 <UART_SetConfig+0x1da>
 8007bb0:	e08d      	b.n	8007cce <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bb6:	4b59      	ldr	r3, [pc, #356]	; (8007d1c <UART_SetConfig+0x344>)
 8007bb8:	0052      	lsls	r2, r2, #1
 8007bba:	5ad3      	ldrh	r3, [r2, r3]
 8007bbc:	0019      	movs	r1, r3
 8007bbe:	6978      	ldr	r0, [r7, #20]
 8007bc0:	f7f8 fab0 	bl	8000124 <__udivsi3>
 8007bc4:	0003      	movs	r3, r0
 8007bc6:	005a      	lsls	r2, r3, #1
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	085b      	lsrs	r3, r3, #1
 8007bce:	18d2      	adds	r2, r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	0019      	movs	r1, r3
 8007bd6:	0010      	movs	r0, r2
 8007bd8:	f7f8 faa4 	bl	8000124 <__udivsi3>
 8007bdc:	0003      	movs	r3, r0
 8007bde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	2b0f      	cmp	r3, #15
 8007be4:	d91c      	bls.n	8007c20 <UART_SetConfig+0x248>
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	2380      	movs	r3, #128	; 0x80
 8007bea:	025b      	lsls	r3, r3, #9
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d217      	bcs.n	8007c20 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	200e      	movs	r0, #14
 8007bf6:	183b      	adds	r3, r7, r0
 8007bf8:	210f      	movs	r1, #15
 8007bfa:	438a      	bics	r2, r1
 8007bfc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	085b      	lsrs	r3, r3, #1
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	2207      	movs	r2, #7
 8007c06:	4013      	ands	r3, r2
 8007c08:	b299      	uxth	r1, r3
 8007c0a:	183b      	adds	r3, r7, r0
 8007c0c:	183a      	adds	r2, r7, r0
 8007c0e:	8812      	ldrh	r2, [r2, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	183a      	adds	r2, r7, r0
 8007c1a:	8812      	ldrh	r2, [r2, #0]
 8007c1c:	60da      	str	r2, [r3, #12]
 8007c1e:	e056      	b.n	8007cce <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007c20:	231a      	movs	r3, #26
 8007c22:	18fb      	adds	r3, r7, r3
 8007c24:	2201      	movs	r2, #1
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	e051      	b.n	8007cce <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c2a:	231b      	movs	r3, #27
 8007c2c:	18fb      	adds	r3, r7, r3
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d015      	beq.n	8007c60 <UART_SetConfig+0x288>
 8007c34:	dc18      	bgt.n	8007c68 <UART_SetConfig+0x290>
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d00d      	beq.n	8007c56 <UART_SetConfig+0x27e>
 8007c3a:	dc15      	bgt.n	8007c68 <UART_SetConfig+0x290>
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <UART_SetConfig+0x26e>
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d005      	beq.n	8007c50 <UART_SetConfig+0x278>
 8007c44:	e010      	b.n	8007c68 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c46:	f7fe fa43 	bl	80060d0 <HAL_RCC_GetPCLK1Freq>
 8007c4a:	0003      	movs	r3, r0
 8007c4c:	617b      	str	r3, [r7, #20]
        break;
 8007c4e:	e012      	b.n	8007c76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c50:	4b31      	ldr	r3, [pc, #196]	; (8007d18 <UART_SetConfig+0x340>)
 8007c52:	617b      	str	r3, [r7, #20]
        break;
 8007c54:	e00f      	b.n	8007c76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c56:	f7fe f9af 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
 8007c5a:	0003      	movs	r3, r0
 8007c5c:	617b      	str	r3, [r7, #20]
        break;
 8007c5e:	e00a      	b.n	8007c76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c60:	2380      	movs	r3, #128	; 0x80
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	617b      	str	r3, [r7, #20]
        break;
 8007c66:	e006      	b.n	8007c76 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007c6c:	231a      	movs	r3, #26
 8007c6e:	18fb      	adds	r3, r7, r3
 8007c70:	2201      	movs	r2, #1
 8007c72:	701a      	strb	r2, [r3, #0]
        break;
 8007c74:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d028      	beq.n	8007cce <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c80:	4b26      	ldr	r3, [pc, #152]	; (8007d1c <UART_SetConfig+0x344>)
 8007c82:	0052      	lsls	r2, r2, #1
 8007c84:	5ad3      	ldrh	r3, [r2, r3]
 8007c86:	0019      	movs	r1, r3
 8007c88:	6978      	ldr	r0, [r7, #20]
 8007c8a:	f7f8 fa4b 	bl	8000124 <__udivsi3>
 8007c8e:	0003      	movs	r3, r0
 8007c90:	001a      	movs	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	085b      	lsrs	r3, r3, #1
 8007c98:	18d2      	adds	r2, r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	0019      	movs	r1, r3
 8007ca0:	0010      	movs	r0, r2
 8007ca2:	f7f8 fa3f 	bl	8000124 <__udivsi3>
 8007ca6:	0003      	movs	r3, r0
 8007ca8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	2b0f      	cmp	r3, #15
 8007cae:	d90a      	bls.n	8007cc6 <UART_SetConfig+0x2ee>
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	2380      	movs	r3, #128	; 0x80
 8007cb4:	025b      	lsls	r3, r3, #9
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d205      	bcs.n	8007cc6 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60da      	str	r2, [r3, #12]
 8007cc4:	e003      	b.n	8007cce <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007cc6:	231a      	movs	r3, #26
 8007cc8:	18fb      	adds	r3, r7, r3
 8007cca:	2201      	movs	r2, #1
 8007ccc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	226a      	movs	r2, #106	; 0x6a
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2268      	movs	r2, #104	; 0x68
 8007cda:	2101      	movs	r1, #1
 8007cdc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007cea:	231a      	movs	r3, #26
 8007cec:	18fb      	adds	r3, r7, r3
 8007cee:	781b      	ldrb	r3, [r3, #0]
}
 8007cf0:	0018      	movs	r0, r3
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	b008      	add	sp, #32
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	cfff69f3 	.word	0xcfff69f3
 8007cfc:	ffffcfff 	.word	0xffffcfff
 8007d00:	11fff4ff 	.word	0x11fff4ff
 8007d04:	40013800 	.word	0x40013800
 8007d08:	40021000 	.word	0x40021000
 8007d0c:	40004400 	.word	0x40004400
 8007d10:	40004800 	.word	0x40004800
 8007d14:	40004c00 	.word	0x40004c00
 8007d18:	00f42400 	.word	0x00f42400
 8007d1c:	08009e50 	.word	0x08009e50

08007d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	4013      	ands	r3, r2
 8007d30:	d00b      	beq.n	8007d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	4a4a      	ldr	r2, [pc, #296]	; (8007e64 <UART_AdvFeatureConfig+0x144>)
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	0019      	movs	r1, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4e:	2202      	movs	r2, #2
 8007d50:	4013      	ands	r3, r2
 8007d52:	d00b      	beq.n	8007d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	4a43      	ldr	r2, [pc, #268]	; (8007e68 <UART_AdvFeatureConfig+0x148>)
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	0019      	movs	r1, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	2204      	movs	r2, #4
 8007d72:	4013      	ands	r3, r2
 8007d74:	d00b      	beq.n	8007d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	4a3b      	ldr	r2, [pc, #236]	; (8007e6c <UART_AdvFeatureConfig+0x14c>)
 8007d7e:	4013      	ands	r3, r2
 8007d80:	0019      	movs	r1, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d92:	2208      	movs	r2, #8
 8007d94:	4013      	ands	r3, r2
 8007d96:	d00b      	beq.n	8007db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	4a34      	ldr	r2, [pc, #208]	; (8007e70 <UART_AdvFeatureConfig+0x150>)
 8007da0:	4013      	ands	r3, r2
 8007da2:	0019      	movs	r1, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	2210      	movs	r2, #16
 8007db6:	4013      	ands	r3, r2
 8007db8:	d00b      	beq.n	8007dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	4a2c      	ldr	r2, [pc, #176]	; (8007e74 <UART_AdvFeatureConfig+0x154>)
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	0019      	movs	r1, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	4013      	ands	r3, r2
 8007dda:	d00b      	beq.n	8007df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	4a25      	ldr	r2, [pc, #148]	; (8007e78 <UART_AdvFeatureConfig+0x158>)
 8007de4:	4013      	ands	r3, r2
 8007de6:	0019      	movs	r1, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df8:	2240      	movs	r2, #64	; 0x40
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	d01d      	beq.n	8007e3a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	4a1d      	ldr	r2, [pc, #116]	; (8007e7c <UART_AdvFeatureConfig+0x15c>)
 8007e06:	4013      	ands	r3, r2
 8007e08:	0019      	movs	r1, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e1a:	2380      	movs	r3, #128	; 0x80
 8007e1c:	035b      	lsls	r3, r3, #13
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d10b      	bne.n	8007e3a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	4a15      	ldr	r2, [pc, #84]	; (8007e80 <UART_AdvFeatureConfig+0x160>)
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	0019      	movs	r1, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3e:	2280      	movs	r2, #128	; 0x80
 8007e40:	4013      	ands	r3, r2
 8007e42:	d00b      	beq.n	8007e5c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	4a0e      	ldr	r2, [pc, #56]	; (8007e84 <UART_AdvFeatureConfig+0x164>)
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	0019      	movs	r1, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	605a      	str	r2, [r3, #4]
  }
}
 8007e5c:	46c0      	nop			; (mov r8, r8)
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	b002      	add	sp, #8
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	fffdffff 	.word	0xfffdffff
 8007e68:	fffeffff 	.word	0xfffeffff
 8007e6c:	fffbffff 	.word	0xfffbffff
 8007e70:	ffff7fff 	.word	0xffff7fff
 8007e74:	ffffefff 	.word	0xffffefff
 8007e78:	ffffdfff 	.word	0xffffdfff
 8007e7c:	ffefffff 	.word	0xffefffff
 8007e80:	ff9fffff 	.word	0xff9fffff
 8007e84:	fff7ffff 	.word	0xfff7ffff

08007e88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2290      	movs	r2, #144	; 0x90
 8007e94:	2100      	movs	r1, #0
 8007e96:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e98:	f7fb fa4a 	bl	8003330 <HAL_GetTick>
 8007e9c:	0003      	movs	r3, r0
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2208      	movs	r2, #8
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	2b08      	cmp	r3, #8
 8007eac:	d10c      	bne.n	8007ec8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2280      	movs	r2, #128	; 0x80
 8007eb2:	0391      	lsls	r1, r2, #14
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	4a1a      	ldr	r2, [pc, #104]	; (8007f20 <UART_CheckIdleState+0x98>)
 8007eb8:	9200      	str	r2, [sp, #0]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f000 f832 	bl	8007f24 <UART_WaitOnFlagUntilTimeout>
 8007ec0:	1e03      	subs	r3, r0, #0
 8007ec2:	d001      	beq.n	8007ec8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e026      	b.n	8007f16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2204      	movs	r2, #4
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	d10c      	bne.n	8007ef0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2280      	movs	r2, #128	; 0x80
 8007eda:	03d1      	lsls	r1, r2, #15
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	4a10      	ldr	r2, [pc, #64]	; (8007f20 <UART_CheckIdleState+0x98>)
 8007ee0:	9200      	str	r2, [sp, #0]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f000 f81e 	bl	8007f24 <UART_WaitOnFlagUntilTimeout>
 8007ee8:	1e03      	subs	r3, r0, #0
 8007eea:	d001      	beq.n	8007ef0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e012      	b.n	8007f16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2288      	movs	r2, #136	; 0x88
 8007ef4:	2120      	movs	r1, #32
 8007ef6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	228c      	movs	r2, #140	; 0x8c
 8007efc:	2120      	movs	r1, #32
 8007efe:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2284      	movs	r2, #132	; 0x84
 8007f10:	2100      	movs	r1, #0
 8007f12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	0018      	movs	r0, r3
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	b004      	add	sp, #16
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	46c0      	nop			; (mov r8, r8)
 8007f20:	01ffffff 	.word	0x01ffffff

08007f24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b094      	sub	sp, #80	; 0x50
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	1dfb      	adds	r3, r7, #7
 8007f32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f34:	e0a7      	b.n	8008086 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f38:	3301      	adds	r3, #1
 8007f3a:	d100      	bne.n	8007f3e <UART_WaitOnFlagUntilTimeout+0x1a>
 8007f3c:	e0a3      	b.n	8008086 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f3e:	f7fb f9f7 	bl	8003330 <HAL_GetTick>
 8007f42:	0002      	movs	r2, r0
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d302      	bcc.n	8007f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d13f      	bne.n	8007fd4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f54:	f3ef 8310 	mrs	r3, PRIMASK
 8007f58:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f5e:	2301      	movs	r3, #1
 8007f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f64:	f383 8810 	msr	PRIMASK, r3
}
 8007f68:	46c0      	nop			; (mov r8, r8)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	494e      	ldr	r1, [pc, #312]	; (80080b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007f76:	400a      	ands	r2, r1
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f7c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	f383 8810 	msr	PRIMASK, r3
}
 8007f84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f86:	f3ef 8310 	mrs	r3, PRIMASK
 8007f8a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8e:	643b      	str	r3, [r7, #64]	; 0x40
 8007f90:	2301      	movs	r3, #1
 8007f92:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f96:	f383 8810 	msr	PRIMASK, r3
}
 8007f9a:	46c0      	nop			; (mov r8, r8)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689a      	ldr	r2, [r3, #8]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	438a      	bics	r2, r1
 8007faa:	609a      	str	r2, [r3, #8]
 8007fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb2:	f383 8810 	msr	PRIMASK, r3
}
 8007fb6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2288      	movs	r2, #136	; 0x88
 8007fbc:	2120      	movs	r1, #32
 8007fbe:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	228c      	movs	r2, #140	; 0x8c
 8007fc4:	2120      	movs	r1, #32
 8007fc6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2284      	movs	r2, #132	; 0x84
 8007fcc:	2100      	movs	r1, #0
 8007fce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e069      	b.n	80080a8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2204      	movs	r2, #4
 8007fdc:	4013      	ands	r3, r2
 8007fde:	d052      	beq.n	8008086 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	69da      	ldr	r2, [r3, #28]
 8007fe6:	2380      	movs	r3, #128	; 0x80
 8007fe8:	011b      	lsls	r3, r3, #4
 8007fea:	401a      	ands	r2, r3
 8007fec:	2380      	movs	r3, #128	; 0x80
 8007fee:	011b      	lsls	r3, r3, #4
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d148      	bne.n	8008086 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2280      	movs	r2, #128	; 0x80
 8007ffa:	0112      	lsls	r2, r2, #4
 8007ffc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8008002:	613b      	str	r3, [r7, #16]
  return(result);
 8008004:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008008:	2301      	movs	r3, #1
 800800a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	f383 8810 	msr	PRIMASK, r3
}
 8008012:	46c0      	nop			; (mov r8, r8)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4924      	ldr	r1, [pc, #144]	; (80080b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008020:	400a      	ands	r2, r1
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008026:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	f383 8810 	msr	PRIMASK, r3
}
 800802e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008030:	f3ef 8310 	mrs	r3, PRIMASK
 8008034:	61fb      	str	r3, [r7, #28]
  return(result);
 8008036:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008038:	64bb      	str	r3, [r7, #72]	; 0x48
 800803a:	2301      	movs	r3, #1
 800803c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800803e:	6a3b      	ldr	r3, [r7, #32]
 8008040:	f383 8810 	msr	PRIMASK, r3
}
 8008044:	46c0      	nop			; (mov r8, r8)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2101      	movs	r1, #1
 8008052:	438a      	bics	r2, r1
 8008054:	609a      	str	r2, [r3, #8]
 8008056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	f383 8810 	msr	PRIMASK, r3
}
 8008060:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2288      	movs	r2, #136	; 0x88
 8008066:	2120      	movs	r1, #32
 8008068:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	228c      	movs	r2, #140	; 0x8c
 800806e:	2120      	movs	r1, #32
 8008070:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2290      	movs	r2, #144	; 0x90
 8008076:	2120      	movs	r1, #32
 8008078:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2284      	movs	r2, #132	; 0x84
 800807e:	2100      	movs	r1, #0
 8008080:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e010      	b.n	80080a8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	4013      	ands	r3, r2
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	425a      	negs	r2, r3
 8008096:	4153      	adcs	r3, r2
 8008098:	b2db      	uxtb	r3, r3
 800809a:	001a      	movs	r2, r3
 800809c:	1dfb      	adds	r3, r7, #7
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d100      	bne.n	80080a6 <UART_WaitOnFlagUntilTimeout+0x182>
 80080a4:	e747      	b.n	8007f36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	0018      	movs	r0, r3
 80080aa:	46bd      	mov	sp, r7
 80080ac:	b014      	add	sp, #80	; 0x50
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	fffffe5f 	.word	0xfffffe5f

080080b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b090      	sub	sp, #64	; 0x40
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	1dbb      	adds	r3, r7, #6
 80080c0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	1dba      	adds	r2, r7, #6
 80080cc:	215c      	movs	r1, #92	; 0x5c
 80080ce:	8812      	ldrh	r2, [r2, #0]
 80080d0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2290      	movs	r2, #144	; 0x90
 80080d6:	2100      	movs	r1, #0
 80080d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	228c      	movs	r2, #140	; 0x8c
 80080de:	2122      	movs	r1, #34	; 0x22
 80080e0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2280      	movs	r2, #128	; 0x80
 80080e6:	589b      	ldr	r3, [r3, r2]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d02d      	beq.n	8008148 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2280      	movs	r2, #128	; 0x80
 80080f0:	589b      	ldr	r3, [r3, r2]
 80080f2:	4a40      	ldr	r2, [pc, #256]	; (80081f4 <UART_Start_Receive_DMA+0x140>)
 80080f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2280      	movs	r2, #128	; 0x80
 80080fa:	589b      	ldr	r3, [r3, r2]
 80080fc:	4a3e      	ldr	r2, [pc, #248]	; (80081f8 <UART_Start_Receive_DMA+0x144>)
 80080fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2280      	movs	r2, #128	; 0x80
 8008104:	589b      	ldr	r3, [r3, r2]
 8008106:	4a3d      	ldr	r2, [pc, #244]	; (80081fc <UART_Start_Receive_DMA+0x148>)
 8008108:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2280      	movs	r2, #128	; 0x80
 800810e:	589b      	ldr	r3, [r3, r2]
 8008110:	2200      	movs	r2, #0
 8008112:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2280      	movs	r2, #128	; 0x80
 8008118:	5898      	ldr	r0, [r3, r2]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3324      	adds	r3, #36	; 0x24
 8008120:	0019      	movs	r1, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008126:	001a      	movs	r2, r3
 8008128:	1dbb      	adds	r3, r7, #6
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	f7fb fd54 	bl	8003bd8 <HAL_DMA_Start_IT>
 8008130:	1e03      	subs	r3, r0, #0
 8008132:	d009      	beq.n	8008148 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2290      	movs	r2, #144	; 0x90
 8008138:	2110      	movs	r1, #16
 800813a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	228c      	movs	r2, #140	; 0x8c
 8008140:	2120      	movs	r1, #32
 8008142:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e050      	b.n	80081ea <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d019      	beq.n	8008184 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008150:	f3ef 8310 	mrs	r3, PRIMASK
 8008154:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800815a:	2301      	movs	r3, #1
 800815c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800815e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008160:	f383 8810 	msr	PRIMASK, r3
}
 8008164:	46c0      	nop			; (mov r8, r8)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2180      	movs	r1, #128	; 0x80
 8008172:	0049      	lsls	r1, r1, #1
 8008174:	430a      	orrs	r2, r1
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800817a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817e:	f383 8810 	msr	PRIMASK, r3
}
 8008182:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008184:	f3ef 8310 	mrs	r3, PRIMASK
 8008188:	613b      	str	r3, [r7, #16]
  return(result);
 800818a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818c:	63bb      	str	r3, [r7, #56]	; 0x38
 800818e:	2301      	movs	r3, #1
 8008190:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f383 8810 	msr	PRIMASK, r3
}
 8008198:	46c0      	nop			; (mov r8, r8)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2101      	movs	r1, #1
 80081a6:	430a      	orrs	r2, r1
 80081a8:	609a      	str	r2, [r3, #8]
 80081aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	f383 8810 	msr	PRIMASK, r3
}
 80081b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081b6:	f3ef 8310 	mrs	r3, PRIMASK
 80081ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80081bc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081be:	637b      	str	r3, [r7, #52]	; 0x34
 80081c0:	2301      	movs	r3, #1
 80081c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	f383 8810 	msr	PRIMASK, r3
}
 80081ca:	46c0      	nop			; (mov r8, r8)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689a      	ldr	r2, [r3, #8]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2140      	movs	r1, #64	; 0x40
 80081d8:	430a      	orrs	r2, r1
 80081da:	609a      	str	r2, [r3, #8]
 80081dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	f383 8810 	msr	PRIMASK, r3
}
 80081e6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	0018      	movs	r0, r3
 80081ec:	46bd      	mov	sp, r7
 80081ee:	b010      	add	sp, #64	; 0x40
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	46c0      	nop			; (mov r8, r8)
 80081f4:	0800834d 	.word	0x0800834d
 80081f8:	0800847d 	.word	0x0800847d
 80081fc:	080084bf 	.word	0x080084bf

08008200 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b08a      	sub	sp, #40	; 0x28
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008208:	f3ef 8310 	mrs	r3, PRIMASK
 800820c:	60bb      	str	r3, [r7, #8]
  return(result);
 800820e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008210:	627b      	str	r3, [r7, #36]	; 0x24
 8008212:	2301      	movs	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f383 8810 	msr	PRIMASK, r3
}
 800821c:	46c0      	nop			; (mov r8, r8)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	21c0      	movs	r1, #192	; 0xc0
 800822a:	438a      	bics	r2, r1
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	f383 8810 	msr	PRIMASK, r3
}
 8008238:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800823a:	f3ef 8310 	mrs	r3, PRIMASK
 800823e:	617b      	str	r3, [r7, #20]
  return(result);
 8008240:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008242:	623b      	str	r3, [r7, #32]
 8008244:	2301      	movs	r3, #1
 8008246:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	f383 8810 	msr	PRIMASK, r3
}
 800824e:	46c0      	nop			; (mov r8, r8)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4908      	ldr	r1, [pc, #32]	; (800827c <UART_EndTxTransfer+0x7c>)
 800825c:	400a      	ands	r2, r1
 800825e:	609a      	str	r2, [r3, #8]
 8008260:	6a3b      	ldr	r3, [r7, #32]
 8008262:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	f383 8810 	msr	PRIMASK, r3
}
 800826a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2288      	movs	r2, #136	; 0x88
 8008270:	2120      	movs	r1, #32
 8008272:	5099      	str	r1, [r3, r2]
}
 8008274:	46c0      	nop			; (mov r8, r8)
 8008276:	46bd      	mov	sp, r7
 8008278:	b00a      	add	sp, #40	; 0x28
 800827a:	bd80      	pop	{r7, pc}
 800827c:	ff7fffff 	.word	0xff7fffff

08008280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b08e      	sub	sp, #56	; 0x38
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008288:	f3ef 8310 	mrs	r3, PRIMASK
 800828c:	617b      	str	r3, [r7, #20]
  return(result);
 800828e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008290:	637b      	str	r3, [r7, #52]	; 0x34
 8008292:	2301      	movs	r3, #1
 8008294:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	f383 8810 	msr	PRIMASK, r3
}
 800829c:	46c0      	nop			; (mov r8, r8)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4926      	ldr	r1, [pc, #152]	; (8008344 <UART_EndRxTransfer+0xc4>)
 80082aa:	400a      	ands	r2, r1
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	f383 8810 	msr	PRIMASK, r3
}
 80082b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082ba:	f3ef 8310 	mrs	r3, PRIMASK
 80082be:	623b      	str	r3, [r7, #32]
  return(result);
 80082c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082c2:	633b      	str	r3, [r7, #48]	; 0x30
 80082c4:	2301      	movs	r3, #1
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	f383 8810 	msr	PRIMASK, r3
}
 80082ce:	46c0      	nop			; (mov r8, r8)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	689a      	ldr	r2, [r3, #8]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	491b      	ldr	r1, [pc, #108]	; (8008348 <UART_EndRxTransfer+0xc8>)
 80082dc:	400a      	ands	r2, r1
 80082de:	609a      	str	r2, [r3, #8]
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	f383 8810 	msr	PRIMASK, r3
}
 80082ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d118      	bne.n	8008326 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f4:	f3ef 8310 	mrs	r3, PRIMASK
 80082f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80082fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082fe:	2301      	movs	r3, #1
 8008300:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f383 8810 	msr	PRIMASK, r3
}
 8008308:	46c0      	nop			; (mov r8, r8)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2110      	movs	r1, #16
 8008316:	438a      	bics	r2, r1
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	f383 8810 	msr	PRIMASK, r3
}
 8008324:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	228c      	movs	r2, #140	; 0x8c
 800832a:	2120      	movs	r1, #32
 800832c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	675a      	str	r2, [r3, #116]	; 0x74
}
 800833a:	46c0      	nop			; (mov r8, r8)
 800833c:	46bd      	mov	sp, r7
 800833e:	b00e      	add	sp, #56	; 0x38
 8008340:	bd80      	pop	{r7, pc}
 8008342:	46c0      	nop			; (mov r8, r8)
 8008344:	fffffedf 	.word	0xfffffedf
 8008348:	effffffe 	.word	0xeffffffe

0800834c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b094      	sub	sp, #80	; 0x50
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008358:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2220      	movs	r2, #32
 8008362:	4013      	ands	r3, r2
 8008364:	d16f      	bne.n	8008446 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8008366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008368:	225e      	movs	r2, #94	; 0x5e
 800836a:	2100      	movs	r1, #0
 800836c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800836e:	f3ef 8310 	mrs	r3, PRIMASK
 8008372:	61bb      	str	r3, [r7, #24]
  return(result);
 8008374:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008376:	64bb      	str	r3, [r7, #72]	; 0x48
 8008378:	2301      	movs	r3, #1
 800837a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	f383 8810 	msr	PRIMASK, r3
}
 8008382:	46c0      	nop			; (mov r8, r8)
 8008384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	493a      	ldr	r1, [pc, #232]	; (8008478 <UART_DMAReceiveCplt+0x12c>)
 8008390:	400a      	ands	r2, r1
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008396:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	f383 8810 	msr	PRIMASK, r3
}
 800839e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083a0:	f3ef 8310 	mrs	r3, PRIMASK
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a8:	647b      	str	r3, [r7, #68]	; 0x44
 80083aa:	2301      	movs	r3, #1
 80083ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	f383 8810 	msr	PRIMASK, r3
}
 80083b4:	46c0      	nop			; (mov r8, r8)
 80083b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689a      	ldr	r2, [r3, #8]
 80083bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2101      	movs	r1, #1
 80083c2:	438a      	bics	r2, r1
 80083c4:	609a      	str	r2, [r3, #8]
 80083c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083cc:	f383 8810 	msr	PRIMASK, r3
}
 80083d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083d2:	f3ef 8310 	mrs	r3, PRIMASK
 80083d6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80083d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083da:	643b      	str	r3, [r7, #64]	; 0x40
 80083dc:	2301      	movs	r3, #1
 80083de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e2:	f383 8810 	msr	PRIMASK, r3
}
 80083e6:	46c0      	nop			; (mov r8, r8)
 80083e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2140      	movs	r1, #64	; 0x40
 80083f4:	438a      	bics	r2, r1
 80083f6:	609a      	str	r2, [r3, #8]
 80083f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fe:	f383 8810 	msr	PRIMASK, r3
}
 8008402:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008406:	228c      	movs	r2, #140	; 0x8c
 8008408:	2120      	movs	r1, #32
 800840a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800840c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800840e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008410:	2b01      	cmp	r3, #1
 8008412:	d118      	bne.n	8008446 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008414:	f3ef 8310 	mrs	r3, PRIMASK
 8008418:	60fb      	str	r3, [r7, #12]
  return(result);
 800841a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800841c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800841e:	2301      	movs	r3, #1
 8008420:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f383 8810 	msr	PRIMASK, r3
}
 8008428:	46c0      	nop			; (mov r8, r8)
 800842a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2110      	movs	r1, #16
 8008436:	438a      	bics	r2, r1
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800843c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f383 8810 	msr	PRIMASK, r3
}
 8008444:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008448:	2200      	movs	r2, #0
 800844a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800844c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800844e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008450:	2b01      	cmp	r3, #1
 8008452:	d108      	bne.n	8008466 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008456:	225c      	movs	r2, #92	; 0x5c
 8008458:	5a9a      	ldrh	r2, [r3, r2]
 800845a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800845c:	0011      	movs	r1, r2
 800845e:	0018      	movs	r0, r3
 8008460:	f7f9 fc8e 	bl	8001d80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008464:	e003      	b.n	800846e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8008466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008468:	0018      	movs	r0, r3
 800846a:	f7ff fa9d 	bl	80079a8 <HAL_UART_RxCpltCallback>
}
 800846e:	46c0      	nop			; (mov r8, r8)
 8008470:	46bd      	mov	sp, r7
 8008472:	b014      	add	sp, #80	; 0x50
 8008474:	bd80      	pop	{r7, pc}
 8008476:	46c0      	nop			; (mov r8, r8)
 8008478:	fffffeff 	.word	0xfffffeff

0800847c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008488:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2201      	movs	r2, #1
 800848e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008494:	2b01      	cmp	r3, #1
 8008496:	d10a      	bne.n	80084ae <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	225c      	movs	r2, #92	; 0x5c
 800849c:	5a9b      	ldrh	r3, [r3, r2]
 800849e:	085b      	lsrs	r3, r3, #1
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	0011      	movs	r1, r2
 80084a6:	0018      	movs	r0, r3
 80084a8:	f7f9 fc6a 	bl	8001d80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084ac:	e003      	b.n	80084b6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	0018      	movs	r0, r3
 80084b2:	f7ff fa81 	bl	80079b8 <HAL_UART_RxHalfCpltCallback>
}
 80084b6:	46c0      	nop			; (mov r8, r8)
 80084b8:	46bd      	mov	sp, r7
 80084ba:	b004      	add	sp, #16
 80084bc:	bd80      	pop	{r7, pc}

080084be <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b086      	sub	sp, #24
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	2288      	movs	r2, #136	; 0x88
 80084d0:	589b      	ldr	r3, [r3, r2]
 80084d2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	228c      	movs	r2, #140	; 0x8c
 80084d8:	589b      	ldr	r3, [r3, r2]
 80084da:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	2280      	movs	r2, #128	; 0x80
 80084e4:	4013      	ands	r3, r2
 80084e6:	2b80      	cmp	r3, #128	; 0x80
 80084e8:	d10a      	bne.n	8008500 <UART_DMAError+0x42>
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	2b21      	cmp	r3, #33	; 0x21
 80084ee:	d107      	bne.n	8008500 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2256      	movs	r2, #86	; 0x56
 80084f4:	2100      	movs	r1, #0
 80084f6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	0018      	movs	r0, r3
 80084fc:	f7ff fe80 	bl	8008200 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	2240      	movs	r2, #64	; 0x40
 8008508:	4013      	ands	r3, r2
 800850a:	2b40      	cmp	r3, #64	; 0x40
 800850c:	d10a      	bne.n	8008524 <UART_DMAError+0x66>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b22      	cmp	r3, #34	; 0x22
 8008512:	d107      	bne.n	8008524 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	225e      	movs	r2, #94	; 0x5e
 8008518:	2100      	movs	r1, #0
 800851a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	0018      	movs	r0, r3
 8008520:	f7ff feae 	bl	8008280 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2290      	movs	r2, #144	; 0x90
 8008528:	589b      	ldr	r3, [r3, r2]
 800852a:	2210      	movs	r2, #16
 800852c:	431a      	orrs	r2, r3
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2190      	movs	r1, #144	; 0x90
 8008532:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	0018      	movs	r0, r3
 8008538:	f7ff fa46 	bl	80079c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800853c:	46c0      	nop			; (mov r8, r8)
 800853e:	46bd      	mov	sp, r7
 8008540:	b006      	add	sp, #24
 8008542:	bd80      	pop	{r7, pc}

08008544 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008550:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	225e      	movs	r2, #94	; 0x5e
 8008556:	2100      	movs	r1, #0
 8008558:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2256      	movs	r2, #86	; 0x56
 800855e:	2100      	movs	r1, #0
 8008560:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	0018      	movs	r0, r3
 8008566:	f7ff fa2f 	bl	80079c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800856a:	46c0      	nop			; (mov r8, r8)
 800856c:	46bd      	mov	sp, r7
 800856e:	b004      	add	sp, #16
 8008570:	bd80      	pop	{r7, pc}

08008572 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b086      	sub	sp, #24
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800857a:	f3ef 8310 	mrs	r3, PRIMASK
 800857e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008580:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	2301      	movs	r3, #1
 8008586:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f383 8810 	msr	PRIMASK, r3
}
 800858e:	46c0      	nop			; (mov r8, r8)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2140      	movs	r1, #64	; 0x40
 800859c:	438a      	bics	r2, r1
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	f383 8810 	msr	PRIMASK, r3
}
 80085aa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2288      	movs	r2, #136	; 0x88
 80085b0:	2120      	movs	r1, #32
 80085b2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	0018      	movs	r0, r3
 80085be:	f7ff f9eb 	bl	8007998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085c2:	46c0      	nop			; (mov r8, r8)
 80085c4:	46bd      	mov	sp, r7
 80085c6:	b006      	add	sp, #24
 80085c8:	bd80      	pop	{r7, pc}

080085ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085d2:	46c0      	nop			; (mov r8, r8)
 80085d4:	46bd      	mov	sp, r7
 80085d6:	b002      	add	sp, #8
 80085d8:	bd80      	pop	{r7, pc}

080085da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80085e2:	46c0      	nop			; (mov r8, r8)
 80085e4:	46bd      	mov	sp, r7
 80085e6:	b002      	add	sp, #8
 80085e8:	bd80      	pop	{r7, pc}

080085ea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80085f2:	46c0      	nop			; (mov r8, r8)
 80085f4:	46bd      	mov	sp, r7
 80085f6:	b002      	add	sp, #8
 80085f8:	bd80      	pop	{r7, pc}
	...

080085fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2284      	movs	r2, #132	; 0x84
 8008608:	5c9b      	ldrb	r3, [r3, r2]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d101      	bne.n	8008612 <HAL_UARTEx_DisableFifoMode+0x16>
 800860e:	2302      	movs	r3, #2
 8008610:	e027      	b.n	8008662 <HAL_UARTEx_DisableFifoMode+0x66>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2284      	movs	r2, #132	; 0x84
 8008616:	2101      	movs	r1, #1
 8008618:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2288      	movs	r2, #136	; 0x88
 800861e:	2124      	movs	r1, #36	; 0x24
 8008620:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2101      	movs	r1, #1
 8008636:	438a      	bics	r2, r1
 8008638:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4a0b      	ldr	r2, [pc, #44]	; (800866c <HAL_UARTEx_DisableFifoMode+0x70>)
 800863e:	4013      	ands	r3, r2
 8008640:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2288      	movs	r2, #136	; 0x88
 8008654:	2120      	movs	r1, #32
 8008656:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2284      	movs	r2, #132	; 0x84
 800865c:	2100      	movs	r1, #0
 800865e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	0018      	movs	r0, r3
 8008664:	46bd      	mov	sp, r7
 8008666:	b004      	add	sp, #16
 8008668:	bd80      	pop	{r7, pc}
 800866a:	46c0      	nop			; (mov r8, r8)
 800866c:	dfffffff 	.word	0xdfffffff

08008670 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2284      	movs	r2, #132	; 0x84
 800867e:	5c9b      	ldrb	r3, [r3, r2]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d101      	bne.n	8008688 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008684:	2302      	movs	r3, #2
 8008686:	e02e      	b.n	80086e6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2284      	movs	r2, #132	; 0x84
 800868c:	2101      	movs	r1, #1
 800868e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2288      	movs	r2, #136	; 0x88
 8008694:	2124      	movs	r1, #36	; 0x24
 8008696:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2101      	movs	r1, #1
 80086ac:	438a      	bics	r2, r1
 80086ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	08d9      	lsrs	r1, r3, #3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	0018      	movs	r0, r3
 80086c8:	f000 f8bc 	bl	8008844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2288      	movs	r2, #136	; 0x88
 80086d8:	2120      	movs	r1, #32
 80086da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2284      	movs	r2, #132	; 0x84
 80086e0:	2100      	movs	r1, #0
 80086e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	0018      	movs	r0, r3
 80086e8:	46bd      	mov	sp, r7
 80086ea:	b004      	add	sp, #16
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2284      	movs	r2, #132	; 0x84
 80086fe:	5c9b      	ldrb	r3, [r3, r2]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008704:	2302      	movs	r3, #2
 8008706:	e02f      	b.n	8008768 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2284      	movs	r2, #132	; 0x84
 800870c:	2101      	movs	r1, #1
 800870e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2288      	movs	r2, #136	; 0x88
 8008714:	2124      	movs	r1, #36	; 0x24
 8008716:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2101      	movs	r1, #1
 800872c:	438a      	bics	r2, r1
 800872e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	4a0e      	ldr	r2, [pc, #56]	; (8008770 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008738:	4013      	ands	r3, r2
 800873a:	0019      	movs	r1, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	683a      	ldr	r2, [r7, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	0018      	movs	r0, r3
 800874a:	f000 f87b 	bl	8008844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2288      	movs	r2, #136	; 0x88
 800875a:	2120      	movs	r1, #32
 800875c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2284      	movs	r2, #132	; 0x84
 8008762:	2100      	movs	r1, #0
 8008764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	0018      	movs	r0, r3
 800876a:	46bd      	mov	sp, r7
 800876c:	b004      	add	sp, #16
 800876e:	bd80      	pop	{r7, pc}
 8008770:	f1ffffff 	.word	0xf1ffffff

08008774 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008774:	b5b0      	push	{r4, r5, r7, lr}
 8008776:	b08a      	sub	sp, #40	; 0x28
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	1dbb      	adds	r3, r7, #6
 8008780:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	228c      	movs	r2, #140	; 0x8c
 8008786:	589b      	ldr	r3, [r3, r2]
 8008788:	2b20      	cmp	r3, #32
 800878a:	d156      	bne.n	800883a <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008792:	1dbb      	adds	r3, r7, #6
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e04e      	b.n	800883c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	689a      	ldr	r2, [r3, #8]
 80087a2:	2380      	movs	r3, #128	; 0x80
 80087a4:	015b      	lsls	r3, r3, #5
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d109      	bne.n	80087be <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d105      	bne.n	80087be <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2201      	movs	r2, #1
 80087b6:	4013      	ands	r3, r2
 80087b8:	d001      	beq.n	80087be <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e03e      	b.n	800883c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2201      	movs	r2, #1
 80087c2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80087ca:	2527      	movs	r5, #39	; 0x27
 80087cc:	197c      	adds	r4, r7, r5
 80087ce:	1dbb      	adds	r3, r7, #6
 80087d0:	881a      	ldrh	r2, [r3, #0]
 80087d2:	68b9      	ldr	r1, [r7, #8]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	0018      	movs	r0, r3
 80087d8:	f7ff fc6c 	bl	80080b4 <UART_Start_Receive_DMA>
 80087dc:	0003      	movs	r3, r0
 80087de:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80087e0:	197b      	adds	r3, r7, r5
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d124      	bne.n	8008832 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d11c      	bne.n	800882a <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2210      	movs	r2, #16
 80087f6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087f8:	f3ef 8310 	mrs	r3, PRIMASK
 80087fc:	617b      	str	r3, [r7, #20]
  return(result);
 80087fe:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008800:	623b      	str	r3, [r7, #32]
 8008802:	2301      	movs	r3, #1
 8008804:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	f383 8810 	msr	PRIMASK, r3
}
 800880c:	46c0      	nop			; (mov r8, r8)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2110      	movs	r1, #16
 800881a:	430a      	orrs	r2, r1
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	f383 8810 	msr	PRIMASK, r3
}
 8008828:	e003      	b.n	8008832 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800882a:	2327      	movs	r3, #39	; 0x27
 800882c:	18fb      	adds	r3, r7, r3
 800882e:	2201      	movs	r2, #1
 8008830:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8008832:	2327      	movs	r3, #39	; 0x27
 8008834:	18fb      	adds	r3, r7, r3
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	e000      	b.n	800883c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800883a:	2302      	movs	r3, #2
  }
}
 800883c:	0018      	movs	r0, r3
 800883e:	46bd      	mov	sp, r7
 8008840:	b00a      	add	sp, #40	; 0x28
 8008842:	bdb0      	pop	{r4, r5, r7, pc}

08008844 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008850:	2b00      	cmp	r3, #0
 8008852:	d108      	bne.n	8008866 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	226a      	movs	r2, #106	; 0x6a
 8008858:	2101      	movs	r1, #1
 800885a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2268      	movs	r2, #104	; 0x68
 8008860:	2101      	movs	r1, #1
 8008862:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008864:	e043      	b.n	80088ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008866:	260f      	movs	r6, #15
 8008868:	19bb      	adds	r3, r7, r6
 800886a:	2208      	movs	r2, #8
 800886c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800886e:	200e      	movs	r0, #14
 8008870:	183b      	adds	r3, r7, r0
 8008872:	2208      	movs	r2, #8
 8008874:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	0e5b      	lsrs	r3, r3, #25
 800887e:	b2da      	uxtb	r2, r3
 8008880:	240d      	movs	r4, #13
 8008882:	193b      	adds	r3, r7, r4
 8008884:	2107      	movs	r1, #7
 8008886:	400a      	ands	r2, r1
 8008888:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	0f5b      	lsrs	r3, r3, #29
 8008892:	b2da      	uxtb	r2, r3
 8008894:	250c      	movs	r5, #12
 8008896:	197b      	adds	r3, r7, r5
 8008898:	2107      	movs	r1, #7
 800889a:	400a      	ands	r2, r1
 800889c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800889e:	183b      	adds	r3, r7, r0
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	197a      	adds	r2, r7, r5
 80088a4:	7812      	ldrb	r2, [r2, #0]
 80088a6:	4914      	ldr	r1, [pc, #80]	; (80088f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80088a8:	5c8a      	ldrb	r2, [r1, r2]
 80088aa:	435a      	muls	r2, r3
 80088ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80088ae:	197b      	adds	r3, r7, r5
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	4a12      	ldr	r2, [pc, #72]	; (80088fc <UARTEx_SetNbDataToProcess+0xb8>)
 80088b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088b6:	0019      	movs	r1, r3
 80088b8:	f7f7 fcbe 	bl	8000238 <__divsi3>
 80088bc:	0003      	movs	r3, r0
 80088be:	b299      	uxth	r1, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	226a      	movs	r2, #106	; 0x6a
 80088c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088c6:	19bb      	adds	r3, r7, r6
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	193a      	adds	r2, r7, r4
 80088cc:	7812      	ldrb	r2, [r2, #0]
 80088ce:	490a      	ldr	r1, [pc, #40]	; (80088f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80088d0:	5c8a      	ldrb	r2, [r1, r2]
 80088d2:	435a      	muls	r2, r3
 80088d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80088d6:	193b      	adds	r3, r7, r4
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	4a08      	ldr	r2, [pc, #32]	; (80088fc <UARTEx_SetNbDataToProcess+0xb8>)
 80088dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088de:	0019      	movs	r1, r3
 80088e0:	f7f7 fcaa 	bl	8000238 <__divsi3>
 80088e4:	0003      	movs	r3, r0
 80088e6:	b299      	uxth	r1, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2268      	movs	r2, #104	; 0x68
 80088ec:	5299      	strh	r1, [r3, r2]
}
 80088ee:	46c0      	nop			; (mov r8, r8)
 80088f0:	46bd      	mov	sp, r7
 80088f2:	b005      	add	sp, #20
 80088f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088f6:	46c0      	nop			; (mov r8, r8)
 80088f8:	08009e68 	.word	0x08009e68
 80088fc:	08009e70 	.word	0x08009e70

08008900 <__errno>:
 8008900:	4b01      	ldr	r3, [pc, #4]	; (8008908 <__errno+0x8>)
 8008902:	6818      	ldr	r0, [r3, #0]
 8008904:	4770      	bx	lr
 8008906:	46c0      	nop			; (mov r8, r8)
 8008908:	20000020 	.word	0x20000020

0800890c <__libc_init_array>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	2600      	movs	r6, #0
 8008910:	4d0c      	ldr	r5, [pc, #48]	; (8008944 <__libc_init_array+0x38>)
 8008912:	4c0d      	ldr	r4, [pc, #52]	; (8008948 <__libc_init_array+0x3c>)
 8008914:	1b64      	subs	r4, r4, r5
 8008916:	10a4      	asrs	r4, r4, #2
 8008918:	42a6      	cmp	r6, r4
 800891a:	d109      	bne.n	8008930 <__libc_init_array+0x24>
 800891c:	2600      	movs	r6, #0
 800891e:	f000 fc8d 	bl	800923c <_init>
 8008922:	4d0a      	ldr	r5, [pc, #40]	; (800894c <__libc_init_array+0x40>)
 8008924:	4c0a      	ldr	r4, [pc, #40]	; (8008950 <__libc_init_array+0x44>)
 8008926:	1b64      	subs	r4, r4, r5
 8008928:	10a4      	asrs	r4, r4, #2
 800892a:	42a6      	cmp	r6, r4
 800892c:	d105      	bne.n	800893a <__libc_init_array+0x2e>
 800892e:	bd70      	pop	{r4, r5, r6, pc}
 8008930:	00b3      	lsls	r3, r6, #2
 8008932:	58eb      	ldr	r3, [r5, r3]
 8008934:	4798      	blx	r3
 8008936:	3601      	adds	r6, #1
 8008938:	e7ee      	b.n	8008918 <__libc_init_array+0xc>
 800893a:	00b3      	lsls	r3, r6, #2
 800893c:	58eb      	ldr	r3, [r5, r3]
 800893e:	4798      	blx	r3
 8008940:	3601      	adds	r6, #1
 8008942:	e7f2      	b.n	800892a <__libc_init_array+0x1e>
 8008944:	08009eac 	.word	0x08009eac
 8008948:	08009eac 	.word	0x08009eac
 800894c:	08009eac 	.word	0x08009eac
 8008950:	08009eb0 	.word	0x08009eb0

08008954 <memcpy>:
 8008954:	2300      	movs	r3, #0
 8008956:	b510      	push	{r4, lr}
 8008958:	429a      	cmp	r2, r3
 800895a:	d100      	bne.n	800895e <memcpy+0xa>
 800895c:	bd10      	pop	{r4, pc}
 800895e:	5ccc      	ldrb	r4, [r1, r3]
 8008960:	54c4      	strb	r4, [r0, r3]
 8008962:	3301      	adds	r3, #1
 8008964:	e7f8      	b.n	8008958 <memcpy+0x4>

08008966 <memset>:
 8008966:	0003      	movs	r3, r0
 8008968:	1882      	adds	r2, r0, r2
 800896a:	4293      	cmp	r3, r2
 800896c:	d100      	bne.n	8008970 <memset+0xa>
 800896e:	4770      	bx	lr
 8008970:	7019      	strb	r1, [r3, #0]
 8008972:	3301      	adds	r3, #1
 8008974:	e7f9      	b.n	800896a <memset+0x4>
	...

08008978 <_vsiprintf_r>:
 8008978:	b500      	push	{lr}
 800897a:	b09b      	sub	sp, #108	; 0x6c
 800897c:	9100      	str	r1, [sp, #0]
 800897e:	9104      	str	r1, [sp, #16]
 8008980:	4906      	ldr	r1, [pc, #24]	; (800899c <_vsiprintf_r+0x24>)
 8008982:	9105      	str	r1, [sp, #20]
 8008984:	9102      	str	r1, [sp, #8]
 8008986:	4906      	ldr	r1, [pc, #24]	; (80089a0 <_vsiprintf_r+0x28>)
 8008988:	9103      	str	r1, [sp, #12]
 800898a:	4669      	mov	r1, sp
 800898c:	f000 f878 	bl	8008a80 <_svfiprintf_r>
 8008990:	2300      	movs	r3, #0
 8008992:	9a00      	ldr	r2, [sp, #0]
 8008994:	7013      	strb	r3, [r2, #0]
 8008996:	b01b      	add	sp, #108	; 0x6c
 8008998:	bd00      	pop	{pc}
 800899a:	46c0      	nop			; (mov r8, r8)
 800899c:	7fffffff 	.word	0x7fffffff
 80089a0:	ffff0208 	.word	0xffff0208

080089a4 <vsiprintf>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	0013      	movs	r3, r2
 80089a8:	000a      	movs	r2, r1
 80089aa:	0001      	movs	r1, r0
 80089ac:	4802      	ldr	r0, [pc, #8]	; (80089b8 <vsiprintf+0x14>)
 80089ae:	6800      	ldr	r0, [r0, #0]
 80089b0:	f7ff ffe2 	bl	8008978 <_vsiprintf_r>
 80089b4:	bd10      	pop	{r4, pc}
 80089b6:	46c0      	nop			; (mov r8, r8)
 80089b8:	20000020 	.word	0x20000020

080089bc <__ssputs_r>:
 80089bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089be:	688e      	ldr	r6, [r1, #8]
 80089c0:	b085      	sub	sp, #20
 80089c2:	0007      	movs	r7, r0
 80089c4:	000c      	movs	r4, r1
 80089c6:	9203      	str	r2, [sp, #12]
 80089c8:	9301      	str	r3, [sp, #4]
 80089ca:	429e      	cmp	r6, r3
 80089cc:	d83c      	bhi.n	8008a48 <__ssputs_r+0x8c>
 80089ce:	2390      	movs	r3, #144	; 0x90
 80089d0:	898a      	ldrh	r2, [r1, #12]
 80089d2:	00db      	lsls	r3, r3, #3
 80089d4:	421a      	tst	r2, r3
 80089d6:	d034      	beq.n	8008a42 <__ssputs_r+0x86>
 80089d8:	6909      	ldr	r1, [r1, #16]
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	6960      	ldr	r0, [r4, #20]
 80089de:	1a5b      	subs	r3, r3, r1
 80089e0:	9302      	str	r3, [sp, #8]
 80089e2:	2303      	movs	r3, #3
 80089e4:	4343      	muls	r3, r0
 80089e6:	0fdd      	lsrs	r5, r3, #31
 80089e8:	18ed      	adds	r5, r5, r3
 80089ea:	9b01      	ldr	r3, [sp, #4]
 80089ec:	9802      	ldr	r0, [sp, #8]
 80089ee:	3301      	adds	r3, #1
 80089f0:	181b      	adds	r3, r3, r0
 80089f2:	106d      	asrs	r5, r5, #1
 80089f4:	42ab      	cmp	r3, r5
 80089f6:	d900      	bls.n	80089fa <__ssputs_r+0x3e>
 80089f8:	001d      	movs	r5, r3
 80089fa:	0553      	lsls	r3, r2, #21
 80089fc:	d532      	bpl.n	8008a64 <__ssputs_r+0xa8>
 80089fe:	0029      	movs	r1, r5
 8008a00:	0038      	movs	r0, r7
 8008a02:	f000 fb49 	bl	8009098 <_malloc_r>
 8008a06:	1e06      	subs	r6, r0, #0
 8008a08:	d109      	bne.n	8008a1e <__ssputs_r+0x62>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	603b      	str	r3, [r7, #0]
 8008a0e:	2340      	movs	r3, #64	; 0x40
 8008a10:	2001      	movs	r0, #1
 8008a12:	89a2      	ldrh	r2, [r4, #12]
 8008a14:	4240      	negs	r0, r0
 8008a16:	4313      	orrs	r3, r2
 8008a18:	81a3      	strh	r3, [r4, #12]
 8008a1a:	b005      	add	sp, #20
 8008a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a1e:	9a02      	ldr	r2, [sp, #8]
 8008a20:	6921      	ldr	r1, [r4, #16]
 8008a22:	f7ff ff97 	bl	8008954 <memcpy>
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	4a14      	ldr	r2, [pc, #80]	; (8008a7c <__ssputs_r+0xc0>)
 8008a2a:	401a      	ands	r2, r3
 8008a2c:	2380      	movs	r3, #128	; 0x80
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	81a3      	strh	r3, [r4, #12]
 8008a32:	9b02      	ldr	r3, [sp, #8]
 8008a34:	6126      	str	r6, [r4, #16]
 8008a36:	18f6      	adds	r6, r6, r3
 8008a38:	6026      	str	r6, [r4, #0]
 8008a3a:	6165      	str	r5, [r4, #20]
 8008a3c:	9e01      	ldr	r6, [sp, #4]
 8008a3e:	1aed      	subs	r5, r5, r3
 8008a40:	60a5      	str	r5, [r4, #8]
 8008a42:	9b01      	ldr	r3, [sp, #4]
 8008a44:	429e      	cmp	r6, r3
 8008a46:	d900      	bls.n	8008a4a <__ssputs_r+0x8e>
 8008a48:	9e01      	ldr	r6, [sp, #4]
 8008a4a:	0032      	movs	r2, r6
 8008a4c:	9903      	ldr	r1, [sp, #12]
 8008a4e:	6820      	ldr	r0, [r4, #0]
 8008a50:	f000 faa3 	bl	8008f9a <memmove>
 8008a54:	68a3      	ldr	r3, [r4, #8]
 8008a56:	2000      	movs	r0, #0
 8008a58:	1b9b      	subs	r3, r3, r6
 8008a5a:	60a3      	str	r3, [r4, #8]
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	199e      	adds	r6, r3, r6
 8008a60:	6026      	str	r6, [r4, #0]
 8008a62:	e7da      	b.n	8008a1a <__ssputs_r+0x5e>
 8008a64:	002a      	movs	r2, r5
 8008a66:	0038      	movs	r0, r7
 8008a68:	f000 fb8c 	bl	8009184 <_realloc_r>
 8008a6c:	1e06      	subs	r6, r0, #0
 8008a6e:	d1e0      	bne.n	8008a32 <__ssputs_r+0x76>
 8008a70:	0038      	movs	r0, r7
 8008a72:	6921      	ldr	r1, [r4, #16]
 8008a74:	f000 faa4 	bl	8008fc0 <_free_r>
 8008a78:	e7c7      	b.n	8008a0a <__ssputs_r+0x4e>
 8008a7a:	46c0      	nop			; (mov r8, r8)
 8008a7c:	fffffb7f 	.word	0xfffffb7f

08008a80 <_svfiprintf_r>:
 8008a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a82:	b0a1      	sub	sp, #132	; 0x84
 8008a84:	9003      	str	r0, [sp, #12]
 8008a86:	001d      	movs	r5, r3
 8008a88:	898b      	ldrh	r3, [r1, #12]
 8008a8a:	000f      	movs	r7, r1
 8008a8c:	0016      	movs	r6, r2
 8008a8e:	061b      	lsls	r3, r3, #24
 8008a90:	d511      	bpl.n	8008ab6 <_svfiprintf_r+0x36>
 8008a92:	690b      	ldr	r3, [r1, #16]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10e      	bne.n	8008ab6 <_svfiprintf_r+0x36>
 8008a98:	2140      	movs	r1, #64	; 0x40
 8008a9a:	f000 fafd 	bl	8009098 <_malloc_r>
 8008a9e:	6038      	str	r0, [r7, #0]
 8008aa0:	6138      	str	r0, [r7, #16]
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d105      	bne.n	8008ab2 <_svfiprintf_r+0x32>
 8008aa6:	230c      	movs	r3, #12
 8008aa8:	9a03      	ldr	r2, [sp, #12]
 8008aaa:	3801      	subs	r0, #1
 8008aac:	6013      	str	r3, [r2, #0]
 8008aae:	b021      	add	sp, #132	; 0x84
 8008ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ab2:	2340      	movs	r3, #64	; 0x40
 8008ab4:	617b      	str	r3, [r7, #20]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	ac08      	add	r4, sp, #32
 8008aba:	6163      	str	r3, [r4, #20]
 8008abc:	3320      	adds	r3, #32
 8008abe:	7663      	strb	r3, [r4, #25]
 8008ac0:	3310      	adds	r3, #16
 8008ac2:	76a3      	strb	r3, [r4, #26]
 8008ac4:	9507      	str	r5, [sp, #28]
 8008ac6:	0035      	movs	r5, r6
 8008ac8:	782b      	ldrb	r3, [r5, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <_svfiprintf_r+0x52>
 8008ace:	2b25      	cmp	r3, #37	; 0x25
 8008ad0:	d147      	bne.n	8008b62 <_svfiprintf_r+0xe2>
 8008ad2:	1bab      	subs	r3, r5, r6
 8008ad4:	9305      	str	r3, [sp, #20]
 8008ad6:	42b5      	cmp	r5, r6
 8008ad8:	d00c      	beq.n	8008af4 <_svfiprintf_r+0x74>
 8008ada:	0032      	movs	r2, r6
 8008adc:	0039      	movs	r1, r7
 8008ade:	9803      	ldr	r0, [sp, #12]
 8008ae0:	f7ff ff6c 	bl	80089bc <__ssputs_r>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d100      	bne.n	8008aea <_svfiprintf_r+0x6a>
 8008ae8:	e0ae      	b.n	8008c48 <_svfiprintf_r+0x1c8>
 8008aea:	6962      	ldr	r2, [r4, #20]
 8008aec:	9b05      	ldr	r3, [sp, #20]
 8008aee:	4694      	mov	ip, r2
 8008af0:	4463      	add	r3, ip
 8008af2:	6163      	str	r3, [r4, #20]
 8008af4:	782b      	ldrb	r3, [r5, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d100      	bne.n	8008afc <_svfiprintf_r+0x7c>
 8008afa:	e0a5      	b.n	8008c48 <_svfiprintf_r+0x1c8>
 8008afc:	2201      	movs	r2, #1
 8008afe:	2300      	movs	r3, #0
 8008b00:	4252      	negs	r2, r2
 8008b02:	6062      	str	r2, [r4, #4]
 8008b04:	a904      	add	r1, sp, #16
 8008b06:	3254      	adds	r2, #84	; 0x54
 8008b08:	1852      	adds	r2, r2, r1
 8008b0a:	1c6e      	adds	r6, r5, #1
 8008b0c:	6023      	str	r3, [r4, #0]
 8008b0e:	60e3      	str	r3, [r4, #12]
 8008b10:	60a3      	str	r3, [r4, #8]
 8008b12:	7013      	strb	r3, [r2, #0]
 8008b14:	65a3      	str	r3, [r4, #88]	; 0x58
 8008b16:	2205      	movs	r2, #5
 8008b18:	7831      	ldrb	r1, [r6, #0]
 8008b1a:	4854      	ldr	r0, [pc, #336]	; (8008c6c <_svfiprintf_r+0x1ec>)
 8008b1c:	f000 fa32 	bl	8008f84 <memchr>
 8008b20:	1c75      	adds	r5, r6, #1
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d11f      	bne.n	8008b66 <_svfiprintf_r+0xe6>
 8008b26:	6822      	ldr	r2, [r4, #0]
 8008b28:	06d3      	lsls	r3, r2, #27
 8008b2a:	d504      	bpl.n	8008b36 <_svfiprintf_r+0xb6>
 8008b2c:	2353      	movs	r3, #83	; 0x53
 8008b2e:	a904      	add	r1, sp, #16
 8008b30:	185b      	adds	r3, r3, r1
 8008b32:	2120      	movs	r1, #32
 8008b34:	7019      	strb	r1, [r3, #0]
 8008b36:	0713      	lsls	r3, r2, #28
 8008b38:	d504      	bpl.n	8008b44 <_svfiprintf_r+0xc4>
 8008b3a:	2353      	movs	r3, #83	; 0x53
 8008b3c:	a904      	add	r1, sp, #16
 8008b3e:	185b      	adds	r3, r3, r1
 8008b40:	212b      	movs	r1, #43	; 0x2b
 8008b42:	7019      	strb	r1, [r3, #0]
 8008b44:	7833      	ldrb	r3, [r6, #0]
 8008b46:	2b2a      	cmp	r3, #42	; 0x2a
 8008b48:	d016      	beq.n	8008b78 <_svfiprintf_r+0xf8>
 8008b4a:	0035      	movs	r5, r6
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	200a      	movs	r0, #10
 8008b50:	68e3      	ldr	r3, [r4, #12]
 8008b52:	782a      	ldrb	r2, [r5, #0]
 8008b54:	1c6e      	adds	r6, r5, #1
 8008b56:	3a30      	subs	r2, #48	; 0x30
 8008b58:	2a09      	cmp	r2, #9
 8008b5a:	d94e      	bls.n	8008bfa <_svfiprintf_r+0x17a>
 8008b5c:	2900      	cmp	r1, #0
 8008b5e:	d111      	bne.n	8008b84 <_svfiprintf_r+0x104>
 8008b60:	e017      	b.n	8008b92 <_svfiprintf_r+0x112>
 8008b62:	3501      	adds	r5, #1
 8008b64:	e7b0      	b.n	8008ac8 <_svfiprintf_r+0x48>
 8008b66:	4b41      	ldr	r3, [pc, #260]	; (8008c6c <_svfiprintf_r+0x1ec>)
 8008b68:	6822      	ldr	r2, [r4, #0]
 8008b6a:	1ac0      	subs	r0, r0, r3
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	4083      	lsls	r3, r0
 8008b70:	4313      	orrs	r3, r2
 8008b72:	002e      	movs	r6, r5
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	e7ce      	b.n	8008b16 <_svfiprintf_r+0x96>
 8008b78:	9b07      	ldr	r3, [sp, #28]
 8008b7a:	1d19      	adds	r1, r3, #4
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	9107      	str	r1, [sp, #28]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	db01      	blt.n	8008b88 <_svfiprintf_r+0x108>
 8008b84:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b86:	e004      	b.n	8008b92 <_svfiprintf_r+0x112>
 8008b88:	425b      	negs	r3, r3
 8008b8a:	60e3      	str	r3, [r4, #12]
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	782b      	ldrb	r3, [r5, #0]
 8008b94:	2b2e      	cmp	r3, #46	; 0x2e
 8008b96:	d10a      	bne.n	8008bae <_svfiprintf_r+0x12e>
 8008b98:	786b      	ldrb	r3, [r5, #1]
 8008b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b9c:	d135      	bne.n	8008c0a <_svfiprintf_r+0x18a>
 8008b9e:	9b07      	ldr	r3, [sp, #28]
 8008ba0:	3502      	adds	r5, #2
 8008ba2:	1d1a      	adds	r2, r3, #4
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	9207      	str	r2, [sp, #28]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	db2b      	blt.n	8008c04 <_svfiprintf_r+0x184>
 8008bac:	9309      	str	r3, [sp, #36]	; 0x24
 8008bae:	4e30      	ldr	r6, [pc, #192]	; (8008c70 <_svfiprintf_r+0x1f0>)
 8008bb0:	2203      	movs	r2, #3
 8008bb2:	0030      	movs	r0, r6
 8008bb4:	7829      	ldrb	r1, [r5, #0]
 8008bb6:	f000 f9e5 	bl	8008f84 <memchr>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	d006      	beq.n	8008bcc <_svfiprintf_r+0x14c>
 8008bbe:	2340      	movs	r3, #64	; 0x40
 8008bc0:	1b80      	subs	r0, r0, r6
 8008bc2:	4083      	lsls	r3, r0
 8008bc4:	6822      	ldr	r2, [r4, #0]
 8008bc6:	3501      	adds	r5, #1
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	7829      	ldrb	r1, [r5, #0]
 8008bce:	2206      	movs	r2, #6
 8008bd0:	4828      	ldr	r0, [pc, #160]	; (8008c74 <_svfiprintf_r+0x1f4>)
 8008bd2:	1c6e      	adds	r6, r5, #1
 8008bd4:	7621      	strb	r1, [r4, #24]
 8008bd6:	f000 f9d5 	bl	8008f84 <memchr>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d03c      	beq.n	8008c58 <_svfiprintf_r+0x1d8>
 8008bde:	4b26      	ldr	r3, [pc, #152]	; (8008c78 <_svfiprintf_r+0x1f8>)
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d125      	bne.n	8008c30 <_svfiprintf_r+0x1b0>
 8008be4:	2207      	movs	r2, #7
 8008be6:	9b07      	ldr	r3, [sp, #28]
 8008be8:	3307      	adds	r3, #7
 8008bea:	4393      	bics	r3, r2
 8008bec:	3308      	adds	r3, #8
 8008bee:	9307      	str	r3, [sp, #28]
 8008bf0:	6963      	ldr	r3, [r4, #20]
 8008bf2:	9a04      	ldr	r2, [sp, #16]
 8008bf4:	189b      	adds	r3, r3, r2
 8008bf6:	6163      	str	r3, [r4, #20]
 8008bf8:	e765      	b.n	8008ac6 <_svfiprintf_r+0x46>
 8008bfa:	4343      	muls	r3, r0
 8008bfc:	0035      	movs	r5, r6
 8008bfe:	2101      	movs	r1, #1
 8008c00:	189b      	adds	r3, r3, r2
 8008c02:	e7a6      	b.n	8008b52 <_svfiprintf_r+0xd2>
 8008c04:	2301      	movs	r3, #1
 8008c06:	425b      	negs	r3, r3
 8008c08:	e7d0      	b.n	8008bac <_svfiprintf_r+0x12c>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	200a      	movs	r0, #10
 8008c0e:	001a      	movs	r2, r3
 8008c10:	3501      	adds	r5, #1
 8008c12:	6063      	str	r3, [r4, #4]
 8008c14:	7829      	ldrb	r1, [r5, #0]
 8008c16:	1c6e      	adds	r6, r5, #1
 8008c18:	3930      	subs	r1, #48	; 0x30
 8008c1a:	2909      	cmp	r1, #9
 8008c1c:	d903      	bls.n	8008c26 <_svfiprintf_r+0x1a6>
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0c5      	beq.n	8008bae <_svfiprintf_r+0x12e>
 8008c22:	9209      	str	r2, [sp, #36]	; 0x24
 8008c24:	e7c3      	b.n	8008bae <_svfiprintf_r+0x12e>
 8008c26:	4342      	muls	r2, r0
 8008c28:	0035      	movs	r5, r6
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	1852      	adds	r2, r2, r1
 8008c2e:	e7f1      	b.n	8008c14 <_svfiprintf_r+0x194>
 8008c30:	ab07      	add	r3, sp, #28
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	003a      	movs	r2, r7
 8008c36:	0021      	movs	r1, r4
 8008c38:	4b10      	ldr	r3, [pc, #64]	; (8008c7c <_svfiprintf_r+0x1fc>)
 8008c3a:	9803      	ldr	r0, [sp, #12]
 8008c3c:	e000      	b.n	8008c40 <_svfiprintf_r+0x1c0>
 8008c3e:	bf00      	nop
 8008c40:	9004      	str	r0, [sp, #16]
 8008c42:	9b04      	ldr	r3, [sp, #16]
 8008c44:	3301      	adds	r3, #1
 8008c46:	d1d3      	bne.n	8008bf0 <_svfiprintf_r+0x170>
 8008c48:	89bb      	ldrh	r3, [r7, #12]
 8008c4a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008c4c:	065b      	lsls	r3, r3, #25
 8008c4e:	d400      	bmi.n	8008c52 <_svfiprintf_r+0x1d2>
 8008c50:	e72d      	b.n	8008aae <_svfiprintf_r+0x2e>
 8008c52:	2001      	movs	r0, #1
 8008c54:	4240      	negs	r0, r0
 8008c56:	e72a      	b.n	8008aae <_svfiprintf_r+0x2e>
 8008c58:	ab07      	add	r3, sp, #28
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	003a      	movs	r2, r7
 8008c5e:	0021      	movs	r1, r4
 8008c60:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <_svfiprintf_r+0x1fc>)
 8008c62:	9803      	ldr	r0, [sp, #12]
 8008c64:	f000 f87c 	bl	8008d60 <_printf_i>
 8008c68:	e7ea      	b.n	8008c40 <_svfiprintf_r+0x1c0>
 8008c6a:	46c0      	nop			; (mov r8, r8)
 8008c6c:	08009e78 	.word	0x08009e78
 8008c70:	08009e7e 	.word	0x08009e7e
 8008c74:	08009e82 	.word	0x08009e82
 8008c78:	00000000 	.word	0x00000000
 8008c7c:	080089bd 	.word	0x080089bd

08008c80 <_printf_common>:
 8008c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c82:	0015      	movs	r5, r2
 8008c84:	9301      	str	r3, [sp, #4]
 8008c86:	688a      	ldr	r2, [r1, #8]
 8008c88:	690b      	ldr	r3, [r1, #16]
 8008c8a:	000c      	movs	r4, r1
 8008c8c:	9000      	str	r0, [sp, #0]
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	da00      	bge.n	8008c94 <_printf_common+0x14>
 8008c92:	0013      	movs	r3, r2
 8008c94:	0022      	movs	r2, r4
 8008c96:	602b      	str	r3, [r5, #0]
 8008c98:	3243      	adds	r2, #67	; 0x43
 8008c9a:	7812      	ldrb	r2, [r2, #0]
 8008c9c:	2a00      	cmp	r2, #0
 8008c9e:	d001      	beq.n	8008ca4 <_printf_common+0x24>
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	602b      	str	r3, [r5, #0]
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	069b      	lsls	r3, r3, #26
 8008ca8:	d502      	bpl.n	8008cb0 <_printf_common+0x30>
 8008caa:	682b      	ldr	r3, [r5, #0]
 8008cac:	3302      	adds	r3, #2
 8008cae:	602b      	str	r3, [r5, #0]
 8008cb0:	6822      	ldr	r2, [r4, #0]
 8008cb2:	2306      	movs	r3, #6
 8008cb4:	0017      	movs	r7, r2
 8008cb6:	401f      	ands	r7, r3
 8008cb8:	421a      	tst	r2, r3
 8008cba:	d027      	beq.n	8008d0c <_printf_common+0x8c>
 8008cbc:	0023      	movs	r3, r4
 8008cbe:	3343      	adds	r3, #67	; 0x43
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	1e5a      	subs	r2, r3, #1
 8008cc4:	4193      	sbcs	r3, r2
 8008cc6:	6822      	ldr	r2, [r4, #0]
 8008cc8:	0692      	lsls	r2, r2, #26
 8008cca:	d430      	bmi.n	8008d2e <_printf_common+0xae>
 8008ccc:	0022      	movs	r2, r4
 8008cce:	9901      	ldr	r1, [sp, #4]
 8008cd0:	9800      	ldr	r0, [sp, #0]
 8008cd2:	9e08      	ldr	r6, [sp, #32]
 8008cd4:	3243      	adds	r2, #67	; 0x43
 8008cd6:	47b0      	blx	r6
 8008cd8:	1c43      	adds	r3, r0, #1
 8008cda:	d025      	beq.n	8008d28 <_printf_common+0xa8>
 8008cdc:	2306      	movs	r3, #6
 8008cde:	6820      	ldr	r0, [r4, #0]
 8008ce0:	682a      	ldr	r2, [r5, #0]
 8008ce2:	68e1      	ldr	r1, [r4, #12]
 8008ce4:	2500      	movs	r5, #0
 8008ce6:	4003      	ands	r3, r0
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d103      	bne.n	8008cf4 <_printf_common+0x74>
 8008cec:	1a8d      	subs	r5, r1, r2
 8008cee:	43eb      	mvns	r3, r5
 8008cf0:	17db      	asrs	r3, r3, #31
 8008cf2:	401d      	ands	r5, r3
 8008cf4:	68a3      	ldr	r3, [r4, #8]
 8008cf6:	6922      	ldr	r2, [r4, #16]
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	dd01      	ble.n	8008d00 <_printf_common+0x80>
 8008cfc:	1a9b      	subs	r3, r3, r2
 8008cfe:	18ed      	adds	r5, r5, r3
 8008d00:	2700      	movs	r7, #0
 8008d02:	42bd      	cmp	r5, r7
 8008d04:	d120      	bne.n	8008d48 <_printf_common+0xc8>
 8008d06:	2000      	movs	r0, #0
 8008d08:	e010      	b.n	8008d2c <_printf_common+0xac>
 8008d0a:	3701      	adds	r7, #1
 8008d0c:	68e3      	ldr	r3, [r4, #12]
 8008d0e:	682a      	ldr	r2, [r5, #0]
 8008d10:	1a9b      	subs	r3, r3, r2
 8008d12:	42bb      	cmp	r3, r7
 8008d14:	ddd2      	ble.n	8008cbc <_printf_common+0x3c>
 8008d16:	0022      	movs	r2, r4
 8008d18:	2301      	movs	r3, #1
 8008d1a:	9901      	ldr	r1, [sp, #4]
 8008d1c:	9800      	ldr	r0, [sp, #0]
 8008d1e:	9e08      	ldr	r6, [sp, #32]
 8008d20:	3219      	adds	r2, #25
 8008d22:	47b0      	blx	r6
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d1f0      	bne.n	8008d0a <_printf_common+0x8a>
 8008d28:	2001      	movs	r0, #1
 8008d2a:	4240      	negs	r0, r0
 8008d2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d2e:	2030      	movs	r0, #48	; 0x30
 8008d30:	18e1      	adds	r1, r4, r3
 8008d32:	3143      	adds	r1, #67	; 0x43
 8008d34:	7008      	strb	r0, [r1, #0]
 8008d36:	0021      	movs	r1, r4
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	3145      	adds	r1, #69	; 0x45
 8008d3c:	7809      	ldrb	r1, [r1, #0]
 8008d3e:	18a2      	adds	r2, r4, r2
 8008d40:	3243      	adds	r2, #67	; 0x43
 8008d42:	3302      	adds	r3, #2
 8008d44:	7011      	strb	r1, [r2, #0]
 8008d46:	e7c1      	b.n	8008ccc <_printf_common+0x4c>
 8008d48:	0022      	movs	r2, r4
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	9901      	ldr	r1, [sp, #4]
 8008d4e:	9800      	ldr	r0, [sp, #0]
 8008d50:	9e08      	ldr	r6, [sp, #32]
 8008d52:	321a      	adds	r2, #26
 8008d54:	47b0      	blx	r6
 8008d56:	1c43      	adds	r3, r0, #1
 8008d58:	d0e6      	beq.n	8008d28 <_printf_common+0xa8>
 8008d5a:	3701      	adds	r7, #1
 8008d5c:	e7d1      	b.n	8008d02 <_printf_common+0x82>
	...

08008d60 <_printf_i>:
 8008d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d62:	b08b      	sub	sp, #44	; 0x2c
 8008d64:	9206      	str	r2, [sp, #24]
 8008d66:	000a      	movs	r2, r1
 8008d68:	3243      	adds	r2, #67	; 0x43
 8008d6a:	9307      	str	r3, [sp, #28]
 8008d6c:	9005      	str	r0, [sp, #20]
 8008d6e:	9204      	str	r2, [sp, #16]
 8008d70:	7e0a      	ldrb	r2, [r1, #24]
 8008d72:	000c      	movs	r4, r1
 8008d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d76:	2a78      	cmp	r2, #120	; 0x78
 8008d78:	d807      	bhi.n	8008d8a <_printf_i+0x2a>
 8008d7a:	2a62      	cmp	r2, #98	; 0x62
 8008d7c:	d809      	bhi.n	8008d92 <_printf_i+0x32>
 8008d7e:	2a00      	cmp	r2, #0
 8008d80:	d100      	bne.n	8008d84 <_printf_i+0x24>
 8008d82:	e0c1      	b.n	8008f08 <_printf_i+0x1a8>
 8008d84:	2a58      	cmp	r2, #88	; 0x58
 8008d86:	d100      	bne.n	8008d8a <_printf_i+0x2a>
 8008d88:	e08c      	b.n	8008ea4 <_printf_i+0x144>
 8008d8a:	0026      	movs	r6, r4
 8008d8c:	3642      	adds	r6, #66	; 0x42
 8008d8e:	7032      	strb	r2, [r6, #0]
 8008d90:	e022      	b.n	8008dd8 <_printf_i+0x78>
 8008d92:	0010      	movs	r0, r2
 8008d94:	3863      	subs	r0, #99	; 0x63
 8008d96:	2815      	cmp	r0, #21
 8008d98:	d8f7      	bhi.n	8008d8a <_printf_i+0x2a>
 8008d9a:	f7f7 f9b9 	bl	8000110 <__gnu_thumb1_case_shi>
 8008d9e:	0016      	.short	0x0016
 8008da0:	fff6001f 	.word	0xfff6001f
 8008da4:	fff6fff6 	.word	0xfff6fff6
 8008da8:	001ffff6 	.word	0x001ffff6
 8008dac:	fff6fff6 	.word	0xfff6fff6
 8008db0:	fff6fff6 	.word	0xfff6fff6
 8008db4:	003600a8 	.word	0x003600a8
 8008db8:	fff6009a 	.word	0xfff6009a
 8008dbc:	00b9fff6 	.word	0x00b9fff6
 8008dc0:	0036fff6 	.word	0x0036fff6
 8008dc4:	fff6fff6 	.word	0xfff6fff6
 8008dc8:	009e      	.short	0x009e
 8008dca:	0026      	movs	r6, r4
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	3642      	adds	r6, #66	; 0x42
 8008dd0:	1d11      	adds	r1, r2, #4
 8008dd2:	6019      	str	r1, [r3, #0]
 8008dd4:	6813      	ldr	r3, [r2, #0]
 8008dd6:	7033      	strb	r3, [r6, #0]
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e0a7      	b.n	8008f2c <_printf_i+0x1cc>
 8008ddc:	6808      	ldr	r0, [r1, #0]
 8008dde:	6819      	ldr	r1, [r3, #0]
 8008de0:	1d0a      	adds	r2, r1, #4
 8008de2:	0605      	lsls	r5, r0, #24
 8008de4:	d50b      	bpl.n	8008dfe <_printf_i+0x9e>
 8008de6:	680d      	ldr	r5, [r1, #0]
 8008de8:	601a      	str	r2, [r3, #0]
 8008dea:	2d00      	cmp	r5, #0
 8008dec:	da03      	bge.n	8008df6 <_printf_i+0x96>
 8008dee:	232d      	movs	r3, #45	; 0x2d
 8008df0:	9a04      	ldr	r2, [sp, #16]
 8008df2:	426d      	negs	r5, r5
 8008df4:	7013      	strb	r3, [r2, #0]
 8008df6:	4b61      	ldr	r3, [pc, #388]	; (8008f7c <_printf_i+0x21c>)
 8008df8:	270a      	movs	r7, #10
 8008dfa:	9303      	str	r3, [sp, #12]
 8008dfc:	e01b      	b.n	8008e36 <_printf_i+0xd6>
 8008dfe:	680d      	ldr	r5, [r1, #0]
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	0641      	lsls	r1, r0, #25
 8008e04:	d5f1      	bpl.n	8008dea <_printf_i+0x8a>
 8008e06:	b22d      	sxth	r5, r5
 8008e08:	e7ef      	b.n	8008dea <_printf_i+0x8a>
 8008e0a:	680d      	ldr	r5, [r1, #0]
 8008e0c:	6819      	ldr	r1, [r3, #0]
 8008e0e:	1d08      	adds	r0, r1, #4
 8008e10:	6018      	str	r0, [r3, #0]
 8008e12:	062e      	lsls	r6, r5, #24
 8008e14:	d501      	bpl.n	8008e1a <_printf_i+0xba>
 8008e16:	680d      	ldr	r5, [r1, #0]
 8008e18:	e003      	b.n	8008e22 <_printf_i+0xc2>
 8008e1a:	066d      	lsls	r5, r5, #25
 8008e1c:	d5fb      	bpl.n	8008e16 <_printf_i+0xb6>
 8008e1e:	680d      	ldr	r5, [r1, #0]
 8008e20:	b2ad      	uxth	r5, r5
 8008e22:	4b56      	ldr	r3, [pc, #344]	; (8008f7c <_printf_i+0x21c>)
 8008e24:	2708      	movs	r7, #8
 8008e26:	9303      	str	r3, [sp, #12]
 8008e28:	2a6f      	cmp	r2, #111	; 0x6f
 8008e2a:	d000      	beq.n	8008e2e <_printf_i+0xce>
 8008e2c:	3702      	adds	r7, #2
 8008e2e:	0023      	movs	r3, r4
 8008e30:	2200      	movs	r2, #0
 8008e32:	3343      	adds	r3, #67	; 0x43
 8008e34:	701a      	strb	r2, [r3, #0]
 8008e36:	6863      	ldr	r3, [r4, #4]
 8008e38:	60a3      	str	r3, [r4, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	db03      	blt.n	8008e46 <_printf_i+0xe6>
 8008e3e:	2204      	movs	r2, #4
 8008e40:	6821      	ldr	r1, [r4, #0]
 8008e42:	4391      	bics	r1, r2
 8008e44:	6021      	str	r1, [r4, #0]
 8008e46:	2d00      	cmp	r5, #0
 8008e48:	d102      	bne.n	8008e50 <_printf_i+0xf0>
 8008e4a:	9e04      	ldr	r6, [sp, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00c      	beq.n	8008e6a <_printf_i+0x10a>
 8008e50:	9e04      	ldr	r6, [sp, #16]
 8008e52:	0028      	movs	r0, r5
 8008e54:	0039      	movs	r1, r7
 8008e56:	f7f7 f9eb 	bl	8000230 <__aeabi_uidivmod>
 8008e5a:	9b03      	ldr	r3, [sp, #12]
 8008e5c:	3e01      	subs	r6, #1
 8008e5e:	5c5b      	ldrb	r3, [r3, r1]
 8008e60:	7033      	strb	r3, [r6, #0]
 8008e62:	002b      	movs	r3, r5
 8008e64:	0005      	movs	r5, r0
 8008e66:	429f      	cmp	r7, r3
 8008e68:	d9f3      	bls.n	8008e52 <_printf_i+0xf2>
 8008e6a:	2f08      	cmp	r7, #8
 8008e6c:	d109      	bne.n	8008e82 <_printf_i+0x122>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	07db      	lsls	r3, r3, #31
 8008e72:	d506      	bpl.n	8008e82 <_printf_i+0x122>
 8008e74:	6863      	ldr	r3, [r4, #4]
 8008e76:	6922      	ldr	r2, [r4, #16]
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	dc02      	bgt.n	8008e82 <_printf_i+0x122>
 8008e7c:	2330      	movs	r3, #48	; 0x30
 8008e7e:	3e01      	subs	r6, #1
 8008e80:	7033      	strb	r3, [r6, #0]
 8008e82:	9b04      	ldr	r3, [sp, #16]
 8008e84:	1b9b      	subs	r3, r3, r6
 8008e86:	6123      	str	r3, [r4, #16]
 8008e88:	9b07      	ldr	r3, [sp, #28]
 8008e8a:	0021      	movs	r1, r4
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	9805      	ldr	r0, [sp, #20]
 8008e90:	9b06      	ldr	r3, [sp, #24]
 8008e92:	aa09      	add	r2, sp, #36	; 0x24
 8008e94:	f7ff fef4 	bl	8008c80 <_printf_common>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	d14c      	bne.n	8008f36 <_printf_i+0x1d6>
 8008e9c:	2001      	movs	r0, #1
 8008e9e:	4240      	negs	r0, r0
 8008ea0:	b00b      	add	sp, #44	; 0x2c
 8008ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea4:	3145      	adds	r1, #69	; 0x45
 8008ea6:	700a      	strb	r2, [r1, #0]
 8008ea8:	4a34      	ldr	r2, [pc, #208]	; (8008f7c <_printf_i+0x21c>)
 8008eaa:	9203      	str	r2, [sp, #12]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	6821      	ldr	r1, [r4, #0]
 8008eb0:	ca20      	ldmia	r2!, {r5}
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	0608      	lsls	r0, r1, #24
 8008eb6:	d516      	bpl.n	8008ee6 <_printf_i+0x186>
 8008eb8:	07cb      	lsls	r3, r1, #31
 8008eba:	d502      	bpl.n	8008ec2 <_printf_i+0x162>
 8008ebc:	2320      	movs	r3, #32
 8008ebe:	4319      	orrs	r1, r3
 8008ec0:	6021      	str	r1, [r4, #0]
 8008ec2:	2710      	movs	r7, #16
 8008ec4:	2d00      	cmp	r5, #0
 8008ec6:	d1b2      	bne.n	8008e2e <_printf_i+0xce>
 8008ec8:	2320      	movs	r3, #32
 8008eca:	6822      	ldr	r2, [r4, #0]
 8008ecc:	439a      	bics	r2, r3
 8008ece:	6022      	str	r2, [r4, #0]
 8008ed0:	e7ad      	b.n	8008e2e <_printf_i+0xce>
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	6809      	ldr	r1, [r1, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	6022      	str	r2, [r4, #0]
 8008eda:	0022      	movs	r2, r4
 8008edc:	2178      	movs	r1, #120	; 0x78
 8008ede:	3245      	adds	r2, #69	; 0x45
 8008ee0:	7011      	strb	r1, [r2, #0]
 8008ee2:	4a27      	ldr	r2, [pc, #156]	; (8008f80 <_printf_i+0x220>)
 8008ee4:	e7e1      	b.n	8008eaa <_printf_i+0x14a>
 8008ee6:	0648      	lsls	r0, r1, #25
 8008ee8:	d5e6      	bpl.n	8008eb8 <_printf_i+0x158>
 8008eea:	b2ad      	uxth	r5, r5
 8008eec:	e7e4      	b.n	8008eb8 <_printf_i+0x158>
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	680d      	ldr	r5, [r1, #0]
 8008ef2:	1d10      	adds	r0, r2, #4
 8008ef4:	6949      	ldr	r1, [r1, #20]
 8008ef6:	6018      	str	r0, [r3, #0]
 8008ef8:	6813      	ldr	r3, [r2, #0]
 8008efa:	062e      	lsls	r6, r5, #24
 8008efc:	d501      	bpl.n	8008f02 <_printf_i+0x1a2>
 8008efe:	6019      	str	r1, [r3, #0]
 8008f00:	e002      	b.n	8008f08 <_printf_i+0x1a8>
 8008f02:	066d      	lsls	r5, r5, #25
 8008f04:	d5fb      	bpl.n	8008efe <_printf_i+0x19e>
 8008f06:	8019      	strh	r1, [r3, #0]
 8008f08:	2300      	movs	r3, #0
 8008f0a:	9e04      	ldr	r6, [sp, #16]
 8008f0c:	6123      	str	r3, [r4, #16]
 8008f0e:	e7bb      	b.n	8008e88 <_printf_i+0x128>
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	1d11      	adds	r1, r2, #4
 8008f14:	6019      	str	r1, [r3, #0]
 8008f16:	6816      	ldr	r6, [r2, #0]
 8008f18:	2100      	movs	r1, #0
 8008f1a:	0030      	movs	r0, r6
 8008f1c:	6862      	ldr	r2, [r4, #4]
 8008f1e:	f000 f831 	bl	8008f84 <memchr>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	d001      	beq.n	8008f2a <_printf_i+0x1ca>
 8008f26:	1b80      	subs	r0, r0, r6
 8008f28:	6060      	str	r0, [r4, #4]
 8008f2a:	6863      	ldr	r3, [r4, #4]
 8008f2c:	6123      	str	r3, [r4, #16]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9a04      	ldr	r2, [sp, #16]
 8008f32:	7013      	strb	r3, [r2, #0]
 8008f34:	e7a8      	b.n	8008e88 <_printf_i+0x128>
 8008f36:	6923      	ldr	r3, [r4, #16]
 8008f38:	0032      	movs	r2, r6
 8008f3a:	9906      	ldr	r1, [sp, #24]
 8008f3c:	9805      	ldr	r0, [sp, #20]
 8008f3e:	9d07      	ldr	r5, [sp, #28]
 8008f40:	47a8      	blx	r5
 8008f42:	1c43      	adds	r3, r0, #1
 8008f44:	d0aa      	beq.n	8008e9c <_printf_i+0x13c>
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	079b      	lsls	r3, r3, #30
 8008f4a:	d415      	bmi.n	8008f78 <_printf_i+0x218>
 8008f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f4e:	68e0      	ldr	r0, [r4, #12]
 8008f50:	4298      	cmp	r0, r3
 8008f52:	daa5      	bge.n	8008ea0 <_printf_i+0x140>
 8008f54:	0018      	movs	r0, r3
 8008f56:	e7a3      	b.n	8008ea0 <_printf_i+0x140>
 8008f58:	0022      	movs	r2, r4
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	9906      	ldr	r1, [sp, #24]
 8008f5e:	9805      	ldr	r0, [sp, #20]
 8008f60:	9e07      	ldr	r6, [sp, #28]
 8008f62:	3219      	adds	r2, #25
 8008f64:	47b0      	blx	r6
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	d098      	beq.n	8008e9c <_printf_i+0x13c>
 8008f6a:	3501      	adds	r5, #1
 8008f6c:	68e3      	ldr	r3, [r4, #12]
 8008f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f70:	1a9b      	subs	r3, r3, r2
 8008f72:	42ab      	cmp	r3, r5
 8008f74:	dcf0      	bgt.n	8008f58 <_printf_i+0x1f8>
 8008f76:	e7e9      	b.n	8008f4c <_printf_i+0x1ec>
 8008f78:	2500      	movs	r5, #0
 8008f7a:	e7f7      	b.n	8008f6c <_printf_i+0x20c>
 8008f7c:	08009e89 	.word	0x08009e89
 8008f80:	08009e9a 	.word	0x08009e9a

08008f84 <memchr>:
 8008f84:	b2c9      	uxtb	r1, r1
 8008f86:	1882      	adds	r2, r0, r2
 8008f88:	4290      	cmp	r0, r2
 8008f8a:	d101      	bne.n	8008f90 <memchr+0xc>
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	4770      	bx	lr
 8008f90:	7803      	ldrb	r3, [r0, #0]
 8008f92:	428b      	cmp	r3, r1
 8008f94:	d0fb      	beq.n	8008f8e <memchr+0xa>
 8008f96:	3001      	adds	r0, #1
 8008f98:	e7f6      	b.n	8008f88 <memchr+0x4>

08008f9a <memmove>:
 8008f9a:	b510      	push	{r4, lr}
 8008f9c:	4288      	cmp	r0, r1
 8008f9e:	d902      	bls.n	8008fa6 <memmove+0xc>
 8008fa0:	188b      	adds	r3, r1, r2
 8008fa2:	4298      	cmp	r0, r3
 8008fa4:	d303      	bcc.n	8008fae <memmove+0x14>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	e007      	b.n	8008fba <memmove+0x20>
 8008faa:	5c8b      	ldrb	r3, [r1, r2]
 8008fac:	5483      	strb	r3, [r0, r2]
 8008fae:	3a01      	subs	r2, #1
 8008fb0:	d2fb      	bcs.n	8008faa <memmove+0x10>
 8008fb2:	bd10      	pop	{r4, pc}
 8008fb4:	5ccc      	ldrb	r4, [r1, r3]
 8008fb6:	54c4      	strb	r4, [r0, r3]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d1fa      	bne.n	8008fb4 <memmove+0x1a>
 8008fbe:	e7f8      	b.n	8008fb2 <memmove+0x18>

08008fc0 <_free_r>:
 8008fc0:	b570      	push	{r4, r5, r6, lr}
 8008fc2:	0005      	movs	r5, r0
 8008fc4:	2900      	cmp	r1, #0
 8008fc6:	d010      	beq.n	8008fea <_free_r+0x2a>
 8008fc8:	1f0c      	subs	r4, r1, #4
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	da00      	bge.n	8008fd2 <_free_r+0x12>
 8008fd0:	18e4      	adds	r4, r4, r3
 8008fd2:	0028      	movs	r0, r5
 8008fd4:	f000 f918 	bl	8009208 <__malloc_lock>
 8008fd8:	4a1d      	ldr	r2, [pc, #116]	; (8009050 <_free_r+0x90>)
 8008fda:	6813      	ldr	r3, [r2, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d105      	bne.n	8008fec <_free_r+0x2c>
 8008fe0:	6063      	str	r3, [r4, #4]
 8008fe2:	6014      	str	r4, [r2, #0]
 8008fe4:	0028      	movs	r0, r5
 8008fe6:	f000 f917 	bl	8009218 <__malloc_unlock>
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	d908      	bls.n	8009002 <_free_r+0x42>
 8008ff0:	6821      	ldr	r1, [r4, #0]
 8008ff2:	1860      	adds	r0, r4, r1
 8008ff4:	4283      	cmp	r3, r0
 8008ff6:	d1f3      	bne.n	8008fe0 <_free_r+0x20>
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	1841      	adds	r1, r0, r1
 8008ffe:	6021      	str	r1, [r4, #0]
 8009000:	e7ee      	b.n	8008fe0 <_free_r+0x20>
 8009002:	001a      	movs	r2, r3
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <_free_r+0x4e>
 800900a:	42a3      	cmp	r3, r4
 800900c:	d9f9      	bls.n	8009002 <_free_r+0x42>
 800900e:	6811      	ldr	r1, [r2, #0]
 8009010:	1850      	adds	r0, r2, r1
 8009012:	42a0      	cmp	r0, r4
 8009014:	d10b      	bne.n	800902e <_free_r+0x6e>
 8009016:	6820      	ldr	r0, [r4, #0]
 8009018:	1809      	adds	r1, r1, r0
 800901a:	1850      	adds	r0, r2, r1
 800901c:	6011      	str	r1, [r2, #0]
 800901e:	4283      	cmp	r3, r0
 8009020:	d1e0      	bne.n	8008fe4 <_free_r+0x24>
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	1841      	adds	r1, r0, r1
 8009028:	6011      	str	r1, [r2, #0]
 800902a:	6053      	str	r3, [r2, #4]
 800902c:	e7da      	b.n	8008fe4 <_free_r+0x24>
 800902e:	42a0      	cmp	r0, r4
 8009030:	d902      	bls.n	8009038 <_free_r+0x78>
 8009032:	230c      	movs	r3, #12
 8009034:	602b      	str	r3, [r5, #0]
 8009036:	e7d5      	b.n	8008fe4 <_free_r+0x24>
 8009038:	6821      	ldr	r1, [r4, #0]
 800903a:	1860      	adds	r0, r4, r1
 800903c:	4283      	cmp	r3, r0
 800903e:	d103      	bne.n	8009048 <_free_r+0x88>
 8009040:	6818      	ldr	r0, [r3, #0]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	1841      	adds	r1, r0, r1
 8009046:	6021      	str	r1, [r4, #0]
 8009048:	6063      	str	r3, [r4, #4]
 800904a:	6054      	str	r4, [r2, #4]
 800904c:	e7ca      	b.n	8008fe4 <_free_r+0x24>
 800904e:	46c0      	nop			; (mov r8, r8)
 8009050:	2000118c 	.word	0x2000118c

08009054 <sbrk_aligned>:
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	4e0f      	ldr	r6, [pc, #60]	; (8009094 <sbrk_aligned+0x40>)
 8009058:	000d      	movs	r5, r1
 800905a:	6831      	ldr	r1, [r6, #0]
 800905c:	0004      	movs	r4, r0
 800905e:	2900      	cmp	r1, #0
 8009060:	d102      	bne.n	8009068 <sbrk_aligned+0x14>
 8009062:	f000 f8bf 	bl	80091e4 <_sbrk_r>
 8009066:	6030      	str	r0, [r6, #0]
 8009068:	0029      	movs	r1, r5
 800906a:	0020      	movs	r0, r4
 800906c:	f000 f8ba 	bl	80091e4 <_sbrk_r>
 8009070:	1c43      	adds	r3, r0, #1
 8009072:	d00a      	beq.n	800908a <sbrk_aligned+0x36>
 8009074:	2303      	movs	r3, #3
 8009076:	1cc5      	adds	r5, r0, #3
 8009078:	439d      	bics	r5, r3
 800907a:	42a8      	cmp	r0, r5
 800907c:	d007      	beq.n	800908e <sbrk_aligned+0x3a>
 800907e:	1a29      	subs	r1, r5, r0
 8009080:	0020      	movs	r0, r4
 8009082:	f000 f8af 	bl	80091e4 <_sbrk_r>
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	d101      	bne.n	800908e <sbrk_aligned+0x3a>
 800908a:	2501      	movs	r5, #1
 800908c:	426d      	negs	r5, r5
 800908e:	0028      	movs	r0, r5
 8009090:	bd70      	pop	{r4, r5, r6, pc}
 8009092:	46c0      	nop			; (mov r8, r8)
 8009094:	20001190 	.word	0x20001190

08009098 <_malloc_r>:
 8009098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800909a:	2203      	movs	r2, #3
 800909c:	1ccb      	adds	r3, r1, #3
 800909e:	4393      	bics	r3, r2
 80090a0:	3308      	adds	r3, #8
 80090a2:	0006      	movs	r6, r0
 80090a4:	001f      	movs	r7, r3
 80090a6:	2b0c      	cmp	r3, #12
 80090a8:	d232      	bcs.n	8009110 <_malloc_r+0x78>
 80090aa:	270c      	movs	r7, #12
 80090ac:	42b9      	cmp	r1, r7
 80090ae:	d831      	bhi.n	8009114 <_malloc_r+0x7c>
 80090b0:	0030      	movs	r0, r6
 80090b2:	f000 f8a9 	bl	8009208 <__malloc_lock>
 80090b6:	4d32      	ldr	r5, [pc, #200]	; (8009180 <_malloc_r+0xe8>)
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	001c      	movs	r4, r3
 80090bc:	2c00      	cmp	r4, #0
 80090be:	d12e      	bne.n	800911e <_malloc_r+0x86>
 80090c0:	0039      	movs	r1, r7
 80090c2:	0030      	movs	r0, r6
 80090c4:	f7ff ffc6 	bl	8009054 <sbrk_aligned>
 80090c8:	0004      	movs	r4, r0
 80090ca:	1c43      	adds	r3, r0, #1
 80090cc:	d11e      	bne.n	800910c <_malloc_r+0x74>
 80090ce:	682c      	ldr	r4, [r5, #0]
 80090d0:	0025      	movs	r5, r4
 80090d2:	2d00      	cmp	r5, #0
 80090d4:	d14a      	bne.n	800916c <_malloc_r+0xd4>
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	0029      	movs	r1, r5
 80090da:	18e3      	adds	r3, r4, r3
 80090dc:	0030      	movs	r0, r6
 80090de:	9301      	str	r3, [sp, #4]
 80090e0:	f000 f880 	bl	80091e4 <_sbrk_r>
 80090e4:	9b01      	ldr	r3, [sp, #4]
 80090e6:	4283      	cmp	r3, r0
 80090e8:	d143      	bne.n	8009172 <_malloc_r+0xda>
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	3703      	adds	r7, #3
 80090ee:	1aff      	subs	r7, r7, r3
 80090f0:	2303      	movs	r3, #3
 80090f2:	439f      	bics	r7, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	2f0c      	cmp	r7, #12
 80090f8:	d200      	bcs.n	80090fc <_malloc_r+0x64>
 80090fa:	270c      	movs	r7, #12
 80090fc:	0039      	movs	r1, r7
 80090fe:	0030      	movs	r0, r6
 8009100:	f7ff ffa8 	bl	8009054 <sbrk_aligned>
 8009104:	1c43      	adds	r3, r0, #1
 8009106:	d034      	beq.n	8009172 <_malloc_r+0xda>
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	19df      	adds	r7, r3, r7
 800910c:	6027      	str	r7, [r4, #0]
 800910e:	e013      	b.n	8009138 <_malloc_r+0xa0>
 8009110:	2b00      	cmp	r3, #0
 8009112:	dacb      	bge.n	80090ac <_malloc_r+0x14>
 8009114:	230c      	movs	r3, #12
 8009116:	2500      	movs	r5, #0
 8009118:	6033      	str	r3, [r6, #0]
 800911a:	0028      	movs	r0, r5
 800911c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800911e:	6822      	ldr	r2, [r4, #0]
 8009120:	1bd1      	subs	r1, r2, r7
 8009122:	d420      	bmi.n	8009166 <_malloc_r+0xce>
 8009124:	290b      	cmp	r1, #11
 8009126:	d917      	bls.n	8009158 <_malloc_r+0xc0>
 8009128:	19e2      	adds	r2, r4, r7
 800912a:	6027      	str	r7, [r4, #0]
 800912c:	42a3      	cmp	r3, r4
 800912e:	d111      	bne.n	8009154 <_malloc_r+0xbc>
 8009130:	602a      	str	r2, [r5, #0]
 8009132:	6863      	ldr	r3, [r4, #4]
 8009134:	6011      	str	r1, [r2, #0]
 8009136:	6053      	str	r3, [r2, #4]
 8009138:	0030      	movs	r0, r6
 800913a:	0025      	movs	r5, r4
 800913c:	f000 f86c 	bl	8009218 <__malloc_unlock>
 8009140:	2207      	movs	r2, #7
 8009142:	350b      	adds	r5, #11
 8009144:	1d23      	adds	r3, r4, #4
 8009146:	4395      	bics	r5, r2
 8009148:	1aea      	subs	r2, r5, r3
 800914a:	429d      	cmp	r5, r3
 800914c:	d0e5      	beq.n	800911a <_malloc_r+0x82>
 800914e:	1b5b      	subs	r3, r3, r5
 8009150:	50a3      	str	r3, [r4, r2]
 8009152:	e7e2      	b.n	800911a <_malloc_r+0x82>
 8009154:	605a      	str	r2, [r3, #4]
 8009156:	e7ec      	b.n	8009132 <_malloc_r+0x9a>
 8009158:	6862      	ldr	r2, [r4, #4]
 800915a:	42a3      	cmp	r3, r4
 800915c:	d101      	bne.n	8009162 <_malloc_r+0xca>
 800915e:	602a      	str	r2, [r5, #0]
 8009160:	e7ea      	b.n	8009138 <_malloc_r+0xa0>
 8009162:	605a      	str	r2, [r3, #4]
 8009164:	e7e8      	b.n	8009138 <_malloc_r+0xa0>
 8009166:	0023      	movs	r3, r4
 8009168:	6864      	ldr	r4, [r4, #4]
 800916a:	e7a7      	b.n	80090bc <_malloc_r+0x24>
 800916c:	002c      	movs	r4, r5
 800916e:	686d      	ldr	r5, [r5, #4]
 8009170:	e7af      	b.n	80090d2 <_malloc_r+0x3a>
 8009172:	230c      	movs	r3, #12
 8009174:	0030      	movs	r0, r6
 8009176:	6033      	str	r3, [r6, #0]
 8009178:	f000 f84e 	bl	8009218 <__malloc_unlock>
 800917c:	e7cd      	b.n	800911a <_malloc_r+0x82>
 800917e:	46c0      	nop			; (mov r8, r8)
 8009180:	2000118c 	.word	0x2000118c

08009184 <_realloc_r>:
 8009184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009186:	0007      	movs	r7, r0
 8009188:	000e      	movs	r6, r1
 800918a:	0014      	movs	r4, r2
 800918c:	2900      	cmp	r1, #0
 800918e:	d105      	bne.n	800919c <_realloc_r+0x18>
 8009190:	0011      	movs	r1, r2
 8009192:	f7ff ff81 	bl	8009098 <_malloc_r>
 8009196:	0005      	movs	r5, r0
 8009198:	0028      	movs	r0, r5
 800919a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800919c:	2a00      	cmp	r2, #0
 800919e:	d103      	bne.n	80091a8 <_realloc_r+0x24>
 80091a0:	f7ff ff0e 	bl	8008fc0 <_free_r>
 80091a4:	0025      	movs	r5, r4
 80091a6:	e7f7      	b.n	8009198 <_realloc_r+0x14>
 80091a8:	f000 f83e 	bl	8009228 <_malloc_usable_size_r>
 80091ac:	9001      	str	r0, [sp, #4]
 80091ae:	4284      	cmp	r4, r0
 80091b0:	d803      	bhi.n	80091ba <_realloc_r+0x36>
 80091b2:	0035      	movs	r5, r6
 80091b4:	0843      	lsrs	r3, r0, #1
 80091b6:	42a3      	cmp	r3, r4
 80091b8:	d3ee      	bcc.n	8009198 <_realloc_r+0x14>
 80091ba:	0021      	movs	r1, r4
 80091bc:	0038      	movs	r0, r7
 80091be:	f7ff ff6b 	bl	8009098 <_malloc_r>
 80091c2:	1e05      	subs	r5, r0, #0
 80091c4:	d0e8      	beq.n	8009198 <_realloc_r+0x14>
 80091c6:	9b01      	ldr	r3, [sp, #4]
 80091c8:	0022      	movs	r2, r4
 80091ca:	429c      	cmp	r4, r3
 80091cc:	d900      	bls.n	80091d0 <_realloc_r+0x4c>
 80091ce:	001a      	movs	r2, r3
 80091d0:	0031      	movs	r1, r6
 80091d2:	0028      	movs	r0, r5
 80091d4:	f7ff fbbe 	bl	8008954 <memcpy>
 80091d8:	0031      	movs	r1, r6
 80091da:	0038      	movs	r0, r7
 80091dc:	f7ff fef0 	bl	8008fc0 <_free_r>
 80091e0:	e7da      	b.n	8009198 <_realloc_r+0x14>
	...

080091e4 <_sbrk_r>:
 80091e4:	2300      	movs	r3, #0
 80091e6:	b570      	push	{r4, r5, r6, lr}
 80091e8:	4d06      	ldr	r5, [pc, #24]	; (8009204 <_sbrk_r+0x20>)
 80091ea:	0004      	movs	r4, r0
 80091ec:	0008      	movs	r0, r1
 80091ee:	602b      	str	r3, [r5, #0]
 80091f0:	f7f9 ff90 	bl	8003114 <_sbrk>
 80091f4:	1c43      	adds	r3, r0, #1
 80091f6:	d103      	bne.n	8009200 <_sbrk_r+0x1c>
 80091f8:	682b      	ldr	r3, [r5, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d000      	beq.n	8009200 <_sbrk_r+0x1c>
 80091fe:	6023      	str	r3, [r4, #0]
 8009200:	bd70      	pop	{r4, r5, r6, pc}
 8009202:	46c0      	nop			; (mov r8, r8)
 8009204:	20001194 	.word	0x20001194

08009208 <__malloc_lock>:
 8009208:	b510      	push	{r4, lr}
 800920a:	4802      	ldr	r0, [pc, #8]	; (8009214 <__malloc_lock+0xc>)
 800920c:	f000 f814 	bl	8009238 <__retarget_lock_acquire_recursive>
 8009210:	bd10      	pop	{r4, pc}
 8009212:	46c0      	nop			; (mov r8, r8)
 8009214:	20001198 	.word	0x20001198

08009218 <__malloc_unlock>:
 8009218:	b510      	push	{r4, lr}
 800921a:	4802      	ldr	r0, [pc, #8]	; (8009224 <__malloc_unlock+0xc>)
 800921c:	f000 f80d 	bl	800923a <__retarget_lock_release_recursive>
 8009220:	bd10      	pop	{r4, pc}
 8009222:	46c0      	nop			; (mov r8, r8)
 8009224:	20001198 	.word	0x20001198

08009228 <_malloc_usable_size_r>:
 8009228:	1f0b      	subs	r3, r1, #4
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	1f18      	subs	r0, r3, #4
 800922e:	2b00      	cmp	r3, #0
 8009230:	da01      	bge.n	8009236 <_malloc_usable_size_r+0xe>
 8009232:	580b      	ldr	r3, [r1, r0]
 8009234:	18c0      	adds	r0, r0, r3
 8009236:	4770      	bx	lr

08009238 <__retarget_lock_acquire_recursive>:
 8009238:	4770      	bx	lr

0800923a <__retarget_lock_release_recursive>:
 800923a:	4770      	bx	lr

0800923c <_init>:
 800923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923e:	46c0      	nop			; (mov r8, r8)
 8009240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009242:	bc08      	pop	{r3}
 8009244:	469e      	mov	lr, r3
 8009246:	4770      	bx	lr

08009248 <_fini>:
 8009248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924a:	46c0      	nop			; (mov r8, r8)
 800924c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924e:	bc08      	pop	{r3}
 8009250:	469e      	mov	lr, r3
 8009252:	4770      	bx	lr
 8009254:	0000      	movs	r0, r0
	...

08009258 <__FLASH_Program_Fast_veneer>:
 8009258:	b401      	push	{r0}
 800925a:	4802      	ldr	r0, [pc, #8]	; (8009264 <__FLASH_Program_Fast_veneer+0xc>)
 800925c:	4684      	mov	ip, r0
 800925e:	bc01      	pop	{r0}
 8009260:	4760      	bx	ip
 8009262:	bf00      	nop
 8009264:	20000085 	.word	0x20000085

Disassembly of section .data:

20000000 <Font_7x10>:
20000000:	00000a07 08009648                       ....H...

20000008 <supported_commands>:
20000008:	54535251 58575655 5c5b5a59              QRSTUVWXYZ[\

20000014 <SystemCoreClock>:
20000014:	00f42400                                .$..

20000018 <uwTickPrio>:
20000018:	00000004                                ....

2000001c <uwTickFreq>:
2000001c:	00000001                                ....

20000020 <_impure_ptr>:
20000020:	20000024                                $.. 

20000024 <impure_data>:
	...

20000084 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000084:	b580      	push	{r7, lr}
20000086:	b088      	sub	sp, #32
20000088:	af00      	add	r7, sp, #0
2000008a:	6078      	str	r0, [r7, #4]
2000008c:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000008e:	231f      	movs	r3, #31
20000090:	18fb      	adds	r3, r7, r3
20000092:	2200      	movs	r2, #0
20000094:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000096:	687b      	ldr	r3, [r7, #4]
20000098:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000009a:	683b      	ldr	r3, [r7, #0]
2000009c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000009e:	4b1a      	ldr	r3, [pc, #104]	; (20000108 <FLASH_Program_Fast+0x84>)
200000a0:	695a      	ldr	r2, [r3, #20]
200000a2:	4b19      	ldr	r3, [pc, #100]	; (20000108 <FLASH_Program_Fast+0x84>)
200000a4:	2180      	movs	r1, #128	; 0x80
200000a6:	02c9      	lsls	r1, r1, #11
200000a8:	430a      	orrs	r2, r1
200000aa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000ac:	f3ef 8310 	mrs	r3, PRIMASK
200000b0:	60fb      	str	r3, [r7, #12]
  return(result);
200000b2:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000b6:	b672      	cpsid	i
}
200000b8:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000ba:	e00f      	b.n	200000dc <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000bc:	697a      	ldr	r2, [r7, #20]
200000be:	69bb      	ldr	r3, [r7, #24]
200000c0:	6812      	ldr	r2, [r2, #0]
200000c2:	601a      	str	r2, [r3, #0]
    src += 4U;
200000c4:	697b      	ldr	r3, [r7, #20]
200000c6:	3304      	adds	r3, #4
200000c8:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000ca:	69bb      	ldr	r3, [r7, #24]
200000cc:	3304      	adds	r3, #4
200000ce:	61bb      	str	r3, [r7, #24]
    index++;
200000d0:	211f      	movs	r1, #31
200000d2:	187b      	adds	r3, r7, r1
200000d4:	781a      	ldrb	r2, [r3, #0]
200000d6:	187b      	adds	r3, r7, r1
200000d8:	3201      	adds	r2, #1
200000da:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000dc:	231f      	movs	r3, #31
200000de:	18fb      	adds	r3, r7, r3
200000e0:	781b      	ldrb	r3, [r3, #0]
200000e2:	2b3f      	cmp	r3, #63	; 0x3f
200000e4:	d9ea      	bls.n	200000bc <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000e6:	46c0      	nop			; (mov r8, r8)
200000e8:	4b07      	ldr	r3, [pc, #28]	; (20000108 <FLASH_Program_Fast+0x84>)
200000ea:	691a      	ldr	r2, [r3, #16]
200000ec:	2380      	movs	r3, #128	; 0x80
200000ee:	025b      	lsls	r3, r3, #9
200000f0:	4013      	ands	r3, r2
200000f2:	d1f9      	bne.n	200000e8 <FLASH_Program_Fast+0x64>
200000f4:	693b      	ldr	r3, [r7, #16]
200000f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000f8:	68bb      	ldr	r3, [r7, #8]
200000fa:	f383 8810 	msr	PRIMASK, r3
}
200000fe:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000100:	46c0      	nop			; (mov r8, r8)
20000102:	46bd      	mov	sp, r7
20000104:	b008      	add	sp, #32
20000106:	bd80      	pop	{r7, pc}
20000108:	40022000 	.word	0x40022000
