
NUC.G070_LORA_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b18  080000b8  080000b8  000010b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b84  08008bd0  08008bd0  00009bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009754  08009754  0000b0f8  2**0
                  CONTENTS
  4 .ARM          00000000  08009754  08009754  0000b0f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009754  08009754  0000b0f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009754  08009754  0000a754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009758  08009758  0000a758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  0800975c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000011c4  200000f8  08009854  0000b0f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200012bc  08009854  0000b2bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b0f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161f1  00000000  00000000  0000b120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f6  00000000  00000000  00021311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00024c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df8  00000000  00000000  00025de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dbe  00000000  00000000  00026be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018df4  00000000  00000000  0003e99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c072  00000000  00000000  00057792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3804  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000442c  00000000  00000000  000e3848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000e7c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000f8 	.word	0x200000f8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08008ba4 	.word	0x08008ba4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000fc 	.word	0x200000fc
 80000fc:	08008ba4 	.word	0x08008ba4

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	@ 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	@ 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <W25qxx_Spi>:


W25Q_HandleTypeDef w25qxx;


uint8_t W25qxx_Spi(uint8_t Data){
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b087      	sub	sp, #28
 8000414:	af02      	add	r7, sp, #8
 8000416:	0002      	movs	r2, r0
 8000418:	1dfb      	adds	r3, r7, #7
 800041a:	701a      	strb	r2, [r3, #0]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&W25Q_SPI, &Data, &ret, 1, 100);
 800041c:	240f      	movs	r4, #15
 800041e:	193a      	adds	r2, r7, r4
 8000420:	1df9      	adds	r1, r7, #7
 8000422:	4806      	ldr	r0, [pc, #24]	@ (800043c <W25qxx_Spi+0x2c>)
 8000424:	2364      	movs	r3, #100	@ 0x64
 8000426:	9300      	str	r3, [sp, #0]
 8000428:	2301      	movs	r3, #1
 800042a:	f005 ff8f 	bl	800634c <HAL_SPI_TransmitReceive>
	return ret;
 800042e:	193b      	adds	r3, r7, r4
 8000430:	781b      	ldrb	r3, [r3, #0]
}
 8000432:	0018      	movs	r0, r3
 8000434:	46bd      	mov	sp, r7
 8000436:	b005      	add	sp, #20
 8000438:	bd90      	pop	{r4, r7, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	200002c4 	.word	0x200002c4

08000440 <W25qxx_WaitForWriteEnd>:

void W25qxx_WaitForWriteEnd(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
	uint32_t count=0;
 8000446:	2300      	movs	r3, #0
 8000448:	607b      	str	r3, [r7, #4]
	HAL_Delay(1);
 800044a:	2001      	movs	r0, #1
 800044c:	f002 fbbe 	bl	8002bcc <HAL_Delay>
	Cs_Low;
 8000450:	4b13      	ldr	r3, [pc, #76]	@ (80004a0 <W25qxx_WaitForWriteEnd+0x60>)
 8000452:	2200      	movs	r2, #0
 8000454:	2101      	movs	r1, #1
 8000456:	0018      	movs	r0, r3
 8000458:	f003 ff71 	bl	800433e <HAL_GPIO_WritePin>
	W25qxx_Spi(W25Q_READ_SR1);
 800045c:	2005      	movs	r0, #5
 800045e:	f7ff ffd7 	bl	8000410 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(Dummy_Byte);
 8000462:	20a5      	movs	r0, #165	@ 0xa5
 8000464:	f7ff ffd4 	bl	8000410 <W25qxx_Spi>
 8000468:	0003      	movs	r3, r0
 800046a:	0019      	movs	r1, r3
 800046c:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <W25qxx_WaitForWriteEnd+0x64>)
 800046e:	222c      	movs	r2, #44	@ 0x2c
 8000470:	5499      	strb	r1, [r3, r2]
		HAL_Delay(1);
 8000472:	2001      	movs	r0, #1
 8000474:	f002 fbaa 	bl	8002bcc <HAL_Delay>
		count++;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3301      	adds	r3, #1
 800047c:	607b      	str	r3, [r7, #4]
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800047e:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <W25qxx_WaitForWriteEnd+0x64>)
 8000480:	222c      	movs	r2, #44	@ 0x2c
 8000482:	5c9b      	ldrb	r3, [r3, r2]
 8000484:	001a      	movs	r2, r3
 8000486:	2301      	movs	r3, #1
 8000488:	4013      	ands	r3, r2
 800048a:	d1ea      	bne.n	8000462 <W25qxx_WaitForWriteEnd+0x22>
	Cs_High;
 800048c:	4b04      	ldr	r3, [pc, #16]	@ (80004a0 <W25qxx_WaitForWriteEnd+0x60>)
 800048e:	2201      	movs	r2, #1
 8000490:	2101      	movs	r1, #1
 8000492:	0018      	movs	r0, r3
 8000494:	f003 ff53 	bl	800433e <HAL_GPIO_WritePin>
}
 8000498:	46c0      	nop			@ (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b002      	add	sp, #8
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	50000400 	.word	0x50000400
 80004a4:	20000118 	.word	0x20000118

080004a8 <W25Q_Write_Enable>:
	UID	|=(((uint64_t)Rdata[0]<<24) | ((uint64_t)Rdata[1]<<16) | ((uint64_t)Rdata[2]<<8) | ((uint64_t)Rdata[3]))<<32;
	UID |=((Rdata[4]<<24) | (Rdata[5]<<16) | (Rdata[6]<<8)  | (Rdata[7]));
	return	UID;
}
void W25Q_Write_Enable(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	Cs_Low;
 80004ac:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <W25Q_Write_Enable+0x28>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	2101      	movs	r1, #1
 80004b2:	0018      	movs	r0, r3
 80004b4:	f003 ff43 	bl	800433e <HAL_GPIO_WritePin>
	W25qxx_Spi(W25Q_WRITE_ENABLE);
 80004b8:	2006      	movs	r0, #6
 80004ba:	f7ff ffa9 	bl	8000410 <W25qxx_Spi>
	Cs_High;
 80004be:	4b04      	ldr	r3, [pc, #16]	@ (80004d0 <W25Q_Write_Enable+0x28>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	2101      	movs	r1, #1
 80004c4:	0018      	movs	r0, r3
 80004c6:	f003 ff3a 	bl	800433e <HAL_GPIO_WritePin>
}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	50000400 	.word	0x50000400

080004d4 <W25Q_Write_Disable>:

void W25Q_Write_Disable(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	Cs_Low;
 80004d8:	4b08      	ldr	r3, [pc, #32]	@ (80004fc <W25Q_Write_Disable+0x28>)
 80004da:	2200      	movs	r2, #0
 80004dc:	2101      	movs	r1, #1
 80004de:	0018      	movs	r0, r3
 80004e0:	f003 ff2d 	bl	800433e <HAL_GPIO_WritePin>
	W25qxx_Spi(W25Q_WRITE_DISABLE);
 80004e4:	2004      	movs	r0, #4
 80004e6:	f7ff ff93 	bl	8000410 <W25qxx_Spi>
	Cs_High;
 80004ea:	4b04      	ldr	r3, [pc, #16]	@ (80004fc <W25Q_Write_Disable+0x28>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	2101      	movs	r1, #1
 80004f0:	0018      	movs	r0, r3
 80004f2:	f003 ff24 	bl	800433e <HAL_GPIO_WritePin>
}
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	50000400 	.word	0x50000400

08000500 <W25Q_Buf_Program>:
	W25Q_Write_Disable();

}

void W25Q_Buf_Program(uint32_t Adress, uint8_t *Buffer, uint8_t len)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b0c9      	sub	sp, #292	@ 0x124
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	4b49      	ldr	r3, [pc, #292]	@ (8000630 <W25Q_Buf_Program+0x130>)
 800050c:	2490      	movs	r4, #144	@ 0x90
 800050e:	0064      	lsls	r4, r4, #1
 8000510:	191b      	adds	r3, r3, r4
 8000512:	19db      	adds	r3, r3, r7
 8000514:	701a      	strb	r2, [r3, #0]
	W25qxx_WaitForWriteEnd();
 8000516:	f7ff ff93 	bl	8000440 <W25qxx_WaitForWriteEnd>
	W25Q_Write_Enable();
 800051a:	f7ff ffc5 	bl	80004a8 <W25Q_Write_Enable>

	uint8_t Datas[256] = { '\0' };
 800051e:	4b45      	ldr	r3, [pc, #276]	@ (8000634 <W25Q_Buf_Program+0x134>)
 8000520:	191b      	adds	r3, r3, r4
 8000522:	19db      	adds	r3, r3, r7
 8000524:	0018      	movs	r0, r3
 8000526:	2380      	movs	r3, #128	@ 0x80
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	001a      	movs	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f007 febd 	bl	80082ac <memset>
	uint8_t adres[3] = { '\0' };
 8000532:	4b41      	ldr	r3, [pc, #260]	@ (8000638 <W25Q_Buf_Program+0x138>)
 8000534:	191b      	adds	r3, r3, r4
 8000536:	19db      	adds	r3, r3, r7
 8000538:	0018      	movs	r0, r3
 800053a:	2303      	movs	r3, #3
 800053c:	001a      	movs	r2, r3
 800053e:	2100      	movs	r1, #0
 8000540:	f007 feb4 	bl	80082ac <memset>
	/*Gelen 24 bitlik Adres bilgisi 8 bit olarak parçalanıyor*/
	adres[0] = (Adress >> 16) & 0xFF;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	0c1b      	lsrs	r3, r3, #16
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b3b      	ldr	r3, [pc, #236]	@ (8000638 <W25Q_Buf_Program+0x138>)
 800054c:	0021      	movs	r1, r4
 800054e:	185b      	adds	r3, r3, r1
 8000550:	19db      	adds	r3, r3, r7
 8000552:	701a      	strb	r2, [r3, #0]
	adres[1] = (Adress >> 8) & 0xFF;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	0a1b      	lsrs	r3, r3, #8
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b37      	ldr	r3, [pc, #220]	@ (8000638 <W25Q_Buf_Program+0x138>)
 800055c:	185b      	adds	r3, r3, r1
 800055e:	19db      	adds	r3, r3, r7
 8000560:	705a      	strb	r2, [r3, #1]
	adres[2] = (Adress) & 0xFF;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b34      	ldr	r3, [pc, #208]	@ (8000638 <W25Q_Buf_Program+0x138>)
 8000568:	185b      	adds	r3, r3, r1
 800056a:	19db      	adds	r3, r3, r7
 800056c:	709a      	strb	r2, [r3, #2]

	for(int i=0; i<256;i++)
 800056e:	2300      	movs	r3, #0
 8000570:	228e      	movs	r2, #142	@ 0x8e
 8000572:	0052      	lsls	r2, r2, #1
 8000574:	18ba      	adds	r2, r7, r2
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	e015      	b.n	80005a6 <W25Q_Buf_Program+0xa6>
	{
		Datas[i]= *Buffer;
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	7819      	ldrb	r1, [r3, #0]
 800057e:	4b2d      	ldr	r3, [pc, #180]	@ (8000634 <W25Q_Buf_Program+0x134>)
 8000580:	2290      	movs	r2, #144	@ 0x90
 8000582:	0052      	lsls	r2, r2, #1
 8000584:	189b      	adds	r3, r3, r2
 8000586:	19da      	adds	r2, r3, r7
 8000588:	208e      	movs	r0, #142	@ 0x8e
 800058a:	0040      	lsls	r0, r0, #1
 800058c:	183b      	adds	r3, r7, r0
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	18d3      	adds	r3, r2, r3
 8000592:	1c0a      	adds	r2, r1, #0
 8000594:	701a      	strb	r2, [r3, #0]
		Buffer+=1;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	3301      	adds	r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
	for(int i=0; i<256;i++)
 800059c:	183b      	adds	r3, r7, r0
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	183a      	adds	r2, r7, r0
 80005a4:	6013      	str	r3, [r2, #0]
 80005a6:	238e      	movs	r3, #142	@ 0x8e
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	18fb      	adds	r3, r7, r3
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2bff      	cmp	r3, #255	@ 0xff
 80005b0:	dde3      	ble.n	800057a <W25Q_Buf_Program+0x7a>
	}

	Cs_Low;
 80005b2:	4b22      	ldr	r3, [pc, #136]	@ (800063c <W25Q_Buf_Program+0x13c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	2101      	movs	r1, #1
 80005b8:	0018      	movs	r0, r3
 80005ba:	f003 fec0 	bl	800433e <HAL_GPIO_WritePin>
	W25qxx_Spi(W25Q_PAGE_PROGRAM);
 80005be:	2002      	movs	r0, #2
 80005c0:	f7ff ff26 	bl	8000410 <W25qxx_Spi>
	for (int i = 0; i < 3; i++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	228c      	movs	r2, #140	@ 0x8c
 80005c8:	0052      	lsls	r2, r2, #1
 80005ca:	18ba      	adds	r2, r7, r2
 80005cc:	6013      	str	r3, [r2, #0]
 80005ce:	e012      	b.n	80005f6 <W25Q_Buf_Program+0xf6>
		W25qxx_Spi(adres[i]);
 80005d0:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <W25Q_Buf_Program+0x138>)
 80005d2:	2290      	movs	r2, #144	@ 0x90
 80005d4:	0052      	lsls	r2, r2, #1
 80005d6:	189b      	adds	r3, r3, r2
 80005d8:	19da      	adds	r2, r3, r7
 80005da:	248c      	movs	r4, #140	@ 0x8c
 80005dc:	0064      	lsls	r4, r4, #1
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	18d3      	adds	r3, r2, r3
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff ff12 	bl	8000410 <W25qxx_Spi>
	for (int i = 0; i < 3; i++)
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	193a      	adds	r2, r7, r4
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	238c      	movs	r3, #140	@ 0x8c
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	18fb      	adds	r3, r7, r3
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b02      	cmp	r3, #2
 8000600:	dde6      	ble.n	80005d0 <W25Q_Buf_Program+0xd0>
	HAL_SPI_Transmit(&W25Q_SPI, Datas, 256, HAL_MAX_DELAY);
 8000602:	2301      	movs	r3, #1
 8000604:	425b      	negs	r3, r3
 8000606:	2280      	movs	r2, #128	@ 0x80
 8000608:	0052      	lsls	r2, r2, #1
 800060a:	2118      	movs	r1, #24
 800060c:	1879      	adds	r1, r7, r1
 800060e:	480c      	ldr	r0, [pc, #48]	@ (8000640 <W25Q_Buf_Program+0x140>)
 8000610:	f005 fbea 	bl	8005de8 <HAL_SPI_Transmit>
	Cs_High;
 8000614:	4b09      	ldr	r3, [pc, #36]	@ (800063c <W25Q_Buf_Program+0x13c>)
 8000616:	2201      	movs	r2, #1
 8000618:	2101      	movs	r1, #1
 800061a:	0018      	movs	r0, r3
 800061c:	f003 fe8f 	bl	800433e <HAL_GPIO_WritePin>
	/*Pg. 66 Page Program Time Typ 0,7ms Max 3ms*/
	W25qxx_WaitForWriteEnd();
 8000620:	f7ff ff0e 	bl	8000440 <W25qxx_WaitForWriteEnd>
	W25Q_Write_Disable();
 8000624:	f7ff ff56 	bl	80004d4 <W25Q_Write_Disable>
}
 8000628:	46c0      	nop			@ (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b049      	add	sp, #292	@ 0x124
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	fffffee7 	.word	0xfffffee7
 8000634:	fffffef8 	.word	0xfffffef8
 8000638:	fffffef4 	.word	0xfffffef4
 800063c:	50000400 	.word	0x50000400
 8000640:	200002c4 	.word	0x200002c4

08000644 <W25Q_Read_Fast>:
	Cs_High;

	return status;
}
uint8_t W25Q_Read_Fast(uint32_t Adress, uint8_t *Buffer)
{
 8000644:	b5b0      	push	{r4, r5, r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
	W25qxx_WaitForWriteEnd();
 800064e:	f7ff fef7 	bl	8000440 <W25qxx_WaitForWriteEnd>

	int8_t Adresses[3] = { '\0' };
 8000652:	2408      	movs	r4, #8
 8000654:	193b      	adds	r3, r7, r4
 8000656:	0018      	movs	r0, r3
 8000658:	2303      	movs	r3, #3
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f007 fe25 	bl	80082ac <memset>
	HAL_StatusTypeDef status = HAL_OK;
 8000662:	230b      	movs	r3, #11
 8000664:	18fb      	adds	r3, r7, r3
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
	Adresses[0] = (Adress >> 16) & 0xFF;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	0c1b      	lsrs	r3, r3, #16
 800066e:	b25a      	sxtb	r2, r3
 8000670:	193b      	adds	r3, r7, r4
 8000672:	701a      	strb	r2, [r3, #0]
	Adresses[1] = (Adress >> 8) & 0xFF;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	0a1b      	lsrs	r3, r3, #8
 8000678:	b25a      	sxtb	r2, r3
 800067a:	193b      	adds	r3, r7, r4
 800067c:	705a      	strb	r2, [r3, #1]
	Adresses[2] = Adress & 0xFF;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	b25a      	sxtb	r2, r3
 8000682:	193b      	adds	r3, r7, r4
 8000684:	709a      	strb	r2, [r3, #2]
	Cs_Low;
 8000686:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <W25Q_Read_Fast+0xb0>)
 8000688:	2200      	movs	r2, #0
 800068a:	2101      	movs	r1, #1
 800068c:	0018      	movs	r0, r3
 800068e:	f003 fe56 	bl	800433e <HAL_GPIO_WritePin>
	W25qxx_Spi(W25Q_FAST_READ);
 8000692:	200b      	movs	r0, #11
 8000694:	f7ff febc 	bl	8000410 <W25qxx_Spi>
	for (int i = 0; i < 3; i++)
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	e00c      	b.n	80006b8 <W25Q_Read_Fast+0x74>
		W25qxx_Spi(Adresses[i]);
 800069e:	2308      	movs	r3, #8
 80006a0:	18fa      	adds	r2, r7, r3
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	18d3      	adds	r3, r2, r3
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	0018      	movs	r0, r3
 80006ae:	f7ff feaf 	bl	8000410 <W25qxx_Spi>
	for (int i = 0; i < 3; i++)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	3301      	adds	r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	ddef      	ble.n	800069e <W25Q_Read_Fast+0x5a>
	W25qxx_Spi(Dummy_Byte);
 80006be:	20a5      	movs	r0, #165	@ 0xa5
 80006c0:	f7ff fea6 	bl	8000410 <W25qxx_Spi>
	status = HAL_SPI_Receive(&W25Q_SPI, Buffer, 256, HAL_MAX_DELAY);
 80006c4:	250b      	movs	r5, #11
 80006c6:	197c      	adds	r4, r7, r5
 80006c8:	2301      	movs	r3, #1
 80006ca:	425b      	negs	r3, r3
 80006cc:	2280      	movs	r2, #128	@ 0x80
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	6839      	ldr	r1, [r7, #0]
 80006d2:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <W25Q_Read_Fast+0xb4>)
 80006d4:	f005 fce8 	bl	80060a8 <HAL_SPI_Receive>
 80006d8:	0003      	movs	r3, r0
 80006da:	7023      	strb	r3, [r4, #0]
	Cs_High;
 80006dc:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <W25Q_Read_Fast+0xb0>)
 80006de:	2201      	movs	r2, #1
 80006e0:	2101      	movs	r1, #1
 80006e2:	0018      	movs	r0, r3
 80006e4:	f003 fe2b 	bl	800433e <HAL_GPIO_WritePin>

	return status;
 80006e8:	197b      	adds	r3, r7, r5
 80006ea:	781b      	ldrb	r3, [r3, #0]
}
 80006ec:	0018      	movs	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b004      	add	sp, #16
 80006f2:	bdb0      	pop	{r4, r5, r7, pc}
 80006f4:	50000400 	.word	0x50000400
 80006f8:	200002c4 	.word	0x200002c4

080006fc <W25Q_Chip_Erase>:


void W25Q_Chip_Erase(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
	W25Q_Write_Enable();
 8000702:	f7ff fed1 	bl	80004a8 <W25Q_Write_Enable>
	uint8_t Tdata=W25Q_CHIP_ERASE;
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	22c7      	movs	r2, #199	@ 0xc7
 800070a:	701a      	strb	r2, [r3, #0]
	Cs_Low;
 800070c:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <W25Q_Chip_Erase+0x40>)
 800070e:	2200      	movs	r2, #0
 8000710:	2101      	movs	r1, #1
 8000712:	0018      	movs	r0, r3
 8000714:	f003 fe13 	bl	800433e <HAL_GPIO_WritePin>
	W25qxx_Spi(Tdata);
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff fe77 	bl	8000410 <W25qxx_Spi>
	Cs_High;
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <W25Q_Chip_Erase+0x40>)
 8000724:	2201      	movs	r2, #1
 8000726:	2101      	movs	r1, #1
 8000728:	0018      	movs	r0, r3
 800072a:	f003 fe08 	bl	800433e <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800072e:	f7ff fe87 	bl	8000440 <W25qxx_WaitForWriteEnd>


}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	50000400 	.word	0x50000400

08000740 <assemble_crc_from_packet>:
const uint32_t go_to_address = 0;
static uint8_t EXT_Flash_Buf[256]={'\0'};
static uint32_t EXT_Flash_Write_Start_Addr=0x00000000 ;


uint32_t assemble_crc_from_packet(const uint8_t *packet, uint32_t packet_len) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
    // CRC located in last 4 bytes of packet, LSB first
    return ( (uint32_t)packet[packet_len - 4]        ) |
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	3b04      	subs	r3, #4
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	18d3      	adds	r3, r2, r3
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	0019      	movs	r1, r3
           (((uint32_t)packet[packet_len - 3]) << 8 ) |
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	3b03      	subs	r3, #3
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	18d3      	adds	r3, r2, r3
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	021b      	lsls	r3, r3, #8
    return ( (uint32_t)packet[packet_len - 4]        ) |
 8000762:	000a      	movs	r2, r1
 8000764:	431a      	orrs	r2, r3
           (((uint32_t)packet[packet_len - 2]) << 16) |
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	3b02      	subs	r3, #2
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	18cb      	adds	r3, r1, r3
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	041b      	lsls	r3, r3, #16
           (((uint32_t)packet[packet_len - 3]) << 8 ) |
 8000772:	431a      	orrs	r2, r3
           (((uint32_t)packet[packet_len - 1]) << 24);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	3b01      	subs	r3, #1
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	18cb      	adds	r3, r1, r3
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	061b      	lsls	r3, r3, #24
           (((uint32_t)packet[packet_len - 2]) << 16) |
 8000780:	4313      	orrs	r3, r2
}
 8000782:	0018      	movs	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	b002      	add	sp, #8
 8000788:	bd80      	pop	{r7, pc}

0800078a <assemble_crc_from_fixed_position>:

uint32_t assemble_crc_from_fixed_position(const uint8_t *packet) {
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
    // CRC located at packet[2]..packet[5], LSB first
    return ( (uint32_t)packet[2]        ) |
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	3302      	adds	r3, #2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	001a      	movs	r2, r3
           (((uint32_t)packet[3]) << 8 ) |
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	3303      	adds	r3, #3
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	021b      	lsls	r3, r3, #8
    return ( (uint32_t)packet[2]        ) |
 80007a2:	431a      	orrs	r2, r3
           (((uint32_t)packet[4]) << 16) |
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3304      	adds	r3, #4
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	041b      	lsls	r3, r3, #16
           (((uint32_t)packet[3]) << 8 ) |
 80007ac:	431a      	orrs	r2, r3
           (((uint32_t)packet[5]) << 24);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	3305      	adds	r3, #5
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	061b      	lsls	r3, r3, #24
           (((uint32_t)packet[4]) << 16) |
 80007b6:	4313      	orrs	r3, r2
}
 80007b8:	0018      	movs	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b002      	add	sp, #8
 80007be:	bd80      	pop	{r7, pc}

080007c0 <bootloader_get_ver_cmd>:

void bootloader_get_ver_cmd(uint8_t *bl_rx_data) {
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t host_crc=0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]

	printMessage("Bootloaer_Get_Ver_Cmd");
 80007cc:	4b21      	ldr	r3, [pc, #132]	@ (8000854 <bootloader_get_ver_cmd+0x94>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f001 fada 	bl	8001d88 <printMessage>

	uint32_t command_packet_length = bl_rx_data[0] + 1;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	613b      	str	r3, [r7, #16]
	host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	0018      	movs	r0, r3
 80007e0:	f7ff ffd3 	bl	800078a <assemble_crc_from_fixed_position>
 80007e4:	0003      	movs	r3, r0
 80007e6:	617b      	str	r3, [r7, #20]

	// crc control
	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_length - 4, host_crc)) {
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	1f19      	subs	r1, r3, #4
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 fc47 	bl	8001084 <bootloader_verify_crc>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d122      	bne.n	8000840 <bootloader_get_ver_cmd+0x80>
		bootloader_send_ack(1);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 fcc6 	bl	800118c <bootloader_send_ack>
        uint8_t bl_Version[4] = {
 8000800:	240c      	movs	r4, #12
 8000802:	193b      	adds	r3, r7, r4
 8000804:	2218      	movs	r2, #24
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2266      	movs	r2, #102	@ 0x66
 800080c:	705a      	strb	r2, [r3, #1]
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2213      	movs	r2, #19
 8000812:	709a      	strb	r2, [r3, #2]
            TARGET_LORA_HIGH,
            TARGET_LORA_LOW,
            TARGET_LORA_CHANNEL,
            bootloader_get_version()
 8000814:	f000 fcf6 	bl	8001204 <bootloader_get_version>
 8000818:	0003      	movs	r3, r0
 800081a:	001a      	movs	r2, r3
        uint8_t bl_Version[4] = {
 800081c:	193b      	adds	r3, r7, r4
 800081e:	70da      	strb	r2, [r3, #3]
        };
		bootloader_uart_write_data(bl_Version, 4);
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2104      	movs	r1, #4
 8000824:	0018      	movs	r0, r3
 8000826:	f000 fc19 	bl	800105c <bootloader_uart_write_data>
		printMessage(" BL_VER : %d %#x  ", bl_Version[3], bl_Version[3]);
 800082a:	193b      	adds	r3, r7, r4
 800082c:	78db      	ldrb	r3, [r3, #3]
 800082e:	0019      	movs	r1, r3
 8000830:	193b      	adds	r3, r7, r4
 8000832:	78db      	ldrb	r3, [r3, #3]
 8000834:	001a      	movs	r2, r3
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <bootloader_get_ver_cmd+0x98>)
 8000838:	0018      	movs	r0, r3
 800083a:	f001 faa5 	bl	8001d88 <printMessage>

	} else {
		printMessage("Checksum fail ");
		bootloader_send_nack();
	}
}
 800083e:	e005      	b.n	800084c <bootloader_get_ver_cmd+0x8c>
		printMessage("Checksum fail ");
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <bootloader_get_ver_cmd+0x9c>)
 8000842:	0018      	movs	r0, r3
 8000844:	f001 faa0 	bl	8001d88 <printMessage>
		bootloader_send_nack();
 8000848:	f000 fcc4 	bl	80011d4 <bootloader_send_nack>
}
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b007      	add	sp, #28
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	08008bd0 	.word	0x08008bd0
 8000858:	08008be8 	.word	0x08008be8
 800085c:	08008bfc 	.word	0x08008bfc

08000860 <bootloader_get_help_cmd>:

void bootloader_get_help_cmd(uint8_t *bl_rx_data) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	printMessage("bootloader_get_help_cmd");
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <bootloader_get_help_cmd+0x78>)
 800086a:	0018      	movs	r0, r3
 800086c:	f001 fa8c 	bl	8001d88 <printMessage>
	uint32_t host_crc = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	3301      	adds	r3, #1
 800087a:	60bb      	str	r3, [r7, #8]


	host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	0018      	movs	r0, r3
 8000880:	f7ff ff83 	bl	800078a <assemble_crc_from_fixed_position>
 8000884:	0003      	movs	r3, r0
 8000886:	60fb      	str	r3, [r7, #12]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	1f19      	subs	r1, r3, #4
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	0018      	movs	r0, r3
 8000892:	f000 fbf7 	bl	8001084 <bootloader_verify_crc>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d113      	bne.n	80008c2 <bootloader_get_help_cmd+0x62>

		bootloader_send_ack(strlen((const char *)supported_commands));
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <bootloader_get_help_cmd+0x7c>)
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff fc2f 	bl	8000100 <strlen>
 80008a2:	0003      	movs	r3, r0
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fc70 	bl	800118c <bootloader_send_ack>

		bootloader_uart_write_data(supported_commands, strlen((const char *)supported_commands));
 80008ac:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <bootloader_get_help_cmd+0x7c>)
 80008ae:	0018      	movs	r0, r3
 80008b0:	f7ff fc26 	bl	8000100 <strlen>
 80008b4:	0002      	movs	r2, r0
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <bootloader_get_help_cmd+0x7c>)
 80008b8:	0011      	movs	r1, r2
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 fbce 	bl	800105c <bootloader_uart_write_data>
	} else {
		printMessage("Checksum fail");
		bootloader_send_nack();
	}
}
 80008c0:	e005      	b.n	80008ce <bootloader_get_help_cmd+0x6e>
		printMessage("Checksum fail");
 80008c2:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <bootloader_get_help_cmd+0x80>)
 80008c4:	0018      	movs	r0, r3
 80008c6:	f001 fa5f 	bl	8001d88 <printMessage>
		bootloader_send_nack();
 80008ca:	f000 fc83 	bl	80011d4 <bootloader_send_nack>
}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b004      	add	sp, #16
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	08008c0c 	.word	0x08008c0c
 80008dc:	20000008 	.word	0x20000008
 80008e0:	08008c24 	.word	0x08008c24

080008e4 <bootloader_get_cid_cmd>:

void bootloader_get_cid_cmd(uint8_t *bl_rx_data) {
 80008e4:	b5b0      	push	{r4, r5, r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	uint32_t host_crc = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
	uint16_t val=0;
 80008f0:	241a      	movs	r4, #26
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2200      	movs	r2, #0
 80008f6:	801a      	strh	r2, [r3, #0]

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
	host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	0018      	movs	r0, r3
 8000904:	f7ff ff41 	bl	800078a <assemble_crc_from_fixed_position>
 8000908:	0003      	movs	r3, r0
 800090a:	61fb      	str	r3, [r7, #28]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4,
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	1f19      	subs	r1, r3, #4
 8000910:	69fa      	ldr	r2, [r7, #28]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	0018      	movs	r0, r3
 8000916:	f000 fbb5 	bl	8001084 <bootloader_verify_crc>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d12f      	bne.n	800097e <bootloader_get_cid_cmd+0x9a>
			host_crc)) {
		bootloader_send_ack(2);
 800091e:	2002      	movs	r0, #2
 8000920:	f000 fc34 	bl	800118c <bootloader_send_ack>
		val = get_mcu_chip_id();
 8000924:	0025      	movs	r5, r4
 8000926:	193c      	adds	r4, r7, r4
 8000928:	f000 fc72 	bl	8001210 <get_mcu_chip_id>
 800092c:	0003      	movs	r3, r0
 800092e:	8023      	strh	r3, [r4, #0]

        uint8_t cID[5] = {
 8000930:	210c      	movs	r1, #12
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2218      	movs	r2, #24
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2266      	movs	r2, #102	@ 0x66
 800093c:	705a      	strb	r2, [r3, #1]
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2213      	movs	r2, #19
 8000942:	709a      	strb	r2, [r3, #2]
 8000944:	197b      	adds	r3, r7, r5
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	b2da      	uxtb	r2, r3
 800094a:	187b      	adds	r3, r7, r1
 800094c:	70da      	strb	r2, [r3, #3]
 800094e:	197b      	adds	r3, r7, r5
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	0a1b      	lsrs	r3, r3, #8
 8000954:	b29b      	uxth	r3, r3
 8000956:	b2da      	uxtb	r2, r3
 8000958:	000c      	movs	r4, r1
 800095a:	193b      	adds	r3, r7, r4
 800095c:	711a      	strb	r2, [r3, #4]
            TARGET_LORA_LOW,
            TARGET_LORA_CHANNEL,
			val & 0xFF, //High 8bit
            (val >> 8) & 0xFF
        };
		printMessage("Chip Id: %#x ", cID[3], cID[3]);
 800095e:	193b      	adds	r3, r7, r4
 8000960:	78db      	ldrb	r3, [r3, #3]
 8000962:	0019      	movs	r1, r3
 8000964:	193b      	adds	r3, r7, r4
 8000966:	78db      	ldrb	r3, [r3, #3]
 8000968:	001a      	movs	r2, r3
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <bootloader_get_cid_cmd+0xb0>)
 800096c:	0018      	movs	r0, r3
 800096e:	f001 fa0b 	bl	8001d88 <printMessage>
		bootloader_uart_write_data(cID, 5);
 8000972:	193b      	adds	r3, r7, r4
 8000974:	2105      	movs	r1, #5
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fb70 	bl	800105c <bootloader_uart_write_data>
	} else {
		printMessage("Checksum fail ");
		bootloader_send_nack();
	}
}
 800097c:	e005      	b.n	800098a <bootloader_get_cid_cmd+0xa6>
		printMessage("Checksum fail ");
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <bootloader_get_cid_cmd+0xb4>)
 8000980:	0018      	movs	r0, r3
 8000982:	f001 fa01 	bl	8001d88 <printMessage>
		bootloader_send_nack();
 8000986:	f000 fc25 	bl	80011d4 <bootloader_send_nack>
}
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b008      	add	sp, #32
 8000990:	bdb0      	pop	{r4, r5, r7, pc}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	08008c34 	.word	0x08008c34
 8000998:	08008bfc 	.word	0x08008bfc

0800099c <bootloader_go_to_addr_cmd>:

void bootloader_go_to_addr_cmd(uint8_t *bl_rx_data) {
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b08b      	sub	sp, #44	@ 0x2c
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	printMessage("bootlodaer_go_to_addr_cmd ");
 80009a4:	4b47      	ldr	r3, [pc, #284]	@ (8000ac4 <bootloader_go_to_addr_cmd+0x128>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f001 f9ee 	bl	8001d88 <printMessage>
	uint8_t addr_valid[4]={TARGET_LORA_HIGH, TARGET_LORA_LOW, TARGET_LORA_CHANNEL, ADDR_VALID};
 80009ac:	2410      	movs	r4, #16
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	4a45      	ldr	r2, [pc, #276]	@ (8000ac8 <bootloader_go_to_addr_cmd+0x12c>)
 80009b2:	601a      	str	r2, [r3, #0]
	uint8_t addr_invalid[4]={TARGET_LORA_HIGH, TARGET_LORA_LOW, TARGET_LORA_CHANNEL, ADDR_INVALID};
 80009b4:	230c      	movs	r3, #12
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	4a44      	ldr	r2, [pc, #272]	@ (8000acc <bootloader_go_to_addr_cmd+0x130>)
 80009ba:	601a      	str	r2, [r3, #0]

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t host_crc = assemble_crc_from_packet(bl_rx_data, command_packet_len);
 80009c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	0011      	movs	r1, r2
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff feb8 	bl	8000740 <assemble_crc_from_packet>
 80009d0:	0003      	movs	r3, r0
 80009d2:	623b      	str	r3, [r7, #32]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 80009d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d6:	1f19      	subs	r1, r3, #4
 80009d8:	6a3a      	ldr	r2, [r7, #32]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 fb51 	bl	8001084 <bootloader_verify_crc>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d164      	bne.n	8000ab0 <bootloader_go_to_addr_cmd+0x114>
		bootloader_send_ack(1);
 80009e6:	2001      	movs	r0, #1
 80009e8:	f000 fbd0 	bl	800118c <bootloader_send_ack>

		uint32_t go_to_address =
			  ((uint32_t)bl_rx_data[2])
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3302      	adds	r3, #2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	001a      	movs	r2, r3
			| ((uint32_t)bl_rx_data[3] << 8)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3303      	adds	r3, #3
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	431a      	orrs	r2, r3
			| ((uint32_t)bl_rx_data[4] << 16)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3304      	adds	r3, #4
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	041b      	lsls	r3, r3, #16
 8000a06:	431a      	orrs	r2, r3
			| ((uint32_t)bl_rx_data[5] << 24);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3305      	adds	r3, #5
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	061b      	lsls	r3, r3, #24
		uint32_t go_to_address =
 8000a10:	4313      	orrs	r3, r2
 8000a12:	61fb      	str	r3, [r7, #28]

		if (bootloader_verify_address(go_to_address) == ADDR_VALID) {
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fc20 	bl	800125c <bootloader_verify_address>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d13c      	bne.n	8000a9a <bootloader_go_to_addr_cmd+0xfe>
			bootloader_uart_write_data(addr_valid, sizeof(addr_valid));
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2104      	movs	r1, #4
 8000a24:	0018      	movs	r0, r3
 8000a26:	f000 fb19 	bl	800105c <bootloader_uart_write_data>
			printMessage("Going to Address ");
 8000a2a:	4b29      	ldr	r3, [pc, #164]	@ (8000ad0 <bootloader_go_to_addr_cmd+0x134>)
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 f9ab 	bl	8001d88 <printMessage>

			/*JUMP öncesi herşey temizleniyor*/
			SCB->VTOR = go_to_address;
 8000a32:	4b28      	ldr	r3, [pc, #160]	@ (8000ad4 <bootloader_go_to_addr_cmd+0x138>)
 8000a34:	69fa      	ldr	r2, [r7, #28]
 8000a36:	609a      	str	r2, [r3, #8]
			//__set_MSP(mspValue);	// Bu fonksiyon F407 De calisiyordu ama L053 de çalışmıyor
			SysTick->CTRL = 0;
 8000a38:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <bootloader_go_to_addr_cmd+0x13c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
			SysTick->LOAD = 0;
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <bootloader_go_to_addr_cmd+0x13c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
			SysTick->VAL = 0;
 8000a44:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <bootloader_go_to_addr_cmd+0x13c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
			HAL_I2C_DeInit(&hi2c1);
 8000a4a:	4b24      	ldr	r3, [pc, #144]	@ (8000adc <bootloader_go_to_addr_cmd+0x140>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f003 fd39 	bl	80044c4 <HAL_I2C_DeInit>
			HAL_UART_MspDeInit(&huart2);
 8000a52:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <bootloader_go_to_addr_cmd+0x144>)
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 ff27 	bl	80028a8 <HAL_UART_MspDeInit>
			HAL_UART_MspDeInit(&huart3);
 8000a5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <bootloader_go_to_addr_cmd+0x148>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 ff23 	bl	80028a8 <HAL_UART_MspDeInit>
			HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 8000a62:	2380      	movs	r3, #128	@ 0x80
 8000a64:	019b      	lsls	r3, r3, #6
 8000a66:	4a20      	ldr	r2, [pc, #128]	@ (8000ae8 <bootloader_go_to_addr_cmd+0x14c>)
 8000a68:	0019      	movs	r1, r3
 8000a6a:	0010      	movs	r0, r2
 8000a6c:	f003 fb7a 	bl	8004164 <HAL_GPIO_DeInit>
			HAL_DMA_DeInit(&hdma_usart3_rx);
 8000a70:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <bootloader_go_to_addr_cmd+0x150>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f002 fc82 	bl	800337c <HAL_DMA_DeInit>
			HAL_CRC_DeInit(&hcrc);
 8000a78:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <bootloader_go_to_addr_cmd+0x154>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f002 fa40 	bl	8002f00 <HAL_CRC_DeInit>
			HAL_RCC_DeInit();
 8000a80:	f004 fa90 	bl	8004fa4 <HAL_RCC_DeInit>
			HAL_DeInit();
 8000a84:	f002 f810 	bl	8002aa8 <HAL_DeInit>

			uint32_t jump_address = *((volatile uint32_t*) (go_to_address + 4));
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	61bb      	str	r3, [r7, #24]
			void (*jump_to_app)(void) = (void *)jump_address;
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	617b      	str	r3, [r7, #20]
			jump_to_app();
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	4798      	blx	r3
		}
	} else {
		printMessage("Checksum fail ");
		bootloader_send_nack();
	}
}
 8000a98:	e010      	b.n	8000abc <bootloader_go_to_addr_cmd+0x120>
			printMessage("Go Address Invalid ");
 8000a9a:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <bootloader_go_to_addr_cmd+0x158>)
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f001 f973 	bl	8001d88 <printMessage>
			bootloader_uart_write_data(addr_invalid, 4);
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 fad7 	bl	800105c <bootloader_uart_write_data>
}
 8000aae:	e005      	b.n	8000abc <bootloader_go_to_addr_cmd+0x120>
		printMessage("Checksum fail ");
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <bootloader_go_to_addr_cmd+0x15c>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f001 f968 	bl	8001d88 <printMessage>
		bootloader_send_nack();
 8000ab8:	f000 fb8c 	bl	80011d4 <bootloader_send_nack>
}
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b00b      	add	sp, #44	@ 0x2c
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	08008c44 	.word	0x08008c44
 8000ac8:	00136618 	.word	0x00136618
 8000acc:	01136618 	.word	0x01136618
 8000ad0:	08008c60 	.word	0x08008c60
 8000ad4:	e000ed00 	.word	0xe000ed00
 8000ad8:	e000e010 	.word	0xe000e010
 8000adc:	20000270 	.word	0x20000270
 8000ae0:	20000328 	.word	0x20000328
 8000ae4:	200003bc 	.word	0x200003bc
 8000ae8:	50000800 	.word	0x50000800
 8000aec:	20000450 	.word	0x20000450
 8000af0:	2000024c 	.word	0x2000024c
 8000af4:	08008c74 	.word	0x08008c74
 8000af8:	08008bfc 	.word	0x08008bfc

08000afc <bootloader_flash_erase_cmd>:

void bootloader_flash_erase_cmd(uint8_t *bl_rx_data) {
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	printMessage("bootloader_flash_erase_cmd ");
 8000b04:	4b27      	ldr	r3, [pc, #156]	@ (8000ba4 <bootloader_flash_erase_cmd+0xa8>)
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 f93e 	bl	8001d88 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = assemble_crc_from_packet(bl_rx_data, command_packet_len);
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	0011      	movs	r1, r2
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f7ff fe10 	bl	8000740 <assemble_crc_from_packet>
 8000b20:	0003      	movs	r3, r0
 8000b22:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	1f19      	subs	r1, r3, #4
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f000 faa9 	bl	8001084 <bootloader_verify_crc>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d12c      	bne.n	8000b90 <bootloader_flash_erase_cmd+0x94>
		bootloader_send_ack(1);
 8000b36:	2001      	movs	r0, #1
 8000b38:	f000 fb28 	bl	800118c <bootloader_send_ack>
		printMessage("Initial Sector: %d Number Of Sectors: %d ", bl_rx_data[2], bl_rx_data[3]);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3302      	adds	r3, #2
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	0019      	movs	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3303      	adds	r3, #3
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	001a      	movs	r2, r3
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <bootloader_flash_erase_cmd+0xac>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f001 f91a 	bl	8001d88 <printMessage>

        uint8_t eraseStatus[4] = {
 8000b54:	240c      	movs	r4, #12
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	2218      	movs	r2, #24
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	2266      	movs	r2, #102	@ 0x66
 8000b60:	705a      	strb	r2, [r3, #1]
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	2213      	movs	r2, #19
 8000b66:	709a      	strb	r2, [r3, #2]
            TARGET_LORA_HIGH,
            TARGET_LORA_LOW,
            TARGET_LORA_CHANNEL,
			execute_flash_erase(bl_rx_data[2], bl_rx_data[3])
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3303      	adds	r3, #3
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	0019      	movs	r1, r3
 8000b76:	0010      	movs	r0, r2
 8000b78:	f000 fb86 	bl	8001288 <execute_flash_erase>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	001a      	movs	r2, r3
        uint8_t eraseStatus[4] = {
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	70da      	strb	r2, [r3, #3]
        };
		bootloader_uart_write_data(eraseStatus, 4);
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2104      	movs	r1, #4
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 fa67 	bl	800105c <bootloader_uart_write_data>
	}
	else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}
}
 8000b8e:	e005      	b.n	8000b9c <bootloader_flash_erase_cmd+0xa0>
		printMessage(" Checksum fail ");
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <bootloader_flash_erase_cmd+0xb0>)
 8000b92:	0018      	movs	r0, r3
 8000b94:	f001 f8f8 	bl	8001d88 <printMessage>
		bootloader_send_nack();
 8000b98:	f000 fb1c 	bl	80011d4 <bootloader_send_nack>
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b007      	add	sp, #28
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	08008c88 	.word	0x08008c88
 8000ba8:	08008ca4 	.word	0x08008ca4
 8000bac:	08008cd0 	.word	0x08008cd0

08000bb0 <bootloader_mem_write_cmd>:

void bootloader_mem_write_cmd(uint8_t *bl_rx_data) {
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	printMessage(" bootloader_mem_write_cmd ");
 8000bb8:	4b3c      	ldr	r3, [pc, #240]	@ (8000cac <bootloader_mem_write_cmd+0xfc>)
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 f8e4 	bl	8001d88 <printMessage>
	uint8_t payloadLength = bl_rx_data[6];
 8000bc0:	251f      	movs	r5, #31
 8000bc2:	197b      	adds	r3, r7, r5
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	7992      	ldrb	r2, [r2, #6]
 8000bc8:	701a      	strb	r2, [r3, #0]

	uint32_t memAddress =
		  ((uint32_t)bl_rx_data[2])
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3302      	adds	r3, #2
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	001a      	movs	r2, r3
		| ((uint32_t)bl_rx_data[3] << 8)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3303      	adds	r3, #3
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	431a      	orrs	r2, r3
		| ((uint32_t)bl_rx_data[4] << 16)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3304      	adds	r3, #4
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	041b      	lsls	r3, r3, #16
 8000be4:	431a      	orrs	r2, r3
		| ((uint32_t)bl_rx_data[5] << 24);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3305      	adds	r3, #5
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	061b      	lsls	r3, r3, #24
	uint32_t memAddress =
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = assemble_crc_from_packet(bl_rx_data, command_packet_len);
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff fd9d 	bl	8000740 <assemble_crc_from_packet>
 8000c06:	0003      	movs	r3, r0
 8000c08:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	1f19      	subs	r1, r3, #4
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 fa36 	bl	8001084 <bootloader_verify_crc>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d13c      	bne.n	8000c96 <bootloader_mem_write_cmd+0xe6>
		bootloader_send_ack(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f000 fab5 	bl	800118c <bootloader_send_ack>
		printMessage(" Memory Write Address: %#x ", memAddress);
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <bootloader_mem_write_cmd+0x100>)
 8000c26:	0011      	movs	r1, r2
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f001 f8ad 	bl	8001d88 <printMessage>

		if (bootloader_verify_address(memAddress) == ADDR_VALID) {
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	0018      	movs	r0, r3
 8000c32:	f000 fb13 	bl	800125c <bootloader_verify_address>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d11f      	bne.n	8000c7a <bootloader_mem_write_cmd+0xca>
			printMessage(" Valid Memory Write Address ");
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb4 <bootloader_mem_write_cmd+0x104>)
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f001 f8a3 	bl	8001d88 <printMessage>

			uint8_t writeStatus[4] = {
 8000c42:	240c      	movs	r4, #12
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	2218      	movs	r2, #24
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	2266      	movs	r2, #102	@ 0x66
 8000c4e:	705a      	strb	r2, [r3, #1]
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	2213      	movs	r2, #19
 8000c54:	709a      	strb	r2, [r3, #2]
				TARGET_LORA_HIGH,
				TARGET_LORA_LOW,
				TARGET_LORA_CHANNEL,
				execute_memory_write(&bl_rx_data[7], memAddress, payloadLength)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	1dd8      	adds	r0, r3, #7
 8000c5a:	197b      	adds	r3, r7, r5
 8000c5c:	781a      	ldrb	r2, [r3, #0]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	0019      	movs	r1, r3
 8000c62:	f000 fb81 	bl	8001368 <execute_memory_write>
 8000c66:	0003      	movs	r3, r0
 8000c68:	001a      	movs	r2, r3
			uint8_t writeStatus[4] = {
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	70da      	strb	r2, [r3, #3]
			};
			bootloader_uart_write_data(writeStatus, 4);
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2104      	movs	r1, #4
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 f9f2 	bl	800105c <bootloader_uart_write_data>
		}
	} else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}
}
 8000c78:	e013      	b.n	8000ca2 <bootloader_mem_write_cmd+0xf2>
			printMessage(" Invalid Memory Write Address ");
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <bootloader_mem_write_cmd+0x108>)
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f001 f883 	bl	8001d88 <printMessage>
			uint8_t writeStatus[4] = {
 8000c82:	2108      	movs	r1, #8
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	4a0d      	ldr	r2, [pc, #52]	@ (8000cbc <bootloader_mem_write_cmd+0x10c>)
 8000c88:	601a      	str	r2, [r3, #0]
			bootloader_uart_write_data(writeStatus, 4);
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 f9e4 	bl	800105c <bootloader_uart_write_data>
}
 8000c94:	e005      	b.n	8000ca2 <bootloader_mem_write_cmd+0xf2>
		printMessage(" Checksum fail ");
 8000c96:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <bootloader_mem_write_cmd+0x110>)
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f001 f875 	bl	8001d88 <printMessage>
		bootloader_send_nack();
 8000c9e:	f000 fa99 	bl	80011d4 <bootloader_send_nack>
}
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b008      	add	sp, #32
 8000ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	08008ce0 	.word	0x08008ce0
 8000cb0:	08008cfc 	.word	0x08008cfc
 8000cb4:	08008d18 	.word	0x08008d18
 8000cb8:	08008d38 	.word	0x08008d38
 8000cbc:	01136618 	.word	0x01136618
 8000cc0:	08008cd0 	.word	0x08008cd0

08000cc4 <bootloader_enable_read_write_protect_cmd>:

void bootloader_enable_read_write_protect_cmd(uint8_t *bl_rx_data) {
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8000ccc:	240f      	movs	r4, #15
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
	uint32_t host_crc = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
	printMessage(" bootloader_enable_read_write_protect_cmd ");
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d58 <bootloader_enable_read_write_protect_cmd+0x94>)
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f001 f854 	bl	8001d88 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]

	host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	0018      	movs	r0, r3
 8000cec:	f7ff fd4d 	bl	800078a <assemble_crc_from_fixed_position>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	617b      	str	r3, [r7, #20]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	1f19      	subs	r1, r3, #4
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f000 f9c1 	bl	8001084 <bootloader_verify_crc>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d11e      	bne.n	8000d44 <bootloader_enable_read_write_protect_cmd+0x80>
		bootloader_send_ack(1);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f000 fa40 	bl	800118c <bootloader_send_ack>
		status = configure_flash_sector_r_w_protection(bl_rx_data[2], bl_rx_data[3], 0);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3302      	adds	r3, #2
 8000d10:	7818      	ldrb	r0, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3303      	adds	r3, #3
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	0019      	movs	r1, r3
 8000d1c:	f000 fc98 	bl	8001650 <configure_flash_sector_r_w_protection>
 8000d20:	0003      	movs	r3, r0
 8000d22:	001a      	movs	r2, r3
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	701a      	strb	r2, [r3, #0]

		printMessage(" Status: %d", status);
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <bootloader_enable_read_write_protect_cmd+0x98>)
 8000d30:	0011      	movs	r1, r2
 8000d32:	0018      	movs	r0, r3
 8000d34:	f001 f828 	bl	8001d88 <printMessage>
		bootloader_uart_write_data(&status, 1);
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f000 f98d 	bl	800105c <bootloader_uart_write_data>
	} else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}
}
 8000d42:	e005      	b.n	8000d50 <bootloader_enable_read_write_protect_cmd+0x8c>
		printMessage(" Checksum fail ");
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <bootloader_enable_read_write_protect_cmd+0x9c>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f001 f81e 	bl	8001d88 <printMessage>
		bootloader_send_nack();
 8000d4c:	f000 fa42 	bl	80011d4 <bootloader_send_nack>
}
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b007      	add	sp, #28
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	08008d58 	.word	0x08008d58
 8000d5c:	08008d84 	.word	0x08008d84
 8000d60:	08008cd0 	.word	0x08008cd0

08000d64 <bootloader_go_to_bootloader_cmd>:

void bootloader_go_to_bootloader_cmd(uint8_t *bl_rx_data)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	uint8_t BL_Lora[4]={TARGET_LORA_HIGH, TARGET_LORA_LOW, TARGET_LORA_CHANNEL, BL_BOOTLOADER_ACTIVE};
 8000d6c:	240c      	movs	r4, #12
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	4a16      	ldr	r2, [pc, #88]	@ (8000dcc <bootloader_go_to_bootloader_cmd+0x68>)
 8000d72:	601a      	str	r2, [r3, #0]

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = assemble_crc_from_packet(bl_rx_data, command_packet_len);
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	0011      	movs	r1, r2
 8000d82:	0018      	movs	r0, r3
 8000d84:	f7ff fcdc 	bl	8000740 <assemble_crc_from_packet>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	1f19      	subs	r1, r3, #4
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 f975 	bl	8001084 <bootloader_verify_crc>
 8000d9a:	1e03      	subs	r3, r0, #0
 8000d9c:	d10c      	bne.n	8000db8 <bootloader_go_to_bootloader_cmd+0x54>
		bootloader_send_ack(1);
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f000 f9f4 	bl	800118c <bootloader_send_ack>
		printMessage(" Bootloader already running  ");
 8000da4:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <bootloader_go_to_bootloader_cmd+0x6c>)
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 ffee 	bl	8001d88 <printMessage>

		bootloader_uart_write_data(BL_Lora, 4);
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	2104      	movs	r1, #4
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 f953 	bl	800105c <bootloader_uart_write_data>
		}
	else {
			printMessage("Checksum fail ");
			bootloader_send_nack();
		}
}
 8000db6:	e005      	b.n	8000dc4 <bootloader_go_to_bootloader_cmd+0x60>
			printMessage("Checksum fail ");
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <bootloader_go_to_bootloader_cmd+0x70>)
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f000 ffe4 	bl	8001d88 <printMessage>
			bootloader_send_nack();
 8000dc0:	f000 fa08 	bl	80011d4 <bootloader_send_nack>
}
 8000dc4:	46c0      	nop			@ (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b007      	add	sp, #28
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	20136618 	.word	0x20136618
 8000dd0:	08008d90 	.word	0x08008d90
 8000dd4:	08008bfc 	.word	0x08008bfc

08000dd8 <bootloader_ext_mem_to_mem_write_cmd>:

void bootloader_ext_mem_to_mem_write_cmd(uint8_t *bl_rx_data)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	printMessage("bootloader_ext_to_mem_cmd");
 8000de0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e90 <bootloader_ext_mem_to_mem_write_cmd+0xb8>)
 8000de2:	0018      	movs	r0, r3
 8000de4:	f000 ffd0 	bl	8001d88 <printMessage>
	uint32_t command_packet_length = bl_rx_data[0] + 1;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	0018      	movs	r0, r3
 8000df4:	f7ff fcc9 	bl	800078a <assemble_crc_from_fixed_position>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_length - 4,
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	1f19      	subs	r1, r3, #4
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	0018      	movs	r0, r3
 8000e06:	f000 f93d 	bl	8001084 <bootloader_verify_crc>
 8000e0a:	1e03      	subs	r3, r0, #0
 8000e0c:	d136      	bne.n	8000e7c <bootloader_ext_mem_to_mem_write_cmd+0xa4>
			host_crc)) {
		bootloader_send_ack(1);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f000 f9bc 	bl	800118c <bootloader_send_ack>
		printMessage("MEM_WRITE_WORKING ");
 8000e14:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <bootloader_ext_mem_to_mem_write_cmd+0xbc>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 ffb6 	bl	8001d88 <printMessage>

		uint8_t bl_Version[4]= {
 8000e1c:	210c      	movs	r1, #12
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	4a1d      	ldr	r2, [pc, #116]	@ (8000e98 <bootloader_ext_mem_to_mem_write_cmd+0xc0>)
 8000e22:	601a      	str	r2, [r3, #0]
			TARGET_LORA_LOW,
			TARGET_LORA_CHANNEL,
			0x20	// BL_EXT_MEM_TO_MEM_WRITE 	working
		};

		bootloader_uart_write_data(bl_Version, 4);
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2104      	movs	r1, #4
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 f917 	bl	800105c <bootloader_uart_write_data>

		EXT_Flash_Write_Start_Addr = 0x000000;
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e9c <bootloader_ext_mem_to_mem_write_cmd+0xc4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
		while (EXT_Flash_Buf[0] != 0xFF) {
 8000e34:	e017      	b.n	8000e66 <bootloader_ext_mem_to_mem_write_cmd+0x8e>
			memset(EXT_Flash_Buf, '\0', 256);
 8000e36:	2380      	movs	r3, #128	@ 0x80
 8000e38:	005a      	lsls	r2, r3, #1
 8000e3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <bootloader_ext_mem_to_mem_write_cmd+0xc8>)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f007 fa34 	bl	80082ac <memset>
			W25Q_Read_Fast(EXT_Flash_Write_Start_Addr, EXT_Flash_Buf);
 8000e44:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <bootloader_ext_mem_to_mem_write_cmd+0xc4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a15      	ldr	r2, [pc, #84]	@ (8000ea0 <bootloader_ext_mem_to_mem_write_cmd+0xc8>)
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fbf9 	bl	8000644 <W25Q_Read_Fast>
			bootloader_mem_write_cmd(EXT_Flash_Buf);
 8000e52:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <bootloader_ext_mem_to_mem_write_cmd+0xc8>)
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff feab 	bl	8000bb0 <bootloader_mem_write_cmd>

			// Yazılacak page öteleniyor
			EXT_Flash_Write_Start_Addr += 256;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <bootloader_ext_mem_to_mem_write_cmd+0xc4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	32ff      	adds	r2, #255	@ 0xff
 8000e62:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <bootloader_ext_mem_to_mem_write_cmd+0xc4>)
 8000e64:	601a      	str	r2, [r3, #0]
		while (EXT_Flash_Buf[0] != 0xFF) {
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <bootloader_ext_mem_to_mem_write_cmd+0xc8>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2bff      	cmp	r3, #255	@ 0xff
 8000e6c:	d1e3      	bne.n	8000e36 <bootloader_ext_mem_to_mem_write_cmd+0x5e>
		}
		printMessage("MEM_WRITE_DONE ");
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <bootloader_ext_mem_to_mem_write_cmd+0xcc>)
 8000e70:	0018      	movs	r0, r3
 8000e72:	f000 ff89 	bl	8001d88 <printMessage>
		W25Q_Chip_Erase();
 8000e76:	f7ff fc41 	bl	80006fc <W25Q_Chip_Erase>
	} else {
		printMessage("Checksum fail ");
		bootloader_send_nack();
	}

}
 8000e7a:	e005      	b.n	8000e88 <bootloader_ext_mem_to_mem_write_cmd+0xb0>
		printMessage("Checksum fail ");
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <bootloader_ext_mem_to_mem_write_cmd+0xd0>)
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 ff82 	bl	8001d88 <printMessage>
		bootloader_send_nack();
 8000e84:	f000 f9a6 	bl	80011d4 <bootloader_send_nack>
}
 8000e88:	46c0      	nop			@ (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b006      	add	sp, #24
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	08008db0 	.word	0x08008db0
 8000e94:	08008dcc 	.word	0x08008dcc
 8000e98:	20136618 	.word	0x20136618
 8000e9c:	20000248 	.word	0x20000248
 8000ea0:	20000148 	.word	0x20000148
 8000ea4:	08008de0 	.word	0x08008de0
 8000ea8:	08008bfc 	.word	0x08008bfc

08000eac <bootloader_ext_mem_write_cmd>:

void bootloader_ext_mem_write_cmd(uint8_t *bl_rx_data)
{
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	printMessage(" bootloader_mem_write_cmd ");
 8000eb4:	4b40      	ldr	r3, [pc, #256]	@ (8000fb8 <bootloader_ext_mem_write_cmd+0x10c>)
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f000 ff66 	bl	8001d88 <printMessage>

	uint8_t payloadLength = bl_rx_data[6];
 8000ebc:	251f      	movs	r5, #31
 8000ebe:	197b      	adds	r3, r7, r5
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	7992      	ldrb	r2, [r2, #6]
 8000ec4:	701a      	strb	r2, [r3, #0]

	uint32_t memAddress =
		  ((uint32_t)bl_rx_data[2])
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3302      	adds	r3, #2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	001a      	movs	r2, r3
		| ((uint32_t)bl_rx_data[3] << 8)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3303      	adds	r3, #3
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	431a      	orrs	r2, r3
		| ((uint32_t)bl_rx_data[4] << 16)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3304      	adds	r3, #4
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	431a      	orrs	r2, r3
		| ((uint32_t)bl_rx_data[5] << 24);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3305      	adds	r3, #5
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	061b      	lsls	r3, r3, #24
	uint32_t memAddress =
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]

	uint32_t host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff fc46 	bl	800078a <assemble_crc_from_fixed_position>
 8000efe:	0003      	movs	r3, r0
 8000f00:	613b      	str	r3, [r7, #16]
	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4,host_crc)) {
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	1f19      	subs	r1, r3, #4
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f000 f8ba 	bl	8001084 <bootloader_verify_crc>
 8000f10:	1e03      	subs	r3, r0, #0
 8000f12:	d146      	bne.n	8000fa2 <bootloader_ext_mem_write_cmd+0xf6>
		printMessage(" Memory Write Address: %#x ", memAddress);
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4b29      	ldr	r3, [pc, #164]	@ (8000fbc <bootloader_ext_mem_write_cmd+0x110>)
 8000f18:	0011      	movs	r1, r2
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f000 ff34 	bl	8001d88 <printMessage>
		bootloader_send_ack(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f000 f933 	bl	800118c <bootloader_send_ack>
		memset(EXT_Flash_Buf, '\0', 256);
 8000f26:	2380      	movs	r3, #128	@ 0x80
 8000f28:	005a      	lsls	r2, r3, #1
 8000f2a:	4b25      	ldr	r3, [pc, #148]	@ (8000fc0 <bootloader_ext_mem_write_cmd+0x114>)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f007 f9bc 	bl	80082ac <memset>
		if (bootloader_verify_address(memAddress) == ADDR_VALID) {
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	0018      	movs	r0, r3
 8000f38:	f000 f990 	bl	800125c <bootloader_verify_address>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d122      	bne.n	8000f86 <bootloader_ext_mem_write_cmd+0xda>
			W25Q_Write_Enable();
 8000f40:	f7ff fab2 	bl	80004a8 <W25Q_Write_Enable>

			uint8_t writeStatus[4] = {
 8000f44:	240c      	movs	r4, #12
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	2218      	movs	r2, #24
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	2266      	movs	r2, #102	@ 0x66
 8000f50:	705a      	strb	r2, [r3, #1]
 8000f52:	193b      	adds	r3, r7, r4
 8000f54:	2213      	movs	r2, #19
 8000f56:	709a      	strb	r2, [r3, #2]
				TARGET_LORA_HIGH,
				TARGET_LORA_LOW,
				TARGET_LORA_CHANNEL,
				execute_ext_mem_write(bl_rx_data, payloadLength)
 8000f58:	197b      	adds	r3, r7, r5
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f000 fb5b 	bl	800161c <execute_ext_mem_write>
 8000f66:	0003      	movs	r3, r0
 8000f68:	001a      	movs	r2, r3
			uint8_t writeStatus[4] = {
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	70da      	strb	r2, [r3, #3]
			};
			W25Q_Write_Disable();
 8000f6e:	f7ff fab1 	bl	80004d4 <W25Q_Write_Disable>
			bootloader_uart_write_data(writeStatus, 4);
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	2104      	movs	r1, #4
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 f870 	bl	800105c <bootloader_uart_write_data>
			SSD1306_GotoXY(0, 32);
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f001 f91c 	bl	80021bc <SSD1306_GotoXY>
		}
	} else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}
}
 8000f84:	e013      	b.n	8000fae <bootloader_ext_mem_write_cmd+0x102>
			printMessage(" Invalid Memory Write Address ");
 8000f86:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <bootloader_ext_mem_write_cmd+0x118>)
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f000 fefd 	bl	8001d88 <printMessage>
			uint8_t writeStatus[4] = {
 8000f8e:	2108      	movs	r1, #8
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc8 <bootloader_ext_mem_write_cmd+0x11c>)
 8000f94:	601a      	str	r2, [r3, #0]
			bootloader_uart_write_data(writeStatus, 4);
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	2104      	movs	r1, #4
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f000 f85e 	bl	800105c <bootloader_uart_write_data>
}
 8000fa0:	e005      	b.n	8000fae <bootloader_ext_mem_write_cmd+0x102>
		printMessage(" Checksum fail ");
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <bootloader_ext_mem_write_cmd+0x120>)
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f000 feef 	bl	8001d88 <printMessage>
		bootloader_send_nack();
 8000faa:	f000 f913 	bl	80011d4 <bootloader_send_nack>
}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b008      	add	sp, #32
 8000fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	08008ce0 	.word	0x08008ce0
 8000fbc:	08008cfc 	.word	0x08008cfc
 8000fc0:	20000148 	.word	0x20000148
 8000fc4:	08008d38 	.word	0x08008d38
 8000fc8:	01136618 	.word	0x01136618
 8000fcc:	08008cd0 	.word	0x08008cd0

08000fd0 <bootloader_disable_read_write_protect_cmd>:
//		bootloader_send_nack();
//	}
//
//}

void bootloader_disable_read_write_protect_cmd(uint8_t *bl_rx_data) {
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	printMessage(" bootloader_disable_read_write_protect_cmd ");
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <bootloader_disable_read_write_protect_cmd+0x80>)
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f000 fed4 	bl	8001d88 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff fbcd 	bl	800078a <assemble_crc_from_fixed_position>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	1f19      	subs	r1, r3, #4
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f000 f841 	bl	8001084 <bootloader_verify_crc>
 8001002:	1e03      	subs	r3, r0, #0
 8001004:	d11a      	bne.n	800103c <bootloader_disable_read_write_protect_cmd+0x6c>
		bootloader_send_ack(1);
 8001006:	2001      	movs	r0, #1
 8001008:	f000 f8c0 	bl	800118c <bootloader_send_ack>
		uint8_t status = configure_flash_sector_r_w_protection(0, 0, 1);
 800100c:	2201      	movs	r2, #1
 800100e:	2100      	movs	r1, #0
 8001010:	2000      	movs	r0, #0
 8001012:	f000 fb1d 	bl	8001650 <configure_flash_sector_r_w_protection>
 8001016:	0003      	movs	r3, r0
 8001018:	001a      	movs	r2, r3
 800101a:	240f      	movs	r4, #15
 800101c:	193b      	adds	r3, r7, r4
 800101e:	701a      	strb	r2, [r3, #0]

		printMessage(" Status: %d", status);
 8001020:	193b      	adds	r3, r7, r4
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	001a      	movs	r2, r3
 8001026:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <bootloader_disable_read_write_protect_cmd+0x84>)
 8001028:	0011      	movs	r1, r2
 800102a:	0018      	movs	r0, r3
 800102c:	f000 feac 	bl	8001d88 <printMessage>
		bootloader_uart_write_data(&status, 1);
 8001030:	193b      	adds	r3, r7, r4
 8001032:	2101      	movs	r1, #1
 8001034:	0018      	movs	r0, r3
 8001036:	f000 f811 	bl	800105c <bootloader_uart_write_data>
	} else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}
}
 800103a:	e005      	b.n	8001048 <bootloader_disable_read_write_protect_cmd+0x78>
		printMessage(" Checksum fail ");
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <bootloader_disable_read_write_protect_cmd+0x88>)
 800103e:	0018      	movs	r0, r3
 8001040:	f000 fea2 	bl	8001d88 <printMessage>
		bootloader_send_nack();
 8001044:	f000 f8c6 	bl	80011d4 <bootloader_send_nack>
}
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b007      	add	sp, #28
 800104e:	bd90      	pop	{r4, r7, pc}
 8001050:	08008df0 	.word	0x08008df0
 8001054:	08008d84 	.word	0x08008d84
 8001058:	08008cd0 	.word	0x08008cd0

0800105c <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *Buffer, uint32_t len) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]

	HAL_UART_Transmit(&huart3, Buffer, len, HAL_MAX_DELAY);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b29a      	uxth	r2, r3
 800106a:	2301      	movs	r3, #1
 800106c:	425b      	negs	r3, r3
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4803      	ldr	r0, [pc, #12]	@ (8001080 <bootloader_uart_write_data+0x24>)
 8001072:	f005 fd77 	bl	8006b64 <HAL_UART_Transmit>
}
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b002      	add	sp, #8
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	200003bc 	.word	0x200003bc

08001084 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc(uint8_t* Buffer, uint32_t len, uint32_t crcHost) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
	uint32_t crcValue = 0xFF;
 8001090:	23ff      	movs	r3, #255	@ 0xff
 8001092:	61fb      	str	r3, [r7, #28]
	uint32_t data = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

	for (uint32_t i = 0; i < len; i++) {
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	e010      	b.n	80010c0 <bootloader_verify_crc+0x3c>
		data = Buffer[i];
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	18d3      	adds	r3, r2, r3
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	617b      	str	r3, [r7, #20]
		crcValue = HAL_CRC_Accumulate(&hcrc, &data, 1);
 80010a8:	2314      	movs	r3, #20
 80010aa:	18f9      	adds	r1, r7, r3
 80010ac:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <bootloader_verify_crc+0x6c>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	0018      	movs	r0, r3
 80010b2:	f001 ff53 	bl	8002f5c <HAL_CRC_Accumulate>
 80010b6:	0003      	movs	r3, r0
 80010b8:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < len; i++) {
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	3301      	adds	r3, #1
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d3ea      	bcc.n	800109e <bootloader_verify_crc+0x1a>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <bootloader_verify_crc+0x6c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <bootloader_verify_crc+0x6c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2101      	movs	r1, #1
 80010d4:	430a      	orrs	r2, r1
 80010d6:	609a      	str	r2, [r3, #8]

	if (crcValue == crcHost) {
 80010d8:	69fa      	ldr	r2, [r7, #28]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d101      	bne.n	80010e4 <bootloader_verify_crc+0x60>
		return CRC_SUCCESS;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e000      	b.n	80010e6 <bootloader_verify_crc+0x62>
	}
	return CRC_FAIL;
 80010e4:	2301      	movs	r3, #1
}
 80010e6:	0018      	movs	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b008      	add	sp, #32
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			@ (mov r8, r8)
 80010f0:	2000024c 	.word	0x2000024c

080010f4 <bootloader_get_rdp_cmd>:

void bootloader_get_rdp_cmd(uint8_t *bl_rx_data) {
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	printMessage(" bootloader_get_rdp_cmd ");
 80010fc:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <bootloader_get_rdp_cmd+0x8c>)
 80010fe:	0018      	movs	r0, r3
 8001100:	f000 fe42 	bl	8001d88 <printMessage>
	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]

	uint32_t host_crc = assemble_crc_from_fixed_position(bl_rx_data);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	0018      	movs	r0, r3
 8001110:	f7ff fb3b 	bl	800078a <assemble_crc_from_fixed_position>
 8001114:	0003      	movs	r3, r0
 8001116:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)) {
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	1f19      	subs	r1, r3, #4
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff ffaf 	bl	8001084 <bootloader_verify_crc>
 8001126:	1e03      	subs	r3, r0, #0
 8001128:	d120      	bne.n	800116c <bootloader_get_rdp_cmd+0x78>
		bootloader_send_ack(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f000 f82e 	bl	800118c <bootloader_send_ack>

		uint8_t rdpLevel[4] = {
 8001130:	240c      	movs	r4, #12
 8001132:	193b      	adds	r3, r7, r4
 8001134:	2218      	movs	r2, #24
 8001136:	701a      	strb	r2, [r3, #0]
 8001138:	193b      	adds	r3, r7, r4
 800113a:	2266      	movs	r2, #102	@ 0x66
 800113c:	705a      	strb	r2, [r3, #1]
 800113e:	193b      	adds	r3, r7, r4
 8001140:	2213      	movs	r2, #19
 8001142:	709a      	strb	r2, [r3, #2]
			TARGET_LORA_HIGH,
			TARGET_LORA_LOW,
			TARGET_LORA_CHANNEL,
			get_flash_rdp_level()
 8001144:	f000 f876 	bl	8001234 <get_flash_rdp_level>
 8001148:	0003      	movs	r3, r0
 800114a:	001a      	movs	r2, r3
		uint8_t rdpLevel[4] = {
 800114c:	193b      	adds	r3, r7, r4
 800114e:	70da      	strb	r2, [r3, #3]
		};

		printMessage("RDP Level: %d", rdpLevel[3]);
 8001150:	193b      	adds	r3, r7, r4
 8001152:	78db      	ldrb	r3, [r3, #3]
 8001154:	001a      	movs	r2, r3
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <bootloader_get_rdp_cmd+0x90>)
 8001158:	0011      	movs	r1, r2
 800115a:	0018      	movs	r0, r3
 800115c:	f000 fe14 	bl	8001d88 <printMessage>
		bootloader_uart_write_data(rdpLevel, 4);
 8001160:	193b      	adds	r3, r7, r4
 8001162:	2104      	movs	r1, #4
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff ff79 	bl	800105c <bootloader_uart_write_data>
	} else {
		printMessage(" Checksum fail ");
		bootloader_send_nack();
	}

}
 800116a:	e005      	b.n	8001178 <bootloader_get_rdp_cmd+0x84>
		printMessage(" Checksum fail ");
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <bootloader_get_rdp_cmd+0x94>)
 800116e:	0018      	movs	r0, r3
 8001170:	f000 fe0a 	bl	8001d88 <printMessage>
		bootloader_send_nack();
 8001174:	f000 f82e 	bl	80011d4 <bootloader_send_nack>
}
 8001178:	46c0      	nop			@ (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b007      	add	sp, #28
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	08008e1c 	.word	0x08008e1c
 8001184:	08008e38 	.word	0x08008e38
 8001188:	08008cd0 	.word	0x08008cd0

0800118c <bootloader_send_ack>:

void bootloader_send_ack(uint8_t followLength) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	0002      	movs	r2, r0
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	701a      	strb	r2, [r3, #0]

	uint8_t ackBuffer[5] = {
 8001198:	2108      	movs	r1, #8
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2218      	movs	r2, #24
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2266      	movs	r2, #102	@ 0x66
 80011a4:	705a      	strb	r2, [r3, #1]
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2213      	movs	r2, #19
 80011aa:	709a      	strb	r2, [r3, #2]
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	22a5      	movs	r2, #165	@ 0xa5
 80011b0:	70da      	strb	r2, [r3, #3]
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	1dfa      	adds	r2, r7, #7
 80011b6:	7812      	ldrb	r2, [r2, #0]
 80011b8:	711a      	strb	r2, [r3, #4]
		TARGET_LORA_LOW,
		TARGET_LORA_CHANNEL,
		BL_ACK_VALUE,
		followLength
	};
	HAL_UART_Transmit(&huart3, ackBuffer, 5, HAL_MAX_DELAY);
 80011ba:	2301      	movs	r3, #1
 80011bc:	425b      	negs	r3, r3
 80011be:	1879      	adds	r1, r7, r1
 80011c0:	4803      	ldr	r0, [pc, #12]	@ (80011d0 <bootloader_send_ack+0x44>)
 80011c2:	2205      	movs	r2, #5
 80011c4:	f005 fcce 	bl	8006b64 <HAL_UART_Transmit>
}
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b004      	add	sp, #16
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200003bc 	.word	0x200003bc

080011d4 <bootloader_send_nack>:

void bootloader_send_nack() {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0

	uint8_t nackValue[5] = {
 80011da:	003b      	movs	r3, r7
 80011dc:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <bootloader_send_nack+0x28>)
 80011de:	6811      	ldr	r1, [r2, #0]
 80011e0:	6019      	str	r1, [r3, #0]
 80011e2:	7912      	ldrb	r2, [r2, #4]
 80011e4:	711a      	strb	r2, [r3, #4]
		TARGET_LORA_LOW,
		TARGET_LORA_CHANNEL,
		BL_ACK_VALUE,
		BL_NACK_VALUE
	};
	HAL_UART_Transmit(&huart3, nackValue, 4, HAL_MAX_DELAY);
 80011e6:	2301      	movs	r3, #1
 80011e8:	425b      	negs	r3, r3
 80011ea:	0039      	movs	r1, r7
 80011ec:	4804      	ldr	r0, [pc, #16]	@ (8001200 <bootloader_send_nack+0x2c>)
 80011ee:	2204      	movs	r2, #4
 80011f0:	f005 fcb8 	bl	8006b64 <HAL_UART_Transmit>
}
 80011f4:	46c0      	nop			@ (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b002      	add	sp, #8
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	08008e48 	.word	0x08008e48
 8001200:	200003bc 	.word	0x200003bc

08001204 <bootloader_get_version>:

uint8_t bootloader_get_version(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	return BL_VER;
 8001208:	2310      	movs	r3, #16
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
	uint16_t cID;
	cID = (uint16_t) (DBG->IDCODE) & 0x0FFF;
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <get_mcu_chip_id+0x20>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	b29a      	uxth	r2, r3
 800121c:	1dbb      	adds	r3, r7, #6
 800121e:	0512      	lsls	r2, r2, #20
 8001220:	0d12      	lsrs	r2, r2, #20
 8001222:	801a      	strh	r2, [r3, #0]
	return cID;
 8001224:	1dbb      	adds	r3, r7, #6
 8001226:	881b      	ldrh	r3, [r3, #0]
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40015800 	.word	0x40015800

08001234 <get_flash_rdp_level>:

uint8_t get_flash_rdp_level(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
	uint8_t rdp_status = 0;
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]

#if	1

	volatile uint32_t *OB_Addr = (uint32_t*) RDP_REG;
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <get_flash_rdp_level+0x24>)
 8001242:	603b      	str	r3, [r7, #0]
	rdp_status = (uint8_t) ((*OB_Addr )& 0x00000000FF);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	1dfb      	adds	r3, r7, #7
 800124a:	701a      	strb	r2, [r3, #0]
	HAL_FLASHEx_OBGetConfig(&OB_InitStruct);
	rdp_level = (uint8_t) OB_InitStruct.RDPLevel;

#endif

	return rdp_status;
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	781b      	ldrb	r3, [r3, #0]
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	b002      	add	sp, #8
 8001256:	bd80      	pop	{r7, pc}
 8001258:	1fff7800 	.word	0x1fff7800

0800125c <bootloader_verify_address>:

uint8_t bootloader_verify_address(uint32_t goAddress) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	if (goAddress >= FLASH_BASE && goAddress <= G0_FLASH_END)
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	2380      	movs	r3, #128	@ 0x80
 8001268:	051b      	lsls	r3, r3, #20
 800126a:	429a      	cmp	r2, r3
 800126c:	d305      	bcc.n	800127a <bootloader_verify_address+0x1e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <bootloader_verify_address+0x28>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d801      	bhi.n	800127a <bootloader_verify_address+0x1e>
		return ADDR_VALID;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <bootloader_verify_address+0x20>
	else
	return ADDR_INVALID;
 800127a:	2301      	movs	r3, #1
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}
 8001284:	0801ffff 	.word	0x0801ffff

08001288 <execute_flash_erase>:
/*
 * sectorNumber Silinecek sektör numarası
 * numberOfSector sectorNumber'dan sonraki silinecek sektör sayısı
 *
 * */
uint8_t execute_flash_erase(uint8_t sectorNumber, uint8_t numberOfSector) {
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	0002      	movs	r2, r0
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	1dbb      	adds	r3, r7, #6
 8001296:	1c0a      	adds	r2, r1, #0
 8001298:	701a      	strb	r2, [r3, #0]
	FLASH_EraseInitTypeDef FlashEraseInitStruct = { 0 };
 800129a:	230c      	movs	r3, #12
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	0018      	movs	r0, r3
 80012a0:	2310      	movs	r3, #16
 80012a2:	001a      	movs	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	f007 f801 	bl	80082ac <memset>
	uint32_t SectorError = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
	HAL_StatusTypeDef status = HAL_ERROR;
 80012ae:	231f      	movs	r3, #31
 80012b0:	18fb      	adds	r3, r7, r3
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]

	if (sectorNumber > 63){
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80012bc:	d901      	bls.n	80012c2 <execute_flash_erase+0x3a>
		return INVALID_SECTOR;
 80012be:	2304      	movs	r3, #4
 80012c0:	e04a      	b.n	8001358 <execute_flash_erase+0xd0>
	}

	if ((sectorNumber <= 63) || (sectorNumber == 0xFF)) {
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80012c8:	d903      	bls.n	80012d2 <execute_flash_erase+0x4a>
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2bff      	cmp	r3, #255	@ 0xff
 80012d0:	d141      	bne.n	8001356 <execute_flash_erase+0xce>
		if (sectorNumber == 0xFF) {
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2bff      	cmp	r3, #255	@ 0xff
 80012d8:	d11b      	bne.n	8001312 <execute_flash_erase+0x8a>
			FlashEraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80012da:	240c      	movs	r4, #12
 80012dc:	193b      	adds	r3, r7, r4
 80012de:	2202      	movs	r2, #2
 80012e0:	601a      	str	r2, [r3, #0]
			FlashEraseInitStruct.Page = ((FLASH_END_ADDRESS-FLASH_APP_BASE_ADDRESS) / FLASH_BANK_SIZE);
 80012e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001360 <execute_flash_erase+0xd8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	029a      	lsls	r2, r3, #10
 80012e8:	23ff      	movs	r3, #255	@ 0xff
 80012ea:	029b      	lsls	r3, r3, #10
 80012ec:	4013      	ands	r3, r2
 80012ee:	0019      	movs	r1, r3
 80012f0:	481c      	ldr	r0, [pc, #112]	@ (8001364 <execute_flash_erase+0xdc>)
 80012f2:	f7fe ff17 	bl	8000124 <__udivsi3>
 80012f6:	0003      	movs	r3, r0
 80012f8:	001a      	movs	r2, r3
 80012fa:	193b      	adds	r3, r7, r4
 80012fc:	609a      	str	r2, [r3, #8]
			FlashEraseInitStruct.NbPages = FLASH_PAGE_NB;
 80012fe:	4b18      	ldr	r3, [pc, #96]	@ (8001360 <execute_flash_erase+0xd8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	029a      	lsls	r2, r3, #10
 8001304:	23ff      	movs	r3, #255	@ 0xff
 8001306:	029b      	lsls	r3, r3, #10
 8001308:	4013      	ands	r3, r2
 800130a:	0ada      	lsrs	r2, r3, #11
 800130c:	193b      	adds	r3, r7, r4
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	e00b      	b.n	800132a <execute_flash_erase+0xa2>
		} else {

			FlashEraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001312:	210c      	movs	r1, #12
 8001314:	187b      	adds	r3, r7, r1
 8001316:	2202      	movs	r2, #2
 8001318:	601a      	str	r2, [r3, #0]
			FlashEraseInitStruct.Page = sectorNumber;
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781a      	ldrb	r2, [r3, #0]
 800131e:	187b      	adds	r3, r7, r1
 8001320:	609a      	str	r2, [r3, #8]
			FlashEraseInitStruct.NbPages = numberOfSector;
 8001322:	1dbb      	adds	r3, r7, #6
 8001324:	781a      	ldrb	r2, [r3, #0]
 8001326:	187b      	adds	r3, r7, r1
 8001328:	60da      	str	r2, [r3, #12]
		}
		FlashEraseInitStruct.Banks = FLASH_BANK_1;
 800132a:	250c      	movs	r5, #12
 800132c:	197b      	adds	r3, r7, r5
 800132e:	2204      	movs	r2, #4
 8001330:	605a      	str	r2, [r3, #4]

		HAL_FLASH_Unlock();
 8001332:	f002 fc0f 	bl	8003b54 <HAL_FLASH_Unlock>
		status = (uint8_t) HAL_FLASHEx_Erase(&FlashEraseInitStruct, &SectorError);
 8001336:	261f      	movs	r6, #31
 8001338:	19bc      	adds	r4, r7, r6
 800133a:	2308      	movs	r3, #8
 800133c:	18fa      	adds	r2, r7, r3
 800133e:	197b      	adds	r3, r7, r5
 8001340:	0011      	movs	r1, r2
 8001342:	0018      	movs	r0, r3
 8001344:	f002 fd06 	bl	8003d54 <HAL_FLASHEx_Erase>
 8001348:	0003      	movs	r3, r0
 800134a:	7023      	strb	r3, [r4, #0]
		HAL_FLASH_Lock();
 800134c:	f002 fc26 	bl	8003b9c <HAL_FLASH_Lock>

		return status;
 8001350:	19bb      	adds	r3, r7, r6
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	e000      	b.n	8001358 <execute_flash_erase+0xd0>
	}

	return INVALID_SECTOR;
 8001356:	2304      	movs	r3, #4
}
 8001358:	0018      	movs	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	b009      	add	sp, #36	@ 0x24
 800135e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001360:	1fff75e0 	.word	0x1fff75e0
 8001364:	0000efff 	.word	0x0000efff

08001368 <execute_memory_write>:

uint8_t execute_memory_write(uint8_t *Buffer, uint32_t memAddress, uint32_t len) {
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	b0b3      	sub	sp, #204	@ 0xcc
 800136c:	af00      	add	r7, sp, #0
 800136e:	23b4      	movs	r3, #180	@ 0xb4
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	6018      	str	r0, [r3, #0]
 8001374:	23b0      	movs	r3, #176	@ 0xb0
 8001376:	18fb      	adds	r3, r7, r3
 8001378:	6019      	str	r1, [r3, #0]
 800137a:	23ac      	movs	r3, #172	@ 0xac
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	601a      	str	r2, [r3, #0]
	uint8_t status = HAL_ERROR;
 8001380:	231b      	movs	r3, #27
 8001382:	22a8      	movs	r2, #168	@ 0xa8
 8001384:	189b      	adds	r3, r3, r2
 8001386:	19da      	adds	r2, r3, r7
 8001388:	2301      	movs	r3, #1
 800138a:	7013      	strb	r3, [r2, #0]
	__HAL_FLASH_CLEAR_FLAG(FLASH_ECCR_ECCD);
	__HAL_FLASH_CLEAR_FLAG(FLASH_ECCR_ECCC);
	__HAL_FLASH_CLEAR_FLAG(FLASH_ECCR_ECCCIE );
	__HAL_FLASH_CLEAR_FLAG(FLASH_ECCR_SYSF_ECC);
	__HAL_FLASH_CLEAR_FLAG(FLASH_ECCR_ADDR_ECC );
	HAL_FLASH_Lock();
 800138c:	f002 fc06 	bl	8003b9c <HAL_FLASH_Lock>

	for (uint32_t i = 0; i < len; i= i+8) {
 8001390:	2300      	movs	r3, #0
 8001392:	22c4      	movs	r2, #196	@ 0xc4
 8001394:	18ba      	adds	r2, r7, r2
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e12d      	b.n	80015f6 <execute_memory_write+0x28e>
			//while ((FLASH->SR & FLASH_SR_BSY1)) {}
			HAL_FLASH_Unlock();
 800139a:	f002 fbdb 	bl	8003b54 <HAL_FLASH_Unlock>

	        data =
	        	   ((uint64_t)Buffer[i])
 800139e:	23b4      	movs	r3, #180	@ 0xb4
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	23c4      	movs	r3, #196	@ 0xc4
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	18d3      	adds	r3, r2, r3
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2290      	movs	r2, #144	@ 0x90
 80013b0:	18ba      	adds	r2, r7, r2
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	2300      	movs	r3, #0
 80013b6:	2294      	movs	r2, #148	@ 0x94
 80013b8:	18ba      	adds	r2, r7, r2
 80013ba:	6013      	str	r3, [r2, #0]
	             | (((uint64_t)Buffer[i+1]) << 8)
 80013bc:	23c4      	movs	r3, #196	@ 0xc4
 80013be:	18fb      	adds	r3, r7, r3
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	23b4      	movs	r3, #180	@ 0xb4
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	189b      	adds	r3, r3, r2
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2288      	movs	r2, #136	@ 0x88
 80013d0:	18ba      	adds	r2, r7, r2
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	2300      	movs	r3, #0
 80013d6:	228c      	movs	r2, #140	@ 0x8c
 80013d8:	18ba      	adds	r2, r7, r2
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	2388      	movs	r3, #136	@ 0x88
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	6819      	ldr	r1, [r3, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	000b      	movs	r3, r1
 80013e6:	0e1b      	lsrs	r3, r3, #24
 80013e8:	0010      	movs	r0, r2
 80013ea:	0200      	lsls	r0, r0, #8
 80013ec:	24a4      	movs	r4, #164	@ 0xa4
 80013ee:	193c      	adds	r4, r7, r4
 80013f0:	6020      	str	r0, [r4, #0]
 80013f2:	20a4      	movs	r0, #164	@ 0xa4
 80013f4:	1838      	adds	r0, r7, r0
 80013f6:	6800      	ldr	r0, [r0, #0]
 80013f8:	4318      	orrs	r0, r3
 80013fa:	23a4      	movs	r3, #164	@ 0xa4
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	6018      	str	r0, [r3, #0]
 8001400:	000b      	movs	r3, r1
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	22a0      	movs	r2, #160	@ 0xa0
 8001406:	18ba      	adds	r2, r7, r2
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	2390      	movs	r3, #144	@ 0x90
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	6819      	ldr	r1, [r3, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	0008      	movs	r0, r1
 8001414:	23a0      	movs	r3, #160	@ 0xa0
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	685c      	ldr	r4, [r3, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	001d      	movs	r5, r3
 800141e:	4328      	orrs	r0, r5
 8001420:	2580      	movs	r5, #128	@ 0x80
 8001422:	197d      	adds	r5, r7, r5
 8001424:	6028      	str	r0, [r5, #0]
 8001426:	0023      	movs	r3, r4
 8001428:	431a      	orrs	r2, r3
 800142a:	2384      	movs	r3, #132	@ 0x84
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	601a      	str	r2, [r3, #0]
	             | (((uint64_t)Buffer[i+2]) << 16)
 8001430:	23c4      	movs	r3, #196	@ 0xc4
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	1c9a      	adds	r2, r3, #2
 8001438:	23b4      	movs	r3, #180	@ 0xb4
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	189b      	adds	r3, r3, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001444:	2300      	movs	r3, #0
 8001446:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001448:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800144a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800144c:	000b      	movs	r3, r1
 800144e:	0c1b      	lsrs	r3, r3, #16
 8001450:	0010      	movs	r0, r2
 8001452:	0400      	lsls	r0, r0, #16
 8001454:	249c      	movs	r4, #156	@ 0x9c
 8001456:	193c      	adds	r4, r7, r4
 8001458:	6020      	str	r0, [r4, #0]
 800145a:	209c      	movs	r0, #156	@ 0x9c
 800145c:	1838      	adds	r0, r7, r0
 800145e:	6800      	ldr	r0, [r0, #0]
 8001460:	4318      	orrs	r0, r3
 8001462:	239c      	movs	r3, #156	@ 0x9c
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	6018      	str	r0, [r3, #0]
 8001468:	000b      	movs	r3, r1
 800146a:	041b      	lsls	r3, r3, #16
 800146c:	2298      	movs	r2, #152	@ 0x98
 800146e:	18ba      	adds	r2, r7, r2
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	2380      	movs	r3, #128	@ 0x80
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	6819      	ldr	r1, [r3, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	0008      	movs	r0, r1
 800147c:	2398      	movs	r3, #152	@ 0x98
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	685c      	ldr	r4, [r3, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	001d      	movs	r5, r3
 8001486:	4328      	orrs	r0, r5
 8001488:	6738      	str	r0, [r7, #112]	@ 0x70
 800148a:	0023      	movs	r3, r4
 800148c:	431a      	orrs	r2, r3
 800148e:	677a      	str	r2, [r7, #116]	@ 0x74
	             | (((uint64_t)Buffer[i+3]) << 24)
 8001490:	23c4      	movs	r3, #196	@ 0xc4
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	1cda      	adds	r2, r3, #3
 8001498:	23b4      	movs	r3, #180	@ 0xb4
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	189b      	adds	r3, r3, r2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80014a4:	2300      	movs	r3, #0
 80014a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80014a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014aa:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 80014ac:	001a      	movs	r2, r3
 80014ae:	0a12      	lsrs	r2, r2, #8
 80014b0:	667a      	str	r2, [r7, #100]	@ 0x64
 80014b2:	061b      	lsls	r3, r3, #24
 80014b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80014b6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80014b8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80014ba:	0008      	movs	r0, r1
 80014bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014be:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 80014c0:	001d      	movs	r5, r3
 80014c2:	4328      	orrs	r0, r5
 80014c4:	65b8      	str	r0, [r7, #88]	@ 0x58
 80014c6:	0023      	movs	r3, r4
 80014c8:	431a      	orrs	r2, r3
 80014ca:	65fa      	str	r2, [r7, #92]	@ 0x5c
	             | (((uint64_t)Buffer[i+4]) << 32)
 80014cc:	23c4      	movs	r3, #196	@ 0xc4
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	1d1a      	adds	r2, r3, #4
 80014d4:	23b4      	movs	r3, #180	@ 0xb4
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	189b      	adds	r3, r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	653b      	str	r3, [r7, #80]	@ 0x50
 80014e0:	2300      	movs	r3, #0
 80014e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80014e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014e6:	001b      	movs	r3, r3
 80014e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80014ea:	2300      	movs	r3, #0
 80014ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80014ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80014f0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80014f2:	0008      	movs	r0, r1
 80014f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014f6:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 80014f8:	001d      	movs	r5, r3
 80014fa:	4328      	orrs	r0, r5
 80014fc:	6438      	str	r0, [r7, #64]	@ 0x40
 80014fe:	0023      	movs	r3, r4
 8001500:	431a      	orrs	r2, r3
 8001502:	647a      	str	r2, [r7, #68]	@ 0x44
	             | (((uint64_t)Buffer[i+5]) << 40)
 8001504:	23c4      	movs	r3, #196	@ 0xc4
 8001506:	18fb      	adds	r3, r7, r3
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	1d5a      	adds	r2, r3, #5
 800150c:	23b4      	movs	r3, #180	@ 0xb4
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	189b      	adds	r3, r3, r2
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001518:	2300      	movs	r3, #0
 800151a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800151c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	637b      	str	r3, [r7, #52]	@ 0x34
 8001522:	2300      	movs	r3, #0
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30
 8001526:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001528:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800152a:	0008      	movs	r0, r1
 800152c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800152e:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8001530:	001d      	movs	r5, r3
 8001532:	4328      	orrs	r0, r5
 8001534:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001536:	0023      	movs	r3, r4
 8001538:	431a      	orrs	r2, r3
 800153a:	62fa      	str	r2, [r7, #44]	@ 0x2c
	             | (((uint64_t)Buffer[i+6]) << 48)
 800153c:	23c4      	movs	r3, #196	@ 0xc4
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	1d9a      	adds	r2, r3, #6
 8001544:	23b4      	movs	r3, #180	@ 0xb4
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	189b      	adds	r3, r3, r2
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	623b      	str	r3, [r7, #32]
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	041b      	lsls	r3, r3, #16
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001560:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001562:	0008      	movs	r0, r1
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	69fc      	ldr	r4, [r7, #28]
 8001568:	001d      	movs	r5, r3
 800156a:	4328      	orrs	r0, r5
 800156c:	6138      	str	r0, [r7, #16]
 800156e:	0023      	movs	r3, r4
 8001570:	431a      	orrs	r2, r3
 8001572:	617a      	str	r2, [r7, #20]
	             | (((uint64_t)Buffer[i+7]) << 56);
 8001574:	23c4      	movs	r3, #196	@ 0xc4
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	1dda      	adds	r2, r3, #7
 800157c:	23b4      	movs	r3, #180	@ 0xb4
 800157e:	18fb      	adds	r3, r7, r3
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	189b      	adds	r3, r3, r2
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	061b      	lsls	r3, r3, #24
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
	        data =
 8001596:	6839      	ldr	r1, [r7, #0]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	000b      	movs	r3, r1
 800159c:	693c      	ldr	r4, [r7, #16]
 800159e:	697d      	ldr	r5, [r7, #20]
 80015a0:	0020      	movs	r0, r4
 80015a2:	4303      	orrs	r3, r0
 80015a4:	20b8      	movs	r0, #184	@ 0xb8
 80015a6:	1838      	adds	r0, r7, r0
 80015a8:	6003      	str	r3, [r0, #0]
 80015aa:	0013      	movs	r3, r2
 80015ac:	002a      	movs	r2, r5
 80015ae:	4313      	orrs	r3, r2
 80015b0:	22bc      	movs	r2, #188	@ 0xbc
 80015b2:	18ba      	adds	r2, r7, r2
 80015b4:	6013      	str	r3, [r2, #0]

	        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, memAddress+i, data);
 80015b6:	23b0      	movs	r3, #176	@ 0xb0
 80015b8:	18fb      	adds	r3, r7, r3
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	23c4      	movs	r3, #196	@ 0xc4
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	18d1      	adds	r1, r2, r3
 80015c4:	231b      	movs	r3, #27
 80015c6:	22a8      	movs	r2, #168	@ 0xa8
 80015c8:	189b      	adds	r3, r3, r2
 80015ca:	19dc      	adds	r4, r3, r7
 80015cc:	23b8      	movs	r3, #184	@ 0xb8
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2001      	movs	r0, #1
 80015d6:	f002 f9dd 	bl	8003994 <HAL_FLASH_Program>
 80015da:	0003      	movs	r3, r0
 80015dc:	7023      	strb	r3, [r4, #0]

	        HAL_Delay(3);
 80015de:	2003      	movs	r0, #3
 80015e0:	f001 faf4 	bl	8002bcc <HAL_Delay>
			HAL_FLASH_Lock();
 80015e4:	f002 fada 	bl	8003b9c <HAL_FLASH_Lock>
	for (uint32_t i = 0; i < len; i= i+8) {
 80015e8:	23c4      	movs	r3, #196	@ 0xc4
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3308      	adds	r3, #8
 80015f0:	22c4      	movs	r2, #196	@ 0xc4
 80015f2:	18ba      	adds	r2, r7, r2
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	23c4      	movs	r3, #196	@ 0xc4
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	23ac      	movs	r3, #172	@ 0xac
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d200      	bcs.n	8001608 <execute_memory_write+0x2a0>
 8001606:	e6c8      	b.n	800139a <execute_memory_write+0x32>
	}

	return status;
 8001608:	231b      	movs	r3, #27
 800160a:	22a8      	movs	r2, #168	@ 0xa8
 800160c:	189b      	adds	r3, r3, r2
 800160e:	19db      	adds	r3, r3, r7
 8001610:	781b      	ldrb	r3, [r3, #0]
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b033      	add	sp, #204	@ 0xcc
 8001618:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800161c <execute_ext_mem_write>:
uint8_t execute_ext_mem_write(uint8_t *Buffer, uint32_t len)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
	//uint8_t status = HAL_ERROR;

	W25Q_Buf_Program(EXT_Flash_Write_Start_Addr, Buffer, len);
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <execute_ext_mem_write+0x30>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	0018      	movs	r0, r3
 8001632:	f7fe ff65 	bl	8000500 <W25Q_Buf_Program>
	EXT_Flash_Write_Start_Addr += 256;
 8001636:	4b05      	ldr	r3, [pc, #20]	@ (800164c <execute_ext_mem_write+0x30>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	32ff      	adds	r2, #255	@ 0xff
 800163e:	4b03      	ldr	r3, [pc, #12]	@ (800164c <execute_ext_mem_write+0x30>)
 8001640:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b002      	add	sp, #8
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000248 	.word	0x20000248

08001650 <configure_flash_sector_r_w_protection>:

uint8_t configure_flash_sector_r_w_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t enableOrDisable) {
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	0004      	movs	r4, r0
 8001658:	0008      	movs	r0, r1
 800165a:	0011      	movs	r1, r2
 800165c:	1dfb      	adds	r3, r7, #7
 800165e:	1c22      	adds	r2, r4, #0
 8001660:	701a      	strb	r2, [r3, #0]
 8001662:	1dbb      	adds	r3, r7, #6
 8001664:	1c02      	adds	r2, r0, #0
 8001666:	701a      	strb	r2, [r3, #0]
 8001668:	1d7b      	adds	r3, r7, #5
 800166a:	1c0a      	adds	r2, r1, #0
 800166c:	701a      	strb	r2, [r3, #0]
	volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 800166e:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <configure_flash_sector_r_w_protection+0xdc>)
 8001670:	60fb      	str	r3, [r7, #12]

	HAL_FLASH_OB_Unlock();
 8001672:	f002 fab5 	bl	8003be0 <HAL_FLASH_OB_Unlock>
    while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET){};
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	4b2d      	ldr	r3, [pc, #180]	@ (8001730 <configure_flash_sector_r_w_protection+0xe0>)
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	025b      	lsls	r3, r3, #9
 8001680:	4013      	ands	r3, r2
 8001682:	d1f9      	bne.n	8001678 <configure_flash_sector_r_w_protection+0x28>

	if (enableOrDisable) {
 8001684:	1d7b      	adds	r3, r7, #5
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00e      	beq.n	80016aa <configure_flash_sector_r_w_protection+0x5a>
		*pOPTCR |= (0xFF << 16);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	22ff      	movs	r2, #255	@ 0xff
 8001692:	0412      	lsls	r2, r2, #16
 8001694:	431a      	orrs	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (1 << 1);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2202      	movs	r2, #2
 80016a0:	431a      	orrs	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	601a      	str	r2, [r3, #0]

		return 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e03c      	b.n	8001724 <configure_flash_sector_r_w_protection+0xd4>
	}

	if (protection_mode == 1){	// write protection
 80016aa:	1dbb      	adds	r3, r7, #6
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d10f      	bne.n	80016d2 <configure_flash_sector_r_w_protection+0x82>
		*pOPTCR &= ~(sector_details << 16);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	1dfa      	adds	r2, r7, #7
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	0412      	lsls	r2, r2, #16
 80016bc:	43d2      	mvns	r2, r2
 80016be:	401a      	ands	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (1 << 1);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2202      	movs	r2, #2
 80016ca:	431a      	orrs	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e01e      	b.n	8001710 <configure_flash_sector_r_w_protection+0xc0>

	}
	else if (protection_mode == 2){ // read / write protection
 80016d2:	1dbb      	adds	r3, r7, #6
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d11a      	bne.n	8001710 <configure_flash_sector_r_w_protection+0xc0>
		*pOPTCR &= ~(0xFF << 16);				// write protecton all sector
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a15      	ldr	r2, [pc, #84]	@ (8001734 <configure_flash_sector_r_w_protection+0xe4>)
 80016e0:	401a      	ands	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (sector_details << 16);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	1dfb      	adds	r3, r7, #7
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	041b      	lsls	r3, r3, #16
 80016f0:	431a      	orrs	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (0xFF << 8);					// read protection all sector
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	22ff      	movs	r2, #255	@ 0xff
 80016fc:	0212      	lsls	r2, r2, #8
 80016fe:	431a      	orrs	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (1 << 1);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2202      	movs	r2, #2
 800170a:	431a      	orrs	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	601a      	str	r2, [r3, #0]
	}
    while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET){};
 8001710:	46c0      	nop			@ (mov r8, r8)
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <configure_flash_sector_r_w_protection+0xe0>)
 8001714:	691a      	ldr	r2, [r3, #16]
 8001716:	2380      	movs	r3, #128	@ 0x80
 8001718:	025b      	lsls	r3, r3, #9
 800171a:	4013      	ands	r3, r2
 800171c:	d1f9      	bne.n	8001712 <configure_flash_sector_r_w_protection+0xc2>
	HAL_FLASH_OB_Lock();
 800171e:	f002 fa87 	bl	8003c30 <HAL_FLASH_OB_Lock>

	return 0;
 8001722:	2300      	movs	r3, #0
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b005      	add	sp, #20
 800172a:	bd90      	pop	{r4, r7, pc}
 800172c:	40023c14 	.word	0x40023c14
 8001730:	40022000 	.word	0x40022000
 8001734:	ff00ffff 	.word	0xff00ffff

08001738 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	000a      	movs	r2, r1
 8001742:	1cbb      	adds	r3, r7, #2
 8001744:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART3)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a08      	ldr	r2, [pc, #32]	@ (800176c <HAL_UARTEx_RxEventCallback+0x34>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d109      	bne.n	8001764 <HAL_UARTEx_RxEventCallback+0x2c>
	{
		Boot_Receive_Flag =1;
 8001750:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <HAL_UARTEx_RxEventCallback+0x38>)
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
		memcpy(Bootloader_Main_Buf, bootloader_rx_data,Size);
 8001756:	1cbb      	adds	r3, r7, #2
 8001758:	881a      	ldrh	r2, [r3, #0]
 800175a:	4906      	ldr	r1, [pc, #24]	@ (8001774 <HAL_UARTEx_RxEventCallback+0x3c>)
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_UARTEx_RxEventCallback+0x40>)
 800175e:	0018      	movs	r0, r3
 8001760:	f006 fdd8 	bl	8008314 <memcpy>

	}
}
 8001764:	46c0      	nop			@ (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b002      	add	sp, #8
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40004800 	.word	0x40004800
 8001770:	20000d44 	.word	0x20000d44
 8001774:	200004ac 	.word	0x200004ac
 8001778:	20000574 	.word	0x20000574

0800177c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001780:	f001 f972 	bl	8002a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001784:	f000 f8d0 	bl	8001928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001788:	f000 fa6a 	bl	8001c60 <MX_GPIO_Init>
  MX_DMA_Init();
 800178c:	f000 fa4a 	bl	8001c24 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001790:	f000 f9c6 	bl	8001b20 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001794:	f000 f922 	bl	80019dc <MX_CRC_Init>
  MX_I2C1_Init();
 8001798:	f000 f944 	bl	8001a24 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800179c:	f000 fa0e 	bl	8001bbc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80017a0:	f000 f980 	bl	8001aa4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80017a4:	f000 fb8a 	bl	8001ebc <SSD1306_Init>
  restart_RxDMA();
 80017a8:	f000 fad4 	bl	8001d54 <restart_RxDMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		printMessage("Bootloader");
 80017ac:	4b56      	ldr	r3, [pc, #344]	@ (8001908 <main+0x18c>)
 80017ae:	0018      	movs	r0, r3
 80017b0:	f000 faea 	bl	8001d88 <printMessage>
	  if(Boot_Receive_Flag==1){
 80017b4:	4b55      	ldr	r3, [pc, #340]	@ (800190c <main+0x190>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d000      	beq.n	80017be <main+0x42>
 80017bc:	e089      	b.n	80018d2 <main+0x156>
		switch (bootloader_rx_data[1]) {
 80017be:	4b54      	ldr	r3, [pc, #336]	@ (8001910 <main+0x194>)
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	3b51      	subs	r3, #81	@ 0x51
 80017c4:	2b0e      	cmp	r3, #14
 80017c6:	d900      	bls.n	80017ca <main+0x4e>
 80017c8:	e07c      	b.n	80018c4 <main+0x148>
 80017ca:	009a      	lsls	r2, r3, #2
 80017cc:	4b51      	ldr	r3, [pc, #324]	@ (8001914 <main+0x198>)
 80017ce:	18d3      	adds	r3, r2, r3
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	469f      	mov	pc, r3
		case BL_GET_VER:/*TAMAMEN CALISIYOR*/
			bootloader_get_ver_cmd(bootloader_rx_data);
 80017d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001910 <main+0x194>)
 80017d6:	0018      	movs	r0, r3
 80017d8:	f7fe fff2 	bl	80007c0 <bootloader_get_ver_cmd>
			restart_RxDMA();
 80017dc:	f000 faba 	bl	8001d54 <restart_RxDMA>
			Boot_Receive_Flag=0;
 80017e0:	4b4a      	ldr	r3, [pc, #296]	@ (800190c <main+0x190>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
			break;
 80017e6:	e06e      	b.n	80018c6 <main+0x14a>
		case BL_GET_HELP:/*TAMAMEN CALISIYOR*/
			bootloader_get_help_cmd(bootloader_rx_data);
 80017e8:	4b49      	ldr	r3, [pc, #292]	@ (8001910 <main+0x194>)
 80017ea:	0018      	movs	r0, r3
 80017ec:	f7ff f838 	bl	8000860 <bootloader_get_help_cmd>
			restart_RxDMA();
 80017f0:	f000 fab0 	bl	8001d54 <restart_RxDMA>
			Boot_Receive_Flag=0;
 80017f4:	4b45      	ldr	r3, [pc, #276]	@ (800190c <main+0x190>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
			break;
 80017fa:	e064      	b.n	80018c6 <main+0x14a>
		case BL_GET_CID:/*TAMAMEN CALISIYOR */
			bootloader_get_cid_cmd(bootloader_rx_data); //calıisiyor
 80017fc:	4b44      	ldr	r3, [pc, #272]	@ (8001910 <main+0x194>)
 80017fe:	0018      	movs	r0, r3
 8001800:	f7ff f870 	bl	80008e4 <bootloader_get_cid_cmd>
			restart_RxDMA();
 8001804:	f000 faa6 	bl	8001d54 <restart_RxDMA>
			Boot_Receive_Flag=0;
 8001808:	4b40      	ldr	r3, [pc, #256]	@ (800190c <main+0x190>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
			break;
 800180e:	e05a      	b.n	80018c6 <main+0x14a>
		case BL_GET_RDP_STATUS:/*TAMAMEN CALISIYOR*/
			bootloader_get_rdp_cmd(bootloader_rx_data);// calısiyor
 8001810:	4b3f      	ldr	r3, [pc, #252]	@ (8001910 <main+0x194>)
 8001812:	0018      	movs	r0, r3
 8001814:	f7ff fc6e 	bl	80010f4 <bootloader_get_rdp_cmd>
			restart_RxDMA();
 8001818:	f000 fa9c 	bl	8001d54 <restart_RxDMA>
			Boot_Receive_Flag=0;
 800181c:	4b3b      	ldr	r3, [pc, #236]	@ (800190c <main+0x190>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
			break;
 8001822:	e050      	b.n	80018c6 <main+0x14a>
		case BL_GO_TO_ADDR:/*TAMAMEN CALISIYOR*/
			bootloader_go_to_addr_cmd(bootloader_rx_data);// calısiyor
 8001824:	4b3a      	ldr	r3, [pc, #232]	@ (8001910 <main+0x194>)
 8001826:	0018      	movs	r0, r3
 8001828:	f7ff f8b8 	bl	800099c <bootloader_go_to_addr_cmd>
			restart_RxDMA();
 800182c:	f000 fa92 	bl	8001d54 <restart_RxDMA>
			Boot_Receive_Flag=0;
 8001830:	4b36      	ldr	r3, [pc, #216]	@ (800190c <main+0x190>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
			break;
 8001836:	e046      	b.n	80018c6 <main+0x14a>
			/*	Once page sonra ondan sonraki kaç tane page silincek ise o girilecek  */
		case BL_FLASH_ERASE:/*TAMAMEN CALISIYOR*/
			bootloader_flash_erase_cmd(bootloader_rx_data);
 8001838:	4b35      	ldr	r3, [pc, #212]	@ (8001910 <main+0x194>)
 800183a:	0018      	movs	r0, r3
 800183c:	f7ff f95e 	bl	8000afc <bootloader_flash_erase_cmd>
			restart_RxDMA();
 8001840:	f000 fa88 	bl	8001d54 <restart_RxDMA>
			Boot_Receive_Flag=0;
 8001844:	4b31      	ldr	r3, [pc, #196]	@ (800190c <main+0x190>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
			break;
 800184a:	e03c      	b.n	80018c6 <main+0x14a>
			/*	Yazma yapılmadan önce kullanılacak pageler flash erase yapılmalı*/
		case BL_MEM_WRITE:/*TAMAMEN CALISIYOR*/
			bootloader_mem_write_cmd(bootloader_rx_data);
 800184c:	4b30      	ldr	r3, [pc, #192]	@ (8001910 <main+0x194>)
 800184e:	0018      	movs	r0, r3
 8001850:	f7ff f9ae 	bl	8000bb0 <bootloader_mem_write_cmd>
			restart_RxDMA();
 8001854:	f000 fa7e 	bl	8001d54 <restart_RxDMA>
			Boot_Receive_Flag=0;
 8001858:	4b2c      	ldr	r3, [pc, #176]	@ (800190c <main+0x190>)
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
			break;
 800185e:	e032      	b.n	80018c6 <main+0x14a>
		case BL_EN_RW_PROTECT:
			bootloader_enable_read_write_protect_cmd(bootloader_rx_data);
 8001860:	4b2b      	ldr	r3, [pc, #172]	@ (8001910 <main+0x194>)
 8001862:	0018      	movs	r0, r3
 8001864:	f7ff fa2e 	bl	8000cc4 <bootloader_enable_read_write_protect_cmd>
			restart_RxDMA();
 8001868:	f000 fa74 	bl	8001d54 <restart_RxDMA>
			Boot_Receive_Flag=0;
 800186c:	4b27      	ldr	r3, [pc, #156]	@ (800190c <main+0x190>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
			break;
 8001872:	e028      	b.n	80018c6 <main+0x14a>
		case BL_DIS_R_W_PROTECT:
			bootloader_disable_read_write_protect_cmd(bootloader_rx_data);
 8001874:	4b26      	ldr	r3, [pc, #152]	@ (8001910 <main+0x194>)
 8001876:	0018      	movs	r0, r3
 8001878:	f7ff fbaa 	bl	8000fd0 <bootloader_disable_read_write_protect_cmd>
			restart_RxDMA();
 800187c:	f000 fa6a 	bl	8001d54 <restart_RxDMA>
			Boot_Receive_Flag=0;
 8001880:	4b22      	ldr	r3, [pc, #136]	@ (800190c <main+0x190>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
			break;
 8001886:	e01e      	b.n	80018c6 <main+0x14a>
		case BL_GO_TO_BOOTLOADER:
			bootloader_go_to_bootloader_cmd(bootloader_rx_data);
 8001888:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <main+0x194>)
 800188a:	0018      	movs	r0, r3
 800188c:	f7ff fa6a 	bl	8000d64 <bootloader_go_to_bootloader_cmd>
			restart_RxDMA();
 8001890:	f000 fa60 	bl	8001d54 <restart_RxDMA>
			Boot_Receive_Flag=0;
 8001894:	4b1d      	ldr	r3, [pc, #116]	@ (800190c <main+0x190>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
			break;
 800189a:	e014      	b.n	80018c6 <main+0x14a>
		case BL_EXT_MEM_WRITE:
			bootloader_ext_mem_write_cmd(bootloader_rx_data);
 800189c:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <main+0x194>)
 800189e:	0018      	movs	r0, r3
 80018a0:	f7ff fb04 	bl	8000eac <bootloader_ext_mem_write_cmd>
			restart_RxDMA();
 80018a4:	f000 fa56 	bl	8001d54 <restart_RxDMA>
			Boot_Receive_Flag=0;
 80018a8:	4b18      	ldr	r3, [pc, #96]	@ (800190c <main+0x190>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
			break;
 80018ae:	e00a      	b.n	80018c6 <main+0x14a>
		case BL_EXT_MEM_TO_MEM_WRITE:
			bootloader_ext_mem_to_mem_write_cmd(bootloader_rx_data);
 80018b0:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <main+0x194>)
 80018b2:	0018      	movs	r0, r3
 80018b4:	f7ff fa90 	bl	8000dd8 <bootloader_ext_mem_to_mem_write_cmd>
			restart_RxDMA();
 80018b8:	f000 fa4c 	bl	8001d54 <restart_RxDMA>
			Boot_Receive_Flag=0;
 80018bc:	4b13      	ldr	r3, [pc, #76]	@ (800190c <main+0x190>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
			break;
 80018c2:	e000      	b.n	80018c6 <main+0x14a>
			default:
			break;
 80018c4:	46c0      	nop			@ (mov r8, r8)
		}
		memset(bootloader_rx_data, '\0',200);
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <main+0x194>)
 80018c8:	22c8      	movs	r2, #200	@ 0xc8
 80018ca:	2100      	movs	r1, #0
 80018cc:	0018      	movs	r0, r3
 80018ce:	f006 fced 	bl	80082ac <memset>

	  }
	  else{}

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {//bunu direk Set olarak yaptım
 80018d2:	2380      	movs	r3, #128	@ 0x80
 80018d4:	019b      	lsls	r3, r3, #6
 80018d6:	4a10      	ldr	r2, [pc, #64]	@ (8001918 <main+0x19c>)
 80018d8:	0019      	movs	r1, r3
 80018da:	0010      	movs	r0, r2
 80018dc:	f002 fd12 	bl	8004304 <HAL_GPIO_ReadPin>
 80018e0:	0003      	movs	r3, r0
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d104      	bne.n	80018f0 <main+0x174>
		  														   //tuş basılı değilse bootloaderda kalacak
		  		printMessage(" Going to bootloader mode.\n");
 80018e6:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <main+0x1a0>)
 80018e8:	0018      	movs	r0, r3
 80018ea:	f000 fa4d 	bl	8001d88 <printMessage>
 80018ee:	e005      	b.n	80018fc <main+0x180>

		  	} else {
		  		printMessage(" Executing user application.\n");
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <main+0x1a4>)
 80018f2:	0018      	movs	r0, r3
 80018f4:	f000 fa48 	bl	8001d88 <printMessage>

		  		bootloader_jump_to_user_application();
 80018f8:	f000 fa70 	bl	8001ddc <bootloader_jump_to_user_application>
		  	}
		printMessage("Working");
 80018fc:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <main+0x1a8>)
 80018fe:	0018      	movs	r0, r3
 8001900:	f000 fa42 	bl	8001d88 <printMessage>
		printMessage("Bootloader");
 8001904:	e752      	b.n	80017ac <main+0x30>
 8001906:	46c0      	nop			@ (mov r8, r8)
 8001908:	08008e50 	.word	0x08008e50
 800190c:	20000d44 	.word	0x20000d44
 8001910:	200004ac 	.word	0x200004ac
 8001914:	0800965c 	.word	0x0800965c
 8001918:	50000800 	.word	0x50000800
 800191c:	08008e5c 	.word	0x08008e5c
 8001920:	08008e78 	.word	0x08008e78
 8001924:	08008e98 	.word	0x08008e98

08001928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b093      	sub	sp, #76	@ 0x4c
 800192c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192e:	2414      	movs	r4, #20
 8001930:	193b      	adds	r3, r7, r4
 8001932:	0018      	movs	r0, r3
 8001934:	2334      	movs	r3, #52	@ 0x34
 8001936:	001a      	movs	r2, r3
 8001938:	2100      	movs	r1, #0
 800193a:	f006 fcb7 	bl	80082ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	0018      	movs	r0, r3
 8001942:	2310      	movs	r3, #16
 8001944:	001a      	movs	r2, r3
 8001946:	2100      	movs	r1, #0
 8001948:	f006 fcb0 	bl	80082ac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800194c:	2380      	movs	r3, #128	@ 0x80
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	0018      	movs	r0, r3
 8001952:	f003 fadb 	bl	8004f0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001956:	193b      	adds	r3, r7, r4
 8001958:	2202      	movs	r2, #2
 800195a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800195c:	193b      	adds	r3, r7, r4
 800195e:	2280      	movs	r2, #128	@ 0x80
 8001960:	0052      	lsls	r2, r2, #1
 8001962:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001964:	0021      	movs	r1, r4
 8001966:	187b      	adds	r3, r7, r1
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800196c:	187b      	adds	r3, r7, r1
 800196e:	2240      	movs	r2, #64	@ 0x40
 8001970:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001972:	187b      	adds	r3, r7, r1
 8001974:	2202      	movs	r2, #2
 8001976:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001978:	187b      	adds	r3, r7, r1
 800197a:	2202      	movs	r2, #2
 800197c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2200      	movs	r2, #0
 8001982:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001984:	187b      	adds	r3, r7, r1
 8001986:	2208      	movs	r2, #8
 8001988:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800198a:	187b      	adds	r3, r7, r1
 800198c:	2280      	movs	r2, #128	@ 0x80
 800198e:	0292      	lsls	r2, r2, #10
 8001990:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001992:	187b      	adds	r3, r7, r1
 8001994:	2280      	movs	r2, #128	@ 0x80
 8001996:	0592      	lsls	r2, r2, #22
 8001998:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199a:	187b      	adds	r3, r7, r1
 800199c:	0018      	movs	r0, r3
 800199e:	f003 fb7d 	bl	800509c <HAL_RCC_OscConfig>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d001      	beq.n	80019aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80019a6:	f000 fa83 	bl	8001eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2202      	movs	r2, #2
 80019b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2102      	movs	r1, #2
 80019c6:	0018      	movs	r0, r3
 80019c8:	f003 fe78 	bl	80056bc <HAL_RCC_ClockConfig>
 80019cc:	1e03      	subs	r3, r0, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80019d0:	f000 fa6e 	bl	8001eb0 <Error_Handler>
  }
}
 80019d4:	46c0      	nop			@ (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b013      	add	sp, #76	@ 0x4c
 80019da:	bd90      	pop	{r4, r7, pc}

080019dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <MX_CRC_Init+0x40>)
 80019e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a20 <MX_CRC_Init+0x44>)
 80019e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80019e6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <MX_CRC_Init+0x40>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80019ec:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <MX_CRC_Init+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <MX_CRC_Init+0x40>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80019f8:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <MX_CRC_Init+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 80019fe:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <MX_CRC_Init+0x40>)
 8001a00:	2203      	movs	r2, #3
 8001a02:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a04:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <MX_CRC_Init+0x40>)
 8001a06:	0018      	movs	r0, r3
 8001a08:	f001 fa14 	bl	8002e34 <HAL_CRC_Init>
 8001a0c:	1e03      	subs	r3, r0, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001a10:	f000 fa4e 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001a14:	46c0      	nop			@ (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	2000024c 	.word	0x2000024c
 8001a20:	40023000 	.word	0x40023000

08001a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <MX_I2C1_Init+0x74>)
 8001a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a9c <MX_I2C1_Init+0x78>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <MX_I2C1_Init+0x74>)
 8001a30:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa0 <MX_I2C1_Init+0x7c>)
 8001a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a34:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <MX_I2C1_Init+0x74>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a3a:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <MX_I2C1_Init+0x74>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a40:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <MX_I2C1_Init+0x74>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a46:	4b14      	ldr	r3, [pc, #80]	@ (8001a98 <MX_I2C1_Init+0x74>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <MX_I2C1_Init+0x74>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a52:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <MX_I2C1_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	@ (8001a98 <MX_I2C1_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a98 <MX_I2C1_Init+0x74>)
 8001a60:	0018      	movs	r0, r3
 8001a62:	f002 fc89 	bl	8004378 <HAL_I2C_Init>
 8001a66:	1e03      	subs	r3, r0, #0
 8001a68:	d001      	beq.n	8001a6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a6a:	f000 fa21 	bl	8001eb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <MX_I2C1_Init+0x74>)
 8001a70:	2100      	movs	r1, #0
 8001a72:	0018      	movs	r0, r3
 8001a74:	f003 f9b2 	bl	8004ddc <HAL_I2CEx_ConfigAnalogFilter>
 8001a78:	1e03      	subs	r3, r0, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a7c:	f000 fa18 	bl	8001eb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <MX_I2C1_Init+0x74>)
 8001a82:	2100      	movs	r1, #0
 8001a84:	0018      	movs	r0, r3
 8001a86:	f003 f9f5 	bl	8004e74 <HAL_I2CEx_ConfigDigitalFilter>
 8001a8a:	1e03      	subs	r3, r0, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a8e:	f000 fa0f 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000270 	.word	0x20000270
 8001a9c:	40005400 	.word	0x40005400
 8001aa0:	00c12166 	.word	0x00c12166

08001aa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <MX_SPI1_Init+0x74>)
 8001aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8001b1c <MX_SPI1_Init+0x78>)
 8001aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <MX_SPI1_Init+0x74>)
 8001ab0:	2282      	movs	r2, #130	@ 0x82
 8001ab2:	0052      	lsls	r2, r2, #1
 8001ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ab6:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <MX_SPI1_Init+0x74>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001abc:	4b16      	ldr	r3, [pc, #88]	@ (8001b18 <MX_SPI1_Init+0x74>)
 8001abe:	22e0      	movs	r2, #224	@ 0xe0
 8001ac0:	00d2      	lsls	r2, r2, #3
 8001ac2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <MX_SPI1_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aca:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <MX_SPI1_Init+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <MX_SPI1_Init+0x74>)
 8001ad2:	2280      	movs	r2, #128	@ 0x80
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <MX_SPI1_Init+0x74>)
 8001ada:	2220      	movs	r2, #32
 8001adc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <MX_SPI1_Init+0x74>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <MX_SPI1_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <MX_SPI1_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001af0:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <MX_SPI1_Init+0x74>)
 8001af2:	2207      	movs	r2, #7
 8001af4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001af6:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <MX_SPI1_Init+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <MX_SPI1_Init+0x74>)
 8001afe:	2208      	movs	r2, #8
 8001b00:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b02:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <MX_SPI1_Init+0x74>)
 8001b04:	0018      	movs	r0, r3
 8001b06:	f004 f8b7 	bl	8005c78 <HAL_SPI_Init>
 8001b0a:	1e03      	subs	r3, r0, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b0e:	f000 f9cf 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	200002c4 	.word	0x200002c4
 8001b1c:	40013000 	.word	0x40013000

08001b20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b24:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <MX_USART2_UART_Init+0x94>)
 8001b26:	4a24      	ldr	r2, [pc, #144]	@ (8001bb8 <MX_USART2_UART_Init+0x98>)
 8001b28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b2a:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <MX_USART2_UART_Init+0x94>)
 8001b2c:	22e1      	movs	r2, #225	@ 0xe1
 8001b2e:	0252      	lsls	r2, r2, #9
 8001b30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8001b32:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <MX_USART2_UART_Init+0x94>)
 8001b34:	2280      	movs	r2, #128	@ 0x80
 8001b36:	0552      	lsls	r2, r2, #21
 8001b38:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <MX_USART2_UART_Init+0x94>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb4 <MX_USART2_UART_Init+0x94>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b46:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <MX_USART2_UART_Init+0x94>)
 8001b48:	220c      	movs	r2, #12
 8001b4a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <MX_USART2_UART_Init+0x94>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b52:	4b18      	ldr	r3, [pc, #96]	@ (8001bb4 <MX_USART2_UART_Init+0x94>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b58:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <MX_USART2_UART_Init+0x94>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <MX_USART2_UART_Init+0x94>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b64:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <MX_USART2_UART_Init+0x94>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b6a:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <MX_USART2_UART_Init+0x94>)
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f004 ffa3 	bl	8006ab8 <HAL_UART_Init>
 8001b72:	1e03      	subs	r3, r0, #0
 8001b74:	d001      	beq.n	8001b7a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001b76:	f000 f99b 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <MX_USART2_UART_Init+0x94>)
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f006 fa2a 	bl	8007fd8 <HAL_UARTEx_SetTxFifoThreshold>
 8001b84:	1e03      	subs	r3, r0, #0
 8001b86:	d001      	beq.n	8001b8c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001b88:	f000 f992 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <MX_USART2_UART_Init+0x94>)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	0018      	movs	r0, r3
 8001b92:	f006 fa61 	bl	8008058 <HAL_UARTEx_SetRxFifoThreshold>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d001      	beq.n	8001b9e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001b9a:	f000 f989 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b9e:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <MX_USART2_UART_Init+0x94>)
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f006 f9df 	bl	8007f64 <HAL_UARTEx_DisableFifoMode>
 8001ba6:	1e03      	subs	r3, r0, #0
 8001ba8:	d001      	beq.n	8001bae <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001baa:	f000 f981 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000328 	.word	0x20000328
 8001bb8:	40004400 	.word	0x40004400

08001bbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	@ (8001c1c <MX_USART3_UART_Init+0x60>)
 8001bc2:	4a17      	ldr	r2, [pc, #92]	@ (8001c20 <MX_USART3_UART_Init+0x64>)
 8001bc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <MX_USART3_UART_Init+0x60>)
 8001bc8:	2296      	movs	r2, #150	@ 0x96
 8001bca:	0192      	lsls	r2, r2, #6
 8001bcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <MX_USART3_UART_Init+0x60>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <MX_USART3_UART_Init+0x60>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <MX_USART3_UART_Init+0x60>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <MX_USART3_UART_Init+0x60>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <MX_USART3_UART_Init+0x60>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <MX_USART3_UART_Init+0x60>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <MX_USART3_UART_Init+0x60>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bf8:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <MX_USART3_UART_Init+0x60>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <MX_USART3_UART_Init+0x60>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <MX_USART3_UART_Init+0x60>)
 8001c06:	0018      	movs	r0, r3
 8001c08:	f004 ff56 	bl	8006ab8 <HAL_UART_Init>
 8001c0c:	1e03      	subs	r3, r0, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c10:	f000 f94e 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c14:	46c0      	nop			@ (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			@ (mov r8, r8)
 8001c1c:	200003bc 	.word	0x200003bc
 8001c20:	40004800 	.word	0x40004800

08001c24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <MX_DMA_Init+0x38>)
 8001c2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <MX_DMA_Init+0x38>)
 8001c30:	2101      	movs	r1, #1
 8001c32:	430a      	orrs	r2, r1
 8001c34:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c36:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <MX_DMA_Init+0x38>)
 8001c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	2009      	movs	r0, #9
 8001c48:	f001 f8b2 	bl	8002db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c4c:	2009      	movs	r0, #9
 8001c4e:	f001 f8c4 	bl	8002dda <HAL_NVIC_EnableIRQ>

}
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b002      	add	sp, #8
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	40021000 	.word	0x40021000

08001c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b08b      	sub	sp, #44	@ 0x2c
 8001c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c66:	2414      	movs	r4, #20
 8001c68:	193b      	adds	r3, r7, r4
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	2314      	movs	r3, #20
 8001c6e:	001a      	movs	r2, r3
 8001c70:	2100      	movs	r1, #0
 8001c72:	f006 fb1b 	bl	80082ac <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	4b34      	ldr	r3, [pc, #208]	@ (8001d48 <MX_GPIO_Init+0xe8>)
 8001c78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c7a:	4b33      	ldr	r3, [pc, #204]	@ (8001d48 <MX_GPIO_Init+0xe8>)
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c82:	4b31      	ldr	r3, [pc, #196]	@ (8001d48 <MX_GPIO_Init+0xe8>)
 8001c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c86:	2204      	movs	r2, #4
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d48 <MX_GPIO_Init+0xe8>)
 8001c90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c92:	4b2d      	ldr	r3, [pc, #180]	@ (8001d48 <MX_GPIO_Init+0xe8>)
 8001c94:	2120      	movs	r1, #32
 8001c96:	430a      	orrs	r2, r1
 8001c98:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <MX_GPIO_Init+0xe8>)
 8001c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	4b28      	ldr	r3, [pc, #160]	@ (8001d48 <MX_GPIO_Init+0xe8>)
 8001ca8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001caa:	4b27      	ldr	r3, [pc, #156]	@ (8001d48 <MX_GPIO_Init+0xe8>)
 8001cac:	2101      	movs	r1, #1
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cb2:	4b25      	ldr	r3, [pc, #148]	@ (8001d48 <MX_GPIO_Init+0xe8>)
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	4b22      	ldr	r3, [pc, #136]	@ (8001d48 <MX_GPIO_Init+0xe8>)
 8001cc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cc2:	4b21      	ldr	r3, [pc, #132]	@ (8001d48 <MX_GPIO_Init+0xe8>)
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cca:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <MX_GPIO_Init+0xe8>)
 8001ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cce:	2202      	movs	r2, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d48 <MX_GPIO_Init+0xe8>)
 8001cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cda:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <MX_GPIO_Init+0xe8>)
 8001cdc:	2108      	movs	r1, #8
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ce2:	4b19      	ldr	r3, [pc, #100]	@ (8001d48 <MX_GPIO_Init+0xe8>)
 8001ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	4013      	ands	r3, r2
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001cee:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <MX_GPIO_Init+0xec>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f002 fb22 	bl	800433e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cfa:	193b      	adds	r3, r7, r4
 8001cfc:	2280      	movs	r2, #128	@ 0x80
 8001cfe:	0192      	lsls	r2, r2, #6
 8001d00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d02:	193b      	adds	r3, r7, r4
 8001d04:	2200      	movs	r2, #0
 8001d06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	193b      	adds	r3, r7, r4
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0e:	193b      	adds	r3, r7, r4
 8001d10:	4a0f      	ldr	r2, [pc, #60]	@ (8001d50 <MX_GPIO_Init+0xf0>)
 8001d12:	0019      	movs	r1, r3
 8001d14:	0010      	movs	r0, r2
 8001d16:	f002 f8c1 	bl	8003e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d1a:	0021      	movs	r1, r4
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d22:	187b      	adds	r3, r7, r1
 8001d24:	2201      	movs	r2, #1
 8001d26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	187b      	adds	r3, r7, r1
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	187b      	adds	r3, r7, r1
 8001d30:	2203      	movs	r2, #3
 8001d32:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	187b      	adds	r3, r7, r1
 8001d36:	4a05      	ldr	r2, [pc, #20]	@ (8001d4c <MX_GPIO_Init+0xec>)
 8001d38:	0019      	movs	r1, r3
 8001d3a:	0010      	movs	r0, r2
 8001d3c:	f002 f8ae 	bl	8003e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d40:	46c0      	nop			@ (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b00b      	add	sp, #44	@ 0x2c
 8001d46:	bd90      	pop	{r4, r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	50000400 	.word	0x50000400
 8001d50:	50000800 	.word	0x50000800

08001d54 <restart_RxDMA>:

/* USER CODE BEGIN 4 */

void restart_RxDMA(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bootloader_rx_data, BL_RX_DATA_LENGTH);
 8001d58:	4908      	ldr	r1, [pc, #32]	@ (8001d7c <restart_RxDMA+0x28>)
 8001d5a:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <restart_RxDMA+0x2c>)
 8001d5c:	22c8      	movs	r2, #200	@ 0xc8
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f006 f9bc 	bl	80080dc <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001d64:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <restart_RxDMA+0x30>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <restart_RxDMA+0x30>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2104      	movs	r1, #4
 8001d70:	438a      	bics	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
}
 8001d74:	46c0      	nop			@ (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			@ (mov r8, r8)
 8001d7c:	200004ac 	.word	0x200004ac
 8001d80:	200003bc 	.word	0x200003bc
 8001d84:	20000450 	.word	0x20000450

08001d88 <printMessage>:
void printMessage(char *format, ...) {
 8001d88:	b40f      	push	{r0, r1, r2, r3}
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b09a      	sub	sp, #104	@ 0x68
 8001d8e:	af00      	add	r7, sp, #0
	char comingMessage[100] = { 0 };
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	0018      	movs	r0, r3
 8001d94:	2364      	movs	r3, #100	@ 0x64
 8001d96:	001a      	movs	r2, r3
 8001d98:	2100      	movs	r1, #0
 8001d9a:	f006 fa87 	bl	80082ac <memset>
	va_list vaList;
	va_start(vaList, format);
 8001d9e:	2374      	movs	r3, #116	@ 0x74
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	603b      	str	r3, [r7, #0]
	vsprintf(comingMessage, format, vaList);
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	0018      	movs	r0, r3
 8001dac:	f006 fa72 	bl	8008294 <vsiprintf>
	SSD1306_GotoXY(0, 0);
 8001db0:	2100      	movs	r1, #0
 8001db2:	2000      	movs	r0, #0
 8001db4:	f000 fa02 	bl	80021bc <SSD1306_GotoXY>
	SSD1306_Puts(comingMessage, &Font_7x10, 1);
 8001db8:	4907      	ldr	r1, [pc, #28]	@ (8001dd8 <printMessage+0x50>)
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f000 fa96 	bl	80022f0 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001dc4:	f000 f93e 	bl	8002044 <SSD1306_UpdateScreen>
	va_end(vaList);
}
 8001dc8:	46c0      	nop			@ (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b01a      	add	sp, #104	@ 0x68
 8001dce:	bc80      	pop	{r7}
 8001dd0:	bc08      	pop	{r3}
 8001dd2:	b004      	add	sp, #16
 8001dd4:	4718      	bx	r3
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	20000000 	.word	0x20000000

08001ddc <bootloader_jump_to_user_application>:

void bootloader_jump_to_user_application(void) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
	//  Kesmeleri kapa
	/*__disable_irq();// __disable_irq deyince hal_delay çalışmıyor unutma !!!!!*/

	printMessage("bootloader_jump_to_user_application() \n");
 8001de2:	4b26      	ldr	r3, [pc, #152]	@ (8001e7c <bootloader_jump_to_user_application+0xa0>)
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff ffcf 	bl	8001d88 <printMessage>

	//  MSP'nin değerini tut
	uint32_t mspValue = *(volatile uint32_t*) FLASH_APP_BASE_ADDRESS;
 8001dea:	4b25      	ldr	r3, [pc, #148]	@ (8001e80 <bootloader_jump_to_user_application+0xa4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60fb      	str	r3, [r7, #12]
	printMessage("MSP Value: %#x \n", mspValue);
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <bootloader_jump_to_user_application+0xa8>)
 8001df4:	0011      	movs	r1, r2
 8001df6:	0018      	movs	r0, r3
 8001df8:	f7ff ffc6 	bl	8001d88 <printMessage>

	// Sıfırlama işleyicisinin değerini tut
	uint32_t resetValue = *(volatile uint32_t*) (FLASH_APP_BASE_ADDRESS + 4);
 8001dfc:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <bootloader_jump_to_user_application+0xac>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60bb      	str	r3, [r7, #8]
	printMessage("Reset Value: %#x \n", resetValue);
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	4b21      	ldr	r3, [pc, #132]	@ (8001e8c <bootloader_jump_to_user_application+0xb0>)
 8001e06:	0011      	movs	r1, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f7ff ffbd 	bl	8001d88 <printMessage>

	//  Periferleri sıfırla ve devre dışı bırak

	SCB->VTOR = FLASH_APP_BASE_ADDRESS;
 8001e0e:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <bootloader_jump_to_user_application+0xb4>)
 8001e10:	4a1b      	ldr	r2, [pc, #108]	@ (8001e80 <bootloader_jump_to_user_application+0xa4>)
 8001e12:	609a      	str	r2, [r3, #8]
	//__set_MSP(mspValue);	// Bu fonksiyon F407 De calisiyordu ama
	//L053 de çalışmıyor
	SysTick->CTRL = 0;
 8001e14:	4b1f      	ldr	r3, [pc, #124]	@ (8001e94 <bootloader_jump_to_user_application+0xb8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e94 <bootloader_jump_to_user_application+0xb8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001e20:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <bootloader_jump_to_user_application+0xb8>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
	HAL_I2C_DeInit(&hi2c1);
 8001e26:	4b1c      	ldr	r3, [pc, #112]	@ (8001e98 <bootloader_jump_to_user_application+0xbc>)
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f002 fb4b 	bl	80044c4 <HAL_I2C_DeInit>
	HAL_UART_MspDeInit(&huart3);
 8001e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e9c <bootloader_jump_to_user_application+0xc0>)
 8001e30:	0018      	movs	r0, r3
 8001e32:	f000 fd39 	bl	80028a8 <HAL_UART_MspDeInit>
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 8001e36:	2380      	movs	r3, #128	@ 0x80
 8001e38:	019b      	lsls	r3, r3, #6
 8001e3a:	4a19      	ldr	r2, [pc, #100]	@ (8001ea0 <bootloader_jump_to_user_application+0xc4>)
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	0010      	movs	r0, r2
 8001e40:	f002 f990 	bl	8004164 <HAL_GPIO_DeInit>
	HAL_UART_MspDeInit(&huart2);
 8001e44:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <bootloader_jump_to_user_application+0xc8>)
 8001e46:	0018      	movs	r0, r3
 8001e48:	f000 fd2e 	bl	80028a8 <HAL_UART_MspDeInit>
	HAL_DMA_DeInit(&hdma_usart3_rx);
 8001e4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <bootloader_jump_to_user_application+0xcc>)
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f001 fa94 	bl	800337c <HAL_DMA_DeInit>
	HAL_CRC_DeInit(&hcrc);
 8001e54:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <bootloader_jump_to_user_application+0xd0>)
 8001e56:	0018      	movs	r0, r3
 8001e58:	f001 f852 	bl	8002f00 <HAL_CRC_DeInit>
	HAL_RCC_DeInit();
 8001e5c:	f003 f8a2 	bl	8004fa4 <HAL_RCC_DeInit>

	HAL_DeInit();
 8001e60:	f000 fe22 	bl	8002aa8 <HAL_DeInit>
	resetValue = *((volatile uint32_t*) (FLASH_APP_BASE_ADDRESS + 4));
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <bootloader_jump_to_user_application+0xac>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60bb      	str	r3, [r7, #8]
	void (*jump_to_app)(void) = (void *)resetValue;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	607b      	str	r3, [r7, #4]
	jump_to_app();
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4798      	blx	r3

}
 8001e72:	46c0      	nop			@ (mov r8, r8)
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b004      	add	sp, #16
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	08008ea0 	.word	0x08008ea0
 8001e80:	08011000 	.word	0x08011000
 8001e84:	08008ec8 	.word	0x08008ec8
 8001e88:	08011004 	.word	0x08011004
 8001e8c:	08008edc 	.word	0x08008edc
 8001e90:	e000ed00 	.word	0xe000ed00
 8001e94:	e000e010 	.word	0xe000e010
 8001e98:	20000270 	.word	0x20000270
 8001e9c:	200003bc 	.word	0x200003bc
 8001ea0:	50000800 	.word	0x50000800
 8001ea4:	20000328 	.word	0x20000328
 8001ea8:	20000450 	.word	0x20000450
 8001eac:	2000024c 	.word	0x2000024c

08001eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb4:	b672      	cpsid	i
}
 8001eb6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb8:	46c0      	nop			@ (mov r8, r8)
 8001eba:	e7fd      	b.n	8001eb8 <Error_Handler+0x8>

08001ebc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001ec2:	f000 fa3b 	bl	800233c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8002034 <SSD1306_Init+0x178>)
 8001ec8:	485b      	ldr	r0, [pc, #364]	@ (8002038 <SSD1306_Init+0x17c>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2178      	movs	r1, #120	@ 0x78
 8001ece:	f002 fc53 	bl	8004778 <HAL_I2C_IsDeviceReady>
 8001ed2:	1e03      	subs	r3, r0, #0
 8001ed4:	d001      	beq.n	8001eda <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e0a8      	b.n	800202c <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001eda:	4b58      	ldr	r3, [pc, #352]	@ (800203c <SSD1306_Init+0x180>)
 8001edc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ede:	e002      	b.n	8001ee6 <SSD1306_Init+0x2a>
		p--;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f9      	bne.n	8001ee0 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001eec:	22ae      	movs	r2, #174	@ 0xae
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2078      	movs	r0, #120	@ 0x78
 8001ef2:	f000 faa3 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2078      	movs	r0, #120	@ 0x78
 8001efc:	f000 fa9e 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f00:	2210      	movs	r2, #16
 8001f02:	2100      	movs	r1, #0
 8001f04:	2078      	movs	r0, #120	@ 0x78
 8001f06:	f000 fa99 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f0a:	22b0      	movs	r2, #176	@ 0xb0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2078      	movs	r0, #120	@ 0x78
 8001f10:	f000 fa94 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001f14:	22c8      	movs	r2, #200	@ 0xc8
 8001f16:	2100      	movs	r1, #0
 8001f18:	2078      	movs	r0, #120	@ 0x78
 8001f1a:	f000 fa8f 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	2078      	movs	r0, #120	@ 0x78
 8001f24:	f000 fa8a 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001f28:	2210      	movs	r2, #16
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2078      	movs	r0, #120	@ 0x78
 8001f2e:	f000 fa85 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001f32:	2240      	movs	r2, #64	@ 0x40
 8001f34:	2100      	movs	r1, #0
 8001f36:	2078      	movs	r0, #120	@ 0x78
 8001f38:	f000 fa80 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001f3c:	2281      	movs	r2, #129	@ 0x81
 8001f3e:	2100      	movs	r1, #0
 8001f40:	2078      	movs	r0, #120	@ 0x78
 8001f42:	f000 fa7b 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001f46:	22ff      	movs	r2, #255	@ 0xff
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2078      	movs	r0, #120	@ 0x78
 8001f4c:	f000 fa76 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001f50:	22a1      	movs	r2, #161	@ 0xa1
 8001f52:	2100      	movs	r1, #0
 8001f54:	2078      	movs	r0, #120	@ 0x78
 8001f56:	f000 fa71 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001f5a:	22a6      	movs	r2, #166	@ 0xa6
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2078      	movs	r0, #120	@ 0x78
 8001f60:	f000 fa6c 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001f64:	22a8      	movs	r2, #168	@ 0xa8
 8001f66:	2100      	movs	r1, #0
 8001f68:	2078      	movs	r0, #120	@ 0x78
 8001f6a:	f000 fa67 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001f6e:	223f      	movs	r2, #63	@ 0x3f
 8001f70:	2100      	movs	r1, #0
 8001f72:	2078      	movs	r0, #120	@ 0x78
 8001f74:	f000 fa62 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001f78:	22a4      	movs	r2, #164	@ 0xa4
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2078      	movs	r0, #120	@ 0x78
 8001f7e:	f000 fa5d 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001f82:	22d3      	movs	r2, #211	@ 0xd3
 8001f84:	2100      	movs	r1, #0
 8001f86:	2078      	movs	r0, #120	@ 0x78
 8001f88:	f000 fa58 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2078      	movs	r0, #120	@ 0x78
 8001f92:	f000 fa53 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f96:	22d5      	movs	r2, #213	@ 0xd5
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2078      	movs	r0, #120	@ 0x78
 8001f9c:	f000 fa4e 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001fa0:	22f0      	movs	r2, #240	@ 0xf0
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	2078      	movs	r0, #120	@ 0x78
 8001fa6:	f000 fa49 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001faa:	22d9      	movs	r2, #217	@ 0xd9
 8001fac:	2100      	movs	r1, #0
 8001fae:	2078      	movs	r0, #120	@ 0x78
 8001fb0:	f000 fa44 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001fb4:	2222      	movs	r2, #34	@ 0x22
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	2078      	movs	r0, #120	@ 0x78
 8001fba:	f000 fa3f 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001fbe:	22da      	movs	r2, #218	@ 0xda
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2078      	movs	r0, #120	@ 0x78
 8001fc4:	f000 fa3a 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001fc8:	2212      	movs	r2, #18
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2078      	movs	r0, #120	@ 0x78
 8001fce:	f000 fa35 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001fd2:	22db      	movs	r2, #219	@ 0xdb
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2078      	movs	r0, #120	@ 0x78
 8001fd8:	f000 fa30 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001fdc:	2220      	movs	r2, #32
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2078      	movs	r0, #120	@ 0x78
 8001fe2:	f000 fa2b 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001fe6:	228d      	movs	r2, #141	@ 0x8d
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2078      	movs	r0, #120	@ 0x78
 8001fec:	f000 fa26 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001ff0:	2214      	movs	r2, #20
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	2078      	movs	r0, #120	@ 0x78
 8001ff6:	f000 fa21 	bl	800243c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001ffa:	22af      	movs	r2, #175	@ 0xaf
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2078      	movs	r0, #120	@ 0x78
 8002000:	f000 fa1c 	bl	800243c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002004:	222e      	movs	r2, #46	@ 0x2e
 8002006:	2100      	movs	r1, #0
 8002008:	2078      	movs	r0, #120	@ 0x78
 800200a:	f000 fa17 	bl	800243c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800200e:	2000      	movs	r0, #0
 8002010:	f000 f84c 	bl	80020ac <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002014:	f000 f816 	bl	8002044 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002018:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <SSD1306_Init+0x184>)
 800201a:	2200      	movs	r2, #0
 800201c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800201e:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <SSD1306_Init+0x184>)
 8002020:	2200      	movs	r2, #0
 8002022:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002024:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <SSD1306_Init+0x184>)
 8002026:	2201      	movs	r2, #1
 8002028:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800202a:	2301      	movs	r3, #1
}
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	b002      	add	sp, #8
 8002032:	bd80      	pop	{r7, pc}
 8002034:	00004e20 	.word	0x00004e20
 8002038:	20000270 	.word	0x20000270
 800203c:	000009c4 	.word	0x000009c4
 8002040:	20001148 	.word	0x20001148

08002044 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800204a:	1dfb      	adds	r3, r7, #7
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
 8002050:	e021      	b.n	8002096 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	3b50      	subs	r3, #80	@ 0x50
 8002058:	b2db      	uxtb	r3, r3
 800205a:	001a      	movs	r2, r3
 800205c:	2100      	movs	r1, #0
 800205e:	2078      	movs	r0, #120	@ 0x78
 8002060:	f000 f9ec 	bl	800243c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	2078      	movs	r0, #120	@ 0x78
 800206a:	f000 f9e7 	bl	800243c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800206e:	2210      	movs	r2, #16
 8002070:	2100      	movs	r1, #0
 8002072:	2078      	movs	r0, #120	@ 0x78
 8002074:	f000 f9e2 	bl	800243c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002078:	1dfb      	adds	r3, r7, #7
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	01da      	lsls	r2, r3, #7
 800207e:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <SSD1306_UpdateScreen+0x64>)
 8002080:	18d2      	adds	r2, r2, r3
 8002082:	2380      	movs	r3, #128	@ 0x80
 8002084:	2140      	movs	r1, #64	@ 0x40
 8002086:	2078      	movs	r0, #120	@ 0x78
 8002088:	f000 f96c 	bl	8002364 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800208c:	1dfb      	adds	r3, r7, #7
 800208e:	781a      	ldrb	r2, [r3, #0]
 8002090:	1dfb      	adds	r3, r7, #7
 8002092:	3201      	adds	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	1dfb      	adds	r3, r7, #7
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b07      	cmp	r3, #7
 800209c:	d9d9      	bls.n	8002052 <SSD1306_UpdateScreen+0xe>
	}
}
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	46c0      	nop			@ (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b002      	add	sp, #8
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000d48 	.word	0x20000d48

080020ac <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	0002      	movs	r2, r0
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <SSD1306_Fill+0x18>
 80020c0:	2300      	movs	r3, #0
 80020c2:	e000      	b.n	80020c6 <SSD1306_Fill+0x1a>
 80020c4:	23ff      	movs	r3, #255	@ 0xff
 80020c6:	2280      	movs	r2, #128	@ 0x80
 80020c8:	00d2      	lsls	r2, r2, #3
 80020ca:	4804      	ldr	r0, [pc, #16]	@ (80020dc <SSD1306_Fill+0x30>)
 80020cc:	0019      	movs	r1, r3
 80020ce:	f006 f8ed 	bl	80082ac <memset>
}
 80020d2:	46c0      	nop			@ (mov r8, r8)
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b002      	add	sp, #8
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	20000d48 	.word	0x20000d48

080020e0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	0004      	movs	r4, r0
 80020e8:	0008      	movs	r0, r1
 80020ea:	0011      	movs	r1, r2
 80020ec:	1dbb      	adds	r3, r7, #6
 80020ee:	1c22      	adds	r2, r4, #0
 80020f0:	801a      	strh	r2, [r3, #0]
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	1c02      	adds	r2, r0, #0
 80020f6:	801a      	strh	r2, [r3, #0]
 80020f8:	1cfb      	adds	r3, r7, #3
 80020fa:	1c0a      	adds	r2, r1, #0
 80020fc:	701a      	strb	r2, [r3, #0]
	if (
 80020fe:	1dbb      	adds	r3, r7, #6
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	2b7f      	cmp	r3, #127	@ 0x7f
 8002104:	d852      	bhi.n	80021ac <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	2b3f      	cmp	r3, #63	@ 0x3f
 800210c:	d84e      	bhi.n	80021ac <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800210e:	4b29      	ldr	r3, [pc, #164]	@ (80021b4 <SSD1306_DrawPixel+0xd4>)
 8002110:	791b      	ldrb	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8002116:	1cfb      	adds	r3, r7, #3
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	425a      	negs	r2, r3
 800211c:	4153      	adcs	r3, r2
 800211e:	b2da      	uxtb	r2, r3
 8002120:	1cfb      	adds	r3, r7, #3
 8002122:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002124:	1cfb      	adds	r3, r7, #3
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d11e      	bne.n	800216a <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800212c:	1dbb      	adds	r3, r7, #6
 800212e:	881a      	ldrh	r2, [r3, #0]
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	08db      	lsrs	r3, r3, #3
 8002136:	b298      	uxth	r0, r3
 8002138:	0003      	movs	r3, r0
 800213a:	01db      	lsls	r3, r3, #7
 800213c:	18d3      	adds	r3, r2, r3
 800213e:	4a1e      	ldr	r2, [pc, #120]	@ (80021b8 <SSD1306_DrawPixel+0xd8>)
 8002140:	5cd3      	ldrb	r3, [r2, r3]
 8002142:	b25a      	sxtb	r2, r3
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	2107      	movs	r1, #7
 800214a:	400b      	ands	r3, r1
 800214c:	2101      	movs	r1, #1
 800214e:	4099      	lsls	r1, r3
 8002150:	000b      	movs	r3, r1
 8002152:	b25b      	sxtb	r3, r3
 8002154:	4313      	orrs	r3, r2
 8002156:	b259      	sxtb	r1, r3
 8002158:	1dbb      	adds	r3, r7, #6
 800215a:	881a      	ldrh	r2, [r3, #0]
 800215c:	0003      	movs	r3, r0
 800215e:	01db      	lsls	r3, r3, #7
 8002160:	18d3      	adds	r3, r2, r3
 8002162:	b2c9      	uxtb	r1, r1
 8002164:	4a14      	ldr	r2, [pc, #80]	@ (80021b8 <SSD1306_DrawPixel+0xd8>)
 8002166:	54d1      	strb	r1, [r2, r3]
 8002168:	e021      	b.n	80021ae <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800216a:	1dbb      	adds	r3, r7, #6
 800216c:	881a      	ldrh	r2, [r3, #0]
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	08db      	lsrs	r3, r3, #3
 8002174:	b298      	uxth	r0, r3
 8002176:	0003      	movs	r3, r0
 8002178:	01db      	lsls	r3, r3, #7
 800217a:	18d3      	adds	r3, r2, r3
 800217c:	4a0e      	ldr	r2, [pc, #56]	@ (80021b8 <SSD1306_DrawPixel+0xd8>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	b25b      	sxtb	r3, r3
 8002182:	1d3a      	adds	r2, r7, #4
 8002184:	8812      	ldrh	r2, [r2, #0]
 8002186:	2107      	movs	r1, #7
 8002188:	400a      	ands	r2, r1
 800218a:	2101      	movs	r1, #1
 800218c:	4091      	lsls	r1, r2
 800218e:	000a      	movs	r2, r1
 8002190:	b252      	sxtb	r2, r2
 8002192:	43d2      	mvns	r2, r2
 8002194:	b252      	sxtb	r2, r2
 8002196:	4013      	ands	r3, r2
 8002198:	b259      	sxtb	r1, r3
 800219a:	1dbb      	adds	r3, r7, #6
 800219c:	881a      	ldrh	r2, [r3, #0]
 800219e:	0003      	movs	r3, r0
 80021a0:	01db      	lsls	r3, r3, #7
 80021a2:	18d3      	adds	r3, r2, r3
 80021a4:	b2c9      	uxtb	r1, r1
 80021a6:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <SSD1306_DrawPixel+0xd8>)
 80021a8:	54d1      	strb	r1, [r2, r3]
 80021aa:	e000      	b.n	80021ae <SSD1306_DrawPixel+0xce>
		return;
 80021ac:	46c0      	nop			@ (mov r8, r8)
	}
}
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b003      	add	sp, #12
 80021b2:	bd90      	pop	{r4, r7, pc}
 80021b4:	20001148 	.word	0x20001148
 80021b8:	20000d48 	.word	0x20000d48

080021bc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	0002      	movs	r2, r0
 80021c4:	1dbb      	adds	r3, r7, #6
 80021c6:	801a      	strh	r2, [r3, #0]
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	1c0a      	adds	r2, r1, #0
 80021cc:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80021ce:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <SSD1306_GotoXY+0x2c>)
 80021d0:	1dba      	adds	r2, r7, #6
 80021d2:	8812      	ldrh	r2, [r2, #0]
 80021d4:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80021d6:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <SSD1306_GotoXY+0x2c>)
 80021d8:	1d3a      	adds	r2, r7, #4
 80021da:	8812      	ldrh	r2, [r2, #0]
 80021dc:	805a      	strh	r2, [r3, #2]
}
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b002      	add	sp, #8
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	20001148 	.word	0x20001148

080021ec <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6039      	str	r1, [r7, #0]
 80021f4:	0011      	movs	r1, r2
 80021f6:	1dfb      	adds	r3, r7, #7
 80021f8:	1c02      	adds	r2, r0, #0
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	1dbb      	adds	r3, r7, #6
 80021fe:	1c0a      	adds	r2, r1, #0
 8002200:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002202:	4b3a      	ldr	r3, [pc, #232]	@ (80022ec <SSD1306_Putc+0x100>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	001a      	movs	r2, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	18d3      	adds	r3, r2, r3
	if (
 800220e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002210:	dc07      	bgt.n	8002222 <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002212:	4b36      	ldr	r3, [pc, #216]	@ (80022ec <SSD1306_Putc+0x100>)
 8002214:	885b      	ldrh	r3, [r3, #2]
 8002216:	001a      	movs	r2, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	785b      	ldrb	r3, [r3, #1]
 800221c:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800221e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002220:	dd01      	ble.n	8002226 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8002222:	2300      	movs	r3, #0
 8002224:	e05d      	b.n	80022e2 <SSD1306_Putc+0xf6>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e04a      	b.n	80022c2 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	1dfb      	adds	r3, r7, #7
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	3b20      	subs	r3, #32
 8002236:	6839      	ldr	r1, [r7, #0]
 8002238:	7849      	ldrb	r1, [r1, #1]
 800223a:	434b      	muls	r3, r1
 800223c:	0019      	movs	r1, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	18cb      	adds	r3, r1, r3
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	18d3      	adds	r3, r2, r3
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	e02f      	b.n	80022b0 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	409a      	lsls	r2, r3
 8002256:	2380      	movs	r3, #128	@ 0x80
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	4013      	ands	r3, r2
 800225c:	d011      	beq.n	8002282 <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800225e:	4b23      	ldr	r3, [pc, #140]	@ (80022ec <SSD1306_Putc+0x100>)
 8002260:	881a      	ldrh	r2, [r3, #0]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	b29b      	uxth	r3, r3
 8002266:	18d3      	adds	r3, r2, r3
 8002268:	b298      	uxth	r0, r3
 800226a:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <SSD1306_Putc+0x100>)
 800226c:	885a      	ldrh	r2, [r3, #2]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	b29b      	uxth	r3, r3
 8002272:	18d3      	adds	r3, r2, r3
 8002274:	b299      	uxth	r1, r3
 8002276:	1dbb      	adds	r3, r7, #6
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	001a      	movs	r2, r3
 800227c:	f7ff ff30 	bl	80020e0 <SSD1306_DrawPixel>
 8002280:	e013      	b.n	80022aa <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002282:	4b1a      	ldr	r3, [pc, #104]	@ (80022ec <SSD1306_Putc+0x100>)
 8002284:	881a      	ldrh	r2, [r3, #0]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	b29b      	uxth	r3, r3
 800228a:	18d3      	adds	r3, r2, r3
 800228c:	b298      	uxth	r0, r3
 800228e:	4b17      	ldr	r3, [pc, #92]	@ (80022ec <SSD1306_Putc+0x100>)
 8002290:	885a      	ldrh	r2, [r3, #2]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	b29b      	uxth	r3, r3
 8002296:	18d3      	adds	r3, r2, r3
 8002298:	b299      	uxth	r1, r3
 800229a:	1dbb      	adds	r3, r7, #6
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	425a      	negs	r2, r3
 80022a0:	4153      	adcs	r3, r2
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	001a      	movs	r2, r3
 80022a6:	f7ff ff1b 	bl	80020e0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	3301      	adds	r3, #1
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	001a      	movs	r2, r3
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d3c9      	bcc.n	8002250 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3301      	adds	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	785b      	ldrb	r3, [r3, #1]
 80022c6:	001a      	movs	r2, r3
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d3ae      	bcc.n	800222c <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80022ce:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <SSD1306_Putc+0x100>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	7812      	ldrb	r2, [r2, #0]
 80022d6:	189b      	adds	r3, r3, r2
 80022d8:	b29a      	uxth	r2, r3
 80022da:	4b04      	ldr	r3, [pc, #16]	@ (80022ec <SSD1306_Putc+0x100>)
 80022dc:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	781b      	ldrb	r3, [r3, #0]
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b006      	add	sp, #24
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	20001148 	.word	0x20001148

080022f0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 80022fe:	e013      	b.n	8002328 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	7818      	ldrb	r0, [r3, #0]
 8002304:	1dfb      	adds	r3, r7, #7
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	0019      	movs	r1, r3
 800230c:	f7ff ff6e 	bl	80021ec <SSD1306_Putc>
 8002310:	0003      	movs	r3, r0
 8002312:	001a      	movs	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d002      	beq.n	8002322 <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	e008      	b.n	8002334 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3301      	adds	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1e7      	bne.n	8002300 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	781b      	ldrb	r3, [r3, #0]
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b004      	add	sp, #16
 800233a:	bd80      	pop	{r7, pc}

0800233c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002342:	4b07      	ldr	r3, [pc, #28]	@ (8002360 <ssd1306_I2C_Init+0x24>)
 8002344:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002346:	e002      	b.n	800234e <ssd1306_I2C_Init+0x12>
		p--;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f9      	bne.n	8002348 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002354:	46c0      	nop			@ (mov r8, r8)
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	b002      	add	sp, #8
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	0003d090 	.word	0x0003d090

08002364 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002364:	b5b0      	push	{r4, r5, r7, lr}
 8002366:	b0c6      	sub	sp, #280	@ 0x118
 8002368:	af02      	add	r7, sp, #8
 800236a:	0004      	movs	r4, r0
 800236c:	0008      	movs	r0, r1
 800236e:	603a      	str	r2, [r7, #0]
 8002370:	0019      	movs	r1, r3
 8002372:	4b2d      	ldr	r3, [pc, #180]	@ (8002428 <ssd1306_I2C_WriteMulti+0xc4>)
 8002374:	2588      	movs	r5, #136	@ 0x88
 8002376:	006d      	lsls	r5, r5, #1
 8002378:	195b      	adds	r3, r3, r5
 800237a:	19db      	adds	r3, r3, r7
 800237c:	1c22      	adds	r2, r4, #0
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	4b2a      	ldr	r3, [pc, #168]	@ (800242c <ssd1306_I2C_WriteMulti+0xc8>)
 8002382:	002c      	movs	r4, r5
 8002384:	191b      	adds	r3, r3, r4
 8002386:	19db      	adds	r3, r3, r7
 8002388:	1c02      	adds	r2, r0, #0
 800238a:	701a      	strb	r2, [r3, #0]
 800238c:	4b28      	ldr	r3, [pc, #160]	@ (8002430 <ssd1306_I2C_WriteMulti+0xcc>)
 800238e:	0020      	movs	r0, r4
 8002390:	181b      	adds	r3, r3, r0
 8002392:	19db      	adds	r3, r3, r7
 8002394:	1c0a      	adds	r2, r1, #0
 8002396:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002398:	4b26      	ldr	r3, [pc, #152]	@ (8002434 <ssd1306_I2C_WriteMulti+0xd0>)
 800239a:	181b      	adds	r3, r3, r0
 800239c:	19db      	adds	r3, r3, r7
 800239e:	4a23      	ldr	r2, [pc, #140]	@ (800242c <ssd1306_I2C_WriteMulti+0xc8>)
 80023a0:	1812      	adds	r2, r2, r0
 80023a2:	19d2      	adds	r2, r2, r7
 80023a4:	7812      	ldrb	r2, [r2, #0]
 80023a6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80023a8:	2310      	movs	r3, #16
 80023aa:	33ff      	adds	r3, #255	@ 0xff
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e014      	b.n	80023de <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 80023b4:	2010      	movs	r0, #16
 80023b6:	30ff      	adds	r0, #255	@ 0xff
 80023b8:	183b      	adds	r3, r7, r0
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	18d2      	adds	r2, r2, r3
 80023c0:	183b      	adds	r3, r7, r0
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	7811      	ldrb	r1, [r2, #0]
 80023c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002434 <ssd1306_I2C_WriteMulti+0xd0>)
 80023ca:	2488      	movs	r4, #136	@ 0x88
 80023cc:	0064      	lsls	r4, r4, #1
 80023ce:	1912      	adds	r2, r2, r4
 80023d0:	19d2      	adds	r2, r2, r7
 80023d2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80023d4:	183b      	adds	r3, r7, r0
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	183b      	adds	r3, r7, r0
 80023da:	3201      	adds	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	2310      	movs	r3, #16
 80023e0:	33ff      	adds	r3, #255	@ 0xff
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4a11      	ldr	r2, [pc, #68]	@ (8002430 <ssd1306_I2C_WriteMulti+0xcc>)
 80023ea:	2188      	movs	r1, #136	@ 0x88
 80023ec:	0049      	lsls	r1, r1, #1
 80023ee:	1852      	adds	r2, r2, r1
 80023f0:	19d2      	adds	r2, r2, r7
 80023f2:	8812      	ldrh	r2, [r2, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d8dd      	bhi.n	80023b4 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <ssd1306_I2C_WriteMulti+0xc4>)
 80023fa:	000a      	movs	r2, r1
 80023fc:	189b      	adds	r3, r3, r2
 80023fe:	19db      	adds	r3, r3, r7
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b299      	uxth	r1, r3
 8002404:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <ssd1306_I2C_WriteMulti+0xcc>)
 8002406:	189b      	adds	r3, r3, r2
 8002408:	19db      	adds	r3, r3, r7
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	b29b      	uxth	r3, r3
 8002410:	220c      	movs	r2, #12
 8002412:	18ba      	adds	r2, r7, r2
 8002414:	4808      	ldr	r0, [pc, #32]	@ (8002438 <ssd1306_I2C_WriteMulti+0xd4>)
 8002416:	240a      	movs	r4, #10
 8002418:	9400      	str	r4, [sp, #0]
 800241a:	f002 f883 	bl	8004524 <HAL_I2C_Master_Transmit>
}
 800241e:	46c0      	nop			@ (mov r8, r8)
 8002420:	46bd      	mov	sp, r7
 8002422:	b044      	add	sp, #272	@ 0x110
 8002424:	bdb0      	pop	{r4, r5, r7, pc}
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	fffffef7 	.word	0xfffffef7
 800242c:	fffffef6 	.word	0xfffffef6
 8002430:	fffffef4 	.word	0xfffffef4
 8002434:	fffffefc 	.word	0xfffffefc
 8002438:	20000270 	.word	0x20000270

0800243c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b087      	sub	sp, #28
 8002440:	af02      	add	r7, sp, #8
 8002442:	0004      	movs	r4, r0
 8002444:	0008      	movs	r0, r1
 8002446:	0011      	movs	r1, r2
 8002448:	1dfb      	adds	r3, r7, #7
 800244a:	1c22      	adds	r2, r4, #0
 800244c:	701a      	strb	r2, [r3, #0]
 800244e:	1dbb      	adds	r3, r7, #6
 8002450:	1c02      	adds	r2, r0, #0
 8002452:	701a      	strb	r2, [r3, #0]
 8002454:	1d7b      	adds	r3, r7, #5
 8002456:	1c0a      	adds	r2, r1, #0
 8002458:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 800245a:	200c      	movs	r0, #12
 800245c:	183b      	adds	r3, r7, r0
 800245e:	1dba      	adds	r2, r7, #6
 8002460:	7812      	ldrb	r2, [r2, #0]
 8002462:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8002464:	183b      	adds	r3, r7, r0
 8002466:	1d7a      	adds	r2, r7, #5
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b299      	uxth	r1, r3
 8002472:	183a      	adds	r2, r7, r0
 8002474:	4804      	ldr	r0, [pc, #16]	@ (8002488 <ssd1306_I2C_Write+0x4c>)
 8002476:	230a      	movs	r3, #10
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2302      	movs	r3, #2
 800247c:	f002 f852 	bl	8004524 <HAL_I2C_Master_Transmit>
}
 8002480:	46c0      	nop			@ (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b005      	add	sp, #20
 8002486:	bd90      	pop	{r4, r7, pc}
 8002488:	20000270 	.word	0x20000270

0800248c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002492:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <HAL_MspInit+0x54>)
 8002494:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002496:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <HAL_MspInit+0x54>)
 8002498:	2101      	movs	r1, #1
 800249a:	430a      	orrs	r2, r1
 800249c:	641a      	str	r2, [r3, #64]	@ 0x40
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <HAL_MspInit+0x54>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	2201      	movs	r2, #1
 80024a4:	4013      	ands	r3, r2
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <HAL_MspInit+0x54>)
 80024ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024ae:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <HAL_MspInit+0x54>)
 80024b0:	2180      	movs	r1, #128	@ 0x80
 80024b2:	0549      	lsls	r1, r1, #21
 80024b4:	430a      	orrs	r2, r1
 80024b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024b8:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <HAL_MspInit+0x54>)
 80024ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024bc:	2380      	movs	r3, #128	@ 0x80
 80024be:	055b      	lsls	r3, r3, #21
 80024c0:	4013      	ands	r3, r2
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 1, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2101      	movs	r1, #1
 80024ca:	2003      	movs	r0, #3
 80024cc:	f000 fc70 	bl	8002db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80024d0:	2003      	movs	r0, #3
 80024d2:	f000 fc82 	bl	8002dda <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	46bd      	mov	sp, r7
 80024da:	b002      	add	sp, #8
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	46c0      	nop			@ (mov r8, r8)
 80024e0:	40021000 	.word	0x40021000

080024e4 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <HAL_CRC_MspInit+0x38>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10d      	bne.n	8002512 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80024f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <HAL_CRC_MspInit+0x3c>)
 80024f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024fa:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <HAL_CRC_MspInit+0x3c>)
 80024fc:	2180      	movs	r1, #128	@ 0x80
 80024fe:	0149      	lsls	r1, r1, #5
 8002500:	430a      	orrs	r2, r1
 8002502:	639a      	str	r2, [r3, #56]	@ 0x38
 8002504:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <HAL_CRC_MspInit+0x3c>)
 8002506:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	015b      	lsls	r3, r3, #5
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b004      	add	sp, #16
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	40023000 	.word	0x40023000
 8002520:	40021000 	.word	0x40021000

08002524 <HAL_CRC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a06      	ldr	r2, [pc, #24]	@ (800254c <HAL_CRC_MspDeInit+0x28>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d105      	bne.n	8002542 <HAL_CRC_MspDeInit+0x1e>
  {
    /* USER CODE BEGIN CRC_MspDeInit 0 */

    /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_CRC_MspDeInit+0x2c>)
 8002538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <HAL_CRC_MspDeInit+0x2c>)
 800253c:	4905      	ldr	r1, [pc, #20]	@ (8002554 <HAL_CRC_MspDeInit+0x30>)
 800253e:	400a      	ands	r2, r1
 8002540:	639a      	str	r2, [r3, #56]	@ 0x38
    /* USER CODE BEGIN CRC_MspDeInit 1 */

    /* USER CODE END CRC_MspDeInit 1 */
  }

}
 8002542:	46c0      	nop			@ (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	b002      	add	sp, #8
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			@ (mov r8, r8)
 800254c:	40023000 	.word	0x40023000
 8002550:	40021000 	.word	0x40021000
 8002554:	ffffefff 	.word	0xffffefff

08002558 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b091      	sub	sp, #68	@ 0x44
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	232c      	movs	r3, #44	@ 0x2c
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	0018      	movs	r0, r3
 8002566:	2314      	movs	r3, #20
 8002568:	001a      	movs	r2, r3
 800256a:	2100      	movs	r1, #0
 800256c:	f005 fe9e 	bl	80082ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002570:	2410      	movs	r4, #16
 8002572:	193b      	adds	r3, r7, r4
 8002574:	0018      	movs	r0, r3
 8002576:	231c      	movs	r3, #28
 8002578:	001a      	movs	r2, r3
 800257a:	2100      	movs	r1, #0
 800257c:	f005 fe96 	bl	80082ac <memset>
  if(hi2c->Instance==I2C1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a22      	ldr	r2, [pc, #136]	@ (8002610 <HAL_I2C_MspInit+0xb8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d13e      	bne.n	8002608 <HAL_I2C_MspInit+0xb0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800258a:	193b      	adds	r3, r7, r4
 800258c:	2220      	movs	r2, #32
 800258e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002590:	193b      	adds	r3, r7, r4
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002596:	193b      	adds	r3, r7, r4
 8002598:	0018      	movs	r0, r3
 800259a:	f003 fa39 	bl	8005a10 <HAL_RCCEx_PeriphCLKConfig>
 800259e:	1e03      	subs	r3, r0, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80025a2:	f7ff fc85 	bl	8001eb0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002614 <HAL_I2C_MspInit+0xbc>)
 80025a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002614 <HAL_I2C_MspInit+0xbc>)
 80025ac:	2102      	movs	r1, #2
 80025ae:	430a      	orrs	r2, r1
 80025b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80025b2:	4b18      	ldr	r3, [pc, #96]	@ (8002614 <HAL_I2C_MspInit+0xbc>)
 80025b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b6:	2202      	movs	r2, #2
 80025b8:	4013      	ands	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025be:	212c      	movs	r1, #44	@ 0x2c
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	22c0      	movs	r2, #192	@ 0xc0
 80025c4:	0092      	lsls	r2, r2, #2
 80025c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	2212      	movs	r2, #18
 80025cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	2200      	movs	r2, #0
 80025d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80025da:	187b      	adds	r3, r7, r1
 80025dc:	2206      	movs	r2, #6
 80025de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002618 <HAL_I2C_MspInit+0xc0>)
 80025e4:	0019      	movs	r1, r3
 80025e6:	0010      	movs	r0, r2
 80025e8:	f001 fc58 	bl	8003e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025ec:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <HAL_I2C_MspInit+0xbc>)
 80025ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025f0:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <HAL_I2C_MspInit+0xbc>)
 80025f2:	2180      	movs	r1, #128	@ 0x80
 80025f4:	0389      	lsls	r1, r1, #14
 80025f6:	430a      	orrs	r2, r1
 80025f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025fa:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <HAL_I2C_MspInit+0xbc>)
 80025fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025fe:	2380      	movs	r3, #128	@ 0x80
 8002600:	039b      	lsls	r3, r3, #14
 8002602:	4013      	ands	r3, r2
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002608:	46c0      	nop			@ (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	b011      	add	sp, #68	@ 0x44
 800260e:	bd90      	pop	{r4, r7, pc}
 8002610:	40005400 	.word	0x40005400
 8002614:	40021000 	.word	0x40021000
 8002618:	50000400 	.word	0x50000400

0800261c <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0d      	ldr	r2, [pc, #52]	@ (8002660 <HAL_I2C_MspDeInit+0x44>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d113      	bne.n	8002656 <HAL_I2C_MspDeInit+0x3a>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <HAL_I2C_MspDeInit+0x48>)
 8002630:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002632:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <HAL_I2C_MspDeInit+0x48>)
 8002634:	490c      	ldr	r1, [pc, #48]	@ (8002668 <HAL_I2C_MspDeInit+0x4c>)
 8002636:	400a      	ands	r2, r1
 8002638:	63da      	str	r2, [r3, #60]	@ 0x3c

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4a0b      	ldr	r2, [pc, #44]	@ (800266c <HAL_I2C_MspDeInit+0x50>)
 8002640:	0019      	movs	r1, r3
 8002642:	0010      	movs	r0, r2
 8002644:	f001 fd8e 	bl	8004164 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4a07      	ldr	r2, [pc, #28]	@ (800266c <HAL_I2C_MspDeInit+0x50>)
 800264e:	0019      	movs	r1, r3
 8002650:	0010      	movs	r0, r2
 8002652:	f001 fd87 	bl	8004164 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002656:	46c0      	nop			@ (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	b002      	add	sp, #8
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			@ (mov r8, r8)
 8002660:	40005400 	.word	0x40005400
 8002664:	40021000 	.word	0x40021000
 8002668:	ffdfffff 	.word	0xffdfffff
 800266c:	50000400 	.word	0x50000400

08002670 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b08b      	sub	sp, #44	@ 0x2c
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	2414      	movs	r4, #20
 800267a:	193b      	adds	r3, r7, r4
 800267c:	0018      	movs	r0, r3
 800267e:	2314      	movs	r3, #20
 8002680:	001a      	movs	r2, r3
 8002682:	2100      	movs	r1, #0
 8002684:	f005 fe12 	bl	80082ac <memset>
  if(hspi->Instance==SPI1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1b      	ldr	r2, [pc, #108]	@ (80026fc <HAL_SPI_MspInit+0x8c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d130      	bne.n	80026f4 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002692:	4b1b      	ldr	r3, [pc, #108]	@ (8002700 <HAL_SPI_MspInit+0x90>)
 8002694:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002696:	4b1a      	ldr	r3, [pc, #104]	@ (8002700 <HAL_SPI_MspInit+0x90>)
 8002698:	2180      	movs	r1, #128	@ 0x80
 800269a:	0149      	lsls	r1, r1, #5
 800269c:	430a      	orrs	r2, r1
 800269e:	641a      	str	r2, [r3, #64]	@ 0x40
 80026a0:	4b17      	ldr	r3, [pc, #92]	@ (8002700 <HAL_SPI_MspInit+0x90>)
 80026a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026a4:	2380      	movs	r3, #128	@ 0x80
 80026a6:	015b      	lsls	r3, r3, #5
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ae:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <HAL_SPI_MspInit+0x90>)
 80026b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026b2:	4b13      	ldr	r3, [pc, #76]	@ (8002700 <HAL_SPI_MspInit+0x90>)
 80026b4:	2101      	movs	r1, #1
 80026b6:	430a      	orrs	r2, r1
 80026b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80026ba:	4b11      	ldr	r3, [pc, #68]	@ (8002700 <HAL_SPI_MspInit+0x90>)
 80026bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026be:	2201      	movs	r2, #1
 80026c0:	4013      	ands	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026c6:	0021      	movs	r1, r4
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	22e0      	movs	r2, #224	@ 0xe0
 80026cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	2202      	movs	r2, #2
 80026d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	2200      	movs	r2, #0
 80026de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80026e0:	187b      	adds	r3, r7, r1
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e6:	187a      	adds	r2, r7, r1
 80026e8:	23a0      	movs	r3, #160	@ 0xa0
 80026ea:	05db      	lsls	r3, r3, #23
 80026ec:	0011      	movs	r1, r2
 80026ee:	0018      	movs	r0, r3
 80026f0:	f001 fbd4 	bl	8003e9c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80026f4:	46c0      	nop			@ (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b00b      	add	sp, #44	@ 0x2c
 80026fa:	bd90      	pop	{r4, r7, pc}
 80026fc:	40013000 	.word	0x40013000
 8002700:	40021000 	.word	0x40021000

08002704 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b093      	sub	sp, #76	@ 0x4c
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	2334      	movs	r3, #52	@ 0x34
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	0018      	movs	r0, r3
 8002712:	2314      	movs	r3, #20
 8002714:	001a      	movs	r2, r3
 8002716:	2100      	movs	r1, #0
 8002718:	f005 fdc8 	bl	80082ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800271c:	2418      	movs	r4, #24
 800271e:	193b      	adds	r3, r7, r4
 8002720:	0018      	movs	r0, r3
 8002722:	231c      	movs	r3, #28
 8002724:	001a      	movs	r2, r3
 8002726:	2100      	movs	r1, #0
 8002728:	f005 fdc0 	bl	80082ac <memset>
  if(huart->Instance==USART2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a57      	ldr	r2, [pc, #348]	@ (8002890 <HAL_UART_MspInit+0x18c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d13f      	bne.n	80027b6 <HAL_UART_MspInit+0xb2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002736:	193b      	adds	r3, r7, r4
 8002738:	2202      	movs	r2, #2
 800273a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800273c:	193b      	adds	r3, r7, r4
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002742:	193b      	adds	r3, r7, r4
 8002744:	0018      	movs	r0, r3
 8002746:	f003 f963 	bl	8005a10 <HAL_RCCEx_PeriphCLKConfig>
 800274a:	1e03      	subs	r3, r0, #0
 800274c:	d001      	beq.n	8002752 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800274e:	f7ff fbaf 	bl	8001eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002752:	4b50      	ldr	r3, [pc, #320]	@ (8002894 <HAL_UART_MspInit+0x190>)
 8002754:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002756:	4b4f      	ldr	r3, [pc, #316]	@ (8002894 <HAL_UART_MspInit+0x190>)
 8002758:	2180      	movs	r1, #128	@ 0x80
 800275a:	0289      	lsls	r1, r1, #10
 800275c:	430a      	orrs	r2, r1
 800275e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002760:	4b4c      	ldr	r3, [pc, #304]	@ (8002894 <HAL_UART_MspInit+0x190>)
 8002762:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002764:	2380      	movs	r3, #128	@ 0x80
 8002766:	029b      	lsls	r3, r3, #10
 8002768:	4013      	ands	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276e:	4b49      	ldr	r3, [pc, #292]	@ (8002894 <HAL_UART_MspInit+0x190>)
 8002770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002772:	4b48      	ldr	r3, [pc, #288]	@ (8002894 <HAL_UART_MspInit+0x190>)
 8002774:	2101      	movs	r1, #1
 8002776:	430a      	orrs	r2, r1
 8002778:	635a      	str	r2, [r3, #52]	@ 0x34
 800277a:	4b46      	ldr	r3, [pc, #280]	@ (8002894 <HAL_UART_MspInit+0x190>)
 800277c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277e:	2201      	movs	r2, #1
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002786:	2134      	movs	r1, #52	@ 0x34
 8002788:	187b      	adds	r3, r7, r1
 800278a:	220c      	movs	r2, #12
 800278c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	187b      	adds	r3, r7, r1
 8002790:	2202      	movs	r2, #2
 8002792:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002794:	187b      	adds	r3, r7, r1
 8002796:	2201      	movs	r2, #1
 8002798:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279a:	187b      	adds	r3, r7, r1
 800279c:	2200      	movs	r2, #0
 800279e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	2201      	movs	r2, #1
 80027a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	187a      	adds	r2, r7, r1
 80027a8:	23a0      	movs	r3, #160	@ 0xa0
 80027aa:	05db      	lsls	r3, r3, #23
 80027ac:	0011      	movs	r1, r2
 80027ae:	0018      	movs	r0, r3
 80027b0:	f001 fb74 	bl	8003e9c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80027b4:	e067      	b.n	8002886 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a37      	ldr	r2, [pc, #220]	@ (8002898 <HAL_UART_MspInit+0x194>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d162      	bne.n	8002886 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027c0:	4b34      	ldr	r3, [pc, #208]	@ (8002894 <HAL_UART_MspInit+0x190>)
 80027c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027c4:	4b33      	ldr	r3, [pc, #204]	@ (8002894 <HAL_UART_MspInit+0x190>)
 80027c6:	2180      	movs	r1, #128	@ 0x80
 80027c8:	02c9      	lsls	r1, r1, #11
 80027ca:	430a      	orrs	r2, r1
 80027cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027ce:	4b31      	ldr	r3, [pc, #196]	@ (8002894 <HAL_UART_MspInit+0x190>)
 80027d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027d2:	2380      	movs	r3, #128	@ 0x80
 80027d4:	02db      	lsls	r3, r3, #11
 80027d6:	4013      	ands	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002894 <HAL_UART_MspInit+0x190>)
 80027de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002894 <HAL_UART_MspInit+0x190>)
 80027e2:	2108      	movs	r1, #8
 80027e4:	430a      	orrs	r2, r1
 80027e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80027e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002894 <HAL_UART_MspInit+0x190>)
 80027ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ec:	2208      	movs	r2, #8
 80027ee:	4013      	ands	r3, r2
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027f4:	2134      	movs	r1, #52	@ 0x34
 80027f6:	187b      	adds	r3, r7, r1
 80027f8:	22c0      	movs	r2, #192	@ 0xc0
 80027fa:	0092      	lsls	r2, r2, #2
 80027fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	2202      	movs	r2, #2
 8002802:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	187b      	adds	r3, r7, r1
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	187b      	adds	r3, r7, r1
 800280c:	2200      	movs	r2, #0
 800280e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8002810:	187b      	adds	r3, r7, r1
 8002812:	2200      	movs	r2, #0
 8002814:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002816:	187b      	adds	r3, r7, r1
 8002818:	4a20      	ldr	r2, [pc, #128]	@ (800289c <HAL_UART_MspInit+0x198>)
 800281a:	0019      	movs	r1, r3
 800281c:	0010      	movs	r0, r2
 800281e:	f001 fb3d 	bl	8003e9c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8002822:	4b1f      	ldr	r3, [pc, #124]	@ (80028a0 <HAL_UART_MspInit+0x19c>)
 8002824:	4a1f      	ldr	r2, [pc, #124]	@ (80028a4 <HAL_UART_MspInit+0x1a0>)
 8002826:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002828:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <HAL_UART_MspInit+0x19c>)
 800282a:	2236      	movs	r2, #54	@ 0x36
 800282c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800282e:	4b1c      	ldr	r3, [pc, #112]	@ (80028a0 <HAL_UART_MspInit+0x19c>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002834:	4b1a      	ldr	r3, [pc, #104]	@ (80028a0 <HAL_UART_MspInit+0x19c>)
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800283a:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_UART_MspInit+0x19c>)
 800283c:	2280      	movs	r2, #128	@ 0x80
 800283e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002840:	4b17      	ldr	r3, [pc, #92]	@ (80028a0 <HAL_UART_MspInit+0x19c>)
 8002842:	2200      	movs	r2, #0
 8002844:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002846:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <HAL_UART_MspInit+0x19c>)
 8002848:	2200      	movs	r2, #0
 800284a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800284c:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <HAL_UART_MspInit+0x19c>)
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002852:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <HAL_UART_MspInit+0x19c>)
 8002854:	2200      	movs	r2, #0
 8002856:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002858:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <HAL_UART_MspInit+0x19c>)
 800285a:	0018      	movs	r0, r3
 800285c:	f000 fd04 	bl	8003268 <HAL_DMA_Init>
 8002860:	1e03      	subs	r3, r0, #0
 8002862:	d001      	beq.n	8002868 <HAL_UART_MspInit+0x164>
      Error_Handler();
 8002864:	f7ff fb24 	bl	8001eb0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2180      	movs	r1, #128	@ 0x80
 800286c:	4a0c      	ldr	r2, [pc, #48]	@ (80028a0 <HAL_UART_MspInit+0x19c>)
 800286e:	505a      	str	r2, [r3, r1]
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_UART_MspInit+0x19c>)
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2100      	movs	r1, #0
 800287a:	201d      	movs	r0, #29
 800287c:	f000 fa98 	bl	8002db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002880:	201d      	movs	r0, #29
 8002882:	f000 faaa 	bl	8002dda <HAL_NVIC_EnableIRQ>
}
 8002886:	46c0      	nop			@ (mov r8, r8)
 8002888:	46bd      	mov	sp, r7
 800288a:	b013      	add	sp, #76	@ 0x4c
 800288c:	bd90      	pop	{r4, r7, pc}
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	40004400 	.word	0x40004400
 8002894:	40021000 	.word	0x40021000
 8002898:	40004800 	.word	0x40004800
 800289c:	50000c00 	.word	0x50000c00
 80028a0:	20000450 	.word	0x20000450
 80028a4:	40020008 	.word	0x40020008

080028a8 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a17      	ldr	r2, [pc, #92]	@ (8002914 <HAL_UART_MspDeInit+0x6c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10c      	bne.n	80028d4 <HAL_UART_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80028ba:	4b17      	ldr	r3, [pc, #92]	@ (8002918 <HAL_UART_MspDeInit+0x70>)
 80028bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028be:	4b16      	ldr	r3, [pc, #88]	@ (8002918 <HAL_UART_MspDeInit+0x70>)
 80028c0:	4916      	ldr	r1, [pc, #88]	@ (800291c <HAL_UART_MspDeInit+0x74>)
 80028c2:	400a      	ands	r2, r1
 80028c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80028c6:	23a0      	movs	r3, #160	@ 0xa0
 80028c8:	05db      	lsls	r3, r3, #23
 80028ca:	210c      	movs	r1, #12
 80028cc:	0018      	movs	r0, r3
 80028ce:	f001 fc49 	bl	8004164 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART3_MspDeInit 1 */

    /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80028d2:	e01a      	b.n	800290a <HAL_UART_MspDeInit+0x62>
  else if(huart->Instance==USART3)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a11      	ldr	r2, [pc, #68]	@ (8002920 <HAL_UART_MspDeInit+0x78>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d115      	bne.n	800290a <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART3_CLK_DISABLE();
 80028de:	4b0e      	ldr	r3, [pc, #56]	@ (8002918 <HAL_UART_MspDeInit+0x70>)
 80028e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002918 <HAL_UART_MspDeInit+0x70>)
 80028e4:	490f      	ldr	r1, [pc, #60]	@ (8002924 <HAL_UART_MspDeInit+0x7c>)
 80028e6:	400a      	ands	r2, r1
 80028e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9);
 80028ea:	23c0      	movs	r3, #192	@ 0xc0
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002928 <HAL_UART_MspDeInit+0x80>)
 80028f0:	0019      	movs	r1, r3
 80028f2:	0010      	movs	r0, r2
 80028f4:	f001 fc36 	bl	8004164 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	589b      	ldr	r3, [r3, r2]
 80028fe:	0018      	movs	r0, r3
 8002900:	f000 fd3c 	bl	800337c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_4_IRQn);
 8002904:	201d      	movs	r0, #29
 8002906:	f000 fa78 	bl	8002dfa <HAL_NVIC_DisableIRQ>
}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b002      	add	sp, #8
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	40004400 	.word	0x40004400
 8002918:	40021000 	.word	0x40021000
 800291c:	fffdffff 	.word	0xfffdffff
 8002920:	40004800 	.word	0x40004800
 8002924:	fffbffff 	.word	0xfffbffff
 8002928:	50000c00 	.word	0x50000c00

0800292c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002930:	46c0      	nop			@ (mov r8, r8)
 8002932:	e7fd      	b.n	8002930 <NMI_Handler+0x4>

08002934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002938:	46c0      	nop			@ (mov r8, r8)
 800293a:	e7fd      	b.n	8002938 <HardFault_Handler+0x4>

0800293c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002940:	46c0      	nop			@ (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002954:	f000 f91e 	bl	8002b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002958:	46c0      	nop			@ (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002962:	f001 f865 	bl	8003a30 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002970:	4b03      	ldr	r3, [pc, #12]	@ (8002980 <DMA1_Channel1_IRQHandler+0x14>)
 8002972:	0018      	movs	r0, r3
 8002974:	f000 fecc 	bl	8003710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002978:	46c0      	nop			@ (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	20000450 	.word	0x20000450

08002984 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002988:	4b03      	ldr	r3, [pc, #12]	@ (8002998 <USART3_4_IRQHandler+0x14>)
 800298a:	0018      	movs	r0, r3
 800298c:	f004 f98e 	bl	8006cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002990:	46c0      	nop			@ (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	200003bc 	.word	0x200003bc

0800299c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a4:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <_sbrk+0x5c>)
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <_sbrk+0x60>)
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b0:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b8:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <_sbrk+0x64>)
 80029ba:	4a12      	ldr	r2, [pc, #72]	@ (8002a04 <_sbrk+0x68>)
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029be:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	18d3      	adds	r3, r2, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d207      	bcs.n	80029dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029cc:	f005 fc76 	bl	80082bc <__errno>
 80029d0:	0003      	movs	r3, r0
 80029d2:	220c      	movs	r2, #12
 80029d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	425b      	negs	r3, r3
 80029da:	e009      	b.n	80029f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029dc:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <_sbrk+0x64>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e2:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <_sbrk+0x64>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	18d2      	adds	r2, r2, r3
 80029ea:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <_sbrk+0x64>)
 80029ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80029ee:	68fb      	ldr	r3, [r7, #12]

}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b006      	add	sp, #24
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20009000 	.word	0x20009000
 80029fc:	00000400 	.word	0x00000400
 8002a00:	20001150 	.word	0x20001150
 8002a04:	200012c0 	.word	0x200012c0

08002a08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a0c:	46c0      	nop			@ (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a14:	480d      	ldr	r0, [pc, #52]	@ (8002a4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a18:	f7ff fff6 	bl	8002a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a1c:	480c      	ldr	r0, [pc, #48]	@ (8002a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a1e:	490d      	ldr	r1, [pc, #52]	@ (8002a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a20:	4a0d      	ldr	r2, [pc, #52]	@ (8002a58 <LoopForever+0xe>)
  movs r3, #0
 8002a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a24:	e002      	b.n	8002a2c <LoopCopyDataInit>

08002a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a2a:	3304      	adds	r3, #4

08002a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a30:	d3f9      	bcc.n	8002a26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a32:	4a0a      	ldr	r2, [pc, #40]	@ (8002a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a34:	4c0a      	ldr	r4, [pc, #40]	@ (8002a60 <LoopForever+0x16>)
  movs r3, #0
 8002a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a38:	e001      	b.n	8002a3e <LoopFillZerobss>

08002a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a3c:	3204      	adds	r2, #4

08002a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a40:	d3fb      	bcc.n	8002a3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a42:	f005 fc41 	bl	80082c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002a46:	f7fe fe99 	bl	800177c <main>

08002a4a <LoopForever>:

LoopForever:
  b LoopForever
 8002a4a:	e7fe      	b.n	8002a4a <LoopForever>
  ldr   r0, =_estack
 8002a4c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a54:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8002a58:	0800975c 	.word	0x0800975c
  ldr r2, =_sbss
 8002a5c:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8002a60:	200012bc 	.word	0x200012bc

08002a64 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a64:	e7fe      	b.n	8002a64 <ADC1_IRQHandler>
	...

08002a68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a6e:	1dfb      	adds	r3, r7, #7
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_Init+0x3c>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <HAL_Init+0x3c>)
 8002a7a:	2180      	movs	r1, #128	@ 0x80
 8002a7c:	0049      	lsls	r1, r1, #1
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a82:	2000      	movs	r0, #0
 8002a84:	f000 f83c 	bl	8002b00 <HAL_InitTick>
 8002a88:	1e03      	subs	r3, r0, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002a8c:	1dfb      	adds	r3, r7, #7
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e001      	b.n	8002a98 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002a94:	f7ff fcfa 	bl	800248c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a98:	1dfb      	adds	r3, r7, #7
 8002a9a:	781b      	ldrb	r3, [r3, #0]
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40022000 	.word	0x40022000

08002aa8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002aac:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <HAL_DeInit+0x48>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	4252      	negs	r2, r2
 8002ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_APB1_RELEASE_RESET();
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8002af0 <HAL_DeInit+0x48>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	62da      	str	r2, [r3, #44]	@ 0x2c

  __HAL_RCC_APB2_FORCE_RESET();
 8002aba:	4b0d      	ldr	r3, [pc, #52]	@ (8002af0 <HAL_DeInit+0x48>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	4252      	negs	r2, r2
 8002ac0:	631a      	str	r2, [r3, #48]	@ 0x30
  __HAL_RCC_APB2_RELEASE_RESET();
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <HAL_DeInit+0x48>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	631a      	str	r2, [r3, #48]	@ 0x30

  __HAL_RCC_AHB_FORCE_RESET();
 8002ac8:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <HAL_DeInit+0x48>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	4252      	negs	r2, r2
 8002ace:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8002ad0:	4b07      	ldr	r3, [pc, #28]	@ (8002af0 <HAL_DeInit+0x48>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	629a      	str	r2, [r3, #40]	@ 0x28

  __HAL_RCC_IOP_FORCE_RESET();
 8002ad6:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <HAL_DeInit+0x48>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	4252      	negs	r2, r2
 8002adc:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_IOP_RELEASE_RESET();
 8002ade:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <HAL_DeInit+0x48>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002ae4:	f000 f806 	bl	8002af4 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	0018      	movs	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000

08002af4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8002af8:	46c0      	nop			@ (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b08:	230f      	movs	r3, #15
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002b10:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <HAL_InitTick+0x88>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d02b      	beq.n	8002b70 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002b18:	4b1c      	ldr	r3, [pc, #112]	@ (8002b8c <HAL_InitTick+0x8c>)
 8002b1a:	681c      	ldr	r4, [r3, #0]
 8002b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b88 <HAL_InitTick+0x88>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	0019      	movs	r1, r3
 8002b22:	23fa      	movs	r3, #250	@ 0xfa
 8002b24:	0098      	lsls	r0, r3, #2
 8002b26:	f7fd fafd 	bl	8000124 <__udivsi3>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	0019      	movs	r1, r3
 8002b2e:	0020      	movs	r0, r4
 8002b30:	f7fd faf8 	bl	8000124 <__udivsi3>
 8002b34:	0003      	movs	r3, r0
 8002b36:	0018      	movs	r0, r3
 8002b38:	f000 f96f 	bl	8002e1a <HAL_SYSTICK_Config>
 8002b3c:	1e03      	subs	r3, r0, #0
 8002b3e:	d112      	bne.n	8002b66 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d80a      	bhi.n	8002b5c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	2301      	movs	r3, #1
 8002b4a:	425b      	negs	r3, r3
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f000 f92e 	bl	8002db0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b54:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <HAL_InitTick+0x90>)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	e00d      	b.n	8002b78 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002b5c:	230f      	movs	r3, #15
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	e008      	b.n	8002b78 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b66:	230f      	movs	r3, #15
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e003      	b.n	8002b78 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b70:	230f      	movs	r3, #15
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	2201      	movs	r2, #1
 8002b76:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002b78:	230f      	movs	r3, #15
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	781b      	ldrb	r3, [r3, #0]
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b005      	add	sp, #20
 8002b84:	bd90      	pop	{r4, r7, pc}
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	2000001c 	.word	0x2000001c
 8002b8c:	20000014 	.word	0x20000014
 8002b90:	20000018 	.word	0x20000018

08002b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b98:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <HAL_IncTick+0x1c>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	001a      	movs	r2, r3
 8002b9e:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <HAL_IncTick+0x20>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	18d2      	adds	r2, r2, r3
 8002ba4:	4b03      	ldr	r3, [pc, #12]	@ (8002bb4 <HAL_IncTick+0x20>)
 8002ba6:	601a      	str	r2, [r3, #0]
}
 8002ba8:	46c0      	nop			@ (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	2000001c 	.word	0x2000001c
 8002bb4:	20001154 	.word	0x20001154

08002bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  return uwTick;
 8002bbc:	4b02      	ldr	r3, [pc, #8]	@ (8002bc8 <HAL_GetTick+0x10>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	46c0      	nop			@ (mov r8, r8)
 8002bc8:	20001154 	.word	0x20001154

08002bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bd4:	f7ff fff0 	bl	8002bb8 <HAL_GetTick>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3301      	adds	r3, #1
 8002be4:	d005      	beq.n	8002bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002be6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <HAL_Delay+0x44>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	001a      	movs	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	189b      	adds	r3, r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bf2:	46c0      	nop			@ (mov r8, r8)
 8002bf4:	f7ff ffe0 	bl	8002bb8 <HAL_GetTick>
 8002bf8:	0002      	movs	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d8f7      	bhi.n	8002bf4 <HAL_Delay+0x28>
  {
  }
}
 8002c04:	46c0      	nop			@ (mov r8, r8)
 8002c06:	46c0      	nop			@ (mov r8, r8)
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b004      	add	sp, #16
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			@ (mov r8, r8)
 8002c10:	2000001c 	.word	0x2000001c

08002c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	0002      	movs	r2, r0
 8002c1c:	1dfb      	adds	r3, r7, #7
 8002c1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c26:	d809      	bhi.n	8002c3c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c28:	1dfb      	adds	r3, r7, #7
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	231f      	movs	r3, #31
 8002c30:	401a      	ands	r2, r3
 8002c32:	4b04      	ldr	r3, [pc, #16]	@ (8002c44 <__NVIC_EnableIRQ+0x30>)
 8002c34:	2101      	movs	r1, #1
 8002c36:	4091      	lsls	r1, r2
 8002c38:	000a      	movs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002c3c:	46c0      	nop			@ (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	e000e100 	.word	0xe000e100

08002c48 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	0002      	movs	r2, r0
 8002c50:	1dfb      	adds	r3, r7, #7
 8002c52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c54:	1dfb      	adds	r3, r7, #7
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c5a:	d810      	bhi.n	8002c7e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5c:	1dfb      	adds	r3, r7, #7
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	001a      	movs	r2, r3
 8002c62:	231f      	movs	r3, #31
 8002c64:	4013      	ands	r3, r2
 8002c66:	4908      	ldr	r1, [pc, #32]	@ (8002c88 <__NVIC_DisableIRQ+0x40>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	0013      	movs	r3, r2
 8002c6e:	2280      	movs	r2, #128	@ 0x80
 8002c70:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c72:	f3bf 8f4f 	dsb	sy
}
 8002c76:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002c78:	f3bf 8f6f 	isb	sy
}
 8002c7c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002c7e:	46c0      	nop			@ (mov r8, r8)
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b002      	add	sp, #8
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	e000e100 	.word	0xe000e100

08002c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	0002      	movs	r2, r0
 8002c94:	6039      	str	r1, [r7, #0]
 8002c96:	1dfb      	adds	r3, r7, #7
 8002c98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	1dfb      	adds	r3, r7, #7
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ca0:	d828      	bhi.n	8002cf4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8002d60 <__NVIC_SetPriority+0xd4>)
 8002ca4:	1dfb      	adds	r3, r7, #7
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	b25b      	sxtb	r3, r3
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	33c0      	adds	r3, #192	@ 0xc0
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	589b      	ldr	r3, [r3, r2]
 8002cb2:	1dfa      	adds	r2, r7, #7
 8002cb4:	7812      	ldrb	r2, [r2, #0]
 8002cb6:	0011      	movs	r1, r2
 8002cb8:	2203      	movs	r2, #3
 8002cba:	400a      	ands	r2, r1
 8002cbc:	00d2      	lsls	r2, r2, #3
 8002cbe:	21ff      	movs	r1, #255	@ 0xff
 8002cc0:	4091      	lsls	r1, r2
 8002cc2:	000a      	movs	r2, r1
 8002cc4:	43d2      	mvns	r2, r2
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	22ff      	movs	r2, #255	@ 0xff
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	1dfb      	adds	r3, r7, #7
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	2303      	movs	r3, #3
 8002cda:	4003      	ands	r3, r0
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ce0:	481f      	ldr	r0, [pc, #124]	@ (8002d60 <__NVIC_SetPriority+0xd4>)
 8002ce2:	1dfb      	adds	r3, r7, #7
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b25b      	sxtb	r3, r3
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	430a      	orrs	r2, r1
 8002cec:	33c0      	adds	r3, #192	@ 0xc0
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002cf2:	e031      	b.n	8002d58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d64 <__NVIC_SetPriority+0xd8>)
 8002cf6:	1dfb      	adds	r3, r7, #7
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	400b      	ands	r3, r1
 8002d00:	3b08      	subs	r3, #8
 8002d02:	089b      	lsrs	r3, r3, #2
 8002d04:	3306      	adds	r3, #6
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	18d3      	adds	r3, r2, r3
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	1dfa      	adds	r2, r7, #7
 8002d10:	7812      	ldrb	r2, [r2, #0]
 8002d12:	0011      	movs	r1, r2
 8002d14:	2203      	movs	r2, #3
 8002d16:	400a      	ands	r2, r1
 8002d18:	00d2      	lsls	r2, r2, #3
 8002d1a:	21ff      	movs	r1, #255	@ 0xff
 8002d1c:	4091      	lsls	r1, r2
 8002d1e:	000a      	movs	r2, r1
 8002d20:	43d2      	mvns	r2, r2
 8002d22:	401a      	ands	r2, r3
 8002d24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	019b      	lsls	r3, r3, #6
 8002d2a:	22ff      	movs	r2, #255	@ 0xff
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	1dfb      	adds	r3, r7, #7
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	0018      	movs	r0, r3
 8002d34:	2303      	movs	r3, #3
 8002d36:	4003      	ands	r3, r0
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d3c:	4809      	ldr	r0, [pc, #36]	@ (8002d64 <__NVIC_SetPriority+0xd8>)
 8002d3e:	1dfb      	adds	r3, r7, #7
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	001c      	movs	r4, r3
 8002d44:	230f      	movs	r3, #15
 8002d46:	4023      	ands	r3, r4
 8002d48:	3b08      	subs	r3, #8
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	3306      	adds	r3, #6
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	18c3      	adds	r3, r0, r3
 8002d54:	3304      	adds	r3, #4
 8002d56:	601a      	str	r2, [r3, #0]
}
 8002d58:	46c0      	nop			@ (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b003      	add	sp, #12
 8002d5e:	bd90      	pop	{r4, r7, pc}
 8002d60:	e000e100 	.word	0xe000e100
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	1e5a      	subs	r2, r3, #1
 8002d74:	2380      	movs	r3, #128	@ 0x80
 8002d76:	045b      	lsls	r3, r3, #17
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d301      	bcc.n	8002d80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e010      	b.n	8002da2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d80:	4b0a      	ldr	r3, [pc, #40]	@ (8002dac <SysTick_Config+0x44>)
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	3a01      	subs	r2, #1
 8002d86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d88:	2301      	movs	r3, #1
 8002d8a:	425b      	negs	r3, r3
 8002d8c:	2103      	movs	r1, #3
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f7ff ff7c 	bl	8002c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d94:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <SysTick_Config+0x44>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9a:	4b04      	ldr	r3, [pc, #16]	@ (8002dac <SysTick_Config+0x44>)
 8002d9c:	2207      	movs	r2, #7
 8002d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	0018      	movs	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b002      	add	sp, #8
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	e000e010 	.word	0xe000e010

08002db0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	210f      	movs	r1, #15
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	1c02      	adds	r2, r0, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	0011      	movs	r1, r2
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7ff ff5d 	bl	8002c8c <__NVIC_SetPriority>
}
 8002dd2:	46c0      	nop			@ (mov r8, r8)
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b004      	add	sp, #16
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	0002      	movs	r2, r0
 8002de2:	1dfb      	adds	r3, r7, #7
 8002de4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de6:	1dfb      	adds	r3, r7, #7
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b25b      	sxtb	r3, r3
 8002dec:	0018      	movs	r0, r3
 8002dee:	f7ff ff11 	bl	8002c14 <__NVIC_EnableIRQ>
}
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b002      	add	sp, #8
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	0002      	movs	r2, r0
 8002e02:	1dfb      	adds	r3, r7, #7
 8002e04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e06:	1dfb      	adds	r3, r7, #7
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	b25b      	sxtb	r3, r3
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f7ff ff1b 	bl	8002c48 <__NVIC_DisableIRQ>
}
 8002e12:	46c0      	nop			@ (mov r8, r8)
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b002      	add	sp, #8
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7ff ff9f 	bl	8002d68 <SysTick_Config>
 8002e2a:	0003      	movs	r3, r0
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b002      	add	sp, #8
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e056      	b.n	8002ef4 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7f5b      	ldrb	r3, [r3, #29]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d106      	bne.n	8002e5e <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f7ff fb43 	bl	80024e4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2202      	movs	r2, #2
 8002e62:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	791b      	ldrb	r3, [r3, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10c      	bne.n	8002e86 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a22      	ldr	r2, [pc, #136]	@ (8002efc <HAL_CRC_Init+0xc8>)
 8002e72:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2118      	movs	r1, #24
 8002e80:	438a      	bics	r2, r1
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	e00b      	b.n	8002e9e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6899      	ldr	r1, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	0018      	movs	r0, r3
 8002e92:	f000 f974 	bl	800317e <HAL_CRCEx_Polynomial_Set>
 8002e96:	1e03      	subs	r3, r0, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e02a      	b.n	8002ef4 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	795b      	ldrb	r3, [r3, #5]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d105      	bne.n	8002eb2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4252      	negs	r2, r2
 8002eae:	611a      	str	r2, [r3, #16]
 8002eb0:	e004      	b.n	8002ebc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6912      	ldr	r2, [r2, #16]
 8002eba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2260      	movs	r2, #96	@ 0x60
 8002ec4:	4393      	bics	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2280      	movs	r2, #128	@ 0x80
 8002edc:	4393      	bics	r3, r2
 8002ede:	0019      	movs	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	04c11db7 	.word	0x04c11db7

08002f00 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e020      	b.n	8002f54 <HAL_CRC_DeInit+0x54>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	7f5b      	ldrb	r3, [r3, #29]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d101      	bne.n	8002f20 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e019      	b.n	8002f54 <HAL_CRC_DeInit+0x54>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	430a      	orrs	r2, r1
 8002f34:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_REG(hcrc->Instance->IDR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7ff faef 	bl	8002524 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b002      	add	sp, #8
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002f68:	2300      	movs	r3, #0
 8002f6a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d005      	beq.n	8002f86 <HAL_CRC_Accumulate+0x2a>
 8002f7a:	d82d      	bhi.n	8002fd8 <HAL_CRC_Accumulate+0x7c>
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d019      	beq.n	8002fb4 <HAL_CRC_Accumulate+0x58>
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d020      	beq.n	8002fc6 <HAL_CRC_Accumulate+0x6a>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8002f84:	e028      	b.n	8002fd8 <HAL_CRC_Accumulate+0x7c>
      for (index = 0U; index < BufferLength; index++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e00a      	b.n	8002fa2 <HAL_CRC_Accumulate+0x46>
        hcrc->Instance->DR = pBuffer[index];
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	18d2      	adds	r2, r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d3f0      	bcc.n	8002f8c <HAL_CRC_Accumulate+0x30>
      temp = hcrc->Instance->DR;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	613b      	str	r3, [r7, #16]
      break;
 8002fb2:	e012      	b.n	8002fda <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f000 f815 	bl	8002fea <CRC_Handle_8>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	613b      	str	r3, [r7, #16]
      break;
 8002fc4:	e009      	b.n	8002fda <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f000 f89f 	bl	8003110 <CRC_Handle_16>
 8002fd2:	0003      	movs	r3, r0
 8002fd4:	613b      	str	r3, [r7, #16]
      break;
 8002fd6:	e000      	b.n	8002fda <HAL_CRC_Accumulate+0x7e>
      break;
 8002fd8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002fe0:	693b      	ldr	r3, [r7, #16]
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b006      	add	sp, #24
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b088      	sub	sp, #32
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	e023      	b.n	8003044 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	18d3      	adds	r3, r2, r3
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	3301      	adds	r3, #1
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	18cb      	adds	r3, r1, r3
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003016:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	3302      	adds	r3, #2
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	18cb      	adds	r3, r1, r3
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003026:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	3303      	adds	r3, #3
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	18cb      	adds	r3, r1, r3
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800303a:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800303c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3301      	adds	r3, #1
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	089b      	lsrs	r3, r3, #2
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	429a      	cmp	r2, r3
 800304c:	d3d6      	bcc.n	8002ffc <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2203      	movs	r2, #3
 8003052:	4013      	ands	r3, r2
 8003054:	d055      	beq.n	8003102 <CRC_Handle_8+0x118>
  {
    if ((BufferLength % 4U) == 1U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2203      	movs	r2, #3
 800305a:	4013      	ands	r3, r2
 800305c:	2b01      	cmp	r3, #1
 800305e:	d107      	bne.n	8003070 <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	18d2      	adds	r2, r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	7812      	ldrb	r2, [r2, #0]
 800306e:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2203      	movs	r2, #3
 8003074:	4013      	ands	r3, r2
 8003076:	2b02      	cmp	r3, #2
 8003078:	d11a      	bne.n	80030b0 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	18d3      	adds	r3, r2, r3
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	b21b      	sxth	r3, r3
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	b21a      	sxth	r2, r3
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	3301      	adds	r3, #1
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	18cb      	adds	r3, r1, r3
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	b21b      	sxth	r3, r3
 8003098:	4313      	orrs	r3, r2
 800309a:	b21a      	sxth	r2, r3
 800309c:	211a      	movs	r1, #26
 800309e:	187b      	adds	r3, r7, r1
 80030a0:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	187a      	adds	r2, r7, r1
 80030ac:	8812      	ldrh	r2, [r2, #0]
 80030ae:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2203      	movs	r2, #3
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d123      	bne.n	8003102 <CRC_Handle_8+0x118>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	18d3      	adds	r3, r2, r3
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	b21b      	sxth	r3, r3
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	b21a      	sxth	r2, r3
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	3301      	adds	r3, #1
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	18cb      	adds	r3, r1, r3
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	b21b      	sxth	r3, r3
 80030d8:	4313      	orrs	r3, r2
 80030da:	b21a      	sxth	r2, r3
 80030dc:	211a      	movs	r1, #26
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	187a      	adds	r2, r7, r1
 80030ec:	8812      	ldrh	r2, [r2, #0]
 80030ee:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	3302      	adds	r3, #2
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	18d2      	adds	r2, r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	7812      	ldrb	r2, [r2, #0]
 8003100:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b008      	add	sp, #32
 800310e:	bd80      	pop	{r7, pc}

08003110 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	e013      	b.n	800314a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	18d3      	adds	r3, r2, r3
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	041a      	lsls	r2, r3, #16
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	3302      	adds	r3, #2
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	18cb      	adds	r3, r1, r3
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	0019      	movs	r1, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3301      	adds	r3, #1
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	429a      	cmp	r2, r3
 8003152:	d3e6      	bcc.n	8003122 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	4013      	ands	r3, r2
 800315a:	d009      	beq.n	8003170 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	18d3      	adds	r3, r2, r3
 800316a:	881a      	ldrh	r2, [r3, #0]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b006      	add	sp, #24
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800318a:	2117      	movs	r1, #23
 800318c:	187b      	adds	r3, r7, r1
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003192:	231f      	movs	r3, #31
 8003194:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2201      	movs	r2, #1
 800319a:	4013      	ands	r3, r2
 800319c:	d103      	bne.n	80031a6 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
 80031a4:	e045      	b.n	8003232 <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031a6:	46c0      	nop			@ (mov r8, r8)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1e5a      	subs	r2, r3, #1
 80031ac:	613a      	str	r2, [r7, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_CRCEx_Polynomial_Set+0x46>
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	221f      	movs	r2, #31
 80031b6:	4013      	ands	r3, r2
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	40da      	lsrs	r2, r3
 80031bc:	0013      	movs	r3, r2
 80031be:	2201      	movs	r2, #1
 80031c0:	4013      	ands	r3, r2
 80031c2:	d0f1      	beq.n	80031a8 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b18      	cmp	r3, #24
 80031c8:	d00f      	beq.n	80031ea <HAL_CRCEx_Polynomial_Set+0x6c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b18      	cmp	r3, #24
 80031ce:	d824      	bhi.n	800321a <HAL_CRCEx_Polynomial_Set+0x9c>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d011      	beq.n	80031fa <HAL_CRCEx_Polynomial_Set+0x7c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d81e      	bhi.n	800321a <HAL_CRCEx_Polynomial_Set+0x9c>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d020      	beq.n	8003224 <HAL_CRCEx_Polynomial_Set+0xa6>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d010      	beq.n	800320a <HAL_CRCEx_Polynomial_Set+0x8c>
 80031e8:	e017      	b.n	800321a <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b06      	cmp	r3, #6
 80031ee:	d91b      	bls.n	8003228 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 80031f0:	2317      	movs	r3, #23
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
        }
        break;
 80031f8:	e016      	b.n	8003228 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b07      	cmp	r3, #7
 80031fe:	d915      	bls.n	800322c <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 8003200:	2317      	movs	r3, #23
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
        }
        break;
 8003208:	e010      	b.n	800322c <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b0f      	cmp	r3, #15
 800320e:	d90f      	bls.n	8003230 <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 8003210:	2317      	movs	r3, #23
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
        }
        break;
 8003218:	e00a      	b.n	8003230 <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800321a:	2317      	movs	r3, #23
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
        break;
 8003222:	e006      	b.n	8003232 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8003224:	46c0      	nop			@ (mov r8, r8)
 8003226:	e004      	b.n	8003232 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8003228:	46c0      	nop			@ (mov r8, r8)
 800322a:	e002      	b.n	8003232 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800322c:	46c0      	nop			@ (mov r8, r8)
 800322e:	e000      	b.n	8003232 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8003230:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 8003232:	2317      	movs	r3, #23
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10e      	bne.n	800325a <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2218      	movs	r2, #24
 800324c:	4393      	bics	r3, r2
 800324e:	0019      	movs	r1, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	430a      	orrs	r2, r1
 8003258:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800325a:	2317      	movs	r3, #23
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	781b      	ldrb	r3, [r3, #0]
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b006      	add	sp, #24
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e077      	b.n	800336a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a3d      	ldr	r2, [pc, #244]	@ (8003374 <HAL_DMA_Init+0x10c>)
 8003280:	4694      	mov	ip, r2
 8003282:	4463      	add	r3, ip
 8003284:	2114      	movs	r1, #20
 8003286:	0018      	movs	r0, r3
 8003288:	f7fc ff4c 	bl	8000124 <__udivsi3>
 800328c:	0003      	movs	r3, r0
 800328e:	009a      	lsls	r2, r3, #2
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2225      	movs	r2, #37	@ 0x25
 8003298:	2102      	movs	r1, #2
 800329a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4934      	ldr	r1, [pc, #208]	@ (8003378 <HAL_DMA_Init+0x110>)
 80032a8:	400a      	ands	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6819      	ldr	r1, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f000 fb05 	bl	80038f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	2380      	movs	r3, #128	@ 0x80
 80032f0:	01db      	lsls	r3, r3, #7
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d102      	bne.n	80032fc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003304:	213f      	movs	r1, #63	@ 0x3f
 8003306:	400a      	ands	r2, r1
 8003308:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003312:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d011      	beq.n	8003340 <HAL_DMA_Init+0xd8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d80d      	bhi.n	8003340 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	0018      	movs	r0, r3
 8003328:	f000 fb10 	bl	800394c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	e008      	b.n	8003352 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2225      	movs	r2, #37	@ 0x25
 800335c:	2101      	movs	r1, #1
 800335e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2224      	movs	r2, #36	@ 0x24
 8003364:	2100      	movs	r1, #0
 8003366:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	b002      	add	sp, #8
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			@ (mov r8, r8)
 8003374:	bffdfff8 	.word	0xbffdfff8
 8003378:	ffff800f 	.word	0xffff800f

0800337c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e066      	b.n	800345c <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	438a      	bics	r2, r1
 800339c:	601a      	str	r2, [r3, #0]
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a30      	ldr	r2, [pc, #192]	@ (8003464 <HAL_DMA_DeInit+0xe8>)
 80033a4:	4694      	mov	ip, r2
 80033a6:	4463      	add	r3, ip
 80033a8:	2114      	movs	r1, #20
 80033aa:	0018      	movs	r0, r3
 80033ac:	f7fc feba 	bl	8000124 <__udivsi3>
 80033b0:	0003      	movs	r3, r0
 80033b2:	009a      	lsls	r2, r3, #2
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80033c0:	4b29      	ldr	r3, [pc, #164]	@ (8003468 <HAL_DMA_DeInit+0xec>)
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	221c      	movs	r2, #28
 80033ca:	4013      	ands	r3, r2
 80033cc:	2201      	movs	r2, #1
 80033ce:	409a      	lsls	r2, r3
 80033d0:	4b25      	ldr	r3, [pc, #148]	@ (8003468 <HAL_DMA_DeInit+0xec>)
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	0018      	movs	r0, r3
 80033da:	f000 fa8b 	bl	80038f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80033ee:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d010      	beq.n	800341a <HAL_DMA_DeInit+0x9e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d80c      	bhi.n	800341a <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	0018      	movs	r0, r3
 8003404:	f000 faa2 	bl	800394c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003418:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2225      	movs	r2, #37	@ 0x25
 800344e:	2100      	movs	r1, #0
 8003450:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2224      	movs	r2, #36	@ 0x24
 8003456:	2100      	movs	r1, #0
 8003458:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	b002      	add	sp, #8
 8003462:	bd80      	pop	{r7, pc}
 8003464:	bffdfff8 	.word	0xbffdfff8
 8003468:	40020000 	.word	0x40020000

0800346c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800347a:	2317      	movs	r3, #23
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2224      	movs	r2, #36	@ 0x24
 8003486:	5c9b      	ldrb	r3, [r3, r2]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_DMA_Start_IT+0x24>
 800348c:	2302      	movs	r3, #2
 800348e:	e06f      	b.n	8003570 <HAL_DMA_Start_IT+0x104>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2224      	movs	r2, #36	@ 0x24
 8003494:	2101      	movs	r1, #1
 8003496:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2225      	movs	r2, #37	@ 0x25
 800349c:	5c9b      	ldrb	r3, [r3, r2]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d157      	bne.n	8003554 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2225      	movs	r2, #37	@ 0x25
 80034a8:	2102      	movs	r1, #2
 80034aa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2101      	movs	r1, #1
 80034be:	438a      	bics	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f9d3 	bl	8003874 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	210e      	movs	r1, #14
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e00f      	b.n	8003508 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2104      	movs	r1, #4
 80034f4:	438a      	bics	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	210a      	movs	r1, #10
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	2380      	movs	r3, #128	@ 0x80
 8003510:	025b      	lsls	r3, r3, #9
 8003512:	4013      	ands	r3, r2
 8003514:	d008      	beq.n	8003528 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003520:	2180      	movs	r1, #128	@ 0x80
 8003522:	0049      	lsls	r1, r1, #1
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353a:	2180      	movs	r1, #128	@ 0x80
 800353c:	0049      	lsls	r1, r1, #1
 800353e:	430a      	orrs	r2, r1
 8003540:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2101      	movs	r1, #1
 800354e:	430a      	orrs	r2, r1
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e00a      	b.n	800356a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2280      	movs	r2, #128	@ 0x80
 8003558:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2224      	movs	r2, #36	@ 0x24
 800355e:	2100      	movs	r1, #0
 8003560:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003562:	2317      	movs	r3, #23
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	2201      	movs	r2, #1
 8003568:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800356a:	2317      	movs	r3, #23
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	781b      	ldrb	r3, [r3, #0]
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b006      	add	sp, #24
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e050      	b.n	800362c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2225      	movs	r2, #37	@ 0x25
 800358e:	5c9b      	ldrb	r3, [r3, r2]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d008      	beq.n	80035a8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2204      	movs	r2, #4
 800359a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	@ 0x24
 80035a0:	2100      	movs	r1, #0
 80035a2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e041      	b.n	800362c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	210e      	movs	r1, #14
 80035b4:	438a      	bics	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c2:	491c      	ldr	r1, [pc, #112]	@ (8003634 <HAL_DMA_Abort+0xbc>)
 80035c4:	400a      	ands	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2101      	movs	r1, #1
 80035d4:	438a      	bics	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80035d8:	4b17      	ldr	r3, [pc, #92]	@ (8003638 <HAL_DMA_Abort+0xc0>)
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	221c      	movs	r2, #28
 80035e2:	4013      	ands	r3, r2
 80035e4:	2201      	movs	r2, #1
 80035e6:	409a      	lsls	r2, r3
 80035e8:	4b13      	ldr	r3, [pc, #76]	@ (8003638 <HAL_DMA_Abort+0xc0>)
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80035f6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00c      	beq.n	800361a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800360a:	490a      	ldr	r1, [pc, #40]	@ (8003634 <HAL_DMA_Abort+0xbc>)
 800360c:	400a      	ands	r2, r1
 800360e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003618:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2225      	movs	r2, #37	@ 0x25
 800361e:	2101      	movs	r1, #1
 8003620:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2224      	movs	r2, #36	@ 0x24
 8003626:	2100      	movs	r1, #0
 8003628:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	0018      	movs	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	b002      	add	sp, #8
 8003632:	bd80      	pop	{r7, pc}
 8003634:	fffffeff 	.word	0xfffffeff
 8003638:	40020000 	.word	0x40020000

0800363c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	210f      	movs	r1, #15
 8003646:	187b      	adds	r3, r7, r1
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2225      	movs	r2, #37	@ 0x25
 8003650:	5c9b      	ldrb	r3, [r3, r2]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d006      	beq.n	8003666 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2204      	movs	r2, #4
 800365c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800365e:	187b      	adds	r3, r7, r1
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
 8003664:	e049      	b.n	80036fa <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	210e      	movs	r1, #14
 8003672:	438a      	bics	r2, r1
 8003674:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2101      	movs	r1, #1
 8003682:	438a      	bics	r2, r1
 8003684:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003690:	491d      	ldr	r1, [pc, #116]	@ (8003708 <HAL_DMA_Abort_IT+0xcc>)
 8003692:	400a      	ands	r2, r1
 8003694:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003696:	4b1d      	ldr	r3, [pc, #116]	@ (800370c <HAL_DMA_Abort_IT+0xd0>)
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	221c      	movs	r2, #28
 80036a0:	4013      	ands	r3, r2
 80036a2:	2201      	movs	r2, #1
 80036a4:	409a      	lsls	r2, r3
 80036a6:	4b19      	ldr	r3, [pc, #100]	@ (800370c <HAL_DMA_Abort_IT+0xd0>)
 80036a8:	430a      	orrs	r2, r1
 80036aa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80036b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00c      	beq.n	80036d8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c8:	490f      	ldr	r1, [pc, #60]	@ (8003708 <HAL_DMA_Abort_IT+0xcc>)
 80036ca:	400a      	ands	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80036d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2225      	movs	r2, #37	@ 0x25
 80036dc:	2101      	movs	r1, #1
 80036de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2224      	movs	r2, #36	@ 0x24
 80036e4:	2100      	movs	r1, #0
 80036e6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d004      	beq.n	80036fa <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	0010      	movs	r0, r2
 80036f8:	4798      	blx	r3
    }
  }
  return status;
 80036fa:	230f      	movs	r3, #15
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	781b      	ldrb	r3, [r3, #0]
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b004      	add	sp, #16
 8003706:	bd80      	pop	{r7, pc}
 8003708:	fffffeff 	.word	0xfffffeff
 800370c:	40020000 	.word	0x40020000

08003710 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003718:	4b55      	ldr	r3, [pc, #340]	@ (8003870 <HAL_DMA_IRQHandler+0x160>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	221c      	movs	r2, #28
 800372c:	4013      	ands	r3, r2
 800372e:	2204      	movs	r2, #4
 8003730:	409a      	lsls	r2, r3
 8003732:	0013      	movs	r3, r2
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4013      	ands	r3, r2
 8003738:	d027      	beq.n	800378a <HAL_DMA_IRQHandler+0x7a>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2204      	movs	r2, #4
 800373e:	4013      	ands	r3, r2
 8003740:	d023      	beq.n	800378a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2220      	movs	r2, #32
 800374a:	4013      	ands	r3, r2
 800374c:	d107      	bne.n	800375e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2104      	movs	r1, #4
 800375a:	438a      	bics	r2, r1
 800375c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800375e:	4b44      	ldr	r3, [pc, #272]	@ (8003870 <HAL_DMA_IRQHandler+0x160>)
 8003760:	6859      	ldr	r1, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	221c      	movs	r2, #28
 8003768:	4013      	ands	r3, r2
 800376a:	2204      	movs	r2, #4
 800376c:	409a      	lsls	r2, r3
 800376e:	4b40      	ldr	r3, [pc, #256]	@ (8003870 <HAL_DMA_IRQHandler+0x160>)
 8003770:	430a      	orrs	r2, r1
 8003772:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003778:	2b00      	cmp	r3, #0
 800377a:	d100      	bne.n	800377e <HAL_DMA_IRQHandler+0x6e>
 800377c:	e073      	b.n	8003866 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	0010      	movs	r0, r2
 8003786:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003788:	e06d      	b.n	8003866 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378e:	221c      	movs	r2, #28
 8003790:	4013      	ands	r3, r2
 8003792:	2202      	movs	r2, #2
 8003794:	409a      	lsls	r2, r3
 8003796:	0013      	movs	r3, r2
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4013      	ands	r3, r2
 800379c:	d02e      	beq.n	80037fc <HAL_DMA_IRQHandler+0xec>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2202      	movs	r2, #2
 80037a2:	4013      	ands	r3, r2
 80037a4:	d02a      	beq.n	80037fc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2220      	movs	r2, #32
 80037ae:	4013      	ands	r3, r2
 80037b0:	d10b      	bne.n	80037ca <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	210a      	movs	r1, #10
 80037be:	438a      	bics	r2, r1
 80037c0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2225      	movs	r2, #37	@ 0x25
 80037c6:	2101      	movs	r1, #1
 80037c8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80037ca:	4b29      	ldr	r3, [pc, #164]	@ (8003870 <HAL_DMA_IRQHandler+0x160>)
 80037cc:	6859      	ldr	r1, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	221c      	movs	r2, #28
 80037d4:	4013      	ands	r3, r2
 80037d6:	2202      	movs	r2, #2
 80037d8:	409a      	lsls	r2, r3
 80037da:	4b25      	ldr	r3, [pc, #148]	@ (8003870 <HAL_DMA_IRQHandler+0x160>)
 80037dc:	430a      	orrs	r2, r1
 80037de:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2224      	movs	r2, #36	@ 0x24
 80037e4:	2100      	movs	r1, #0
 80037e6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d03a      	beq.n	8003866 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	0010      	movs	r0, r2
 80037f8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80037fa:	e034      	b.n	8003866 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	221c      	movs	r2, #28
 8003802:	4013      	ands	r3, r2
 8003804:	2208      	movs	r2, #8
 8003806:	409a      	lsls	r2, r3
 8003808:	0013      	movs	r3, r2
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4013      	ands	r3, r2
 800380e:	d02b      	beq.n	8003868 <HAL_DMA_IRQHandler+0x158>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2208      	movs	r2, #8
 8003814:	4013      	ands	r3, r2
 8003816:	d027      	beq.n	8003868 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	210e      	movs	r1, #14
 8003824:	438a      	bics	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003828:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <HAL_DMA_IRQHandler+0x160>)
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003830:	221c      	movs	r2, #28
 8003832:	4013      	ands	r3, r2
 8003834:	2201      	movs	r2, #1
 8003836:	409a      	lsls	r2, r3
 8003838:	4b0d      	ldr	r3, [pc, #52]	@ (8003870 <HAL_DMA_IRQHandler+0x160>)
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2225      	movs	r2, #37	@ 0x25
 8003848:	2101      	movs	r1, #1
 800384a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2224      	movs	r2, #36	@ 0x24
 8003850:	2100      	movs	r1, #0
 8003852:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	0010      	movs	r0, r2
 8003864:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	46c0      	nop			@ (mov r8, r8)
}
 800386a:	46bd      	mov	sp, r7
 800386c:	b004      	add	sp, #16
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40020000 	.word	0x40020000

08003874 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800388a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800389c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800389e:	4b14      	ldr	r3, [pc, #80]	@ (80038f0 <DMA_SetConfig+0x7c>)
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	221c      	movs	r2, #28
 80038a8:	4013      	ands	r3, r2
 80038aa:	2201      	movs	r2, #1
 80038ac:	409a      	lsls	r2, r3
 80038ae:	4b10      	ldr	r3, [pc, #64]	@ (80038f0 <DMA_SetConfig+0x7c>)
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d108      	bne.n	80038d6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038d4:	e007      	b.n	80038e6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	60da      	str	r2, [r3, #12]
}
 80038e6:	46c0      	nop			@ (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b004      	add	sp, #16
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	40020000 	.word	0x40020000

080038f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	4a10      	ldr	r2, [pc, #64]	@ (8003944 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003904:	4694      	mov	ip, r2
 8003906:	4463      	add	r3, ip
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	001a      	movs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	001a      	movs	r2, r3
 8003916:	23ff      	movs	r3, #255	@ 0xff
 8003918:	4013      	ands	r3, r2
 800391a:	3b08      	subs	r3, #8
 800391c:	2114      	movs	r1, #20
 800391e:	0018      	movs	r0, r3
 8003920:	f7fc fc00 	bl	8000124 <__udivsi3>
 8003924:	0003      	movs	r3, r0
 8003926:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a07      	ldr	r2, [pc, #28]	@ (8003948 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800392c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	221f      	movs	r2, #31
 8003932:	4013      	ands	r3, r2
 8003934:	2201      	movs	r2, #1
 8003936:	409a      	lsls	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800393c:	46c0      	nop			@ (mov r8, r8)
 800393e:	46bd      	mov	sp, r7
 8003940:	b004      	add	sp, #16
 8003942:	bd80      	pop	{r7, pc}
 8003944:	10008200 	.word	0x10008200
 8003948:	40020880 	.word	0x40020880

0800394c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	223f      	movs	r2, #63	@ 0x3f
 800395a:	4013      	ands	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a0a      	ldr	r2, [pc, #40]	@ (800398c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003962:	4694      	mov	ip, r2
 8003964:	4463      	add	r3, ip
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	001a      	movs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a07      	ldr	r2, [pc, #28]	@ (8003990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003972:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3b01      	subs	r3, #1
 8003978:	2203      	movs	r2, #3
 800397a:	4013      	ands	r3, r2
 800397c:	2201      	movs	r2, #1
 800397e:	409a      	lsls	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003984:	46c0      	nop			@ (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b004      	add	sp, #16
 800398a:	bd80      	pop	{r7, pc}
 800398c:	1000823f 	.word	0x1000823f
 8003990:	40020940 	.word	0x40020940

08003994 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003994:	b5b0      	push	{r4, r5, r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	603a      	str	r2, [r7, #0]
 80039a0:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80039a2:	4b21      	ldr	r3, [pc, #132]	@ (8003a28 <HAL_FLASH_Program+0x94>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_FLASH_Program+0x1a>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e038      	b.n	8003a20 <HAL_FLASH_Program+0x8c>
 80039ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003a28 <HAL_FLASH_Program+0x94>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a28 <HAL_FLASH_Program+0x94>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80039ba:	2517      	movs	r5, #23
 80039bc:	197c      	adds	r4, r7, r5
 80039be:	23fa      	movs	r3, #250	@ 0xfa
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	0018      	movs	r0, r3
 80039c4:	f000 f958 	bl	8003c78 <FLASH_WaitForLastOperation>
 80039c8:	0003      	movs	r3, r0
 80039ca:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80039cc:	197b      	adds	r3, r7, r5
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d11f      	bne.n	8003a14 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d106      	bne.n	80039e8 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	0008      	movs	r0, r1
 80039e2:	f000 f997 	bl	8003d14 <FLASH_Program_DoubleWord>
 80039e6:	e005      	b.n	80039f4 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	0011      	movs	r1, r2
 80039ee:	0018      	movs	r0, r3
 80039f0:	f005 f8e6 	bl	8008bc0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80039f4:	2317      	movs	r3, #23
 80039f6:	18fc      	adds	r4, r7, r3
 80039f8:	23fa      	movs	r3, #250	@ 0xfa
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	0018      	movs	r0, r3
 80039fe:	f000 f93b 	bl	8003c78 <FLASH_WaitForLastOperation>
 8003a02:	0003      	movs	r3, r0
 8003a04:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003a06:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <HAL_FLASH_Program+0x98>)
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	43d9      	mvns	r1, r3
 8003a0e:	4b07      	ldr	r3, [pc, #28]	@ (8003a2c <HAL_FLASH_Program+0x98>)
 8003a10:	400a      	ands	r2, r1
 8003a12:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a14:	4b04      	ldr	r3, [pc, #16]	@ (8003a28 <HAL_FLASH_Program+0x94>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003a1a:	2317      	movs	r3, #23
 8003a1c:	18fb      	adds	r3, r7, r3
 8003a1e:	781b      	ldrb	r3, [r3, #0]
}
 8003a20:	0018      	movs	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b006      	add	sp, #24
 8003a26:	bdb0      	pop	{r4, r5, r7, pc}
 8003a28:	20001158 	.word	0x20001158
 8003a2c:	40022000 	.word	0x40022000

08003a30 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
  uint32_t param;
  uint32_t error;

  /* Save flash errors. */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8003a36:	4b3a      	ldr	r3, [pc, #232]	@ (8003b20 <HAL_FLASH_IRQHandler+0xf0>)
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	4a3a      	ldr	r2, [pc, #232]	@ (8003b24 <HAL_FLASH_IRQHandler+0xf4>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	603b      	str	r3, [r7, #0]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & FLASH_TYPEERASE_MASS) != 0x00U)
 8003a40:	4b39      	ldr	r3, [pc, #228]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2204      	movs	r2, #4
 8003a46:	4013      	ands	r3, r2
 8003a48:	d003      	beq.n	8003a52 <HAL_FLASH_IRQHandler+0x22>
  {
    /* return bank number */
    param = pFlash.Banks;
 8003a4a:	4b37      	ldr	r3, [pc, #220]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	e013      	b.n	8003a7a <HAL_FLASH_IRQHandler+0x4a>
  }
  else
  {
    /* Clear operation only for page erase or program */
    CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 8003a52:	4b33      	ldr	r3, [pc, #204]	@ (8003b20 <HAL_FLASH_IRQHandler+0xf0>)
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	4b34      	ldr	r3, [pc, #208]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	43d9      	mvns	r1, r3
 8003a5c:	4b30      	ldr	r3, [pc, #192]	@ (8003b20 <HAL_FLASH_IRQHandler+0xf0>)
 8003a5e:	400a      	ands	r2, r1
 8003a60:	615a      	str	r2, [r3, #20]

    if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0x00U)
 8003a62:	4b31      	ldr	r3, [pc, #196]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	4a31      	ldr	r2, [pc, #196]	@ (8003b2c <HAL_FLASH_IRQHandler+0xfc>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <HAL_FLASH_IRQHandler+0x44>
    {
      /* return address being programmed */
      param = pFlash.Address;
 8003a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	e002      	b.n	8003a7a <HAL_FLASH_IRQHandler+0x4a>
    }
    else
    {
      /* return page number being erased */
      param = pFlash.Page;
 8003a74:	4b2c      	ldr	r3, [pc, #176]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	607b      	str	r3, [r7, #4]
    }
  }

  /* B] Check errors */
  if (error != 0x00U)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00f      	beq.n	8003aa0 <HAL_FLASH_IRQHandler+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003a80:	4b29      	ldr	r3, [pc, #164]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	4b27      	ldr	r3, [pc, #156]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003a8a:	605a      	str	r2, [r3, #4]

    /* clear error flags */
    FLASH->SR = FLASH_SR_ERRORS;
 8003a8c:	4b24      	ldr	r3, [pc, #144]	@ (8003b20 <HAL_FLASH_IRQHandler+0xf0>)
 8003a8e:	4a25      	ldr	r2, [pc, #148]	@ (8003b24 <HAL_FLASH_IRQHandler+0xf4>)
 8003a90:	611a      	str	r2, [r3, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8003a92:	4b25      	ldr	r3, [pc, #148]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f000 f852 	bl	8003b44 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if ((FLASH->SR & FLASH_SR_EOP) != 0x00U)
 8003aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b20 <HAL_FLASH_IRQHandler+0xf0>)
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d028      	beq.n	8003afc <HAL_FLASH_IRQHandler+0xcc>
  {
    /* Clear FLASH End of Operation pending bit */
    FLASH->SR = FLASH_SR_EOP;
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8003b20 <HAL_FLASH_IRQHandler+0xf0>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d11a      	bne.n	8003aee <HAL_FLASH_IRQHandler+0xbe>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	1e5a      	subs	r2, r3, #1
 8003abe:	4b1a      	ldr	r3, [pc, #104]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003ac0:	619a      	str	r2, [r3, #24]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0x00U)
 8003ac2:	4b19      	ldr	r3, [pc, #100]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00d      	beq.n	8003ae6 <HAL_FLASH_IRQHandler+0xb6>
      {
        /* Increment page number */
        pFlash.Page++;
 8003aca:	4b17      	ldr	r3, [pc, #92]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	4b15      	ldr	r3, [pc, #84]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003ad2:	615a      	str	r2, [r3, #20]
        FLASH_PageErase(pFlash.Banks, pFlash.Page);
 8003ad4:	4b14      	ldr	r3, [pc, #80]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	4b13      	ldr	r3, [pc, #76]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	0019      	movs	r1, r3
 8003ade:	0010      	movs	r0, r2
 8003ae0:	f000 f9c0 	bl	8003e64 <FLASH_PageErase>
 8003ae4:	e006      	b.n	8003af4 <HAL_FLASH_IRQHandler+0xc4>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8003ae6:	4b10      	ldr	r3, [pc, #64]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	e002      	b.n	8003af4 <HAL_FLASH_IRQHandler+0xc4>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8003aee:	4b0e      	ldr	r3, [pc, #56]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	0018      	movs	r0, r3
 8003af8:	f000 f81c 	bl	8003b34 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8003afc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d108      	bne.n	8003b16 <HAL_FLASH_IRQHandler+0xe6>
  {
    /* Disable End of Operation and Error interrupts */
    FLASH->CR &= ~(FLASH_CR_EOPIE | FLASH_CR_ERRIE);
 8003b04:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <HAL_FLASH_IRQHandler+0xf0>)
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <HAL_FLASH_IRQHandler+0xf0>)
 8003b0a:	4909      	ldr	r1, [pc, #36]	@ (8003b30 <HAL_FLASH_IRQHandler+0x100>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003b10:	4b05      	ldr	r3, [pc, #20]	@ (8003b28 <HAL_FLASH_IRQHandler+0xf8>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
  }
}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b002      	add	sp, #8
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	46c0      	nop			@ (mov r8, r8)
 8003b20:	40022000 	.word	0x40022000
 8003b24:	000083fa 	.word	0x000083fa
 8003b28:	20001158 	.word	0x20001158
 8003b2c:	00040001 	.word	0x00040001
 8003b30:	fcffffff 	.word	0xfcffffff

08003b34 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8003b3c:	46c0      	nop			@ (mov r8, r8)
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b002      	add	sp, #8
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8003b4c:	46c0      	nop			@ (mov r8, r8)
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b002      	add	sp, #8
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003b5a:	1dfb      	adds	r3, r7, #7
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003b60:	4b0b      	ldr	r3, [pc, #44]	@ (8003b90 <HAL_FLASH_Unlock+0x3c>)
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	da0c      	bge.n	8003b82 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003b68:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_FLASH_Unlock+0x3c>)
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b94 <HAL_FLASH_Unlock+0x40>)
 8003b6c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003b6e:	4b08      	ldr	r3, [pc, #32]	@ (8003b90 <HAL_FLASH_Unlock+0x3c>)
 8003b70:	4a09      	ldr	r2, [pc, #36]	@ (8003b98 <HAL_FLASH_Unlock+0x44>)
 8003b72:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003b74:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <HAL_FLASH_Unlock+0x3c>)
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	da02      	bge.n	8003b82 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8003b7c:	1dfb      	adds	r3, r7, #7
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003b82:	1dfb      	adds	r3, r7, #7
 8003b84:	781b      	ldrb	r3, [r3, #0]
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b002      	add	sp, #8
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			@ (mov r8, r8)
 8003b90:	40022000 	.word	0x40022000
 8003b94:	45670123 	.word	0x45670123
 8003b98:	cdef89ab 	.word	0xcdef89ab

08003b9c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ba2:	1dfb      	adds	r3, r7, #7
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003ba8:	23fa      	movs	r3, #250	@ 0xfa
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 f863 	bl	8003c78 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bdc <HAL_FLASH_Lock+0x40>)
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <HAL_FLASH_Lock+0x40>)
 8003bb8:	2180      	movs	r1, #128	@ 0x80
 8003bba:	0609      	lsls	r1, r1, #24
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8003bc0:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <HAL_FLASH_Lock+0x40>)
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	da02      	bge.n	8003bce <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8003bc8:	1dfb      	adds	r3, r7, #7
 8003bca:	2200      	movs	r2, #0
 8003bcc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003bce:	1dfb      	adds	r3, r7, #7
 8003bd0:	781b      	ldrb	r3, [r3, #0]
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b002      	add	sp, #8
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	40022000 	.word	0x40022000

08003be0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8003be6:	1dfb      	adds	r3, r7, #7
 8003be8:	2201      	movs	r2, #1
 8003bea:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 8003bec:	4b0d      	ldr	r3, [pc, #52]	@ (8003c24 <HAL_FLASH_OB_Unlock+0x44>)
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	2380      	movs	r3, #128	@ 0x80
 8003bf2:	05db      	lsls	r3, r3, #23
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d00e      	beq.n	8003c16 <HAL_FLASH_OB_Unlock+0x36>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c24 <HAL_FLASH_OB_Unlock+0x44>)
 8003bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8003c28 <HAL_FLASH_OB_Unlock+0x48>)
 8003bfc:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8003bfe:	4b09      	ldr	r3, [pc, #36]	@ (8003c24 <HAL_FLASH_OB_Unlock+0x44>)
 8003c00:	4a0a      	ldr	r2, [pc, #40]	@ (8003c2c <HAL_FLASH_OB_Unlock+0x4c>)
 8003c02:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 8003c04:	4b07      	ldr	r3, [pc, #28]	@ (8003c24 <HAL_FLASH_OB_Unlock+0x44>)
 8003c06:	695a      	ldr	r2, [r3, #20]
 8003c08:	2380      	movs	r3, #128	@ 0x80
 8003c0a:	05db      	lsls	r3, r3, #23
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d102      	bne.n	8003c16 <HAL_FLASH_OB_Unlock+0x36>
    {
      status = HAL_OK;
 8003c10:	1dfb      	adds	r3, r7, #7
 8003c12:	2200      	movs	r2, #0
 8003c14:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003c16:	1dfb      	adds	r3, r7, #7
 8003c18:	781b      	ldrb	r3, [r3, #0]
}
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b002      	add	sp, #8
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	40022000 	.word	0x40022000
 8003c28:	08192a3b 	.word	0x08192a3b
 8003c2c:	4c5d6e7f 	.word	0x4c5d6e7f

08003c30 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c36:	1dfb      	adds	r3, r7, #7
 8003c38:	2201      	movs	r2, #1
 8003c3a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c3c:	23fa      	movs	r3, #250	@ 0xfa
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 f819 	bl	8003c78 <FLASH_WaitForLastOperation>

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8003c46:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <HAL_FLASH_OB_Lock+0x44>)
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c74 <HAL_FLASH_OB_Lock+0x44>)
 8003c4c:	2180      	movs	r1, #128	@ 0x80
 8003c4e:	05c9      	lsls	r1, r1, #23
 8003c50:	430a      	orrs	r2, r1
 8003c52:	615a      	str	r2, [r3, #20]

  /* verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 8003c54:	4b07      	ldr	r3, [pc, #28]	@ (8003c74 <HAL_FLASH_OB_Lock+0x44>)
 8003c56:	695a      	ldr	r2, [r3, #20]
 8003c58:	2380      	movs	r3, #128	@ 0x80
 8003c5a:	05db      	lsls	r3, r3, #23
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d002      	beq.n	8003c66 <HAL_FLASH_OB_Lock+0x36>
  {
    status = HAL_OK;
 8003c60:	1dfb      	adds	r3, r7, #7
 8003c62:	2200      	movs	r2, #0
 8003c64:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003c66:	1dfb      	adds	r3, r7, #7
 8003c68:	781b      	ldrb	r3, [r3, #0]
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b002      	add	sp, #8
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			@ (mov r8, r8)
 8003c74:	40022000 	.word	0x40022000

08003c78 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8003c80:	f7fe ff9a 	bl	8002bb8 <HAL_GetTick>
 8003c84:	0003      	movs	r3, r0
 8003c86:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8003c88:	2380      	movs	r3, #128	@ 0x80
 8003c8a:	025b      	lsls	r3, r3, #9
 8003c8c:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8003c8e:	e00c      	b.n	8003caa <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3301      	adds	r3, #1
 8003c94:	d009      	beq.n	8003caa <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8003c96:	f7fe ff8f 	bl	8002bb8 <HAL_GetTick>
 8003c9a:	0002      	movs	r2, r0
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d801      	bhi.n	8003caa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e028      	b.n	8003cfc <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8003caa:	4b16      	ldr	r3, [pc, #88]	@ (8003d04 <FLASH_WaitForLastOperation+0x8c>)
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d1ed      	bne.n	8003c90 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8003cb4:	4b13      	ldr	r3, [pc, #76]	@ (8003d04 <FLASH_WaitForLastOperation+0x8c>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	4a13      	ldr	r2, [pc, #76]	@ (8003d08 <FLASH_WaitForLastOperation+0x90>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8003cbe:	4b11      	ldr	r3, [pc, #68]	@ (8003d04 <FLASH_WaitForLastOperation+0x8c>)
 8003cc0:	4a12      	ldr	r2, [pc, #72]	@ (8003d0c <FLASH_WaitForLastOperation+0x94>)
 8003cc2:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d011      	beq.n	8003cee <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8003cca:	4b11      	ldr	r3, [pc, #68]	@ (8003d10 <FLASH_WaitForLastOperation+0x98>)
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e013      	b.n	8003cfc <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	d009      	beq.n	8003cee <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8003cda:	f7fe ff6d 	bl	8002bb8 <HAL_GetTick>
 8003cde:	0002      	movs	r2, r0
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d801      	bhi.n	8003cee <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e006      	b.n	8003cfc <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8003cee:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <FLASH_WaitForLastOperation+0x8c>)
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	2380      	movs	r3, #128	@ 0x80
 8003cf4:	02db      	lsls	r3, r3, #11
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d1ec      	bne.n	8003cd4 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b004      	add	sp, #16
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40022000 	.word	0x40022000
 8003d08:	000083fa 	.word	0x000083fa
 8003d0c:	000083fb 	.word	0x000083fb
 8003d10:	20001158 	.word	0x20001158

08003d14 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003d14:	b5b0      	push	{r4, r5, r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	603a      	str	r2, [r7, #0]
 8003d1e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003d20:	4b0b      	ldr	r3, [pc, #44]	@ (8003d50 <FLASH_Program_DoubleWord+0x3c>)
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	4b0a      	ldr	r3, [pc, #40]	@ (8003d50 <FLASH_Program_DoubleWord+0x3c>)
 8003d26:	2101      	movs	r1, #1
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003d32:	f3bf 8f6f 	isb	sy
}
 8003d36:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	001c      	movs	r4, r3
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	001d      	movs	r5, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3304      	adds	r3, #4
 8003d44:	0022      	movs	r2, r4
 8003d46:	601a      	str	r2, [r3, #0]
}
 8003d48:	46c0      	nop			@ (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b004      	add	sp, #16
 8003d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8003d50:	40022000 	.word	0x40022000

08003d54 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003d54:	b5b0      	push	{r4, r5, r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d5e:	4b35      	ldr	r3, [pc, #212]	@ (8003e34 <HAL_FLASHEx_Erase+0xe0>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_FLASHEx_Erase+0x16>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e05f      	b.n	8003e2a <HAL_FLASHEx_Erase+0xd6>
 8003d6a:	4b32      	ldr	r3, [pc, #200]	@ (8003e34 <HAL_FLASHEx_Erase+0xe0>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d70:	4b30      	ldr	r3, [pc, #192]	@ (8003e34 <HAL_FLASHEx_Erase+0xe0>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d76:	250f      	movs	r5, #15
 8003d78:	197c      	adds	r4, r7, r5
 8003d7a:	23fa      	movs	r3, #250	@ 0xfa
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f7ff ff7a 	bl	8003c78 <FLASH_WaitForLastOperation>
 8003d84:	0003      	movs	r3, r0
 8003d86:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003d88:	002c      	movs	r4, r5
 8003d8a:	193b      	adds	r3, r7, r4
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d145      	bne.n	8003e1e <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2204      	movs	r2, #4
 8003d96:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d10d      	bne.n	8003dbc <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 f849 	bl	8003e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003daa:	193c      	adds	r4, r7, r4
 8003dac:	23fa      	movs	r3, #250	@ 0xfa
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	0018      	movs	r0, r3
 8003db2:	f7ff ff61 	bl	8003c78 <FLASH_WaitForLastOperation>
 8003db6:	0003      	movs	r3, r0
 8003db8:	7023      	strb	r3, [r4, #0]
 8003dba:	e030      	b.n	8003e1e <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	4252      	negs	r2, r2
 8003dc2:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	e01a      	b.n	8003e02 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	0011      	movs	r1, r2
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f000 f845 	bl	8003e64 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003dda:	250f      	movs	r5, #15
 8003ddc:	197c      	adds	r4, r7, r5
 8003dde:	23fa      	movs	r3, #250	@ 0xfa
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7ff ff48 	bl	8003c78 <FLASH_WaitForLastOperation>
 8003de8:	0003      	movs	r3, r0
 8003dea:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8003dec:	197b      	adds	r3, r7, r5
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	601a      	str	r2, [r3, #0]
          break;
 8003dfa:	e00a      	b.n	8003e12 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	18d3      	adds	r3, r2, r3
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d3dc      	bcc.n	8003dcc <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003e12:	4b09      	ldr	r3, [pc, #36]	@ (8003e38 <HAL_FLASHEx_Erase+0xe4>)
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	4b08      	ldr	r3, [pc, #32]	@ (8003e38 <HAL_FLASHEx_Erase+0xe4>)
 8003e18:	2102      	movs	r1, #2
 8003e1a:	438a      	bics	r2, r1
 8003e1c:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e1e:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <HAL_FLASHEx_Erase+0xe0>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003e24:	230f      	movs	r3, #15
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	781b      	ldrb	r3, [r3, #0]
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b004      	add	sp, #16
 8003e30:	bdb0      	pop	{r4, r5, r7, pc}
 8003e32:	46c0      	nop			@ (mov r8, r8)
 8003e34:	20001158 	.word	0x20001158
 8003e38:	40022000 	.word	0x40022000

08003e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8003e44:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <FLASH_MassErase+0x24>)
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	4b04      	ldr	r3, [pc, #16]	@ (8003e60 <FLASH_MassErase+0x24>)
 8003e4e:	2180      	movs	r1, #128	@ 0x80
 8003e50:	0249      	lsls	r1, r1, #9
 8003e52:	430a      	orrs	r2, r1
 8003e54:	615a      	str	r2, [r3, #20]
}
 8003e56:	46c0      	nop			@ (mov r8, r8)
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b002      	add	sp, #8
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	40022000 	.word	0x40022000

08003e64 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8003e6e:	4b08      	ldr	r3, [pc, #32]	@ (8003e90 <FLASH_PageErase+0x2c>)
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	4a08      	ldr	r2, [pc, #32]	@ (8003e94 <FLASH_PageErase+0x30>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	00da      	lsls	r2, r3, #3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	4b03      	ldr	r3, [pc, #12]	@ (8003e90 <FLASH_PageErase+0x2c>)
 8003e82:	4905      	ldr	r1, [pc, #20]	@ (8003e98 <FLASH_PageErase+0x34>)
 8003e84:	430a      	orrs	r2, r1
 8003e86:	615a      	str	r2, [r3, #20]
}
 8003e88:	46c0      	nop			@ (mov r8, r8)
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b004      	add	sp, #16
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40022000 	.word	0x40022000
 8003e94:	ffffe007 	.word	0xffffe007
 8003e98:	00010002 	.word	0x00010002

08003e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eaa:	e147      	b.n	800413c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4091      	lsls	r1, r2
 8003eb6:	000a      	movs	r2, r1
 8003eb8:	4013      	ands	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d100      	bne.n	8003ec4 <HAL_GPIO_Init+0x28>
 8003ec2:	e138      	b.n	8004136 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2203      	movs	r2, #3
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d005      	beq.n	8003edc <HAL_GPIO_Init+0x40>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d130      	bne.n	8003f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	0013      	movs	r3, r2
 8003eec:	43da      	mvns	r2, r3
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	409a      	lsls	r2, r3
 8003efe:	0013      	movs	r3, r2
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f12:	2201      	movs	r2, #1
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	409a      	lsls	r2, r3
 8003f18:	0013      	movs	r3, r2
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	091b      	lsrs	r3, r3, #4
 8003f28:	2201      	movs	r2, #1
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	0013      	movs	r3, r2
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2203      	movs	r2, #3
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d017      	beq.n	8003f7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	2203      	movs	r2, #3
 8003f56:	409a      	lsls	r2, r3
 8003f58:	0013      	movs	r3, r2
 8003f5a:	43da      	mvns	r2, r3
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	0013      	movs	r3, r2
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2203      	movs	r2, #3
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d123      	bne.n	8003fce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	08da      	lsrs	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3208      	adds	r2, #8
 8003f8e:	0092      	lsls	r2, r2, #2
 8003f90:	58d3      	ldr	r3, [r2, r3]
 8003f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2207      	movs	r2, #7
 8003f98:	4013      	ands	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	220f      	movs	r2, #15
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	0013      	movs	r3, r2
 8003fa2:	43da      	mvns	r2, r3
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2107      	movs	r1, #7
 8003fb2:	400b      	ands	r3, r1
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	0013      	movs	r3, r2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	08da      	lsrs	r2, r3, #3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3208      	adds	r2, #8
 8003fc8:	0092      	lsls	r2, r2, #2
 8003fca:	6939      	ldr	r1, [r7, #16]
 8003fcc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	2203      	movs	r2, #3
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	0013      	movs	r3, r2
 8003fde:	43da      	mvns	r2, r3
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2203      	movs	r2, #3
 8003fec:	401a      	ands	r2, r3
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	0013      	movs	r3, r2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	23c0      	movs	r3, #192	@ 0xc0
 8004008:	029b      	lsls	r3, r3, #10
 800400a:	4013      	ands	r3, r2
 800400c:	d100      	bne.n	8004010 <HAL_GPIO_Init+0x174>
 800400e:	e092      	b.n	8004136 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004010:	4a50      	ldr	r2, [pc, #320]	@ (8004154 <HAL_GPIO_Init+0x2b8>)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	089b      	lsrs	r3, r3, #2
 8004016:	3318      	adds	r3, #24
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	589b      	ldr	r3, [r3, r2]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2203      	movs	r2, #3
 8004022:	4013      	ands	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	220f      	movs	r2, #15
 8004028:	409a      	lsls	r2, r3
 800402a:	0013      	movs	r3, r2
 800402c:	43da      	mvns	r2, r3
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4013      	ands	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	23a0      	movs	r3, #160	@ 0xa0
 8004038:	05db      	lsls	r3, r3, #23
 800403a:	429a      	cmp	r2, r3
 800403c:	d013      	beq.n	8004066 <HAL_GPIO_Init+0x1ca>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a45      	ldr	r2, [pc, #276]	@ (8004158 <HAL_GPIO_Init+0x2bc>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00d      	beq.n	8004062 <HAL_GPIO_Init+0x1c6>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a44      	ldr	r2, [pc, #272]	@ (800415c <HAL_GPIO_Init+0x2c0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d007      	beq.n	800405e <HAL_GPIO_Init+0x1c2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a43      	ldr	r2, [pc, #268]	@ (8004160 <HAL_GPIO_Init+0x2c4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d101      	bne.n	800405a <HAL_GPIO_Init+0x1be>
 8004056:	2303      	movs	r3, #3
 8004058:	e006      	b.n	8004068 <HAL_GPIO_Init+0x1cc>
 800405a:	2305      	movs	r3, #5
 800405c:	e004      	b.n	8004068 <HAL_GPIO_Init+0x1cc>
 800405e:	2302      	movs	r3, #2
 8004060:	e002      	b.n	8004068 <HAL_GPIO_Init+0x1cc>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_GPIO_Init+0x1cc>
 8004066:	2300      	movs	r3, #0
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	2103      	movs	r1, #3
 800406c:	400a      	ands	r2, r1
 800406e:	00d2      	lsls	r2, r2, #3
 8004070:	4093      	lsls	r3, r2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004078:	4936      	ldr	r1, [pc, #216]	@ (8004154 <HAL_GPIO_Init+0x2b8>)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	3318      	adds	r3, #24
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004086:	4b33      	ldr	r3, [pc, #204]	@ (8004154 <HAL_GPIO_Init+0x2b8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	43da      	mvns	r2, r3
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4013      	ands	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	035b      	lsls	r3, r3, #13
 800409e:	4013      	ands	r3, r2
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004154 <HAL_GPIO_Init+0x2b8>)
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80040b0:	4b28      	ldr	r3, [pc, #160]	@ (8004154 <HAL_GPIO_Init+0x2b8>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	43da      	mvns	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4013      	ands	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	039b      	lsls	r3, r3, #14
 80040c8:	4013      	ands	r3, r2
 80040ca:	d003      	beq.n	80040d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004154 <HAL_GPIO_Init+0x2b8>)
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040da:	4a1e      	ldr	r2, [pc, #120]	@ (8004154 <HAL_GPIO_Init+0x2b8>)
 80040dc:	2384      	movs	r3, #132	@ 0x84
 80040de:	58d3      	ldr	r3, [r2, r3]
 80040e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	43da      	mvns	r2, r3
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4013      	ands	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	2380      	movs	r3, #128	@ 0x80
 80040f2:	029b      	lsls	r3, r3, #10
 80040f4:	4013      	ands	r3, r2
 80040f6:	d003      	beq.n	8004100 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004100:	4914      	ldr	r1, [pc, #80]	@ (8004154 <HAL_GPIO_Init+0x2b8>)
 8004102:	2284      	movs	r2, #132	@ 0x84
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004108:	4a12      	ldr	r2, [pc, #72]	@ (8004154 <HAL_GPIO_Init+0x2b8>)
 800410a:	2380      	movs	r3, #128	@ 0x80
 800410c:	58d3      	ldr	r3, [r2, r3]
 800410e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	43da      	mvns	r2, r3
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4013      	ands	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	2380      	movs	r3, #128	@ 0x80
 8004120:	025b      	lsls	r3, r3, #9
 8004122:	4013      	ands	r3, r2
 8004124:	d003      	beq.n	800412e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800412e:	4909      	ldr	r1, [pc, #36]	@ (8004154 <HAL_GPIO_Init+0x2b8>)
 8004130:	2280      	movs	r2, #128	@ 0x80
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	3301      	adds	r3, #1
 800413a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	40da      	lsrs	r2, r3
 8004144:	1e13      	subs	r3, r2, #0
 8004146:	d000      	beq.n	800414a <HAL_GPIO_Init+0x2ae>
 8004148:	e6b0      	b.n	8003eac <HAL_GPIO_Init+0x10>
  }
}
 800414a:	46c0      	nop			@ (mov r8, r8)
 800414c:	46c0      	nop			@ (mov r8, r8)
 800414e:	46bd      	mov	sp, r7
 8004150:	b006      	add	sp, #24
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40021800 	.word	0x40021800
 8004158:	50000400 	.word	0x50000400
 800415c:	50000800 	.word	0x50000800
 8004160:	50000c00 	.word	0x50000c00

08004164 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004172:	e0b4      	b.n	80042de <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004174:	2201      	movs	r2, #1
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	409a      	lsls	r2, r3
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	4013      	ands	r3, r2
 800417e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d100      	bne.n	8004188 <HAL_GPIO_DeInit+0x24>
 8004186:	e0a7      	b.n	80042d8 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8004188:	4a5a      	ldr	r2, [pc, #360]	@ (80042f4 <HAL_GPIO_DeInit+0x190>)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	089b      	lsrs	r3, r3, #2
 800418e:	3318      	adds	r3, #24
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	589b      	ldr	r3, [r3, r2]
 8004194:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2203      	movs	r2, #3
 800419a:	4013      	ands	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	220f      	movs	r2, #15
 80041a0:	409a      	lsls	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4013      	ands	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	23a0      	movs	r3, #160	@ 0xa0
 80041ac:	05db      	lsls	r3, r3, #23
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d013      	beq.n	80041da <HAL_GPIO_DeInit+0x76>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a50      	ldr	r2, [pc, #320]	@ (80042f8 <HAL_GPIO_DeInit+0x194>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00d      	beq.n	80041d6 <HAL_GPIO_DeInit+0x72>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a4f      	ldr	r2, [pc, #316]	@ (80042fc <HAL_GPIO_DeInit+0x198>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d007      	beq.n	80041d2 <HAL_GPIO_DeInit+0x6e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a4e      	ldr	r2, [pc, #312]	@ (8004300 <HAL_GPIO_DeInit+0x19c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d101      	bne.n	80041ce <HAL_GPIO_DeInit+0x6a>
 80041ca:	2303      	movs	r3, #3
 80041cc:	e006      	b.n	80041dc <HAL_GPIO_DeInit+0x78>
 80041ce:	2305      	movs	r3, #5
 80041d0:	e004      	b.n	80041dc <HAL_GPIO_DeInit+0x78>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e002      	b.n	80041dc <HAL_GPIO_DeInit+0x78>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <HAL_GPIO_DeInit+0x78>
 80041da:	2300      	movs	r3, #0
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	2103      	movs	r1, #3
 80041e0:	400a      	ands	r2, r1
 80041e2:	00d2      	lsls	r2, r2, #3
 80041e4:	4093      	lsls	r3, r2
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d136      	bne.n	800425a <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80041ec:	4a41      	ldr	r2, [pc, #260]	@ (80042f4 <HAL_GPIO_DeInit+0x190>)
 80041ee:	2380      	movs	r3, #128	@ 0x80
 80041f0:	58d3      	ldr	r3, [r2, r3]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	43d2      	mvns	r2, r2
 80041f6:	493f      	ldr	r1, [pc, #252]	@ (80042f4 <HAL_GPIO_DeInit+0x190>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	2280      	movs	r2, #128	@ 0x80
 80041fc:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80041fe:	4a3d      	ldr	r2, [pc, #244]	@ (80042f4 <HAL_GPIO_DeInit+0x190>)
 8004200:	2384      	movs	r3, #132	@ 0x84
 8004202:	58d3      	ldr	r3, [r2, r3]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	43d2      	mvns	r2, r2
 8004208:	493a      	ldr	r1, [pc, #232]	@ (80042f4 <HAL_GPIO_DeInit+0x190>)
 800420a:	4013      	ands	r3, r2
 800420c:	2284      	movs	r2, #132	@ 0x84
 800420e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004210:	4b38      	ldr	r3, [pc, #224]	@ (80042f4 <HAL_GPIO_DeInit+0x190>)
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	43d9      	mvns	r1, r3
 8004218:	4b36      	ldr	r3, [pc, #216]	@ (80042f4 <HAL_GPIO_DeInit+0x190>)
 800421a:	400a      	ands	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800421e:	4b35      	ldr	r3, [pc, #212]	@ (80042f4 <HAL_GPIO_DeInit+0x190>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	43d9      	mvns	r1, r3
 8004226:	4b33      	ldr	r3, [pc, #204]	@ (80042f4 <HAL_GPIO_DeInit+0x190>)
 8004228:	400a      	ands	r2, r1
 800422a:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2203      	movs	r2, #3
 8004230:	4013      	ands	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	220f      	movs	r2, #15
 8004236:	409a      	lsls	r2, r3
 8004238:	0013      	movs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800423c:	4a2d      	ldr	r2, [pc, #180]	@ (80042f4 <HAL_GPIO_DeInit+0x190>)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	089b      	lsrs	r3, r3, #2
 8004242:	3318      	adds	r3, #24
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	589a      	ldr	r2, [r3, r2]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	43d9      	mvns	r1, r3
 800424c:	4829      	ldr	r0, [pc, #164]	@ (80042f4 <HAL_GPIO_DeInit+0x190>)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	089b      	lsrs	r3, r3, #2
 8004252:	400a      	ands	r2, r1
 8004254:	3318      	adds	r3, #24
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	2103      	movs	r1, #3
 8004264:	4099      	lsls	r1, r3
 8004266:	000b      	movs	r3, r1
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	08da      	lsrs	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3208      	adds	r2, #8
 8004276:	0092      	lsls	r2, r2, #2
 8004278:	58d3      	ldr	r3, [r2, r3]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	2107      	movs	r1, #7
 800427e:	400a      	ands	r2, r1
 8004280:	0092      	lsls	r2, r2, #2
 8004282:	210f      	movs	r1, #15
 8004284:	4091      	lsls	r1, r2
 8004286:	000a      	movs	r2, r1
 8004288:	43d1      	mvns	r1, r2
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	08d2      	lsrs	r2, r2, #3
 800428e:	4019      	ands	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3208      	adds	r2, #8
 8004294:	0092      	lsls	r2, r2, #2
 8004296:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	0052      	lsls	r2, r2, #1
 80042a0:	2103      	movs	r1, #3
 80042a2:	4091      	lsls	r1, r2
 80042a4:	000a      	movs	r2, r1
 80042a6:	43d2      	mvns	r2, r2
 80042a8:	401a      	ands	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2101      	movs	r1, #1
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4091      	lsls	r1, r2
 80042b8:	000a      	movs	r2, r1
 80042ba:	43d2      	mvns	r2, r2
 80042bc:	401a      	ands	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	0052      	lsls	r2, r2, #1
 80042ca:	2103      	movs	r1, #3
 80042cc:	4091      	lsls	r1, r2
 80042ce:	000a      	movs	r2, r1
 80042d0:	43d2      	mvns	r2, r2
 80042d2:	401a      	ands	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3301      	adds	r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	40da      	lsrs	r2, r3
 80042e4:	1e13      	subs	r3, r2, #0
 80042e6:	d000      	beq.n	80042ea <HAL_GPIO_DeInit+0x186>
 80042e8:	e744      	b.n	8004174 <HAL_GPIO_DeInit+0x10>
  }
}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	46c0      	nop			@ (mov r8, r8)
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b006      	add	sp, #24
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021800 	.word	0x40021800
 80042f8:	50000400 	.word	0x50000400
 80042fc:	50000800 	.word	0x50000800
 8004300:	50000c00 	.word	0x50000c00

08004304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	000a      	movs	r2, r1
 800430e:	1cbb      	adds	r3, r7, #2
 8004310:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	1cba      	adds	r2, r7, #2
 8004318:	8812      	ldrh	r2, [r2, #0]
 800431a:	4013      	ands	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800431e:	230f      	movs	r3, #15
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	2201      	movs	r2, #1
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e003      	b.n	8004330 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004328:	230f      	movs	r3, #15
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004330:	230f      	movs	r3, #15
 8004332:	18fb      	adds	r3, r7, r3
 8004334:	781b      	ldrb	r3, [r3, #0]
}
 8004336:	0018      	movs	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	b004      	add	sp, #16
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	0008      	movs	r0, r1
 8004348:	0011      	movs	r1, r2
 800434a:	1cbb      	adds	r3, r7, #2
 800434c:	1c02      	adds	r2, r0, #0
 800434e:	801a      	strh	r2, [r3, #0]
 8004350:	1c7b      	adds	r3, r7, #1
 8004352:	1c0a      	adds	r2, r1, #0
 8004354:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004356:	1c7b      	adds	r3, r7, #1
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d004      	beq.n	8004368 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800435e:	1cbb      	adds	r3, r7, #2
 8004360:	881a      	ldrh	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004366:	e003      	b.n	8004370 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004368:	1cbb      	adds	r3, r7, #2
 800436a:	881a      	ldrh	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004370:	46c0      	nop			@ (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b002      	add	sp, #8
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e08f      	b.n	80044aa <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2241      	movs	r2, #65	@ 0x41
 800438e:	5c9b      	ldrb	r3, [r3, r2]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d107      	bne.n	80043a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2240      	movs	r2, #64	@ 0x40
 800439a:	2100      	movs	r1, #0
 800439c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	0018      	movs	r0, r3
 80043a2:	f7fe f8d9 	bl	8002558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2241      	movs	r2, #65	@ 0x41
 80043aa:	2124      	movs	r1, #36	@ 0x24
 80043ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2101      	movs	r1, #1
 80043ba:	438a      	bics	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	493b      	ldr	r1, [pc, #236]	@ (80044b4 <HAL_I2C_Init+0x13c>)
 80043c8:	400a      	ands	r2, r1
 80043ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4938      	ldr	r1, [pc, #224]	@ (80044b8 <HAL_I2C_Init+0x140>)
 80043d8:	400a      	ands	r2, r1
 80043da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d108      	bne.n	80043f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2180      	movs	r1, #128	@ 0x80
 80043ee:	0209      	lsls	r1, r1, #8
 80043f0:	430a      	orrs	r2, r1
 80043f2:	609a      	str	r2, [r3, #8]
 80043f4:	e007      	b.n	8004406 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2184      	movs	r1, #132	@ 0x84
 8004400:	0209      	lsls	r1, r1, #8
 8004402:	430a      	orrs	r2, r1
 8004404:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d109      	bne.n	8004422 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2180      	movs	r1, #128	@ 0x80
 800441a:	0109      	lsls	r1, r1, #4
 800441c:	430a      	orrs	r2, r1
 800441e:	605a      	str	r2, [r3, #4]
 8004420:	e007      	b.n	8004432 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4923      	ldr	r1, [pc, #140]	@ (80044bc <HAL_I2C_Init+0x144>)
 800442e:	400a      	ands	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4920      	ldr	r1, [pc, #128]	@ (80044c0 <HAL_I2C_Init+0x148>)
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	491a      	ldr	r1, [pc, #104]	@ (80044b8 <HAL_I2C_Init+0x140>)
 800444e:	400a      	ands	r2, r1
 8004450:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	431a      	orrs	r2, r3
 800445c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69d9      	ldr	r1, [r3, #28]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1a      	ldr	r2, [r3, #32]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2101      	movs	r1, #1
 8004488:	430a      	orrs	r2, r1
 800448a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2241      	movs	r2, #65	@ 0x41
 8004496:	2120      	movs	r1, #32
 8004498:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2242      	movs	r2, #66	@ 0x42
 80044a4:	2100      	movs	r1, #0
 80044a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	0018      	movs	r0, r3
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b002      	add	sp, #8
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	46c0      	nop			@ (mov r8, r8)
 80044b4:	f0ffffff 	.word	0xf0ffffff
 80044b8:	ffff7fff 	.word	0xffff7fff
 80044bc:	fffff7ff 	.word	0xfffff7ff
 80044c0:	02008000 	.word	0x02008000

080044c4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e022      	b.n	800451c <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2241      	movs	r2, #65	@ 0x41
 80044da:	2124      	movs	r1, #36	@ 0x24
 80044dc:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2101      	movs	r1, #1
 80044ea:	438a      	bics	r2, r1
 80044ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	0018      	movs	r0, r3
 80044f2:	f7fe f893 	bl	800261c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2241      	movs	r2, #65	@ 0x41
 8004500:	2100      	movs	r1, #0
 8004502:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2242      	movs	r2, #66	@ 0x42
 800450e:	2100      	movs	r1, #0
 8004510:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2240      	movs	r2, #64	@ 0x40
 8004516:	2100      	movs	r1, #0
 8004518:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	0018      	movs	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	b002      	add	sp, #8
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b089      	sub	sp, #36	@ 0x24
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	0008      	movs	r0, r1
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	0019      	movs	r1, r3
 8004532:	230a      	movs	r3, #10
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	1c02      	adds	r2, r0, #0
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	2308      	movs	r3, #8
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	1c0a      	adds	r2, r1, #0
 8004540:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2241      	movs	r2, #65	@ 0x41
 8004546:	5c9b      	ldrb	r3, [r3, r2]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b20      	cmp	r3, #32
 800454c:	d000      	beq.n	8004550 <HAL_I2C_Master_Transmit+0x2c>
 800454e:	e10a      	b.n	8004766 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2240      	movs	r2, #64	@ 0x40
 8004554:	5c9b      	ldrb	r3, [r3, r2]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_I2C_Master_Transmit+0x3a>
 800455a:	2302      	movs	r3, #2
 800455c:	e104      	b.n	8004768 <HAL_I2C_Master_Transmit+0x244>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2240      	movs	r2, #64	@ 0x40
 8004562:	2101      	movs	r1, #1
 8004564:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004566:	f7fe fb27 	bl	8002bb8 <HAL_GetTick>
 800456a:	0003      	movs	r3, r0
 800456c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800456e:	2380      	movs	r3, #128	@ 0x80
 8004570:	0219      	lsls	r1, r3, #8
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	2319      	movs	r3, #25
 800457a:	2201      	movs	r2, #1
 800457c:	f000 fa1a 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 8004580:	1e03      	subs	r3, r0, #0
 8004582:	d001      	beq.n	8004588 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0ef      	b.n	8004768 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2241      	movs	r2, #65	@ 0x41
 800458c:	2121      	movs	r1, #33	@ 0x21
 800458e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2242      	movs	r2, #66	@ 0x42
 8004594:	2110      	movs	r1, #16
 8004596:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2208      	movs	r2, #8
 80045a8:	18ba      	adds	r2, r7, r2
 80045aa:	8812      	ldrh	r2, [r2, #0]
 80045ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2bff      	cmp	r3, #255	@ 0xff
 80045bc:	d906      	bls.n	80045cc <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	22ff      	movs	r2, #255	@ 0xff
 80045c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80045c4:	2380      	movs	r3, #128	@ 0x80
 80045c6:	045b      	lsls	r3, r3, #17
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	e007      	b.n	80045dc <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80045d6:	2380      	movs	r3, #128	@ 0x80
 80045d8:	049b      	lsls	r3, r3, #18
 80045da:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d027      	beq.n	8004634 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e8:	781a      	ldrb	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004618:	b2db      	uxtb	r3, r3
 800461a:	3301      	adds	r3, #1
 800461c:	b2da      	uxtb	r2, r3
 800461e:	697c      	ldr	r4, [r7, #20]
 8004620:	230a      	movs	r3, #10
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	8819      	ldrh	r1, [r3, #0]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	4b51      	ldr	r3, [pc, #324]	@ (8004770 <HAL_I2C_Master_Transmit+0x24c>)
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	0023      	movs	r3, r4
 800462e:	f000 fb9b 	bl	8004d68 <I2C_TransferConfig>
 8004632:	e06f      	b.n	8004714 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004638:	b2da      	uxtb	r2, r3
 800463a:	697c      	ldr	r4, [r7, #20]
 800463c:	230a      	movs	r3, #10
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	8819      	ldrh	r1, [r3, #0]
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	4b4a      	ldr	r3, [pc, #296]	@ (8004770 <HAL_I2C_Master_Transmit+0x24c>)
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	0023      	movs	r3, r4
 800464a:	f000 fb8d 	bl	8004d68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800464e:	e061      	b.n	8004714 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	0018      	movs	r0, r3
 8004658:	f000 fa04 	bl	8004a64 <I2C_WaitOnTXISFlagUntilTimeout>
 800465c:	1e03      	subs	r3, r0, #0
 800465e:	d001      	beq.n	8004664 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e081      	b.n	8004768 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	781a      	ldrb	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d03a      	beq.n	8004714 <HAL_I2C_Master_Transmit+0x1f0>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d136      	bne.n	8004714 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	0013      	movs	r3, r2
 80046b0:	2200      	movs	r2, #0
 80046b2:	2180      	movs	r1, #128	@ 0x80
 80046b4:	f000 f97e 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 80046b8:	1e03      	subs	r3, r0, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e053      	b.n	8004768 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2bff      	cmp	r3, #255	@ 0xff
 80046c8:	d911      	bls.n	80046ee <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	22ff      	movs	r2, #255	@ 0xff
 80046ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	2380      	movs	r3, #128	@ 0x80
 80046d8:	045c      	lsls	r4, r3, #17
 80046da:	230a      	movs	r3, #10
 80046dc:	18fb      	adds	r3, r7, r3
 80046de:	8819      	ldrh	r1, [r3, #0]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	2300      	movs	r3, #0
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	0023      	movs	r3, r4
 80046e8:	f000 fb3e 	bl	8004d68 <I2C_TransferConfig>
 80046ec:	e012      	b.n	8004714 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	2380      	movs	r3, #128	@ 0x80
 8004700:	049c      	lsls	r4, r3, #18
 8004702:	230a      	movs	r3, #10
 8004704:	18fb      	adds	r3, r7, r3
 8004706:	8819      	ldrh	r1, [r3, #0]
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	2300      	movs	r3, #0
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	0023      	movs	r3, r4
 8004710:	f000 fb2a 	bl	8004d68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d198      	bne.n	8004650 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	0018      	movs	r0, r3
 8004726:	f000 f9e3 	bl	8004af0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800472a:	1e03      	subs	r3, r0, #0
 800472c:	d001      	beq.n	8004732 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e01a      	b.n	8004768 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2220      	movs	r2, #32
 8004738:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	490b      	ldr	r1, [pc, #44]	@ (8004774 <HAL_I2C_Master_Transmit+0x250>)
 8004746:	400a      	ands	r2, r1
 8004748:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2241      	movs	r2, #65	@ 0x41
 800474e:	2120      	movs	r1, #32
 8004750:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2242      	movs	r2, #66	@ 0x42
 8004756:	2100      	movs	r1, #0
 8004758:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2240      	movs	r2, #64	@ 0x40
 800475e:	2100      	movs	r1, #0
 8004760:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	e000      	b.n	8004768 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8004766:	2302      	movs	r3, #2
  }
}
 8004768:	0018      	movs	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	b007      	add	sp, #28
 800476e:	bd90      	pop	{r4, r7, pc}
 8004770:	80002000 	.word	0x80002000
 8004774:	fe00e800 	.word	0xfe00e800

08004778 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08a      	sub	sp, #40	@ 0x28
 800477c:	af02      	add	r7, sp, #8
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	230a      	movs	r3, #10
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	1c0a      	adds	r2, r1, #0
 800478a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2241      	movs	r2, #65	@ 0x41
 8004794:	5c9b      	ldrb	r3, [r3, r2]
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b20      	cmp	r3, #32
 800479a:	d000      	beq.n	800479e <HAL_I2C_IsDeviceReady+0x26>
 800479c:	e0df      	b.n	800495e <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699a      	ldr	r2, [r3, #24]
 80047a4:	2380      	movs	r3, #128	@ 0x80
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	401a      	ands	r2, r3
 80047aa:	2380      	movs	r3, #128	@ 0x80
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d101      	bne.n	80047b6 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80047b2:	2302      	movs	r3, #2
 80047b4:	e0d4      	b.n	8004960 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2240      	movs	r2, #64	@ 0x40
 80047ba:	5c9b      	ldrb	r3, [r3, r2]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_I2C_IsDeviceReady+0x4c>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e0cd      	b.n	8004960 <HAL_I2C_IsDeviceReady+0x1e8>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2240      	movs	r2, #64	@ 0x40
 80047c8:	2101      	movs	r1, #1
 80047ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2241      	movs	r2, #65	@ 0x41
 80047d0:	2124      	movs	r1, #36	@ 0x24
 80047d2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d107      	bne.n	80047f2 <HAL_I2C_IsDeviceReady+0x7a>
 80047e2:	230a      	movs	r3, #10
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	059b      	lsls	r3, r3, #22
 80047ea:	0d9b      	lsrs	r3, r3, #22
 80047ec:	4a5e      	ldr	r2, [pc, #376]	@ (8004968 <HAL_I2C_IsDeviceReady+0x1f0>)
 80047ee:	431a      	orrs	r2, r3
 80047f0:	e006      	b.n	8004800 <HAL_I2C_IsDeviceReady+0x88>
 80047f2:	230a      	movs	r3, #10
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	059b      	lsls	r3, r3, #22
 80047fa:	0d9b      	lsrs	r3, r3, #22
 80047fc:	4a5b      	ldr	r2, [pc, #364]	@ (800496c <HAL_I2C_IsDeviceReady+0x1f4>)
 80047fe:	431a      	orrs	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004806:	f7fe f9d7 	bl	8002bb8 <HAL_GetTick>
 800480a:	0003      	movs	r3, r0
 800480c:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	2220      	movs	r2, #32
 8004816:	4013      	ands	r3, r2
 8004818:	3b20      	subs	r3, #32
 800481a:	425a      	negs	r2, r3
 800481c:	4153      	adcs	r3, r2
 800481e:	b2da      	uxtb	r2, r3
 8004820:	231f      	movs	r3, #31
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	2210      	movs	r2, #16
 800482e:	4013      	ands	r3, r2
 8004830:	3b10      	subs	r3, #16
 8004832:	425a      	negs	r2, r3
 8004834:	4153      	adcs	r3, r2
 8004836:	b2da      	uxtb	r2, r3
 8004838:	231e      	movs	r3, #30
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800483e:	e035      	b.n	80048ac <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	3301      	adds	r3, #1
 8004844:	d01a      	beq.n	800487c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004846:	f7fe f9b7 	bl	8002bb8 <HAL_GetTick>
 800484a:	0002      	movs	r2, r0
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d302      	bcc.n	800485c <HAL_I2C_IsDeviceReady+0xe4>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10f      	bne.n	800487c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2241      	movs	r2, #65	@ 0x41
 8004860:	2120      	movs	r1, #32
 8004862:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004868:	2220      	movs	r2, #32
 800486a:	431a      	orrs	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2240      	movs	r2, #64	@ 0x40
 8004874:	2100      	movs	r1, #0
 8004876:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e071      	b.n	8004960 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	2220      	movs	r2, #32
 8004884:	4013      	ands	r3, r2
 8004886:	3b20      	subs	r3, #32
 8004888:	425a      	negs	r2, r3
 800488a:	4153      	adcs	r3, r2
 800488c:	b2da      	uxtb	r2, r3
 800488e:	231f      	movs	r3, #31
 8004890:	18fb      	adds	r3, r7, r3
 8004892:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	2210      	movs	r2, #16
 800489c:	4013      	ands	r3, r2
 800489e:	3b10      	subs	r3, #16
 80048a0:	425a      	negs	r2, r3
 80048a2:	4153      	adcs	r3, r2
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	231e      	movs	r3, #30
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80048ac:	231f      	movs	r3, #31
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d104      	bne.n	80048c0 <HAL_I2C_IsDeviceReady+0x148>
 80048b6:	231e      	movs	r3, #30
 80048b8:	18fb      	adds	r3, r7, r3
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0bf      	beq.n	8004840 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	2210      	movs	r2, #16
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b10      	cmp	r3, #16
 80048cc:	d01a      	beq.n	8004904 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	0013      	movs	r3, r2
 80048d8:	2200      	movs	r2, #0
 80048da:	2120      	movs	r1, #32
 80048dc:	f000 f86a 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 80048e0:	1e03      	subs	r3, r0, #0
 80048e2:	d001      	beq.n	80048e8 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e03b      	b.n	8004960 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2220      	movs	r2, #32
 80048ee:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2241      	movs	r2, #65	@ 0x41
 80048f4:	2120      	movs	r1, #32
 80048f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2240      	movs	r2, #64	@ 0x40
 80048fc:	2100      	movs	r1, #0
 80048fe:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	e02d      	b.n	8004960 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	0013      	movs	r3, r2
 800490e:	2200      	movs	r2, #0
 8004910:	2120      	movs	r1, #32
 8004912:	f000 f84f 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 8004916:	1e03      	subs	r3, r0, #0
 8004918:	d001      	beq.n	800491e <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e020      	b.n	8004960 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2210      	movs	r2, #16
 8004924:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2220      	movs	r2, #32
 800492c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	3301      	adds	r3, #1
 8004932:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	429a      	cmp	r2, r3
 800493a:	d900      	bls.n	800493e <HAL_I2C_IsDeviceReady+0x1c6>
 800493c:	e74d      	b.n	80047da <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2241      	movs	r2, #65	@ 0x41
 8004942:	2120      	movs	r1, #32
 8004944:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494a:	2220      	movs	r2, #32
 800494c:	431a      	orrs	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2240      	movs	r2, #64	@ 0x40
 8004956:	2100      	movs	r1, #0
 8004958:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800495e:	2302      	movs	r3, #2
  }
}
 8004960:	0018      	movs	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	b008      	add	sp, #32
 8004966:	bd80      	pop	{r7, pc}
 8004968:	02002000 	.word	0x02002000
 800496c:	02002800 	.word	0x02002800

08004970 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2202      	movs	r2, #2
 8004980:	4013      	ands	r3, r2
 8004982:	2b02      	cmp	r3, #2
 8004984:	d103      	bne.n	800498e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2200      	movs	r2, #0
 800498c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2201      	movs	r2, #1
 8004996:	4013      	ands	r3, r2
 8004998:	2b01      	cmp	r3, #1
 800499a:	d007      	beq.n	80049ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2101      	movs	r1, #1
 80049a8:	430a      	orrs	r2, r1
 80049aa:	619a      	str	r2, [r3, #24]
  }
}
 80049ac:	46c0      	nop			@ (mov r8, r8)
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b002      	add	sp, #8
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	1dfb      	adds	r3, r7, #7
 80049c2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c4:	e03a      	b.n	8004a3c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	6839      	ldr	r1, [r7, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f000 f8d3 	bl	8004b78 <I2C_IsErrorOccurred>
 80049d2:	1e03      	subs	r3, r0, #0
 80049d4:	d001      	beq.n	80049da <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e040      	b.n	8004a5c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	3301      	adds	r3, #1
 80049de:	d02d      	beq.n	8004a3c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e0:	f7fe f8ea 	bl	8002bb8 <HAL_GetTick>
 80049e4:	0002      	movs	r2, r0
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d302      	bcc.n	80049f6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d122      	bne.n	8004a3c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	4013      	ands	r3, r2
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	425a      	negs	r2, r3
 8004a06:	4153      	adcs	r3, r2
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	1dfb      	adds	r3, r7, #7
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d113      	bne.n	8004a3c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a18:	2220      	movs	r2, #32
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2241      	movs	r2, #65	@ 0x41
 8004a24:	2120      	movs	r1, #32
 8004a26:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2242      	movs	r2, #66	@ 0x42
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2240      	movs	r2, #64	@ 0x40
 8004a34:	2100      	movs	r1, #0
 8004a36:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e00f      	b.n	8004a5c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	4013      	ands	r3, r2
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	425a      	negs	r2, r3
 8004a4c:	4153      	adcs	r3, r2
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	001a      	movs	r2, r3
 8004a52:	1dfb      	adds	r3, r7, #7
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d0b5      	beq.n	80049c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b004      	add	sp, #16
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a70:	e032      	b.n	8004ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f000 f87d 	bl	8004b78 <I2C_IsErrorOccurred>
 8004a7e:	1e03      	subs	r3, r0, #0
 8004a80:	d001      	beq.n	8004a86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e030      	b.n	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	d025      	beq.n	8004ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8c:	f7fe f894 	bl	8002bb8 <HAL_GetTick>
 8004a90:	0002      	movs	r2, r0
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d302      	bcc.n	8004aa2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d11a      	bne.n	8004ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d013      	beq.n	8004ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2241      	movs	r2, #65	@ 0x41
 8004ac0:	2120      	movs	r1, #32
 8004ac2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2242      	movs	r2, #66	@ 0x42
 8004ac8:	2100      	movs	r1, #0
 8004aca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2240      	movs	r2, #64	@ 0x40
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e007      	b.n	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d1c5      	bne.n	8004a72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	0018      	movs	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	b004      	add	sp, #16
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004afc:	e02f      	b.n	8004b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f000 f837 	bl	8004b78 <I2C_IsErrorOccurred>
 8004b0a:	1e03      	subs	r3, r0, #0
 8004b0c:	d001      	beq.n	8004b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e02d      	b.n	8004b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b12:	f7fe f851 	bl	8002bb8 <HAL_GetTick>
 8004b16:	0002      	movs	r2, r0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d302      	bcc.n	8004b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d11a      	bne.n	8004b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	4013      	ands	r3, r2
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d013      	beq.n	8004b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2241      	movs	r2, #65	@ 0x41
 8004b46:	2120      	movs	r1, #32
 8004b48:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2242      	movs	r2, #66	@ 0x42
 8004b4e:	2100      	movs	r1, #0
 8004b50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2240      	movs	r2, #64	@ 0x40
 8004b56:	2100      	movs	r1, #0
 8004b58:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e007      	b.n	8004b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	2220      	movs	r2, #32
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d1c8      	bne.n	8004afe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	0018      	movs	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b004      	add	sp, #16
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	@ 0x28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b84:	2327      	movs	r3, #39	@ 0x27
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2210      	movs	r2, #16
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d100      	bne.n	8004ba6 <I2C_IsErrorOccurred+0x2e>
 8004ba4:	e079      	b.n	8004c9a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2210      	movs	r2, #16
 8004bac:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bae:	e057      	b.n	8004c60 <I2C_IsErrorOccurred+0xe8>
 8004bb0:	2227      	movs	r2, #39	@ 0x27
 8004bb2:	18bb      	adds	r3, r7, r2
 8004bb4:	18ba      	adds	r2, r7, r2
 8004bb6:	7812      	ldrb	r2, [r2, #0]
 8004bb8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	d04f      	beq.n	8004c60 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bc0:	f7fd fffa 	bl	8002bb8 <HAL_GetTick>
 8004bc4:	0002      	movs	r2, r0
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d302      	bcc.n	8004bd6 <I2C_IsErrorOccurred+0x5e>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d144      	bne.n	8004c60 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	2380      	movs	r3, #128	@ 0x80
 8004bde:	01db      	lsls	r3, r3, #7
 8004be0:	4013      	ands	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004be4:	2013      	movs	r0, #19
 8004be6:	183b      	adds	r3, r7, r0
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	2142      	movs	r1, #66	@ 0x42
 8004bec:	5c52      	ldrb	r2, [r2, r1]
 8004bee:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	2380      	movs	r3, #128	@ 0x80
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	2380      	movs	r3, #128	@ 0x80
 8004bfe:	021b      	lsls	r3, r3, #8
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d126      	bne.n	8004c52 <I2C_IsErrorOccurred+0xda>
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	2380      	movs	r3, #128	@ 0x80
 8004c08:	01db      	lsls	r3, r3, #7
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d021      	beq.n	8004c52 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004c0e:	183b      	adds	r3, r7, r0
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d01d      	beq.n	8004c52 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2180      	movs	r1, #128	@ 0x80
 8004c22:	01c9      	lsls	r1, r1, #7
 8004c24:	430a      	orrs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c28:	f7fd ffc6 	bl	8002bb8 <HAL_GetTick>
 8004c2c:	0003      	movs	r3, r0
 8004c2e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c30:	e00f      	b.n	8004c52 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c32:	f7fd ffc1 	bl	8002bb8 <HAL_GetTick>
 8004c36:	0002      	movs	r2, r0
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b19      	cmp	r3, #25
 8004c3e:	d908      	bls.n	8004c52 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	2220      	movs	r2, #32
 8004c44:	4313      	orrs	r3, r2
 8004c46:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c48:	2327      	movs	r3, #39	@ 0x27
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	701a      	strb	r2, [r3, #0]

              break;
 8004c50:	e006      	b.n	8004c60 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d1e8      	bne.n	8004c32 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	2220      	movs	r2, #32
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d004      	beq.n	8004c78 <I2C_IsErrorOccurred+0x100>
 8004c6e:	2327      	movs	r3, #39	@ 0x27
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d09b      	beq.n	8004bb0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c78:	2327      	movs	r3, #39	@ 0x27
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d103      	bne.n	8004c8a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2220      	movs	r2, #32
 8004c88:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	2204      	movs	r2, #4
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c92:	2327      	movs	r3, #39	@ 0x27
 8004c94:	18fb      	adds	r3, r7, r3
 8004c96:	2201      	movs	r2, #1
 8004c98:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	2380      	movs	r3, #128	@ 0x80
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d00c      	beq.n	8004cc6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2280      	movs	r2, #128	@ 0x80
 8004cba:	0052      	lsls	r2, r2, #1
 8004cbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cbe:	2327      	movs	r3, #39	@ 0x27
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	2380      	movs	r3, #128	@ 0x80
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d00c      	beq.n	8004cea <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2280      	movs	r2, #128	@ 0x80
 8004cde:	00d2      	lsls	r2, r2, #3
 8004ce0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ce2:	2327      	movs	r3, #39	@ 0x27
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	2380      	movs	r3, #128	@ 0x80
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d00c      	beq.n	8004d0e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2280      	movs	r2, #128	@ 0x80
 8004d02:	0092      	lsls	r2, r2, #2
 8004d04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d06:	2327      	movs	r3, #39	@ 0x27
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004d0e:	2327      	movs	r3, #39	@ 0x27
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01d      	beq.n	8004d54 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	f7ff fe28 	bl	8004970 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	490e      	ldr	r1, [pc, #56]	@ (8004d64 <I2C_IsErrorOccurred+0x1ec>)
 8004d2c:	400a      	ands	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2241      	movs	r2, #65	@ 0x41
 8004d40:	2120      	movs	r1, #32
 8004d42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2242      	movs	r2, #66	@ 0x42
 8004d48:	2100      	movs	r1, #0
 8004d4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2240      	movs	r2, #64	@ 0x40
 8004d50:	2100      	movs	r1, #0
 8004d52:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004d54:	2327      	movs	r3, #39	@ 0x27
 8004d56:	18fb      	adds	r3, r7, r3
 8004d58:	781b      	ldrb	r3, [r3, #0]
}
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	b00a      	add	sp, #40	@ 0x28
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	46c0      	nop			@ (mov r8, r8)
 8004d64:	fe00e800 	.word	0xfe00e800

08004d68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d68:	b590      	push	{r4, r7, lr}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	0008      	movs	r0, r1
 8004d72:	0011      	movs	r1, r2
 8004d74:	607b      	str	r3, [r7, #4]
 8004d76:	240a      	movs	r4, #10
 8004d78:	193b      	adds	r3, r7, r4
 8004d7a:	1c02      	adds	r2, r0, #0
 8004d7c:	801a      	strh	r2, [r3, #0]
 8004d7e:	2009      	movs	r0, #9
 8004d80:	183b      	adds	r3, r7, r0
 8004d82:	1c0a      	adds	r2, r1, #0
 8004d84:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d86:	193b      	adds	r3, r7, r4
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	059b      	lsls	r3, r3, #22
 8004d8c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d8e:	183b      	adds	r3, r7, r0
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	0419      	lsls	r1, r3, #16
 8004d94:	23ff      	movs	r3, #255	@ 0xff
 8004d96:	041b      	lsls	r3, r3, #16
 8004d98:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d9a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da2:	4313      	orrs	r3, r2
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	085b      	lsrs	r3, r3, #1
 8004da8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004db2:	0d51      	lsrs	r1, r2, #21
 8004db4:	2280      	movs	r2, #128	@ 0x80
 8004db6:	00d2      	lsls	r2, r2, #3
 8004db8:	400a      	ands	r2, r1
 8004dba:	4907      	ldr	r1, [pc, #28]	@ (8004dd8 <I2C_TransferConfig+0x70>)
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	43d2      	mvns	r2, r2
 8004dc0:	401a      	ands	r2, r3
 8004dc2:	0011      	movs	r1, r2
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004dce:	46c0      	nop			@ (mov r8, r8)
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b007      	add	sp, #28
 8004dd4:	bd90      	pop	{r4, r7, pc}
 8004dd6:	46c0      	nop			@ (mov r8, r8)
 8004dd8:	03ff63ff 	.word	0x03ff63ff

08004ddc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2241      	movs	r2, #65	@ 0x41
 8004dea:	5c9b      	ldrb	r3, [r3, r2]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	d138      	bne.n	8004e64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2240      	movs	r2, #64	@ 0x40
 8004df6:	5c9b      	ldrb	r3, [r3, r2]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e032      	b.n	8004e66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2240      	movs	r2, #64	@ 0x40
 8004e04:	2101      	movs	r1, #1
 8004e06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2241      	movs	r2, #65	@ 0x41
 8004e0c:	2124      	movs	r1, #36	@ 0x24
 8004e0e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	438a      	bics	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4911      	ldr	r1, [pc, #68]	@ (8004e70 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004e2c:	400a      	ands	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6819      	ldr	r1, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2241      	movs	r2, #65	@ 0x41
 8004e54:	2120      	movs	r1, #32
 8004e56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2240      	movs	r2, #64	@ 0x40
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e000      	b.n	8004e66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e64:	2302      	movs	r3, #2
  }
}
 8004e66:	0018      	movs	r0, r3
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b002      	add	sp, #8
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	46c0      	nop			@ (mov r8, r8)
 8004e70:	ffffefff 	.word	0xffffefff

08004e74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2241      	movs	r2, #65	@ 0x41
 8004e82:	5c9b      	ldrb	r3, [r3, r2]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d139      	bne.n	8004efe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2240      	movs	r2, #64	@ 0x40
 8004e8e:	5c9b      	ldrb	r3, [r3, r2]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e033      	b.n	8004f00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2240      	movs	r2, #64	@ 0x40
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2241      	movs	r2, #65	@ 0x41
 8004ea4:	2124      	movs	r1, #36	@ 0x24
 8004ea6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	438a      	bics	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a11      	ldr	r2, [pc, #68]	@ (8004f08 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2241      	movs	r2, #65	@ 0x41
 8004eee:	2120      	movs	r1, #32
 8004ef0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2240      	movs	r2, #64	@ 0x40
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	e000      	b.n	8004f00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004efe:	2302      	movs	r3, #2
  }
}
 8004f00:	0018      	movs	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b004      	add	sp, #16
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	fffff0ff 	.word	0xfffff0ff

08004f0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004f14:	4b19      	ldr	r3, [pc, #100]	@ (8004f7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a19      	ldr	r2, [pc, #100]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	0019      	movs	r1, r3
 8004f1e:	4b17      	ldr	r3, [pc, #92]	@ (8004f7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	2380      	movs	r3, #128	@ 0x80
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d11f      	bne.n	8004f70 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004f30:	4b14      	ldr	r3, [pc, #80]	@ (8004f84 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	0013      	movs	r3, r2
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	189b      	adds	r3, r3, r2
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	4912      	ldr	r1, [pc, #72]	@ (8004f88 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f7fb f8f0 	bl	8000124 <__udivsi3>
 8004f44:	0003      	movs	r3, r0
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f4a:	e008      	b.n	8004f5e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e001      	b.n	8004f5e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e009      	b.n	8004f72 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f5e:	4b07      	ldr	r3, [pc, #28]	@ (8004f7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	2380      	movs	r3, #128	@ 0x80
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	401a      	ands	r2, r3
 8004f68:	2380      	movs	r3, #128	@ 0x80
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d0ed      	beq.n	8004f4c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	0018      	movs	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	b004      	add	sp, #16
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	46c0      	nop			@ (mov r8, r8)
 8004f7c:	40007000 	.word	0x40007000
 8004f80:	fffff9ff 	.word	0xfffff9ff
 8004f84:	20000014 	.word	0x20000014
 8004f88:	000f4240 	.word	0x000f4240

08004f8c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004f90:	4b03      	ldr	r3, [pc, #12]	@ (8004fa0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	23e0      	movs	r3, #224	@ 0xe0
 8004f96:	01db      	lsls	r3, r3, #7
 8004f98:	4013      	ands	r3, r2
}
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40021000 	.word	0x40021000

08004fa4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004faa:	f7fd fe05 	bl	8002bb8 <HAL_GetTick>
 8004fae:	0003      	movs	r3, r0
 8004fb0:	607b      	str	r3, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004fb2:	4b35      	ldr	r3, [pc, #212]	@ (8005088 <HAL_RCC_DeInit+0xe4>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b34      	ldr	r3, [pc, #208]	@ (8005088 <HAL_RCC_DeInit+0xe4>)
 8004fb8:	2180      	movs	r1, #128	@ 0x80
 8004fba:	0049      	lsls	r1, r1, #1
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_DeInit+0x30>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc2:	f7fd fdf9 	bl	8002bb8 <HAL_GetTick>
 8004fc6:	0002      	movs	r2, r0
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e054      	b.n	800507e <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8005088 <HAL_RCC_DeInit+0xe4>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	2380      	movs	r3, #128	@ 0x80
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d0f0      	beq.n	8004fc2 <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 8004fe0:	4b29      	ldr	r3, [pc, #164]	@ (8005088 <HAL_RCC_DeInit+0xe4>)
 8004fe2:	2280      	movs	r2, #128	@ 0x80
 8004fe4:	01d2      	lsls	r2, r2, #7
 8004fe6:	605a      	str	r2, [r3, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fe8:	f7fd fde6 	bl	8002bb8 <HAL_GetTick>
 8004fec:	0003      	movs	r3, r0
 8004fee:	607b      	str	r3, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000000u;
 8004ff0:	4b25      	ldr	r3, [pc, #148]	@ (8005088 <HAL_RCC_DeInit+0xe4>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8004ff6:	e009      	b.n	800500c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff8:	f7fd fdde 	bl	8002bb8 <HAL_GetTick>
 8004ffc:	0002      	movs	r2, r0
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	4a22      	ldr	r2, [pc, #136]	@ (800508c <HAL_RCC_DeInit+0xe8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d901      	bls.n	800500c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e038      	b.n	800507e <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 800500c:	4b1e      	ldr	r3, [pc, #120]	@ (8005088 <HAL_RCC_DeInit+0xe4>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2238      	movs	r2, #56	@ 0x38
 8005012:	4013      	ands	r3, r2
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCC_DeInit+0x54>
    }
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8005016:	4b1c      	ldr	r3, [pc, #112]	@ (8005088 <HAL_RCC_DeInit+0xe4>)
 8005018:	2280      	movs	r2, #128	@ 0x80
 800501a:	0052      	lsls	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 800501e:	4b1a      	ldr	r3, [pc, #104]	@ (8005088 <HAL_RCC_DeInit+0xe4>)
 8005020:	2280      	movs	r2, #128	@ 0x80
 8005022:	0052      	lsls	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005026:	f7fd fdc7 	bl	8002bb8 <HAL_GetTick>
 800502a:	0003      	movs	r3, r0
 800502c:	607b      	str	r3, [r7, #4]

  /* Wait till PLL is ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800502e:	e008      	b.n	8005042 <HAL_RCC_DeInit+0x9e>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005030:	f7fd fdc2 	bl	8002bb8 <HAL_GetTick>
 8005034:	0002      	movs	r2, r0
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_DeInit+0x9e>
    {
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e01d      	b.n	800507e <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005042:	4b11      	ldr	r3, [pc, #68]	@ (8005088 <HAL_RCC_DeInit+0xe4>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	2380      	movs	r3, #128	@ 0x80
 8005048:	049b      	lsls	r3, r3, #18
 800504a:	4013      	ands	r3, r2
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_DeInit+0x8c>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 800504e:	4b0e      	ldr	r3, [pc, #56]	@ (8005088 <HAL_RCC_DeInit+0xe4>)
 8005050:	2280      	movs	r2, #128	@ 0x80
 8005052:	0152      	lsls	r2, r2, #5
 8005054:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000u;
 8005056:	4b0c      	ldr	r3, [pc, #48]	@ (8005088 <HAL_RCC_DeInit+0xe4>)
 8005058:	2200      	movs	r2, #0
 800505a:	619a      	str	r2, [r3, #24]

  /* Clear all flags */
  RCC->CICR = 0xFFFFFFFFu;
 800505c:	4b0a      	ldr	r3, [pc, #40]	@ (8005088 <HAL_RCC_DeInit+0xe4>)
 800505e:	2201      	movs	r2, #1
 8005060:	4252      	negs	r2, r2
 8005062:	621a      	str	r2, [r3, #32]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8005064:	4b0a      	ldr	r3, [pc, #40]	@ (8005090 <HAL_RCC_DeInit+0xec>)
 8005066:	4a0b      	ldr	r2, [pc, #44]	@ (8005094 <HAL_RCC_DeInit+0xf0>)
 8005068:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800506a:	4b0b      	ldr	r3, [pc, #44]	@ (8005098 <HAL_RCC_DeInit+0xf4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	0018      	movs	r0, r3
 8005070:	f7fd fd46 	bl	8002b00 <HAL_InitTick>
 8005074:	1e03      	subs	r3, r0, #0
 8005076:	d001      	beq.n	800507c <HAL_RCC_DeInit+0xd8>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <HAL_RCC_DeInit+0xda>
  }
  else
  {
    return HAL_OK;
 800507c:	2300      	movs	r3, #0
  }
}
 800507e:	0018      	movs	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	b002      	add	sp, #8
 8005084:	bd80      	pop	{r7, pc}
 8005086:	46c0      	nop			@ (mov r8, r8)
 8005088:	40021000 	.word	0x40021000
 800508c:	00001388 	.word	0x00001388
 8005090:	20000014 	.word	0x20000014
 8005094:	00f42400 	.word	0x00f42400
 8005098:	20000018 	.word	0x20000018

0800509c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e2f3      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2201      	movs	r2, #1
 80050b4:	4013      	ands	r3, r2
 80050b6:	d100      	bne.n	80050ba <HAL_RCC_OscConfig+0x1e>
 80050b8:	e07c      	b.n	80051b4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ba:	4bc3      	ldr	r3, [pc, #780]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	2238      	movs	r2, #56	@ 0x38
 80050c0:	4013      	ands	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050c4:	4bc0      	ldr	r3, [pc, #768]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	2203      	movs	r2, #3
 80050ca:	4013      	ands	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d102      	bne.n	80050da <HAL_RCC_OscConfig+0x3e>
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d002      	beq.n	80050e0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d10b      	bne.n	80050f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e0:	4bb9      	ldr	r3, [pc, #740]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	2380      	movs	r3, #128	@ 0x80
 80050e6:	029b      	lsls	r3, r3, #10
 80050e8:	4013      	ands	r3, r2
 80050ea:	d062      	beq.n	80051b2 <HAL_RCC_OscConfig+0x116>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d15e      	bne.n	80051b2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e2ce      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	2380      	movs	r3, #128	@ 0x80
 80050fe:	025b      	lsls	r3, r3, #9
 8005100:	429a      	cmp	r2, r3
 8005102:	d107      	bne.n	8005114 <HAL_RCC_OscConfig+0x78>
 8005104:	4bb0      	ldr	r3, [pc, #704]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	4baf      	ldr	r3, [pc, #700]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 800510a:	2180      	movs	r1, #128	@ 0x80
 800510c:	0249      	lsls	r1, r1, #9
 800510e:	430a      	orrs	r2, r1
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	e020      	b.n	8005156 <HAL_RCC_OscConfig+0xba>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	23a0      	movs	r3, #160	@ 0xa0
 800511a:	02db      	lsls	r3, r3, #11
 800511c:	429a      	cmp	r2, r3
 800511e:	d10e      	bne.n	800513e <HAL_RCC_OscConfig+0xa2>
 8005120:	4ba9      	ldr	r3, [pc, #676]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4ba8      	ldr	r3, [pc, #672]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005126:	2180      	movs	r1, #128	@ 0x80
 8005128:	02c9      	lsls	r1, r1, #11
 800512a:	430a      	orrs	r2, r1
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	4ba6      	ldr	r3, [pc, #664]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4ba5      	ldr	r3, [pc, #660]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005134:	2180      	movs	r1, #128	@ 0x80
 8005136:	0249      	lsls	r1, r1, #9
 8005138:	430a      	orrs	r2, r1
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	e00b      	b.n	8005156 <HAL_RCC_OscConfig+0xba>
 800513e:	4ba2      	ldr	r3, [pc, #648]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4ba1      	ldr	r3, [pc, #644]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005144:	49a1      	ldr	r1, [pc, #644]	@ (80053cc <HAL_RCC_OscConfig+0x330>)
 8005146:	400a      	ands	r2, r1
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	4b9f      	ldr	r3, [pc, #636]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	4b9e      	ldr	r3, [pc, #632]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005150:	499f      	ldr	r1, [pc, #636]	@ (80053d0 <HAL_RCC_OscConfig+0x334>)
 8005152:	400a      	ands	r2, r1
 8005154:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d014      	beq.n	8005188 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515e:	f7fd fd2b 	bl	8002bb8 <HAL_GetTick>
 8005162:	0003      	movs	r3, r0
 8005164:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005168:	f7fd fd26 	bl	8002bb8 <HAL_GetTick>
 800516c:	0002      	movs	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b64      	cmp	r3, #100	@ 0x64
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e28d      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800517a:	4b93      	ldr	r3, [pc, #588]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	2380      	movs	r3, #128	@ 0x80
 8005180:	029b      	lsls	r3, r3, #10
 8005182:	4013      	ands	r3, r2
 8005184:	d0f0      	beq.n	8005168 <HAL_RCC_OscConfig+0xcc>
 8005186:	e015      	b.n	80051b4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fd fd16 	bl	8002bb8 <HAL_GetTick>
 800518c:	0003      	movs	r3, r0
 800518e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005192:	f7fd fd11 	bl	8002bb8 <HAL_GetTick>
 8005196:	0002      	movs	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b64      	cmp	r3, #100	@ 0x64
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e278      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051a4:	4b88      	ldr	r3, [pc, #544]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	2380      	movs	r3, #128	@ 0x80
 80051aa:	029b      	lsls	r3, r3, #10
 80051ac:	4013      	ands	r3, r2
 80051ae:	d1f0      	bne.n	8005192 <HAL_RCC_OscConfig+0xf6>
 80051b0:	e000      	b.n	80051b4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2202      	movs	r2, #2
 80051ba:	4013      	ands	r3, r2
 80051bc:	d100      	bne.n	80051c0 <HAL_RCC_OscConfig+0x124>
 80051be:	e099      	b.n	80052f4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051c0:	4b81      	ldr	r3, [pc, #516]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2238      	movs	r2, #56	@ 0x38
 80051c6:	4013      	ands	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051ca:	4b7f      	ldr	r3, [pc, #508]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2203      	movs	r2, #3
 80051d0:	4013      	ands	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	d102      	bne.n	80051e0 <HAL_RCC_OscConfig+0x144>
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d002      	beq.n	80051e6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d135      	bne.n	8005252 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051e6:	4b78      	ldr	r3, [pc, #480]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	2380      	movs	r3, #128	@ 0x80
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4013      	ands	r3, r2
 80051f0:	d005      	beq.n	80051fe <HAL_RCC_OscConfig+0x162>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e24b      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fe:	4b72      	ldr	r3, [pc, #456]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4a74      	ldr	r2, [pc, #464]	@ (80053d4 <HAL_RCC_OscConfig+0x338>)
 8005204:	4013      	ands	r3, r2
 8005206:	0019      	movs	r1, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	021a      	lsls	r2, r3, #8
 800520e:	4b6e      	ldr	r3, [pc, #440]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005210:	430a      	orrs	r2, r1
 8005212:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d112      	bne.n	8005240 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800521a:	4b6b      	ldr	r3, [pc, #428]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a6e      	ldr	r2, [pc, #440]	@ (80053d8 <HAL_RCC_OscConfig+0x33c>)
 8005220:	4013      	ands	r3, r2
 8005222:	0019      	movs	r1, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	4b67      	ldr	r3, [pc, #412]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 800522a:	430a      	orrs	r2, r1
 800522c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800522e:	4b66      	ldr	r3, [pc, #408]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	0adb      	lsrs	r3, r3, #11
 8005234:	2207      	movs	r2, #7
 8005236:	4013      	ands	r3, r2
 8005238:	4a68      	ldr	r2, [pc, #416]	@ (80053dc <HAL_RCC_OscConfig+0x340>)
 800523a:	40da      	lsrs	r2, r3
 800523c:	4b68      	ldr	r3, [pc, #416]	@ (80053e0 <HAL_RCC_OscConfig+0x344>)
 800523e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005240:	4b68      	ldr	r3, [pc, #416]	@ (80053e4 <HAL_RCC_OscConfig+0x348>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	0018      	movs	r0, r3
 8005246:	f7fd fc5b 	bl	8002b00 <HAL_InitTick>
 800524a:	1e03      	subs	r3, r0, #0
 800524c:	d051      	beq.n	80052f2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e221      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d030      	beq.n	80052bc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800525a:	4b5b      	ldr	r3, [pc, #364]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a5e      	ldr	r2, [pc, #376]	@ (80053d8 <HAL_RCC_OscConfig+0x33c>)
 8005260:	4013      	ands	r3, r2
 8005262:	0019      	movs	r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	4b57      	ldr	r3, [pc, #348]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 800526a:	430a      	orrs	r2, r1
 800526c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800526e:	4b56      	ldr	r3, [pc, #344]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4b55      	ldr	r3, [pc, #340]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005274:	2180      	movs	r1, #128	@ 0x80
 8005276:	0049      	lsls	r1, r1, #1
 8005278:	430a      	orrs	r2, r1
 800527a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527c:	f7fd fc9c 	bl	8002bb8 <HAL_GetTick>
 8005280:	0003      	movs	r3, r0
 8005282:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005286:	f7fd fc97 	bl	8002bb8 <HAL_GetTick>
 800528a:	0002      	movs	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e1fe      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005298:	4b4b      	ldr	r3, [pc, #300]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	2380      	movs	r3, #128	@ 0x80
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	4013      	ands	r3, r2
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a4:	4b48      	ldr	r3, [pc, #288]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	4a4a      	ldr	r2, [pc, #296]	@ (80053d4 <HAL_RCC_OscConfig+0x338>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	0019      	movs	r1, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	021a      	lsls	r2, r3, #8
 80052b4:	4b44      	ldr	r3, [pc, #272]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 80052b6:	430a      	orrs	r2, r1
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	e01b      	b.n	80052f4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80052bc:	4b42      	ldr	r3, [pc, #264]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b41      	ldr	r3, [pc, #260]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 80052c2:	4949      	ldr	r1, [pc, #292]	@ (80053e8 <HAL_RCC_OscConfig+0x34c>)
 80052c4:	400a      	ands	r2, r1
 80052c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7fd fc76 	bl	8002bb8 <HAL_GetTick>
 80052cc:	0003      	movs	r3, r0
 80052ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d2:	f7fd fc71 	bl	8002bb8 <HAL_GetTick>
 80052d6:	0002      	movs	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e1d8      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052e4:	4b38      	ldr	r3, [pc, #224]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	2380      	movs	r3, #128	@ 0x80
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4013      	ands	r3, r2
 80052ee:	d1f0      	bne.n	80052d2 <HAL_RCC_OscConfig+0x236>
 80052f0:	e000      	b.n	80052f4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052f2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2208      	movs	r2, #8
 80052fa:	4013      	ands	r3, r2
 80052fc:	d047      	beq.n	800538e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80052fe:	4b32      	ldr	r3, [pc, #200]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2238      	movs	r2, #56	@ 0x38
 8005304:	4013      	ands	r3, r2
 8005306:	2b18      	cmp	r3, #24
 8005308:	d10a      	bne.n	8005320 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800530a:	4b2f      	ldr	r3, [pc, #188]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 800530c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800530e:	2202      	movs	r2, #2
 8005310:	4013      	ands	r3, r2
 8005312:	d03c      	beq.n	800538e <HAL_RCC_OscConfig+0x2f2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d138      	bne.n	800538e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e1ba      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d019      	beq.n	800535c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005328:	4b27      	ldr	r3, [pc, #156]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 800532a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800532c:	4b26      	ldr	r3, [pc, #152]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 800532e:	2101      	movs	r1, #1
 8005330:	430a      	orrs	r2, r1
 8005332:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005334:	f7fd fc40 	bl	8002bb8 <HAL_GetTick>
 8005338:	0003      	movs	r3, r0
 800533a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800533e:	f7fd fc3b 	bl	8002bb8 <HAL_GetTick>
 8005342:	0002      	movs	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e1a2      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005350:	4b1d      	ldr	r3, [pc, #116]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005354:	2202      	movs	r2, #2
 8005356:	4013      	ands	r3, r2
 8005358:	d0f1      	beq.n	800533e <HAL_RCC_OscConfig+0x2a2>
 800535a:	e018      	b.n	800538e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800535c:	4b1a      	ldr	r3, [pc, #104]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 800535e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005360:	4b19      	ldr	r3, [pc, #100]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005362:	2101      	movs	r1, #1
 8005364:	438a      	bics	r2, r1
 8005366:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005368:	f7fd fc26 	bl	8002bb8 <HAL_GetTick>
 800536c:	0003      	movs	r3, r0
 800536e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005372:	f7fd fc21 	bl	8002bb8 <HAL_GetTick>
 8005376:	0002      	movs	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e188      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005384:	4b10      	ldr	r3, [pc, #64]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 8005386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005388:	2202      	movs	r2, #2
 800538a:	4013      	ands	r3, r2
 800538c:	d1f1      	bne.n	8005372 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2204      	movs	r2, #4
 8005394:	4013      	ands	r3, r2
 8005396:	d100      	bne.n	800539a <HAL_RCC_OscConfig+0x2fe>
 8005398:	e0c6      	b.n	8005528 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800539a:	231f      	movs	r3, #31
 800539c:	18fb      	adds	r3, r7, r3
 800539e:	2200      	movs	r2, #0
 80053a0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80053a2:	4b09      	ldr	r3, [pc, #36]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2238      	movs	r2, #56	@ 0x38
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d11e      	bne.n	80053ec <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80053ae:	4b06      	ldr	r3, [pc, #24]	@ (80053c8 <HAL_RCC_OscConfig+0x32c>)
 80053b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b2:	2202      	movs	r2, #2
 80053b4:	4013      	ands	r3, r2
 80053b6:	d100      	bne.n	80053ba <HAL_RCC_OscConfig+0x31e>
 80053b8:	e0b6      	b.n	8005528 <HAL_RCC_OscConfig+0x48c>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d000      	beq.n	80053c4 <HAL_RCC_OscConfig+0x328>
 80053c2:	e0b1      	b.n	8005528 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e166      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
 80053c8:	40021000 	.word	0x40021000
 80053cc:	fffeffff 	.word	0xfffeffff
 80053d0:	fffbffff 	.word	0xfffbffff
 80053d4:	ffff80ff 	.word	0xffff80ff
 80053d8:	ffffc7ff 	.word	0xffffc7ff
 80053dc:	00f42400 	.word	0x00f42400
 80053e0:	20000014 	.word	0x20000014
 80053e4:	20000018 	.word	0x20000018
 80053e8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053ec:	4bac      	ldr	r3, [pc, #688]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 80053ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053f0:	2380      	movs	r3, #128	@ 0x80
 80053f2:	055b      	lsls	r3, r3, #21
 80053f4:	4013      	ands	r3, r2
 80053f6:	d101      	bne.n	80053fc <HAL_RCC_OscConfig+0x360>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <HAL_RCC_OscConfig+0x362>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d011      	beq.n	8005426 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005402:	4ba7      	ldr	r3, [pc, #668]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 8005404:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005406:	4ba6      	ldr	r3, [pc, #664]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 8005408:	2180      	movs	r1, #128	@ 0x80
 800540a:	0549      	lsls	r1, r1, #21
 800540c:	430a      	orrs	r2, r1
 800540e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005410:	4ba3      	ldr	r3, [pc, #652]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 8005412:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005414:	2380      	movs	r3, #128	@ 0x80
 8005416:	055b      	lsls	r3, r3, #21
 8005418:	4013      	ands	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800541e:	231f      	movs	r3, #31
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	2201      	movs	r2, #1
 8005424:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005426:	4b9f      	ldr	r3, [pc, #636]	@ (80056a4 <HAL_RCC_OscConfig+0x608>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	2380      	movs	r3, #128	@ 0x80
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	4013      	ands	r3, r2
 8005430:	d11a      	bne.n	8005468 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005432:	4b9c      	ldr	r3, [pc, #624]	@ (80056a4 <HAL_RCC_OscConfig+0x608>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4b9b      	ldr	r3, [pc, #620]	@ (80056a4 <HAL_RCC_OscConfig+0x608>)
 8005438:	2180      	movs	r1, #128	@ 0x80
 800543a:	0049      	lsls	r1, r1, #1
 800543c:	430a      	orrs	r2, r1
 800543e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005440:	f7fd fbba 	bl	8002bb8 <HAL_GetTick>
 8005444:	0003      	movs	r3, r0
 8005446:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800544a:	f7fd fbb5 	bl	8002bb8 <HAL_GetTick>
 800544e:	0002      	movs	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e11c      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800545c:	4b91      	ldr	r3, [pc, #580]	@ (80056a4 <HAL_RCC_OscConfig+0x608>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	2380      	movs	r3, #128	@ 0x80
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	4013      	ands	r3, r2
 8005466:	d0f0      	beq.n	800544a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d106      	bne.n	800547e <HAL_RCC_OscConfig+0x3e2>
 8005470:	4b8b      	ldr	r3, [pc, #556]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 8005472:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005474:	4b8a      	ldr	r3, [pc, #552]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 8005476:	2101      	movs	r1, #1
 8005478:	430a      	orrs	r2, r1
 800547a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800547c:	e01c      	b.n	80054b8 <HAL_RCC_OscConfig+0x41c>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	2b05      	cmp	r3, #5
 8005484:	d10c      	bne.n	80054a0 <HAL_RCC_OscConfig+0x404>
 8005486:	4b86      	ldr	r3, [pc, #536]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 8005488:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800548a:	4b85      	ldr	r3, [pc, #532]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 800548c:	2104      	movs	r1, #4
 800548e:	430a      	orrs	r2, r1
 8005490:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005492:	4b83      	ldr	r3, [pc, #524]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 8005494:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005496:	4b82      	ldr	r3, [pc, #520]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 8005498:	2101      	movs	r1, #1
 800549a:	430a      	orrs	r2, r1
 800549c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800549e:	e00b      	b.n	80054b8 <HAL_RCC_OscConfig+0x41c>
 80054a0:	4b7f      	ldr	r3, [pc, #508]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 80054a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054a4:	4b7e      	ldr	r3, [pc, #504]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 80054a6:	2101      	movs	r1, #1
 80054a8:	438a      	bics	r2, r1
 80054aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80054ac:	4b7c      	ldr	r3, [pc, #496]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 80054ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054b0:	4b7b      	ldr	r3, [pc, #492]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 80054b2:	2104      	movs	r1, #4
 80054b4:	438a      	bics	r2, r1
 80054b6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d014      	beq.n	80054ea <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c0:	f7fd fb7a 	bl	8002bb8 <HAL_GetTick>
 80054c4:	0003      	movs	r3, r0
 80054c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c8:	e009      	b.n	80054de <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ca:	f7fd fb75 	bl	8002bb8 <HAL_GetTick>
 80054ce:	0002      	movs	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	4a74      	ldr	r2, [pc, #464]	@ (80056a8 <HAL_RCC_OscConfig+0x60c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e0db      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054de:	4b70      	ldr	r3, [pc, #448]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 80054e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e2:	2202      	movs	r2, #2
 80054e4:	4013      	ands	r3, r2
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x42e>
 80054e8:	e013      	b.n	8005512 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ea:	f7fd fb65 	bl	8002bb8 <HAL_GetTick>
 80054ee:	0003      	movs	r3, r0
 80054f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054f2:	e009      	b.n	8005508 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f4:	f7fd fb60 	bl	8002bb8 <HAL_GetTick>
 80054f8:	0002      	movs	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	4a6a      	ldr	r2, [pc, #424]	@ (80056a8 <HAL_RCC_OscConfig+0x60c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e0c6      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005508:	4b65      	ldr	r3, [pc, #404]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 800550a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800550c:	2202      	movs	r2, #2
 800550e:	4013      	ands	r3, r2
 8005510:	d1f0      	bne.n	80054f4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005512:	231f      	movs	r3, #31
 8005514:	18fb      	adds	r3, r7, r3
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d105      	bne.n	8005528 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800551c:	4b60      	ldr	r3, [pc, #384]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 800551e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005520:	4b5f      	ldr	r3, [pc, #380]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 8005522:	4962      	ldr	r1, [pc, #392]	@ (80056ac <HAL_RCC_OscConfig+0x610>)
 8005524:	400a      	ands	r2, r1
 8005526:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d100      	bne.n	8005532 <HAL_RCC_OscConfig+0x496>
 8005530:	e0b0      	b.n	8005694 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005532:	4b5b      	ldr	r3, [pc, #364]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2238      	movs	r2, #56	@ 0x38
 8005538:	4013      	ands	r3, r2
 800553a:	2b10      	cmp	r3, #16
 800553c:	d100      	bne.n	8005540 <HAL_RCC_OscConfig+0x4a4>
 800553e:	e078      	b.n	8005632 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d153      	bne.n	80055f0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005548:	4b55      	ldr	r3, [pc, #340]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	4b54      	ldr	r3, [pc, #336]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 800554e:	4958      	ldr	r1, [pc, #352]	@ (80056b0 <HAL_RCC_OscConfig+0x614>)
 8005550:	400a      	ands	r2, r1
 8005552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005554:	f7fd fb30 	bl	8002bb8 <HAL_GetTick>
 8005558:	0003      	movs	r3, r0
 800555a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800555e:	f7fd fb2b 	bl	8002bb8 <HAL_GetTick>
 8005562:	0002      	movs	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e092      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005570:	4b4b      	ldr	r3, [pc, #300]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	2380      	movs	r3, #128	@ 0x80
 8005576:	049b      	lsls	r3, r3, #18
 8005578:	4013      	ands	r3, r2
 800557a:	d1f0      	bne.n	800555e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800557c:	4b48      	ldr	r3, [pc, #288]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4a4c      	ldr	r2, [pc, #304]	@ (80056b4 <HAL_RCC_OscConfig+0x618>)
 8005582:	4013      	ands	r3, r2
 8005584:	0019      	movs	r1, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1a      	ldr	r2, [r3, #32]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a2:	431a      	orrs	r2, r3
 80055a4:	4b3e      	ldr	r3, [pc, #248]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 80055a6:	430a      	orrs	r2, r1
 80055a8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055aa:	4b3d      	ldr	r3, [pc, #244]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b3c      	ldr	r3, [pc, #240]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 80055b0:	2180      	movs	r1, #128	@ 0x80
 80055b2:	0449      	lsls	r1, r1, #17
 80055b4:	430a      	orrs	r2, r1
 80055b6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80055b8:	4b39      	ldr	r3, [pc, #228]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	4b38      	ldr	r3, [pc, #224]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 80055be:	2180      	movs	r1, #128	@ 0x80
 80055c0:	0549      	lsls	r1, r1, #21
 80055c2:	430a      	orrs	r2, r1
 80055c4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c6:	f7fd faf7 	bl	8002bb8 <HAL_GetTick>
 80055ca:	0003      	movs	r3, r0
 80055cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d0:	f7fd faf2 	bl	8002bb8 <HAL_GetTick>
 80055d4:	0002      	movs	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e059      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055e2:	4b2f      	ldr	r3, [pc, #188]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	2380      	movs	r3, #128	@ 0x80
 80055e8:	049b      	lsls	r3, r3, #18
 80055ea:	4013      	ands	r3, r2
 80055ec:	d0f0      	beq.n	80055d0 <HAL_RCC_OscConfig+0x534>
 80055ee:	e051      	b.n	8005694 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f0:	4b2b      	ldr	r3, [pc, #172]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4b2a      	ldr	r3, [pc, #168]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 80055f6:	492e      	ldr	r1, [pc, #184]	@ (80056b0 <HAL_RCC_OscConfig+0x614>)
 80055f8:	400a      	ands	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fc:	f7fd fadc 	bl	8002bb8 <HAL_GetTick>
 8005600:	0003      	movs	r3, r0
 8005602:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005606:	f7fd fad7 	bl	8002bb8 <HAL_GetTick>
 800560a:	0002      	movs	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e03e      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005618:	4b21      	ldr	r3, [pc, #132]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	2380      	movs	r3, #128	@ 0x80
 800561e:	049b      	lsls	r3, r3, #18
 8005620:	4013      	ands	r3, r2
 8005622:	d1f0      	bne.n	8005606 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005624:	4b1e      	ldr	r3, [pc, #120]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	4b1d      	ldr	r3, [pc, #116]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 800562a:	4923      	ldr	r1, [pc, #140]	@ (80056b8 <HAL_RCC_OscConfig+0x61c>)
 800562c:	400a      	ands	r2, r1
 800562e:	60da      	str	r2, [r3, #12]
 8005630:	e030      	b.n	8005694 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e02b      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800563e:	4b18      	ldr	r3, [pc, #96]	@ (80056a0 <HAL_RCC_OscConfig+0x604>)
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2203      	movs	r2, #3
 8005648:	401a      	ands	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	429a      	cmp	r2, r3
 8005650:	d11e      	bne.n	8005690 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2270      	movs	r2, #112	@ 0x70
 8005656:	401a      	ands	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d117      	bne.n	8005690 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	23fe      	movs	r3, #254	@ 0xfe
 8005664:	01db      	lsls	r3, r3, #7
 8005666:	401a      	ands	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800566e:	429a      	cmp	r2, r3
 8005670:	d10e      	bne.n	8005690 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	23f8      	movs	r3, #248	@ 0xf8
 8005676:	039b      	lsls	r3, r3, #14
 8005678:	401a      	ands	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800567e:	429a      	cmp	r2, r3
 8005680:	d106      	bne.n	8005690 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	0f5b      	lsrs	r3, r3, #29
 8005686:	075a      	lsls	r2, r3, #29
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800568c:	429a      	cmp	r2, r3
 800568e:	d001      	beq.n	8005694 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e000      	b.n	8005696 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	0018      	movs	r0, r3
 8005698:	46bd      	mov	sp, r7
 800569a:	b008      	add	sp, #32
 800569c:	bd80      	pop	{r7, pc}
 800569e:	46c0      	nop			@ (mov r8, r8)
 80056a0:	40021000 	.word	0x40021000
 80056a4:	40007000 	.word	0x40007000
 80056a8:	00001388 	.word	0x00001388
 80056ac:	efffffff 	.word	0xefffffff
 80056b0:	feffffff 	.word	0xfeffffff
 80056b4:	1fc1808c 	.word	0x1fc1808c
 80056b8:	effefffc 	.word	0xeffefffc

080056bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0e9      	b.n	80058a4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056d0:	4b76      	ldr	r3, [pc, #472]	@ (80058ac <HAL_RCC_ClockConfig+0x1f0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2207      	movs	r2, #7
 80056d6:	4013      	ands	r3, r2
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d91e      	bls.n	800571c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056de:	4b73      	ldr	r3, [pc, #460]	@ (80058ac <HAL_RCC_ClockConfig+0x1f0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2207      	movs	r2, #7
 80056e4:	4393      	bics	r3, r2
 80056e6:	0019      	movs	r1, r3
 80056e8:	4b70      	ldr	r3, [pc, #448]	@ (80058ac <HAL_RCC_ClockConfig+0x1f0>)
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056f0:	f7fd fa62 	bl	8002bb8 <HAL_GetTick>
 80056f4:	0003      	movs	r3, r0
 80056f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056f8:	e009      	b.n	800570e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056fa:	f7fd fa5d 	bl	8002bb8 <HAL_GetTick>
 80056fe:	0002      	movs	r2, r0
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	4a6a      	ldr	r2, [pc, #424]	@ (80058b0 <HAL_RCC_ClockConfig+0x1f4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e0ca      	b.n	80058a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800570e:	4b67      	ldr	r3, [pc, #412]	@ (80058ac <HAL_RCC_ClockConfig+0x1f0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2207      	movs	r2, #7
 8005714:	4013      	ands	r3, r2
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d1ee      	bne.n	80056fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2202      	movs	r2, #2
 8005722:	4013      	ands	r3, r2
 8005724:	d015      	beq.n	8005752 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2204      	movs	r2, #4
 800572c:	4013      	ands	r3, r2
 800572e:	d006      	beq.n	800573e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005730:	4b60      	ldr	r3, [pc, #384]	@ (80058b4 <HAL_RCC_ClockConfig+0x1f8>)
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	4b5f      	ldr	r3, [pc, #380]	@ (80058b4 <HAL_RCC_ClockConfig+0x1f8>)
 8005736:	21e0      	movs	r1, #224	@ 0xe0
 8005738:	01c9      	lsls	r1, r1, #7
 800573a:	430a      	orrs	r2, r1
 800573c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800573e:	4b5d      	ldr	r3, [pc, #372]	@ (80058b4 <HAL_RCC_ClockConfig+0x1f8>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	4a5d      	ldr	r2, [pc, #372]	@ (80058b8 <HAL_RCC_ClockConfig+0x1fc>)
 8005744:	4013      	ands	r3, r2
 8005746:	0019      	movs	r1, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	4b59      	ldr	r3, [pc, #356]	@ (80058b4 <HAL_RCC_ClockConfig+0x1f8>)
 800574e:	430a      	orrs	r2, r1
 8005750:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2201      	movs	r2, #1
 8005758:	4013      	ands	r3, r2
 800575a:	d057      	beq.n	800580c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d107      	bne.n	8005774 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005764:	4b53      	ldr	r3, [pc, #332]	@ (80058b4 <HAL_RCC_ClockConfig+0x1f8>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	2380      	movs	r3, #128	@ 0x80
 800576a:	029b      	lsls	r3, r3, #10
 800576c:	4013      	ands	r3, r2
 800576e:	d12b      	bne.n	80057c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e097      	b.n	80058a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b02      	cmp	r3, #2
 800577a:	d107      	bne.n	800578c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800577c:	4b4d      	ldr	r3, [pc, #308]	@ (80058b4 <HAL_RCC_ClockConfig+0x1f8>)
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	2380      	movs	r3, #128	@ 0x80
 8005782:	049b      	lsls	r3, r3, #18
 8005784:	4013      	ands	r3, r2
 8005786:	d11f      	bne.n	80057c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e08b      	b.n	80058a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d107      	bne.n	80057a4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005794:	4b47      	ldr	r3, [pc, #284]	@ (80058b4 <HAL_RCC_ClockConfig+0x1f8>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	2380      	movs	r3, #128	@ 0x80
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	4013      	ands	r3, r2
 800579e:	d113      	bne.n	80057c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e07f      	b.n	80058a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d106      	bne.n	80057ba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057ac:	4b41      	ldr	r3, [pc, #260]	@ (80058b4 <HAL_RCC_ClockConfig+0x1f8>)
 80057ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057b0:	2202      	movs	r2, #2
 80057b2:	4013      	ands	r3, r2
 80057b4:	d108      	bne.n	80057c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e074      	b.n	80058a4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ba:	4b3e      	ldr	r3, [pc, #248]	@ (80058b4 <HAL_RCC_ClockConfig+0x1f8>)
 80057bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057be:	2202      	movs	r2, #2
 80057c0:	4013      	ands	r3, r2
 80057c2:	d101      	bne.n	80057c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e06d      	b.n	80058a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057c8:	4b3a      	ldr	r3, [pc, #232]	@ (80058b4 <HAL_RCC_ClockConfig+0x1f8>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2207      	movs	r2, #7
 80057ce:	4393      	bics	r3, r2
 80057d0:	0019      	movs	r1, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	4b37      	ldr	r3, [pc, #220]	@ (80058b4 <HAL_RCC_ClockConfig+0x1f8>)
 80057d8:	430a      	orrs	r2, r1
 80057da:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057dc:	f7fd f9ec 	bl	8002bb8 <HAL_GetTick>
 80057e0:	0003      	movs	r3, r0
 80057e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057e4:	e009      	b.n	80057fa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e6:	f7fd f9e7 	bl	8002bb8 <HAL_GetTick>
 80057ea:	0002      	movs	r2, r0
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	4a2f      	ldr	r2, [pc, #188]	@ (80058b0 <HAL_RCC_ClockConfig+0x1f4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e054      	b.n	80058a4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fa:	4b2e      	ldr	r3, [pc, #184]	@ (80058b4 <HAL_RCC_ClockConfig+0x1f8>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2238      	movs	r2, #56	@ 0x38
 8005800:	401a      	ands	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	429a      	cmp	r2, r3
 800580a:	d1ec      	bne.n	80057e6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800580c:	4b27      	ldr	r3, [pc, #156]	@ (80058ac <HAL_RCC_ClockConfig+0x1f0>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2207      	movs	r2, #7
 8005812:	4013      	ands	r3, r2
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d21e      	bcs.n	8005858 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581a:	4b24      	ldr	r3, [pc, #144]	@ (80058ac <HAL_RCC_ClockConfig+0x1f0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2207      	movs	r2, #7
 8005820:	4393      	bics	r3, r2
 8005822:	0019      	movs	r1, r3
 8005824:	4b21      	ldr	r3, [pc, #132]	@ (80058ac <HAL_RCC_ClockConfig+0x1f0>)
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800582c:	f7fd f9c4 	bl	8002bb8 <HAL_GetTick>
 8005830:	0003      	movs	r3, r0
 8005832:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005834:	e009      	b.n	800584a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005836:	f7fd f9bf 	bl	8002bb8 <HAL_GetTick>
 800583a:	0002      	movs	r2, r0
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	4a1b      	ldr	r2, [pc, #108]	@ (80058b0 <HAL_RCC_ClockConfig+0x1f4>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d901      	bls.n	800584a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e02c      	b.n	80058a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800584a:	4b18      	ldr	r3, [pc, #96]	@ (80058ac <HAL_RCC_ClockConfig+0x1f0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2207      	movs	r2, #7
 8005850:	4013      	ands	r3, r2
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d1ee      	bne.n	8005836 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2204      	movs	r2, #4
 800585e:	4013      	ands	r3, r2
 8005860:	d009      	beq.n	8005876 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005862:	4b14      	ldr	r3, [pc, #80]	@ (80058b4 <HAL_RCC_ClockConfig+0x1f8>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	4a15      	ldr	r2, [pc, #84]	@ (80058bc <HAL_RCC_ClockConfig+0x200>)
 8005868:	4013      	ands	r3, r2
 800586a:	0019      	movs	r1, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	4b10      	ldr	r3, [pc, #64]	@ (80058b4 <HAL_RCC_ClockConfig+0x1f8>)
 8005872:	430a      	orrs	r2, r1
 8005874:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005876:	f000 f829 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 800587a:	0001      	movs	r1, r0
 800587c:	4b0d      	ldr	r3, [pc, #52]	@ (80058b4 <HAL_RCC_ClockConfig+0x1f8>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	0a1b      	lsrs	r3, r3, #8
 8005882:	220f      	movs	r2, #15
 8005884:	401a      	ands	r2, r3
 8005886:	4b0e      	ldr	r3, [pc, #56]	@ (80058c0 <HAL_RCC_ClockConfig+0x204>)
 8005888:	0092      	lsls	r2, r2, #2
 800588a:	58d3      	ldr	r3, [r2, r3]
 800588c:	221f      	movs	r2, #31
 800588e:	4013      	ands	r3, r2
 8005890:	000a      	movs	r2, r1
 8005892:	40da      	lsrs	r2, r3
 8005894:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <HAL_RCC_ClockConfig+0x208>)
 8005896:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005898:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <HAL_RCC_ClockConfig+0x20c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	0018      	movs	r0, r3
 800589e:	f7fd f92f 	bl	8002b00 <HAL_InitTick>
 80058a2:	0003      	movs	r3, r0
}
 80058a4:	0018      	movs	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b004      	add	sp, #16
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40022000 	.word	0x40022000
 80058b0:	00001388 	.word	0x00001388
 80058b4:	40021000 	.word	0x40021000
 80058b8:	fffff0ff 	.word	0xfffff0ff
 80058bc:	ffff8fff 	.word	0xffff8fff
 80058c0:	08009698 	.word	0x08009698
 80058c4:	20000014 	.word	0x20000014
 80058c8:	20000018 	.word	0x20000018

080058cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058d2:	4b3c      	ldr	r3, [pc, #240]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2238      	movs	r2, #56	@ 0x38
 80058d8:	4013      	ands	r3, r2
 80058da:	d10f      	bne.n	80058fc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80058dc:	4b39      	ldr	r3, [pc, #228]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	0adb      	lsrs	r3, r3, #11
 80058e2:	2207      	movs	r2, #7
 80058e4:	4013      	ands	r3, r2
 80058e6:	2201      	movs	r2, #1
 80058e8:	409a      	lsls	r2, r3
 80058ea:	0013      	movs	r3, r2
 80058ec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	4835      	ldr	r0, [pc, #212]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80058f2:	f7fa fc17 	bl	8000124 <__udivsi3>
 80058f6:	0003      	movs	r3, r0
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	e05d      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058fc:	4b31      	ldr	r3, [pc, #196]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	2238      	movs	r2, #56	@ 0x38
 8005902:	4013      	ands	r3, r2
 8005904:	2b08      	cmp	r3, #8
 8005906:	d102      	bne.n	800590e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005908:	4b30      	ldr	r3, [pc, #192]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x100>)
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	e054      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800590e:	4b2d      	ldr	r3, [pc, #180]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	2238      	movs	r2, #56	@ 0x38
 8005914:	4013      	ands	r3, r2
 8005916:	2b10      	cmp	r3, #16
 8005918:	d138      	bne.n	800598c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800591a:	4b2a      	ldr	r3, [pc, #168]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	2203      	movs	r2, #3
 8005920:	4013      	ands	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005924:	4b27      	ldr	r3, [pc, #156]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	091b      	lsrs	r3, r3, #4
 800592a:	2207      	movs	r2, #7
 800592c:	4013      	ands	r3, r2
 800592e:	3301      	adds	r3, #1
 8005930:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b03      	cmp	r3, #3
 8005936:	d10d      	bne.n	8005954 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	4824      	ldr	r0, [pc, #144]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x100>)
 800593c:	f7fa fbf2 	bl	8000124 <__udivsi3>
 8005940:	0003      	movs	r3, r0
 8005942:	0019      	movs	r1, r3
 8005944:	4b1f      	ldr	r3, [pc, #124]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	0a1b      	lsrs	r3, r3, #8
 800594a:	227f      	movs	r2, #127	@ 0x7f
 800594c:	4013      	ands	r3, r2
 800594e:	434b      	muls	r3, r1
 8005950:	617b      	str	r3, [r7, #20]
        break;
 8005952:	e00d      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	481c      	ldr	r0, [pc, #112]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005958:	f7fa fbe4 	bl	8000124 <__udivsi3>
 800595c:	0003      	movs	r3, r0
 800595e:	0019      	movs	r1, r3
 8005960:	4b18      	ldr	r3, [pc, #96]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	0a1b      	lsrs	r3, r3, #8
 8005966:	227f      	movs	r2, #127	@ 0x7f
 8005968:	4013      	ands	r3, r2
 800596a:	434b      	muls	r3, r1
 800596c:	617b      	str	r3, [r7, #20]
        break;
 800596e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005970:	4b14      	ldr	r3, [pc, #80]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	0f5b      	lsrs	r3, r3, #29
 8005976:	2207      	movs	r2, #7
 8005978:	4013      	ands	r3, r2
 800597a:	3301      	adds	r3, #1
 800597c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	6978      	ldr	r0, [r7, #20]
 8005982:	f7fa fbcf 	bl	8000124 <__udivsi3>
 8005986:	0003      	movs	r3, r0
 8005988:	613b      	str	r3, [r7, #16]
 800598a:	e015      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800598c:	4b0d      	ldr	r3, [pc, #52]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2238      	movs	r2, #56	@ 0x38
 8005992:	4013      	ands	r3, r2
 8005994:	2b20      	cmp	r3, #32
 8005996:	d103      	bne.n	80059a0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005998:	2380      	movs	r3, #128	@ 0x80
 800599a:	021b      	lsls	r3, r3, #8
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	e00b      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80059a0:	4b08      	ldr	r3, [pc, #32]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2238      	movs	r2, #56	@ 0x38
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b18      	cmp	r3, #24
 80059aa:	d103      	bne.n	80059b4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80059ac:	23fa      	movs	r3, #250	@ 0xfa
 80059ae:	01db      	lsls	r3, r3, #7
 80059b0:	613b      	str	r3, [r7, #16]
 80059b2:	e001      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80059b8:	693b      	ldr	r3, [r7, #16]
}
 80059ba:	0018      	movs	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	b006      	add	sp, #24
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	46c0      	nop			@ (mov r8, r8)
 80059c4:	40021000 	.word	0x40021000
 80059c8:	00f42400 	.word	0x00f42400
 80059cc:	007a1200 	.word	0x007a1200

080059d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059d4:	4b02      	ldr	r3, [pc, #8]	@ (80059e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80059d6:	681b      	ldr	r3, [r3, #0]
}
 80059d8:	0018      	movs	r0, r3
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	46c0      	nop			@ (mov r8, r8)
 80059e0:	20000014 	.word	0x20000014

080059e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e4:	b5b0      	push	{r4, r5, r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80059e8:	f7ff fff2 	bl	80059d0 <HAL_RCC_GetHCLKFreq>
 80059ec:	0004      	movs	r4, r0
 80059ee:	f7ff facd 	bl	8004f8c <LL_RCC_GetAPB1Prescaler>
 80059f2:	0003      	movs	r3, r0
 80059f4:	0b1a      	lsrs	r2, r3, #12
 80059f6:	4b05      	ldr	r3, [pc, #20]	@ (8005a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80059f8:	0092      	lsls	r2, r2, #2
 80059fa:	58d3      	ldr	r3, [r2, r3]
 80059fc:	221f      	movs	r2, #31
 80059fe:	4013      	ands	r3, r2
 8005a00:	40dc      	lsrs	r4, r3
 8005a02:	0023      	movs	r3, r4
}
 8005a04:	0018      	movs	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bdb0      	pop	{r4, r5, r7, pc}
 8005a0a:	46c0      	nop			@ (mov r8, r8)
 8005a0c:	080096d8 	.word	0x080096d8

08005a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005a18:	2313      	movs	r3, #19
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a20:	2312      	movs	r3, #18
 8005a22:	18fb      	adds	r3, r7, r3
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	2380      	movs	r3, #128	@ 0x80
 8005a2e:	029b      	lsls	r3, r3, #10
 8005a30:	4013      	ands	r3, r2
 8005a32:	d100      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005a34:	e0a3      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a36:	2011      	movs	r0, #17
 8005a38:	183b      	adds	r3, r7, r0
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a3e:	4b86      	ldr	r3, [pc, #536]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a42:	2380      	movs	r3, #128	@ 0x80
 8005a44:	055b      	lsls	r3, r3, #21
 8005a46:	4013      	ands	r3, r2
 8005a48:	d110      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a4a:	4b83      	ldr	r3, [pc, #524]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a4e:	4b82      	ldr	r3, [pc, #520]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a50:	2180      	movs	r1, #128	@ 0x80
 8005a52:	0549      	lsls	r1, r1, #21
 8005a54:	430a      	orrs	r2, r1
 8005a56:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a58:	4b7f      	ldr	r3, [pc, #508]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a5c:	2380      	movs	r3, #128	@ 0x80
 8005a5e:	055b      	lsls	r3, r3, #21
 8005a60:	4013      	ands	r3, r2
 8005a62:	60bb      	str	r3, [r7, #8]
 8005a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a66:	183b      	adds	r3, r7, r0
 8005a68:	2201      	movs	r2, #1
 8005a6a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a6c:	4b7b      	ldr	r3, [pc, #492]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	4b7a      	ldr	r3, [pc, #488]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005a72:	2180      	movs	r1, #128	@ 0x80
 8005a74:	0049      	lsls	r1, r1, #1
 8005a76:	430a      	orrs	r2, r1
 8005a78:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a7a:	f7fd f89d 	bl	8002bb8 <HAL_GetTick>
 8005a7e:	0003      	movs	r3, r0
 8005a80:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a82:	e00b      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a84:	f7fd f898 	bl	8002bb8 <HAL_GetTick>
 8005a88:	0002      	movs	r2, r0
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d904      	bls.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005a92:	2313      	movs	r3, #19
 8005a94:	18fb      	adds	r3, r7, r3
 8005a96:	2203      	movs	r2, #3
 8005a98:	701a      	strb	r2, [r3, #0]
        break;
 8005a9a:	e005      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a9c:	4b6f      	ldr	r3, [pc, #444]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	2380      	movs	r3, #128	@ 0x80
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d0ed      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005aa8:	2313      	movs	r3, #19
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d154      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ab2:	4b69      	ldr	r3, [pc, #420]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ab4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ab6:	23c0      	movs	r3, #192	@ 0xc0
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4013      	ands	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d019      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d014      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ace:	4b62      	ldr	r3, [pc, #392]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad2:	4a63      	ldr	r2, [pc, #396]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ad8:	4b5f      	ldr	r3, [pc, #380]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ada:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005adc:	4b5e      	ldr	r3, [pc, #376]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ade:	2180      	movs	r1, #128	@ 0x80
 8005ae0:	0249      	lsls	r1, r1, #9
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ae6:	4b5c      	ldr	r3, [pc, #368]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ae8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005aea:	4b5b      	ldr	r3, [pc, #364]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005aec:	495d      	ldr	r1, [pc, #372]	@ (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005aee:	400a      	ands	r2, r1
 8005af0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005af2:	4b59      	ldr	r3, [pc, #356]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2201      	movs	r2, #1
 8005afc:	4013      	ands	r3, r2
 8005afe:	d016      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b00:	f7fd f85a 	bl	8002bb8 <HAL_GetTick>
 8005b04:	0003      	movs	r3, r0
 8005b06:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b08:	e00c      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0a:	f7fd f855 	bl	8002bb8 <HAL_GetTick>
 8005b0e:	0002      	movs	r2, r0
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	4a54      	ldr	r2, [pc, #336]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d904      	bls.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005b1a:	2313      	movs	r3, #19
 8005b1c:	18fb      	adds	r3, r7, r3
 8005b1e:	2203      	movs	r2, #3
 8005b20:	701a      	strb	r2, [r3, #0]
            break;
 8005b22:	e004      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b24:	4b4c      	ldr	r3, [pc, #304]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b28:	2202      	movs	r2, #2
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d0ed      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005b2e:	2313      	movs	r3, #19
 8005b30:	18fb      	adds	r3, r7, r3
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b38:	4b47      	ldr	r3, [pc, #284]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3c:	4a48      	ldr	r2, [pc, #288]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	0019      	movs	r1, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	4b44      	ldr	r3, [pc, #272]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b4c:	e00c      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b4e:	2312      	movs	r3, #18
 8005b50:	18fb      	adds	r3, r7, r3
 8005b52:	2213      	movs	r2, #19
 8005b54:	18ba      	adds	r2, r7, r2
 8005b56:	7812      	ldrb	r2, [r2, #0]
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	e005      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5c:	2312      	movs	r3, #18
 8005b5e:	18fb      	adds	r3, r7, r3
 8005b60:	2213      	movs	r2, #19
 8005b62:	18ba      	adds	r2, r7, r2
 8005b64:	7812      	ldrb	r2, [r2, #0]
 8005b66:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b68:	2311      	movs	r3, #17
 8005b6a:	18fb      	adds	r3, r7, r3
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d105      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b72:	4b39      	ldr	r3, [pc, #228]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b76:	4b38      	ldr	r3, [pc, #224]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b78:	493c      	ldr	r1, [pc, #240]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005b7a:	400a      	ands	r2, r1
 8005b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2201      	movs	r2, #1
 8005b84:	4013      	ands	r3, r2
 8005b86:	d009      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b88:	4b33      	ldr	r3, [pc, #204]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	4393      	bics	r3, r2
 8005b90:	0019      	movs	r1, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	4b30      	ldr	r3, [pc, #192]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005baa:	220c      	movs	r2, #12
 8005bac:	4393      	bics	r3, r2
 8005bae:	0019      	movs	r1, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	4b28      	ldr	r3, [pc, #160]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d009      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bc4:	4b24      	ldr	r3, [pc, #144]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc8:	4a29      	ldr	r2, [pc, #164]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	0019      	movs	r1, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	4b21      	ldr	r3, [pc, #132]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	2380      	movs	r3, #128	@ 0x80
 8005bde:	01db      	lsls	r3, r3, #7
 8005be0:	4013      	ands	r3, r2
 8005be2:	d015      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005be4:	4b1c      	ldr	r3, [pc, #112]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	0899      	lsrs	r1, r3, #2
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695a      	ldr	r2, [r3, #20]
 8005bf0:	4b19      	ldr	r3, [pc, #100]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695a      	ldr	r2, [r3, #20]
 8005bfa:	2380      	movs	r3, #128	@ 0x80
 8005bfc:	05db      	lsls	r3, r3, #23
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d106      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005c02:	4b15      	ldr	r3, [pc, #84]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	4b14      	ldr	r3, [pc, #80]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c08:	2180      	movs	r1, #128	@ 0x80
 8005c0a:	0249      	lsls	r1, r1, #9
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	2380      	movs	r3, #128	@ 0x80
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d016      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c20:	4a14      	ldr	r2, [pc, #80]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	0019      	movs	r1, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	2380      	movs	r3, #128	@ 0x80
 8005c36:	01db      	lsls	r3, r3, #7
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d106      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005c3c:	4b06      	ldr	r3, [pc, #24]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	4b05      	ldr	r3, [pc, #20]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c42:	2180      	movs	r1, #128	@ 0x80
 8005c44:	0249      	lsls	r1, r1, #9
 8005c46:	430a      	orrs	r2, r1
 8005c48:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005c4a:	2312      	movs	r3, #18
 8005c4c:	18fb      	adds	r3, r7, r3
 8005c4e:	781b      	ldrb	r3, [r3, #0]
}
 8005c50:	0018      	movs	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b006      	add	sp, #24
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	40007000 	.word	0x40007000
 8005c60:	fffffcff 	.word	0xfffffcff
 8005c64:	fffeffff 	.word	0xfffeffff
 8005c68:	00001388 	.word	0x00001388
 8005c6c:	efffffff 	.word	0xefffffff
 8005c70:	ffffcfff 	.word	0xffffcfff
 8005c74:	ffff3fff 	.word	0xffff3fff

08005c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e0a8      	b.n	8005ddc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d109      	bne.n	8005ca6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	2382      	movs	r3, #130	@ 0x82
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d009      	beq.n	8005cb2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	61da      	str	r2, [r3, #28]
 8005ca4:	e005      	b.n	8005cb2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	225d      	movs	r2, #93	@ 0x5d
 8005cbc:	5c9b      	ldrb	r3, [r3, r2]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d107      	bne.n	8005cd4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	225c      	movs	r2, #92	@ 0x5c
 8005cc8:	2100      	movs	r1, #0
 8005cca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f7fc fcce 	bl	8002670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	225d      	movs	r2, #93	@ 0x5d
 8005cd8:	2102      	movs	r1, #2
 8005cda:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2140      	movs	r1, #64	@ 0x40
 8005ce8:	438a      	bics	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	23e0      	movs	r3, #224	@ 0xe0
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d902      	bls.n	8005cfe <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	e002      	b.n	8005d04 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cfe:	2380      	movs	r3, #128	@ 0x80
 8005d00:	015b      	lsls	r3, r3, #5
 8005d02:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	23f0      	movs	r3, #240	@ 0xf0
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d008      	beq.n	8005d22 <HAL_SPI_Init+0xaa>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	23e0      	movs	r3, #224	@ 0xe0
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d002      	beq.n	8005d22 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	2382      	movs	r3, #130	@ 0x82
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6899      	ldr	r1, [r3, #8]
 8005d30:	2384      	movs	r3, #132	@ 0x84
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	400b      	ands	r3, r1
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	400b      	ands	r3, r1
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	2101      	movs	r1, #1
 8005d48:	400b      	ands	r3, r1
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6999      	ldr	r1, [r3, #24]
 8005d50:	2380      	movs	r3, #128	@ 0x80
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	400b      	ands	r3, r1
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	2138      	movs	r1, #56	@ 0x38
 8005d5e:	400b      	ands	r3, r1
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	2180      	movs	r1, #128	@ 0x80
 8005d68:	400b      	ands	r3, r1
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	0011      	movs	r1, r2
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d72:	2380      	movs	r3, #128	@ 0x80
 8005d74:	019b      	lsls	r3, r3, #6
 8005d76:	401a      	ands	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	0c1b      	lsrs	r3, r3, #16
 8005d86:	2204      	movs	r2, #4
 8005d88:	401a      	ands	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	2110      	movs	r1, #16
 8005d90:	400b      	ands	r3, r1
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d98:	2108      	movs	r1, #8
 8005d9a:	400b      	ands	r3, r1
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68d9      	ldr	r1, [r3, #12]
 8005da2:	23f0      	movs	r3, #240	@ 0xf0
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	400b      	ands	r3, r1
 8005da8:	431a      	orrs	r2, r3
 8005daa:	0011      	movs	r1, r2
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	2380      	movs	r3, #128	@ 0x80
 8005db0:	015b      	lsls	r3, r3, #5
 8005db2:	401a      	ands	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69da      	ldr	r2, [r3, #28]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4907      	ldr	r1, [pc, #28]	@ (8005de4 <HAL_SPI_Init+0x16c>)
 8005dc8:	400a      	ands	r2, r1
 8005dca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	225d      	movs	r2, #93	@ 0x5d
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	0018      	movs	r0, r3
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b004      	add	sp, #16
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	fffff7ff 	.word	0xfffff7ff

08005de8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	1dbb      	adds	r3, r7, #6
 8005df6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005df8:	231f      	movs	r3, #31
 8005dfa:	18fb      	adds	r3, r7, r3
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	225c      	movs	r2, #92	@ 0x5c
 8005e04:	5c9b      	ldrb	r3, [r3, r2]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d101      	bne.n	8005e0e <HAL_SPI_Transmit+0x26>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	e147      	b.n	800609e <HAL_SPI_Transmit+0x2b6>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	225c      	movs	r2, #92	@ 0x5c
 8005e12:	2101      	movs	r1, #1
 8005e14:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e16:	f7fc fecf 	bl	8002bb8 <HAL_GetTick>
 8005e1a:	0003      	movs	r3, r0
 8005e1c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005e1e:	2316      	movs	r3, #22
 8005e20:	18fb      	adds	r3, r7, r3
 8005e22:	1dba      	adds	r2, r7, #6
 8005e24:	8812      	ldrh	r2, [r2, #0]
 8005e26:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	225d      	movs	r2, #93	@ 0x5d
 8005e2c:	5c9b      	ldrb	r3, [r3, r2]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d004      	beq.n	8005e3e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005e34:	231f      	movs	r3, #31
 8005e36:	18fb      	adds	r3, r7, r3
 8005e38:	2202      	movs	r2, #2
 8005e3a:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e3c:	e128      	b.n	8006090 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_SPI_Transmit+0x64>
 8005e44:	1dbb      	adds	r3, r7, #6
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d104      	bne.n	8005e56 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005e4c:	231f      	movs	r3, #31
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	2201      	movs	r2, #1
 8005e52:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e54:	e11c      	b.n	8006090 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	225d      	movs	r2, #93	@ 0x5d
 8005e5a:	2103      	movs	r1, #3
 8005e5c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1dba      	adds	r2, r7, #6
 8005e6e:	8812      	ldrh	r2, [r2, #0]
 8005e70:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	1dba      	adds	r2, r7, #6
 8005e76:	8812      	ldrh	r2, [r2, #0]
 8005e78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2244      	movs	r2, #68	@ 0x44
 8005e84:	2100      	movs	r1, #0
 8005e86:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2246      	movs	r2, #70	@ 0x46
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	2380      	movs	r3, #128	@ 0x80
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d110      	bne.n	8005eca <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2140      	movs	r1, #64	@ 0x40
 8005eb4:	438a      	bics	r2, r1
 8005eb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2180      	movs	r1, #128	@ 0x80
 8005ec4:	01c9      	lsls	r1, r1, #7
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2240      	movs	r2, #64	@ 0x40
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	2b40      	cmp	r3, #64	@ 0x40
 8005ed6:	d007      	beq.n	8005ee8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2140      	movs	r1, #64	@ 0x40
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	23e0      	movs	r3, #224	@ 0xe0
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d952      	bls.n	8005f9a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <HAL_SPI_Transmit+0x11e>
 8005efc:	2316      	movs	r3, #22
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d143      	bne.n	8005f8e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0a:	881a      	ldrh	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f16:	1c9a      	adds	r2, r3, #2
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f2a:	e030      	b.n	8005f8e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	2202      	movs	r2, #2
 8005f34:	4013      	ands	r3, r2
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d112      	bne.n	8005f60 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3e:	881a      	ldrh	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4a:	1c9a      	adds	r2, r3, #2
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f5e:	e016      	b.n	8005f8e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f60:	f7fc fe2a 	bl	8002bb8 <HAL_GetTick>
 8005f64:	0002      	movs	r2, r0
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d802      	bhi.n	8005f76 <HAL_SPI_Transmit+0x18e>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	3301      	adds	r3, #1
 8005f74:	d102      	bne.n	8005f7c <HAL_SPI_Transmit+0x194>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d108      	bne.n	8005f8e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005f7c:	231f      	movs	r3, #31
 8005f7e:	18fb      	adds	r3, r7, r3
 8005f80:	2203      	movs	r2, #3
 8005f82:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	225d      	movs	r2, #93	@ 0x5d
 8005f88:	2101      	movs	r1, #1
 8005f8a:	5499      	strb	r1, [r3, r2]
          goto error;
 8005f8c:	e080      	b.n	8006090 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1c9      	bne.n	8005f2c <HAL_SPI_Transmit+0x144>
 8005f98:	e053      	b.n	8006042 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d004      	beq.n	8005fac <HAL_SPI_Transmit+0x1c4>
 8005fa2:	2316      	movs	r3, #22
 8005fa4:	18fb      	adds	r3, r7, r3
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d145      	bne.n	8006038 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	7812      	ldrb	r2, [r2, #0]
 8005fb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005fd2:	e031      	b.n	8006038 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	4013      	ands	r3, r2
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d113      	bne.n	800600a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	330c      	adds	r3, #12
 8005fec:	7812      	ldrb	r2, [r2, #0]
 8005fee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006008:	e016      	b.n	8006038 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800600a:	f7fc fdd5 	bl	8002bb8 <HAL_GetTick>
 800600e:	0002      	movs	r2, r0
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d802      	bhi.n	8006020 <HAL_SPI_Transmit+0x238>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	3301      	adds	r3, #1
 800601e:	d102      	bne.n	8006026 <HAL_SPI_Transmit+0x23e>
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d108      	bne.n	8006038 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006026:	231f      	movs	r3, #31
 8006028:	18fb      	adds	r3, r7, r3
 800602a:	2203      	movs	r2, #3
 800602c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	225d      	movs	r2, #93	@ 0x5d
 8006032:	2101      	movs	r1, #1
 8006034:	5499      	strb	r1, [r3, r2]
          goto error;
 8006036:	e02b      	b.n	8006090 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1c8      	bne.n	8005fd4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	0018      	movs	r0, r3
 800604a:	f000 fcef 	bl	8006a2c <SPI_EndRxTxTransaction>
 800604e:	1e03      	subs	r3, r0, #0
 8006050:	d002      	beq.n	8006058 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10a      	bne.n	8006076 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006060:	2300      	movs	r3, #0
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800607a:	2b00      	cmp	r3, #0
 800607c:	d004      	beq.n	8006088 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800607e:	231f      	movs	r3, #31
 8006080:	18fb      	adds	r3, r7, r3
 8006082:	2201      	movs	r2, #1
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	e003      	b.n	8006090 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	225d      	movs	r2, #93	@ 0x5d
 800608c:	2101      	movs	r1, #1
 800608e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	225c      	movs	r2, #92	@ 0x5c
 8006094:	2100      	movs	r1, #0
 8006096:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006098:	231f      	movs	r3, #31
 800609a:	18fb      	adds	r3, r7, r3
 800609c:	781b      	ldrb	r3, [r3, #0]
}
 800609e:	0018      	movs	r0, r3
 80060a0:	46bd      	mov	sp, r7
 80060a2:	b008      	add	sp, #32
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060a8:	b590      	push	{r4, r7, lr}
 80060aa:	b089      	sub	sp, #36	@ 0x24
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	603b      	str	r3, [r7, #0]
 80060b4:	1dbb      	adds	r3, r7, #6
 80060b6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060b8:	2117      	movs	r1, #23
 80060ba:	187b      	adds	r3, r7, r1
 80060bc:	2200      	movs	r2, #0
 80060be:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	225d      	movs	r2, #93	@ 0x5d
 80060c4:	5c9b      	ldrb	r3, [r3, r2]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d003      	beq.n	80060d4 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80060cc:	187b      	adds	r3, r7, r1
 80060ce:	2202      	movs	r2, #2
 80060d0:	701a      	strb	r2, [r3, #0]
    goto error;
 80060d2:	e12b      	b.n	800632c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	2382      	movs	r3, #130	@ 0x82
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	429a      	cmp	r2, r3
 80060de:	d113      	bne.n	8006108 <HAL_SPI_Receive+0x60>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10f      	bne.n	8006108 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	225d      	movs	r2, #93	@ 0x5d
 80060ec:	2104      	movs	r1, #4
 80060ee:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80060f0:	1dbb      	adds	r3, r7, #6
 80060f2:	881c      	ldrh	r4, [r3, #0]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	0023      	movs	r3, r4
 8006100:	f000 f924 	bl	800634c <HAL_SPI_TransmitReceive>
 8006104:	0003      	movs	r3, r0
 8006106:	e118      	b.n	800633a <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	225c      	movs	r2, #92	@ 0x5c
 800610c:	5c9b      	ldrb	r3, [r3, r2]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_SPI_Receive+0x6e>
 8006112:	2302      	movs	r3, #2
 8006114:	e111      	b.n	800633a <HAL_SPI_Receive+0x292>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	225c      	movs	r2, #92	@ 0x5c
 800611a:	2101      	movs	r1, #1
 800611c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800611e:	f7fc fd4b 	bl	8002bb8 <HAL_GetTick>
 8006122:	0003      	movs	r3, r0
 8006124:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <HAL_SPI_Receive+0x8c>
 800612c:	1dbb      	adds	r3, r7, #6
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8006134:	2317      	movs	r3, #23
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	2201      	movs	r2, #1
 800613a:	701a      	strb	r2, [r3, #0]
    goto error;
 800613c:	e0f6      	b.n	800632c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	225d      	movs	r2, #93	@ 0x5d
 8006142:	2104      	movs	r1, #4
 8006144:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1dba      	adds	r2, r7, #6
 8006156:	2144      	movs	r1, #68	@ 0x44
 8006158:	8812      	ldrh	r2, [r2, #0]
 800615a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	1dba      	adds	r2, r7, #6
 8006160:	2146      	movs	r1, #70	@ 0x46
 8006162:	8812      	ldrh	r2, [r2, #0]
 8006164:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	23e0      	movs	r3, #224	@ 0xe0
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	429a      	cmp	r2, r3
 800618e:	d908      	bls.n	80061a2 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	496a      	ldr	r1, [pc, #424]	@ (8006344 <HAL_SPI_Receive+0x29c>)
 800619c:	400a      	ands	r2, r1
 800619e:	605a      	str	r2, [r3, #4]
 80061a0:	e008      	b.n	80061b4 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2180      	movs	r1, #128	@ 0x80
 80061ae:	0149      	lsls	r1, r1, #5
 80061b0:	430a      	orrs	r2, r1
 80061b2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	2380      	movs	r3, #128	@ 0x80
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	429a      	cmp	r2, r3
 80061be:	d10f      	bne.n	80061e0 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2140      	movs	r1, #64	@ 0x40
 80061cc:	438a      	bics	r2, r1
 80061ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	495b      	ldr	r1, [pc, #364]	@ (8006348 <HAL_SPI_Receive+0x2a0>)
 80061dc:	400a      	ands	r2, r1
 80061de:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2240      	movs	r2, #64	@ 0x40
 80061e8:	4013      	ands	r3, r2
 80061ea:	2b40      	cmp	r3, #64	@ 0x40
 80061ec:	d007      	beq.n	80061fe <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2140      	movs	r1, #64	@ 0x40
 80061fa:	430a      	orrs	r2, r1
 80061fc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	23e0      	movs	r3, #224	@ 0xe0
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	429a      	cmp	r2, r3
 8006208:	d900      	bls.n	800620c <HAL_SPI_Receive+0x164>
 800620a:	e071      	b.n	80062f0 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800620c:	e035      	b.n	800627a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2201      	movs	r2, #1
 8006216:	4013      	ands	r3, r2
 8006218:	2b01      	cmp	r3, #1
 800621a:	d117      	bne.n	800624c <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	001a      	movs	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006228:	7812      	ldrb	r2, [r2, #0]
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2246      	movs	r2, #70	@ 0x46
 800623c:	5a9b      	ldrh	r3, [r3, r2]
 800623e:	b29b      	uxth	r3, r3
 8006240:	3b01      	subs	r3, #1
 8006242:	b299      	uxth	r1, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2246      	movs	r2, #70	@ 0x46
 8006248:	5299      	strh	r1, [r3, r2]
 800624a:	e016      	b.n	800627a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800624c:	f7fc fcb4 	bl	8002bb8 <HAL_GetTick>
 8006250:	0002      	movs	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d802      	bhi.n	8006262 <HAL_SPI_Receive+0x1ba>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	3301      	adds	r3, #1
 8006260:	d102      	bne.n	8006268 <HAL_SPI_Receive+0x1c0>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d108      	bne.n	800627a <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8006268:	2317      	movs	r3, #23
 800626a:	18fb      	adds	r3, r7, r3
 800626c:	2203      	movs	r2, #3
 800626e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	225d      	movs	r2, #93	@ 0x5d
 8006274:	2101      	movs	r1, #1
 8006276:	5499      	strb	r1, [r3, r2]
          goto error;
 8006278:	e058      	b.n	800632c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2246      	movs	r2, #70	@ 0x46
 800627e:	5a9b      	ldrh	r3, [r3, r2]
 8006280:	b29b      	uxth	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1c3      	bne.n	800620e <HAL_SPI_Receive+0x166>
 8006286:	e039      	b.n	80062fc <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2201      	movs	r2, #1
 8006290:	4013      	ands	r3, r2
 8006292:	2b01      	cmp	r3, #1
 8006294:	d115      	bne.n	80062c2 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68da      	ldr	r2, [r3, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a0:	b292      	uxth	r2, r2
 80062a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a8:	1c9a      	adds	r2, r3, #2
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2246      	movs	r2, #70	@ 0x46
 80062b2:	5a9b      	ldrh	r3, [r3, r2]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b299      	uxth	r1, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2246      	movs	r2, #70	@ 0x46
 80062be:	5299      	strh	r1, [r3, r2]
 80062c0:	e016      	b.n	80062f0 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062c2:	f7fc fc79 	bl	8002bb8 <HAL_GetTick>
 80062c6:	0002      	movs	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d802      	bhi.n	80062d8 <HAL_SPI_Receive+0x230>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	d102      	bne.n	80062de <HAL_SPI_Receive+0x236>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d108      	bne.n	80062f0 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80062de:	2317      	movs	r3, #23
 80062e0:	18fb      	adds	r3, r7, r3
 80062e2:	2203      	movs	r2, #3
 80062e4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	225d      	movs	r2, #93	@ 0x5d
 80062ea:	2101      	movs	r1, #1
 80062ec:	5499      	strb	r1, [r3, r2]
          goto error;
 80062ee:	e01d      	b.n	800632c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2246      	movs	r2, #70	@ 0x46
 80062f4:	5a9b      	ldrh	r3, [r3, r2]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1c5      	bne.n	8006288 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	0018      	movs	r0, r3
 8006304:	f000 fb34 	bl	8006970 <SPI_EndRxTransaction>
 8006308:	1e03      	subs	r3, r0, #0
 800630a:	d002      	beq.n	8006312 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2220      	movs	r2, #32
 8006310:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006316:	2b00      	cmp	r3, #0
 8006318:	d004      	beq.n	8006324 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800631a:	2317      	movs	r3, #23
 800631c:	18fb      	adds	r3, r7, r3
 800631e:	2201      	movs	r2, #1
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	e003      	b.n	800632c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	225d      	movs	r2, #93	@ 0x5d
 8006328:	2101      	movs	r1, #1
 800632a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	225c      	movs	r2, #92	@ 0x5c
 8006330:	2100      	movs	r1, #0
 8006332:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006334:	2317      	movs	r3, #23
 8006336:	18fb      	adds	r3, r7, r3
 8006338:	781b      	ldrb	r3, [r3, #0]
}
 800633a:	0018      	movs	r0, r3
 800633c:	46bd      	mov	sp, r7
 800633e:	b007      	add	sp, #28
 8006340:	bd90      	pop	{r4, r7, pc}
 8006342:	46c0      	nop			@ (mov r8, r8)
 8006344:	ffffefff 	.word	0xffffefff
 8006348:	ffffbfff 	.word	0xffffbfff

0800634c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08a      	sub	sp, #40	@ 0x28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	001a      	movs	r2, r3
 800635a:	1cbb      	adds	r3, r7, #2
 800635c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800635e:	2301      	movs	r3, #1
 8006360:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006362:	2323      	movs	r3, #35	@ 0x23
 8006364:	18fb      	adds	r3, r7, r3
 8006366:	2200      	movs	r2, #0
 8006368:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	225c      	movs	r2, #92	@ 0x5c
 800636e:	5c9b      	ldrb	r3, [r3, r2]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x2c>
 8006374:	2302      	movs	r3, #2
 8006376:	e1c4      	b.n	8006702 <HAL_SPI_TransmitReceive+0x3b6>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	225c      	movs	r2, #92	@ 0x5c
 800637c:	2101      	movs	r1, #1
 800637e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006380:	f7fc fc1a 	bl	8002bb8 <HAL_GetTick>
 8006384:	0003      	movs	r3, r0
 8006386:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006388:	201b      	movs	r0, #27
 800638a:	183b      	adds	r3, r7, r0
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	215d      	movs	r1, #93	@ 0x5d
 8006390:	5c52      	ldrb	r2, [r2, r1]
 8006392:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800639a:	2312      	movs	r3, #18
 800639c:	18fb      	adds	r3, r7, r3
 800639e:	1cba      	adds	r2, r7, #2
 80063a0:	8812      	ldrh	r2, [r2, #0]
 80063a2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063a4:	183b      	adds	r3, r7, r0
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d011      	beq.n	80063d0 <HAL_SPI_TransmitReceive+0x84>
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	2382      	movs	r3, #130	@ 0x82
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d107      	bne.n	80063c6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d103      	bne.n	80063c6 <HAL_SPI_TransmitReceive+0x7a>
 80063be:	183b      	adds	r3, r7, r0
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d004      	beq.n	80063d0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80063c6:	2323      	movs	r3, #35	@ 0x23
 80063c8:	18fb      	adds	r3, r7, r3
 80063ca:	2202      	movs	r2, #2
 80063cc:	701a      	strb	r2, [r3, #0]
    goto error;
 80063ce:	e191      	b.n	80066f4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d006      	beq.n	80063e4 <HAL_SPI_TransmitReceive+0x98>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <HAL_SPI_TransmitReceive+0x98>
 80063dc:	1cbb      	adds	r3, r7, #2
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d104      	bne.n	80063ee <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80063e4:	2323      	movs	r3, #35	@ 0x23
 80063e6:	18fb      	adds	r3, r7, r3
 80063e8:	2201      	movs	r2, #1
 80063ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80063ec:	e182      	b.n	80066f4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	225d      	movs	r2, #93	@ 0x5d
 80063f2:	5c9b      	ldrb	r3, [r3, r2]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d003      	beq.n	8006402 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	225d      	movs	r2, #93	@ 0x5d
 80063fe:	2105      	movs	r1, #5
 8006400:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	1cba      	adds	r2, r7, #2
 8006412:	2146      	movs	r1, #70	@ 0x46
 8006414:	8812      	ldrh	r2, [r2, #0]
 8006416:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	1cba      	adds	r2, r7, #2
 800641c:	2144      	movs	r1, #68	@ 0x44
 800641e:	8812      	ldrh	r2, [r2, #0]
 8006420:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	1cba      	adds	r2, r7, #2
 800642c:	8812      	ldrh	r2, [r2, #0]
 800642e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	1cba      	adds	r2, r7, #2
 8006434:	8812      	ldrh	r2, [r2, #0]
 8006436:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	23e0      	movs	r3, #224	@ 0xe0
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	429a      	cmp	r2, r3
 800644e:	d908      	bls.n	8006462 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	49ac      	ldr	r1, [pc, #688]	@ (800670c <HAL_SPI_TransmitReceive+0x3c0>)
 800645c:	400a      	ands	r2, r1
 800645e:	605a      	str	r2, [r3, #4]
 8006460:	e008      	b.n	8006474 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2180      	movs	r1, #128	@ 0x80
 800646e:	0149      	lsls	r1, r1, #5
 8006470:	430a      	orrs	r2, r1
 8006472:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2240      	movs	r2, #64	@ 0x40
 800647c:	4013      	ands	r3, r2
 800647e:	2b40      	cmp	r3, #64	@ 0x40
 8006480:	d007      	beq.n	8006492 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2140      	movs	r1, #64	@ 0x40
 800648e:	430a      	orrs	r2, r1
 8006490:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	23e0      	movs	r3, #224	@ 0xe0
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	429a      	cmp	r2, r3
 800649c:	d800      	bhi.n	80064a0 <HAL_SPI_TransmitReceive+0x154>
 800649e:	e083      	b.n	80065a8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d005      	beq.n	80064b4 <HAL_SPI_TransmitReceive+0x168>
 80064a8:	2312      	movs	r3, #18
 80064aa:	18fb      	adds	r3, r7, r3
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d000      	beq.n	80064b4 <HAL_SPI_TransmitReceive+0x168>
 80064b2:	e06d      	b.n	8006590 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b8:	881a      	ldrh	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c4:	1c9a      	adds	r2, r3, #2
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064d8:	e05a      	b.n	8006590 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	2202      	movs	r2, #2
 80064e2:	4013      	ands	r3, r2
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d11b      	bne.n	8006520 <HAL_SPI_TransmitReceive+0x1d4>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d016      	beq.n	8006520 <HAL_SPI_TransmitReceive+0x1d4>
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d113      	bne.n	8006520 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064fc:	881a      	ldrh	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006508:	1c9a      	adds	r2, r3, #2
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2201      	movs	r2, #1
 8006528:	4013      	ands	r3, r2
 800652a:	2b01      	cmp	r3, #1
 800652c:	d11c      	bne.n	8006568 <HAL_SPI_TransmitReceive+0x21c>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2246      	movs	r2, #70	@ 0x46
 8006532:	5a9b      	ldrh	r3, [r3, r2]
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d016      	beq.n	8006568 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006544:	b292      	uxth	r2, r2
 8006546:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654c:	1c9a      	adds	r2, r3, #2
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2246      	movs	r2, #70	@ 0x46
 8006556:	5a9b      	ldrh	r3, [r3, r2]
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b299      	uxth	r1, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2246      	movs	r2, #70	@ 0x46
 8006562:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006564:	2301      	movs	r3, #1
 8006566:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006568:	f7fc fb26 	bl	8002bb8 <HAL_GetTick>
 800656c:	0002      	movs	r2, r0
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006574:	429a      	cmp	r2, r3
 8006576:	d80b      	bhi.n	8006590 <HAL_SPI_TransmitReceive+0x244>
 8006578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657a:	3301      	adds	r3, #1
 800657c:	d008      	beq.n	8006590 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800657e:	2323      	movs	r3, #35	@ 0x23
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	2203      	movs	r2, #3
 8006584:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	225d      	movs	r2, #93	@ 0x5d
 800658a:	2101      	movs	r1, #1
 800658c:	5499      	strb	r1, [r3, r2]
        goto error;
 800658e:	e0b1      	b.n	80066f4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d19f      	bne.n	80064da <HAL_SPI_TransmitReceive+0x18e>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2246      	movs	r2, #70	@ 0x46
 800659e:	5a9b      	ldrh	r3, [r3, r2]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d199      	bne.n	80064da <HAL_SPI_TransmitReceive+0x18e>
 80065a6:	e089      	b.n	80066bc <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <HAL_SPI_TransmitReceive+0x270>
 80065b0:	2312      	movs	r3, #18
 80065b2:	18fb      	adds	r3, r7, r3
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d000      	beq.n	80065bc <HAL_SPI_TransmitReceive+0x270>
 80065ba:	e074      	b.n	80066a6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	330c      	adds	r3, #12
 80065c6:	7812      	ldrb	r2, [r2, #0]
 80065c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065e2:	e060      	b.n	80066a6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	2202      	movs	r2, #2
 80065ec:	4013      	ands	r3, r2
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d11c      	bne.n	800662c <HAL_SPI_TransmitReceive+0x2e0>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d017      	beq.n	800662c <HAL_SPI_TransmitReceive+0x2e0>
 80065fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d114      	bne.n	800662c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	330c      	adds	r3, #12
 800660c:	7812      	ldrb	r2, [r2, #0]
 800660e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800661e:	b29b      	uxth	r3, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	2201      	movs	r2, #1
 8006634:	4013      	ands	r3, r2
 8006636:	2b01      	cmp	r3, #1
 8006638:	d11e      	bne.n	8006678 <HAL_SPI_TransmitReceive+0x32c>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2246      	movs	r2, #70	@ 0x46
 800663e:	5a9b      	ldrh	r3, [r3, r2]
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d018      	beq.n	8006678 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	330c      	adds	r3, #12
 800664c:	001a      	movs	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006652:	7812      	ldrb	r2, [r2, #0]
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2246      	movs	r2, #70	@ 0x46
 8006666:	5a9b      	ldrh	r3, [r3, r2]
 8006668:	b29b      	uxth	r3, r3
 800666a:	3b01      	subs	r3, #1
 800666c:	b299      	uxth	r1, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2246      	movs	r2, #70	@ 0x46
 8006672:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006674:	2301      	movs	r3, #1
 8006676:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006678:	f7fc fa9e 	bl	8002bb8 <HAL_GetTick>
 800667c:	0002      	movs	r2, r0
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006684:	429a      	cmp	r2, r3
 8006686:	d802      	bhi.n	800668e <HAL_SPI_TransmitReceive+0x342>
 8006688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668a:	3301      	adds	r3, #1
 800668c:	d102      	bne.n	8006694 <HAL_SPI_TransmitReceive+0x348>
 800668e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006690:	2b00      	cmp	r3, #0
 8006692:	d108      	bne.n	80066a6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8006694:	2323      	movs	r3, #35	@ 0x23
 8006696:	18fb      	adds	r3, r7, r3
 8006698:	2203      	movs	r2, #3
 800669a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	225d      	movs	r2, #93	@ 0x5d
 80066a0:	2101      	movs	r1, #1
 80066a2:	5499      	strb	r1, [r3, r2]
        goto error;
 80066a4:	e026      	b.n	80066f4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d199      	bne.n	80065e4 <HAL_SPI_TransmitReceive+0x298>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2246      	movs	r2, #70	@ 0x46
 80066b4:	5a9b      	ldrh	r3, [r3, r2]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d193      	bne.n	80065e4 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	0018      	movs	r0, r3
 80066c4:	f000 f9b2 	bl	8006a2c <SPI_EndRxTxTransaction>
 80066c8:	1e03      	subs	r3, r0, #0
 80066ca:	d006      	beq.n	80066da <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80066cc:	2323      	movs	r3, #35	@ 0x23
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	2201      	movs	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d004      	beq.n	80066ec <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80066e2:	2323      	movs	r3, #35	@ 0x23
 80066e4:	18fb      	adds	r3, r7, r3
 80066e6:	2201      	movs	r2, #1
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	e003      	b.n	80066f4 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	225d      	movs	r2, #93	@ 0x5d
 80066f0:	2101      	movs	r1, #1
 80066f2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	225c      	movs	r2, #92	@ 0x5c
 80066f8:	2100      	movs	r1, #0
 80066fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80066fc:	2323      	movs	r3, #35	@ 0x23
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	781b      	ldrb	r3, [r3, #0]
}
 8006702:	0018      	movs	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	b00a      	add	sp, #40	@ 0x28
 8006708:	bd80      	pop	{r7, pc}
 800670a:	46c0      	nop			@ (mov r8, r8)
 800670c:	ffffefff 	.word	0xffffefff

08006710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	1dfb      	adds	r3, r7, #7
 800671e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006720:	f7fc fa4a 	bl	8002bb8 <HAL_GetTick>
 8006724:	0002      	movs	r2, r0
 8006726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	18d3      	adds	r3, r2, r3
 800672e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006730:	f7fc fa42 	bl	8002bb8 <HAL_GetTick>
 8006734:	0003      	movs	r3, r0
 8006736:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006738:	4b3a      	ldr	r3, [pc, #232]	@ (8006824 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	015b      	lsls	r3, r3, #5
 800673e:	0d1b      	lsrs	r3, r3, #20
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	4353      	muls	r3, r2
 8006744:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006746:	e058      	b.n	80067fa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	3301      	adds	r3, #1
 800674c:	d055      	beq.n	80067fa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800674e:	f7fc fa33 	bl	8002bb8 <HAL_GetTick>
 8006752:	0002      	movs	r2, r0
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	429a      	cmp	r2, r3
 800675c:	d902      	bls.n	8006764 <SPI_WaitFlagStateUntilTimeout+0x54>
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d142      	bne.n	80067ea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	21e0      	movs	r1, #224	@ 0xe0
 8006770:	438a      	bics	r2, r1
 8006772:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	2382      	movs	r3, #130	@ 0x82
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	429a      	cmp	r2, r3
 800677e:	d113      	bne.n	80067a8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	2380      	movs	r3, #128	@ 0x80
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	429a      	cmp	r2, r3
 800678a:	d005      	beq.n	8006798 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	2380      	movs	r3, #128	@ 0x80
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	429a      	cmp	r2, r3
 8006796:	d107      	bne.n	80067a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2140      	movs	r1, #64	@ 0x40
 80067a4:	438a      	bics	r2, r1
 80067a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067ac:	2380      	movs	r3, #128	@ 0x80
 80067ae:	019b      	lsls	r3, r3, #6
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d110      	bne.n	80067d6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	491a      	ldr	r1, [pc, #104]	@ (8006828 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80067c0:	400a      	ands	r2, r1
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2180      	movs	r1, #128	@ 0x80
 80067d0:	0189      	lsls	r1, r1, #6
 80067d2:	430a      	orrs	r2, r1
 80067d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	225d      	movs	r2, #93	@ 0x5d
 80067da:	2101      	movs	r1, #1
 80067dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	225c      	movs	r2, #92	@ 0x5c
 80067e2:	2100      	movs	r1, #0
 80067e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e017      	b.n	800681a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	4013      	ands	r3, r2
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	425a      	negs	r2, r3
 800680a:	4153      	adcs	r3, r2
 800680c:	b2db      	uxtb	r3, r3
 800680e:	001a      	movs	r2, r3
 8006810:	1dfb      	adds	r3, r7, #7
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	429a      	cmp	r2, r3
 8006816:	d197      	bne.n	8006748 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	0018      	movs	r0, r3
 800681c:	46bd      	mov	sp, r7
 800681e:	b008      	add	sp, #32
 8006820:	bd80      	pop	{r7, pc}
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	20000014 	.word	0x20000014
 8006828:	ffffdfff 	.word	0xffffdfff

0800682c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08a      	sub	sp, #40	@ 0x28
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800683a:	2317      	movs	r3, #23
 800683c:	18fb      	adds	r3, r7, r3
 800683e:	2200      	movs	r2, #0
 8006840:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006842:	f7fc f9b9 	bl	8002bb8 <HAL_GetTick>
 8006846:	0002      	movs	r2, r0
 8006848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684a:	1a9b      	subs	r3, r3, r2
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	18d3      	adds	r3, r2, r3
 8006850:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006852:	f7fc f9b1 	bl	8002bb8 <HAL_GetTick>
 8006856:	0003      	movs	r3, r0
 8006858:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	330c      	adds	r3, #12
 8006860:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006862:	4b41      	ldr	r3, [pc, #260]	@ (8006968 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	0013      	movs	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	189b      	adds	r3, r3, r2
 800686c:	00da      	lsls	r2, r3, #3
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	0d1b      	lsrs	r3, r3, #20
 8006872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006874:	4353      	muls	r3, r2
 8006876:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006878:	e068      	b.n	800694c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	23c0      	movs	r3, #192	@ 0xc0
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	429a      	cmp	r2, r3
 8006882:	d10a      	bne.n	800689a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d107      	bne.n	800689a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	b2da      	uxtb	r2, r3
 8006890:	2117      	movs	r1, #23
 8006892:	187b      	adds	r3, r7, r1
 8006894:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006896:	187b      	adds	r3, r7, r1
 8006898:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	3301      	adds	r3, #1
 800689e:	d055      	beq.n	800694c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068a0:	f7fc f98a 	bl	8002bb8 <HAL_GetTick>
 80068a4:	0002      	movs	r2, r0
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d902      	bls.n	80068b6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80068b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d142      	bne.n	800693c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	21e0      	movs	r1, #224	@ 0xe0
 80068c2:	438a      	bics	r2, r1
 80068c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	2382      	movs	r3, #130	@ 0x82
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d113      	bne.n	80068fa <SPI_WaitFifoStateUntilTimeout+0xce>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689a      	ldr	r2, [r3, #8]
 80068d6:	2380      	movs	r3, #128	@ 0x80
 80068d8:	021b      	lsls	r3, r3, #8
 80068da:	429a      	cmp	r2, r3
 80068dc:	d005      	beq.n	80068ea <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	2380      	movs	r3, #128	@ 0x80
 80068e4:	00db      	lsls	r3, r3, #3
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d107      	bne.n	80068fa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2140      	movs	r1, #64	@ 0x40
 80068f6:	438a      	bics	r2, r1
 80068f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068fe:	2380      	movs	r3, #128	@ 0x80
 8006900:	019b      	lsls	r3, r3, #6
 8006902:	429a      	cmp	r2, r3
 8006904:	d110      	bne.n	8006928 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4916      	ldr	r1, [pc, #88]	@ (800696c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006912:	400a      	ands	r2, r1
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2180      	movs	r1, #128	@ 0x80
 8006922:	0189      	lsls	r1, r1, #6
 8006924:	430a      	orrs	r2, r1
 8006926:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	225d      	movs	r2, #93	@ 0x5d
 800692c:	2101      	movs	r1, #1
 800692e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	225c      	movs	r2, #92	@ 0x5c
 8006934:	2100      	movs	r1, #0
 8006936:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e010      	b.n	800695e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	3b01      	subs	r3, #1
 800694a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	4013      	ands	r3, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	429a      	cmp	r2, r3
 800695a:	d18e      	bne.n	800687a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	0018      	movs	r0, r3
 8006960:	46bd      	mov	sp, r7
 8006962:	b00a      	add	sp, #40	@ 0x28
 8006964:	bd80      	pop	{r7, pc}
 8006966:	46c0      	nop			@ (mov r8, r8)
 8006968:	20000014 	.word	0x20000014
 800696c:	ffffdfff 	.word	0xffffdfff

08006970 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af02      	add	r7, sp, #8
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	2382      	movs	r3, #130	@ 0x82
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	429a      	cmp	r2, r3
 8006986:	d113      	bne.n	80069b0 <SPI_EndRxTransaction+0x40>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	2380      	movs	r3, #128	@ 0x80
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	429a      	cmp	r2, r3
 8006992:	d005      	beq.n	80069a0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	2380      	movs	r3, #128	@ 0x80
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	429a      	cmp	r2, r3
 800699e:	d107      	bne.n	80069b0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2140      	movs	r1, #64	@ 0x40
 80069ac:	438a      	bics	r2, r1
 80069ae:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	0013      	movs	r3, r2
 80069ba:	2200      	movs	r2, #0
 80069bc:	2180      	movs	r1, #128	@ 0x80
 80069be:	f7ff fea7 	bl	8006710 <SPI_WaitFlagStateUntilTimeout>
 80069c2:	1e03      	subs	r3, r0, #0
 80069c4:	d007      	beq.n	80069d6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ca:	2220      	movs	r2, #32
 80069cc:	431a      	orrs	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e026      	b.n	8006a24 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	2382      	movs	r3, #130	@ 0x82
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	429a      	cmp	r2, r3
 80069e0:	d11f      	bne.n	8006a22 <SPI_EndRxTransaction+0xb2>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	2380      	movs	r3, #128	@ 0x80
 80069e8:	021b      	lsls	r3, r3, #8
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d005      	beq.n	80069fa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	2380      	movs	r3, #128	@ 0x80
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d113      	bne.n	8006a22 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	23c0      	movs	r3, #192	@ 0xc0
 80069fe:	00d9      	lsls	r1, r3, #3
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	0013      	movs	r3, r2
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f7ff ff0f 	bl	800682c <SPI_WaitFifoStateUntilTimeout>
 8006a0e:	1e03      	subs	r3, r0, #0
 8006a10:	d007      	beq.n	8006a22 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a16:	2220      	movs	r2, #32
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e000      	b.n	8006a24 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	0018      	movs	r0, r3
 8006a26:	46bd      	mov	sp, r7
 8006a28:	b004      	add	sp, #16
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	23c0      	movs	r3, #192	@ 0xc0
 8006a3c:	0159      	lsls	r1, r3, #5
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	0013      	movs	r3, r2
 8006a46:	2200      	movs	r2, #0
 8006a48:	f7ff fef0 	bl	800682c <SPI_WaitFifoStateUntilTimeout>
 8006a4c:	1e03      	subs	r3, r0, #0
 8006a4e:	d007      	beq.n	8006a60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a54:	2220      	movs	r2, #32
 8006a56:	431a      	orrs	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e027      	b.n	8006ab0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	0013      	movs	r3, r2
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2180      	movs	r1, #128	@ 0x80
 8006a6e:	f7ff fe4f 	bl	8006710 <SPI_WaitFlagStateUntilTimeout>
 8006a72:	1e03      	subs	r3, r0, #0
 8006a74:	d007      	beq.n	8006a86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e014      	b.n	8006ab0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	23c0      	movs	r3, #192	@ 0xc0
 8006a8a:	00d9      	lsls	r1, r3, #3
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	0013      	movs	r3, r2
 8006a94:	2200      	movs	r2, #0
 8006a96:	f7ff fec9 	bl	800682c <SPI_WaitFifoStateUntilTimeout>
 8006a9a:	1e03      	subs	r3, r0, #0
 8006a9c:	d007      	beq.n	8006aae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	431a      	orrs	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e000      	b.n	8006ab0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	b004      	add	sp, #16
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e046      	b.n	8006b58 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2288      	movs	r2, #136	@ 0x88
 8006ace:	589b      	ldr	r3, [r3, r2]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d107      	bne.n	8006ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2284      	movs	r2, #132	@ 0x84
 8006ad8:	2100      	movs	r1, #0
 8006ada:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f7fb fe10 	bl	8002704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2288      	movs	r2, #136	@ 0x88
 8006ae8:	2124      	movs	r1, #36	@ 0x24
 8006aea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2101      	movs	r1, #1
 8006af8:	438a      	bics	r2, r1
 8006afa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d003      	beq.n	8006b0c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	0018      	movs	r0, r3
 8006b08:	f000 fdba 	bl	8007680 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f000 fc12 	bl	8007338 <UART_SetConfig>
 8006b14:	0003      	movs	r3, r0
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e01c      	b.n	8006b58 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	490d      	ldr	r1, [pc, #52]	@ (8006b60 <HAL_UART_Init+0xa8>)
 8006b2a:	400a      	ands	r2, r1
 8006b2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	212a      	movs	r1, #42	@ 0x2a
 8006b3a:	438a      	bics	r2, r1
 8006b3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2101      	movs	r1, #1
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	0018      	movs	r0, r3
 8006b52:	f000 fe49 	bl	80077e8 <UART_CheckIdleState>
 8006b56:	0003      	movs	r3, r0
}
 8006b58:	0018      	movs	r0, r3
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	b002      	add	sp, #8
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	ffffb7ff 	.word	0xffffb7ff

08006b64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	@ 0x28
 8006b68:	af02      	add	r7, sp, #8
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	603b      	str	r3, [r7, #0]
 8006b70:	1dbb      	adds	r3, r7, #6
 8006b72:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2288      	movs	r2, #136	@ 0x88
 8006b78:	589b      	ldr	r3, [r3, r2]
 8006b7a:	2b20      	cmp	r3, #32
 8006b7c:	d000      	beq.n	8006b80 <HAL_UART_Transmit+0x1c>
 8006b7e:	e090      	b.n	8006ca2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <HAL_UART_Transmit+0x2a>
 8006b86:	1dbb      	adds	r3, r7, #6
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e088      	b.n	8006ca4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	689a      	ldr	r2, [r3, #8]
 8006b96:	2380      	movs	r3, #128	@ 0x80
 8006b98:	015b      	lsls	r3, r3, #5
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d109      	bne.n	8006bb2 <HAL_UART_Transmit+0x4e>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d105      	bne.n	8006bb2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	4013      	ands	r3, r2
 8006bac:	d001      	beq.n	8006bb2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e078      	b.n	8006ca4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2290      	movs	r2, #144	@ 0x90
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2288      	movs	r2, #136	@ 0x88
 8006bbe:	2121      	movs	r1, #33	@ 0x21
 8006bc0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bc2:	f7fb fff9 	bl	8002bb8 <HAL_GetTick>
 8006bc6:	0003      	movs	r3, r0
 8006bc8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	1dba      	adds	r2, r7, #6
 8006bce:	2154      	movs	r1, #84	@ 0x54
 8006bd0:	8812      	ldrh	r2, [r2, #0]
 8006bd2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	1dba      	adds	r2, r7, #6
 8006bd8:	2156      	movs	r1, #86	@ 0x56
 8006bda:	8812      	ldrh	r2, [r2, #0]
 8006bdc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	2380      	movs	r3, #128	@ 0x80
 8006be4:	015b      	lsls	r3, r3, #5
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d108      	bne.n	8006bfc <HAL_UART_Transmit+0x98>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d104      	bne.n	8006bfc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	61bb      	str	r3, [r7, #24]
 8006bfa:	e003      	b.n	8006c04 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c00:	2300      	movs	r3, #0
 8006c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c04:	e030      	b.n	8006c68 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	0013      	movs	r3, r2
 8006c10:	2200      	movs	r2, #0
 8006c12:	2180      	movs	r1, #128	@ 0x80
 8006c14:	f000 fe92 	bl	800793c <UART_WaitOnFlagUntilTimeout>
 8006c18:	1e03      	subs	r3, r0, #0
 8006c1a:	d005      	beq.n	8006c28 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2288      	movs	r2, #136	@ 0x88
 8006c20:	2120      	movs	r1, #32
 8006c22:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e03d      	b.n	8006ca4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10b      	bne.n	8006c46 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	001a      	movs	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	05d2      	lsls	r2, r2, #23
 8006c3a:	0dd2      	lsrs	r2, r2, #23
 8006c3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	3302      	adds	r3, #2
 8006c42:	61bb      	str	r3, [r7, #24]
 8006c44:	e007      	b.n	8006c56 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	781a      	ldrb	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	3301      	adds	r3, #1
 8006c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2256      	movs	r2, #86	@ 0x56
 8006c5a:	5a9b      	ldrh	r3, [r3, r2]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	b299      	uxth	r1, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2256      	movs	r2, #86	@ 0x56
 8006c66:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2256      	movs	r2, #86	@ 0x56
 8006c6c:	5a9b      	ldrh	r3, [r3, r2]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1c8      	bne.n	8006c06 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	0013      	movs	r3, r2
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2140      	movs	r1, #64	@ 0x40
 8006c82:	f000 fe5b 	bl	800793c <UART_WaitOnFlagUntilTimeout>
 8006c86:	1e03      	subs	r3, r0, #0
 8006c88:	d005      	beq.n	8006c96 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2288      	movs	r2, #136	@ 0x88
 8006c8e:	2120      	movs	r1, #32
 8006c90:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e006      	b.n	8006ca4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2288      	movs	r2, #136	@ 0x88
 8006c9a:	2120      	movs	r1, #32
 8006c9c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	e000      	b.n	8006ca4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006ca2:	2302      	movs	r3, #2
  }
}
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b008      	add	sp, #32
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cac:	b5b0      	push	{r4, r5, r7, lr}
 8006cae:	b0aa      	sub	sp, #168	@ 0xa8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	22a4      	movs	r2, #164	@ 0xa4
 8006cbc:	18b9      	adds	r1, r7, r2
 8006cbe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	20a0      	movs	r0, #160	@ 0xa0
 8006cc8:	1839      	adds	r1, r7, r0
 8006cca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	249c      	movs	r4, #156	@ 0x9c
 8006cd4:	1939      	adds	r1, r7, r4
 8006cd6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006cd8:	0011      	movs	r1, r2
 8006cda:	18bb      	adds	r3, r7, r2
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4aa2      	ldr	r2, [pc, #648]	@ (8006f68 <HAL_UART_IRQHandler+0x2bc>)
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	2298      	movs	r2, #152	@ 0x98
 8006ce4:	18bd      	adds	r5, r7, r2
 8006ce6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006ce8:	18bb      	adds	r3, r7, r2
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d11a      	bne.n	8006d26 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006cf0:	187b      	adds	r3, r7, r1
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	d015      	beq.n	8006d26 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cfa:	183b      	adds	r3, r7, r0
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	4013      	ands	r3, r2
 8006d02:	d105      	bne.n	8006d10 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d04:	193b      	adds	r3, r7, r4
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	2380      	movs	r3, #128	@ 0x80
 8006d0a:	055b      	lsls	r3, r3, #21
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	d00a      	beq.n	8006d26 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d100      	bne.n	8006d1a <HAL_UART_IRQHandler+0x6e>
 8006d18:	e2dc      	b.n	80072d4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	0010      	movs	r0, r2
 8006d22:	4798      	blx	r3
      }
      return;
 8006d24:	e2d6      	b.n	80072d4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d26:	2398      	movs	r3, #152	@ 0x98
 8006d28:	18fb      	adds	r3, r7, r3
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d100      	bne.n	8006d32 <HAL_UART_IRQHandler+0x86>
 8006d30:	e122      	b.n	8006f78 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006d32:	239c      	movs	r3, #156	@ 0x9c
 8006d34:	18fb      	adds	r3, r7, r3
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a8c      	ldr	r2, [pc, #560]	@ (8006f6c <HAL_UART_IRQHandler+0x2c0>)
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	d106      	bne.n	8006d4c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006d3e:	23a0      	movs	r3, #160	@ 0xa0
 8006d40:	18fb      	adds	r3, r7, r3
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a8a      	ldr	r2, [pc, #552]	@ (8006f70 <HAL_UART_IRQHandler+0x2c4>)
 8006d46:	4013      	ands	r3, r2
 8006d48:	d100      	bne.n	8006d4c <HAL_UART_IRQHandler+0xa0>
 8006d4a:	e115      	b.n	8006f78 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d4c:	23a4      	movs	r3, #164	@ 0xa4
 8006d4e:	18fb      	adds	r3, r7, r3
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2201      	movs	r2, #1
 8006d54:	4013      	ands	r3, r2
 8006d56:	d012      	beq.n	8006d7e <HAL_UART_IRQHandler+0xd2>
 8006d58:	23a0      	movs	r3, #160	@ 0xa0
 8006d5a:	18fb      	adds	r3, r7, r3
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	2380      	movs	r3, #128	@ 0x80
 8006d60:	005b      	lsls	r3, r3, #1
 8006d62:	4013      	ands	r3, r2
 8006d64:	d00b      	beq.n	8006d7e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2290      	movs	r2, #144	@ 0x90
 8006d72:	589b      	ldr	r3, [r3, r2]
 8006d74:	2201      	movs	r2, #1
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2190      	movs	r1, #144	@ 0x90
 8006d7c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d7e:	23a4      	movs	r3, #164	@ 0xa4
 8006d80:	18fb      	adds	r3, r7, r3
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2202      	movs	r2, #2
 8006d86:	4013      	ands	r3, r2
 8006d88:	d011      	beq.n	8006dae <HAL_UART_IRQHandler+0x102>
 8006d8a:	239c      	movs	r3, #156	@ 0x9c
 8006d8c:	18fb      	adds	r3, r7, r3
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2201      	movs	r2, #1
 8006d92:	4013      	ands	r3, r2
 8006d94:	d00b      	beq.n	8006dae <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2290      	movs	r2, #144	@ 0x90
 8006da2:	589b      	ldr	r3, [r3, r2]
 8006da4:	2204      	movs	r2, #4
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2190      	movs	r1, #144	@ 0x90
 8006dac:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dae:	23a4      	movs	r3, #164	@ 0xa4
 8006db0:	18fb      	adds	r3, r7, r3
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2204      	movs	r2, #4
 8006db6:	4013      	ands	r3, r2
 8006db8:	d011      	beq.n	8006dde <HAL_UART_IRQHandler+0x132>
 8006dba:	239c      	movs	r3, #156	@ 0x9c
 8006dbc:	18fb      	adds	r3, r7, r3
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	d00b      	beq.n	8006dde <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2204      	movs	r2, #4
 8006dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2290      	movs	r2, #144	@ 0x90
 8006dd2:	589b      	ldr	r3, [r3, r2]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2190      	movs	r1, #144	@ 0x90
 8006ddc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006dde:	23a4      	movs	r3, #164	@ 0xa4
 8006de0:	18fb      	adds	r3, r7, r3
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2208      	movs	r2, #8
 8006de6:	4013      	ands	r3, r2
 8006de8:	d017      	beq.n	8006e1a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006dea:	23a0      	movs	r3, #160	@ 0xa0
 8006dec:	18fb      	adds	r3, r7, r3
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2220      	movs	r2, #32
 8006df2:	4013      	ands	r3, r2
 8006df4:	d105      	bne.n	8006e02 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006df6:	239c      	movs	r3, #156	@ 0x9c
 8006df8:	18fb      	adds	r3, r7, r3
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a5b      	ldr	r2, [pc, #364]	@ (8006f6c <HAL_UART_IRQHandler+0x2c0>)
 8006dfe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e00:	d00b      	beq.n	8006e1a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2208      	movs	r2, #8
 8006e08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2290      	movs	r2, #144	@ 0x90
 8006e0e:	589b      	ldr	r3, [r3, r2]
 8006e10:	2208      	movs	r2, #8
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2190      	movs	r1, #144	@ 0x90
 8006e18:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e1a:	23a4      	movs	r3, #164	@ 0xa4
 8006e1c:	18fb      	adds	r3, r7, r3
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	2380      	movs	r3, #128	@ 0x80
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	4013      	ands	r3, r2
 8006e26:	d013      	beq.n	8006e50 <HAL_UART_IRQHandler+0x1a4>
 8006e28:	23a0      	movs	r3, #160	@ 0xa0
 8006e2a:	18fb      	adds	r3, r7, r3
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	2380      	movs	r3, #128	@ 0x80
 8006e30:	04db      	lsls	r3, r3, #19
 8006e32:	4013      	ands	r3, r2
 8006e34:	d00c      	beq.n	8006e50 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2280      	movs	r2, #128	@ 0x80
 8006e3c:	0112      	lsls	r2, r2, #4
 8006e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2290      	movs	r2, #144	@ 0x90
 8006e44:	589b      	ldr	r3, [r3, r2]
 8006e46:	2220      	movs	r2, #32
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2190      	movs	r1, #144	@ 0x90
 8006e4e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2290      	movs	r2, #144	@ 0x90
 8006e54:	589b      	ldr	r3, [r3, r2]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d100      	bne.n	8006e5c <HAL_UART_IRQHandler+0x1b0>
 8006e5a:	e23d      	b.n	80072d8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e5c:	23a4      	movs	r3, #164	@ 0xa4
 8006e5e:	18fb      	adds	r3, r7, r3
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2220      	movs	r2, #32
 8006e64:	4013      	ands	r3, r2
 8006e66:	d015      	beq.n	8006e94 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e68:	23a0      	movs	r3, #160	@ 0xa0
 8006e6a:	18fb      	adds	r3, r7, r3
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	4013      	ands	r3, r2
 8006e72:	d106      	bne.n	8006e82 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e74:	239c      	movs	r3, #156	@ 0x9c
 8006e76:	18fb      	adds	r3, r7, r3
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	2380      	movs	r3, #128	@ 0x80
 8006e7c:	055b      	lsls	r3, r3, #21
 8006e7e:	4013      	ands	r3, r2
 8006e80:	d008      	beq.n	8006e94 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d004      	beq.n	8006e94 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	0010      	movs	r0, r2
 8006e92:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2290      	movs	r2, #144	@ 0x90
 8006e98:	589b      	ldr	r3, [r3, r2]
 8006e9a:	2194      	movs	r1, #148	@ 0x94
 8006e9c:	187a      	adds	r2, r7, r1
 8006e9e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	2240      	movs	r2, #64	@ 0x40
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	2b40      	cmp	r3, #64	@ 0x40
 8006eac:	d004      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006eae:	187b      	adds	r3, r7, r1
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2228      	movs	r2, #40	@ 0x28
 8006eb4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006eb6:	d04c      	beq.n	8006f52 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f000 fe94 	bl	8007be8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	2240      	movs	r2, #64	@ 0x40
 8006ec8:	4013      	ands	r3, r2
 8006eca:	2b40      	cmp	r3, #64	@ 0x40
 8006ecc:	d13c      	bne.n	8006f48 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ece:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8006ed4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ed6:	2090      	movs	r0, #144	@ 0x90
 8006ed8:	183a      	adds	r2, r7, r0
 8006eda:	6013      	str	r3, [r2, #0]
 8006edc:	2301      	movs	r3, #1
 8006ede:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ee2:	f383 8810 	msr	PRIMASK, r3
}
 8006ee6:	46c0      	nop			@ (mov r8, r8)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2140      	movs	r1, #64	@ 0x40
 8006ef4:	438a      	bics	r2, r1
 8006ef6:	609a      	str	r2, [r3, #8]
 8006ef8:	183b      	adds	r3, r7, r0
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006efe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f00:	f383 8810 	msr	PRIMASK, r3
}
 8006f04:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2280      	movs	r2, #128	@ 0x80
 8006f0a:	589b      	ldr	r3, [r3, r2]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d016      	beq.n	8006f3e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2280      	movs	r2, #128	@ 0x80
 8006f14:	589b      	ldr	r3, [r3, r2]
 8006f16:	4a17      	ldr	r2, [pc, #92]	@ (8006f74 <HAL_UART_IRQHandler+0x2c8>)
 8006f18:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2280      	movs	r2, #128	@ 0x80
 8006f1e:	589b      	ldr	r3, [r3, r2]
 8006f20:	0018      	movs	r0, r3
 8006f22:	f7fc fb8b 	bl	800363c <HAL_DMA_Abort_IT>
 8006f26:	1e03      	subs	r3, r0, #0
 8006f28:	d01c      	beq.n	8006f64 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2280      	movs	r2, #128	@ 0x80
 8006f2e:	589b      	ldr	r3, [r3, r2]
 8006f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	2180      	movs	r1, #128	@ 0x80
 8006f36:	5852      	ldr	r2, [r2, r1]
 8006f38:	0010      	movs	r0, r2
 8006f3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f3c:	e012      	b.n	8006f64 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	0018      	movs	r0, r3
 8006f42:	f000 f9f1 	bl	8007328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f46:	e00d      	b.n	8006f64 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	f000 f9ec 	bl	8007328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f50:	e008      	b.n	8006f64 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	0018      	movs	r0, r3
 8006f56:	f000 f9e7 	bl	8007328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2290      	movs	r2, #144	@ 0x90
 8006f5e:	2100      	movs	r1, #0
 8006f60:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006f62:	e1b9      	b.n	80072d8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f64:	46c0      	nop			@ (mov r8, r8)
    return;
 8006f66:	e1b7      	b.n	80072d8 <HAL_UART_IRQHandler+0x62c>
 8006f68:	0000080f 	.word	0x0000080f
 8006f6c:	10000001 	.word	0x10000001
 8006f70:	04000120 	.word	0x04000120
 8006f74:	08007ead 	.word	0x08007ead

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d000      	beq.n	8006f82 <HAL_UART_IRQHandler+0x2d6>
 8006f80:	e13e      	b.n	8007200 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f82:	23a4      	movs	r3, #164	@ 0xa4
 8006f84:	18fb      	adds	r3, r7, r3
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2210      	movs	r2, #16
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	d100      	bne.n	8006f90 <HAL_UART_IRQHandler+0x2e4>
 8006f8e:	e137      	b.n	8007200 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f90:	23a0      	movs	r3, #160	@ 0xa0
 8006f92:	18fb      	adds	r3, r7, r3
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2210      	movs	r2, #16
 8006f98:	4013      	ands	r3, r2
 8006f9a:	d100      	bne.n	8006f9e <HAL_UART_IRQHandler+0x2f2>
 8006f9c:	e130      	b.n	8007200 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2210      	movs	r2, #16
 8006fa4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	2240      	movs	r2, #64	@ 0x40
 8006fae:	4013      	ands	r3, r2
 8006fb0:	2b40      	cmp	r3, #64	@ 0x40
 8006fb2:	d000      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x30a>
 8006fb4:	e0a4      	b.n	8007100 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2280      	movs	r2, #128	@ 0x80
 8006fba:	589b      	ldr	r3, [r3, r2]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	217e      	movs	r1, #126	@ 0x7e
 8006fc2:	187b      	adds	r3, r7, r1
 8006fc4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006fc6:	187b      	adds	r3, r7, r1
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d100      	bne.n	8006fd0 <HAL_UART_IRQHandler+0x324>
 8006fce:	e185      	b.n	80072dc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	225c      	movs	r2, #92	@ 0x5c
 8006fd4:	5a9b      	ldrh	r3, [r3, r2]
 8006fd6:	187a      	adds	r2, r7, r1
 8006fd8:	8812      	ldrh	r2, [r2, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d300      	bcc.n	8006fe0 <HAL_UART_IRQHandler+0x334>
 8006fde:	e17d      	b.n	80072dc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	187a      	adds	r2, r7, r1
 8006fe4:	215e      	movs	r1, #94	@ 0x5e
 8006fe6:	8812      	ldrh	r2, [r2, #0]
 8006fe8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2280      	movs	r2, #128	@ 0x80
 8006fee:	589b      	ldr	r3, [r3, r2]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	d170      	bne.n	80070dc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8006ffe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007002:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007004:	2301      	movs	r3, #1
 8007006:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700a:	f383 8810 	msr	PRIMASK, r3
}
 800700e:	46c0      	nop			@ (mov r8, r8)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	49b4      	ldr	r1, [pc, #720]	@ (80072ec <HAL_UART_IRQHandler+0x640>)
 800701c:	400a      	ands	r2, r1
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007022:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007026:	f383 8810 	msr	PRIMASK, r3
}
 800702a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800702c:	f3ef 8310 	mrs	r3, PRIMASK
 8007030:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8007032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007034:	677b      	str	r3, [r7, #116]	@ 0x74
 8007036:	2301      	movs	r3, #1
 8007038:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800703a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800703c:	f383 8810 	msr	PRIMASK, r3
}
 8007040:	46c0      	nop			@ (mov r8, r8)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2101      	movs	r1, #1
 800704e:	438a      	bics	r2, r1
 8007050:	609a      	str	r2, [r3, #8]
 8007052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007054:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007058:	f383 8810 	msr	PRIMASK, r3
}
 800705c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800705e:	f3ef 8310 	mrs	r3, PRIMASK
 8007062:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8007064:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007066:	673b      	str	r3, [r7, #112]	@ 0x70
 8007068:	2301      	movs	r3, #1
 800706a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800706c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800706e:	f383 8810 	msr	PRIMASK, r3
}
 8007072:	46c0      	nop			@ (mov r8, r8)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2140      	movs	r1, #64	@ 0x40
 8007080:	438a      	bics	r2, r1
 8007082:	609a      	str	r2, [r3, #8]
 8007084:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007086:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800708a:	f383 8810 	msr	PRIMASK, r3
}
 800708e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	228c      	movs	r2, #140	@ 0x8c
 8007094:	2120      	movs	r1, #32
 8007096:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800709e:	f3ef 8310 	mrs	r3, PRIMASK
 80070a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80070a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070a8:	2301      	movs	r3, #1
 80070aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070ae:	f383 8810 	msr	PRIMASK, r3
}
 80070b2:	46c0      	nop			@ (mov r8, r8)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2110      	movs	r1, #16
 80070c0:	438a      	bics	r2, r1
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070ca:	f383 8810 	msr	PRIMASK, r3
}
 80070ce:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2280      	movs	r2, #128	@ 0x80
 80070d4:	589b      	ldr	r3, [r3, r2]
 80070d6:	0018      	movs	r0, r3
 80070d8:	f7fc fa4e 	bl	8003578 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	225c      	movs	r2, #92	@ 0x5c
 80070e6:	5a9a      	ldrh	r2, [r3, r2]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	215e      	movs	r1, #94	@ 0x5e
 80070ec:	5a5b      	ldrh	r3, [r3, r1]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	0011      	movs	r1, r2
 80070f8:	0018      	movs	r0, r3
 80070fa:	f7fa fb1d 	bl	8001738 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070fe:	e0ed      	b.n	80072dc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	225c      	movs	r2, #92	@ 0x5c
 8007104:	5a99      	ldrh	r1, [r3, r2]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	225e      	movs	r2, #94	@ 0x5e
 800710a:	5a9b      	ldrh	r3, [r3, r2]
 800710c:	b29a      	uxth	r2, r3
 800710e:	208e      	movs	r0, #142	@ 0x8e
 8007110:	183b      	adds	r3, r7, r0
 8007112:	1a8a      	subs	r2, r1, r2
 8007114:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	225e      	movs	r2, #94	@ 0x5e
 800711a:	5a9b      	ldrh	r3, [r3, r2]
 800711c:	b29b      	uxth	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d100      	bne.n	8007124 <HAL_UART_IRQHandler+0x478>
 8007122:	e0dd      	b.n	80072e0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8007124:	183b      	adds	r3, r7, r0
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d100      	bne.n	800712e <HAL_UART_IRQHandler+0x482>
 800712c:	e0d8      	b.n	80072e0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800712e:	f3ef 8310 	mrs	r3, PRIMASK
 8007132:	60fb      	str	r3, [r7, #12]
  return(result);
 8007134:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007136:	2488      	movs	r4, #136	@ 0x88
 8007138:	193a      	adds	r2, r7, r4
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	2301      	movs	r3, #1
 800713e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f383 8810 	msr	PRIMASK, r3
}
 8007146:	46c0      	nop			@ (mov r8, r8)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4967      	ldr	r1, [pc, #412]	@ (80072f0 <HAL_UART_IRQHandler+0x644>)
 8007154:	400a      	ands	r2, r1
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	193b      	adds	r3, r7, r4
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f383 8810 	msr	PRIMASK, r3
}
 8007164:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007166:	f3ef 8310 	mrs	r3, PRIMASK
 800716a:	61bb      	str	r3, [r7, #24]
  return(result);
 800716c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800716e:	2484      	movs	r4, #132	@ 0x84
 8007170:	193a      	adds	r2, r7, r4
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	2301      	movs	r3, #1
 8007176:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	f383 8810 	msr	PRIMASK, r3
}
 800717e:	46c0      	nop			@ (mov r8, r8)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	495a      	ldr	r1, [pc, #360]	@ (80072f4 <HAL_UART_IRQHandler+0x648>)
 800718c:	400a      	ands	r2, r1
 800718e:	609a      	str	r2, [r3, #8]
 8007190:	193b      	adds	r3, r7, r4
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	f383 8810 	msr	PRIMASK, r3
}
 800719c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	228c      	movs	r2, #140	@ 0x8c
 80071a2:	2120      	movs	r1, #32
 80071a4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071b2:	f3ef 8310 	mrs	r3, PRIMASK
 80071b6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80071b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ba:	2480      	movs	r4, #128	@ 0x80
 80071bc:	193a      	adds	r2, r7, r4
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	2301      	movs	r3, #1
 80071c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c6:	f383 8810 	msr	PRIMASK, r3
}
 80071ca:	46c0      	nop			@ (mov r8, r8)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2110      	movs	r1, #16
 80071d8:	438a      	bics	r2, r1
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	193b      	adds	r3, r7, r4
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e4:	f383 8810 	msr	PRIMASK, r3
}
 80071e8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2202      	movs	r2, #2
 80071ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071f0:	183b      	adds	r3, r7, r0
 80071f2:	881a      	ldrh	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	0011      	movs	r1, r2
 80071f8:	0018      	movs	r0, r3
 80071fa:	f7fa fa9d 	bl	8001738 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071fe:	e06f      	b.n	80072e0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007200:	23a4      	movs	r3, #164	@ 0xa4
 8007202:	18fb      	adds	r3, r7, r3
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	2380      	movs	r3, #128	@ 0x80
 8007208:	035b      	lsls	r3, r3, #13
 800720a:	4013      	ands	r3, r2
 800720c:	d010      	beq.n	8007230 <HAL_UART_IRQHandler+0x584>
 800720e:	239c      	movs	r3, #156	@ 0x9c
 8007210:	18fb      	adds	r3, r7, r3
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	2380      	movs	r3, #128	@ 0x80
 8007216:	03db      	lsls	r3, r3, #15
 8007218:	4013      	ands	r3, r2
 800721a:	d009      	beq.n	8007230 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2280      	movs	r2, #128	@ 0x80
 8007222:	0352      	lsls	r2, r2, #13
 8007224:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	0018      	movs	r0, r3
 800722a:	f000 fe82 	bl	8007f32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800722e:	e05a      	b.n	80072e6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007230:	23a4      	movs	r3, #164	@ 0xa4
 8007232:	18fb      	adds	r3, r7, r3
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2280      	movs	r2, #128	@ 0x80
 8007238:	4013      	ands	r3, r2
 800723a:	d016      	beq.n	800726a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800723c:	23a0      	movs	r3, #160	@ 0xa0
 800723e:	18fb      	adds	r3, r7, r3
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2280      	movs	r2, #128	@ 0x80
 8007244:	4013      	ands	r3, r2
 8007246:	d106      	bne.n	8007256 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007248:	239c      	movs	r3, #156	@ 0x9c
 800724a:	18fb      	adds	r3, r7, r3
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	2380      	movs	r3, #128	@ 0x80
 8007250:	041b      	lsls	r3, r3, #16
 8007252:	4013      	ands	r3, r2
 8007254:	d009      	beq.n	800726a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800725a:	2b00      	cmp	r3, #0
 800725c:	d042      	beq.n	80072e4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	0010      	movs	r0, r2
 8007266:	4798      	blx	r3
    }
    return;
 8007268:	e03c      	b.n	80072e4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800726a:	23a4      	movs	r3, #164	@ 0xa4
 800726c:	18fb      	adds	r3, r7, r3
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2240      	movs	r2, #64	@ 0x40
 8007272:	4013      	ands	r3, r2
 8007274:	d00a      	beq.n	800728c <HAL_UART_IRQHandler+0x5e0>
 8007276:	23a0      	movs	r3, #160	@ 0xa0
 8007278:	18fb      	adds	r3, r7, r3
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2240      	movs	r2, #64	@ 0x40
 800727e:	4013      	ands	r3, r2
 8007280:	d004      	beq.n	800728c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	0018      	movs	r0, r3
 8007286:	f000 fe28 	bl	8007eda <UART_EndTransmit_IT>
    return;
 800728a:	e02c      	b.n	80072e6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800728c:	23a4      	movs	r3, #164	@ 0xa4
 800728e:	18fb      	adds	r3, r7, r3
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	2380      	movs	r3, #128	@ 0x80
 8007294:	041b      	lsls	r3, r3, #16
 8007296:	4013      	ands	r3, r2
 8007298:	d00b      	beq.n	80072b2 <HAL_UART_IRQHandler+0x606>
 800729a:	23a0      	movs	r3, #160	@ 0xa0
 800729c:	18fb      	adds	r3, r7, r3
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	2380      	movs	r3, #128	@ 0x80
 80072a2:	05db      	lsls	r3, r3, #23
 80072a4:	4013      	ands	r3, r2
 80072a6:	d004      	beq.n	80072b2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	0018      	movs	r0, r3
 80072ac:	f000 fe51 	bl	8007f52 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072b0:	e019      	b.n	80072e6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80072b2:	23a4      	movs	r3, #164	@ 0xa4
 80072b4:	18fb      	adds	r3, r7, r3
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	2380      	movs	r3, #128	@ 0x80
 80072ba:	045b      	lsls	r3, r3, #17
 80072bc:	4013      	ands	r3, r2
 80072be:	d012      	beq.n	80072e6 <HAL_UART_IRQHandler+0x63a>
 80072c0:	23a0      	movs	r3, #160	@ 0xa0
 80072c2:	18fb      	adds	r3, r7, r3
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	da0d      	bge.n	80072e6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	0018      	movs	r0, r3
 80072ce:	f000 fe38 	bl	8007f42 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072d2:	e008      	b.n	80072e6 <HAL_UART_IRQHandler+0x63a>
      return;
 80072d4:	46c0      	nop			@ (mov r8, r8)
 80072d6:	e006      	b.n	80072e6 <HAL_UART_IRQHandler+0x63a>
    return;
 80072d8:	46c0      	nop			@ (mov r8, r8)
 80072da:	e004      	b.n	80072e6 <HAL_UART_IRQHandler+0x63a>
      return;
 80072dc:	46c0      	nop			@ (mov r8, r8)
 80072de:	e002      	b.n	80072e6 <HAL_UART_IRQHandler+0x63a>
      return;
 80072e0:	46c0      	nop			@ (mov r8, r8)
 80072e2:	e000      	b.n	80072e6 <HAL_UART_IRQHandler+0x63a>
    return;
 80072e4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80072e6:	46bd      	mov	sp, r7
 80072e8:	b02a      	add	sp, #168	@ 0xa8
 80072ea:	bdb0      	pop	{r4, r5, r7, pc}
 80072ec:	fffffeff 	.word	0xfffffeff
 80072f0:	fffffedf 	.word	0xfffffedf
 80072f4:	effffffe 	.word	0xeffffffe

080072f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007300:	46c0      	nop			@ (mov r8, r8)
 8007302:	46bd      	mov	sp, r7
 8007304:	b002      	add	sp, #8
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007310:	46c0      	nop			@ (mov r8, r8)
 8007312:	46bd      	mov	sp, r7
 8007314:	b002      	add	sp, #8
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007320:	46c0      	nop			@ (mov r8, r8)
 8007322:	46bd      	mov	sp, r7
 8007324:	b002      	add	sp, #8
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007330:	46c0      	nop			@ (mov r8, r8)
 8007332:	46bd      	mov	sp, r7
 8007334:	b002      	add	sp, #8
 8007336:	bd80      	pop	{r7, pc}

08007338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b088      	sub	sp, #32
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007340:	231a      	movs	r3, #26
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	2200      	movs	r2, #0
 8007346:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	431a      	orrs	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	4313      	orrs	r3, r2
 800735e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4abc      	ldr	r2, [pc, #752]	@ (8007658 <UART_SetConfig+0x320>)
 8007368:	4013      	ands	r3, r2
 800736a:	0019      	movs	r1, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	430a      	orrs	r2, r1
 8007374:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	4ab7      	ldr	r2, [pc, #732]	@ (800765c <UART_SetConfig+0x324>)
 800737e:	4013      	ands	r3, r2
 8007380:	0019      	movs	r1, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	69fa      	ldr	r2, [r7, #28]
 800739a:	4313      	orrs	r3, r2
 800739c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	4aae      	ldr	r2, [pc, #696]	@ (8007660 <UART_SetConfig+0x328>)
 80073a6:	4013      	ands	r3, r2
 80073a8:	0019      	movs	r1, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69fa      	ldr	r2, [r7, #28]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ba:	220f      	movs	r2, #15
 80073bc:	4393      	bics	r3, r2
 80073be:	0019      	movs	r1, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4aa4      	ldr	r2, [pc, #656]	@ (8007664 <UART_SetConfig+0x32c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d127      	bne.n	8007426 <UART_SetConfig+0xee>
 80073d6:	4ba4      	ldr	r3, [pc, #656]	@ (8007668 <UART_SetConfig+0x330>)
 80073d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073da:	2203      	movs	r2, #3
 80073dc:	4013      	ands	r3, r2
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d017      	beq.n	8007412 <UART_SetConfig+0xda>
 80073e2:	d81b      	bhi.n	800741c <UART_SetConfig+0xe4>
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d00a      	beq.n	80073fe <UART_SetConfig+0xc6>
 80073e8:	d818      	bhi.n	800741c <UART_SetConfig+0xe4>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <UART_SetConfig+0xbc>
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d00a      	beq.n	8007408 <UART_SetConfig+0xd0>
 80073f2:	e013      	b.n	800741c <UART_SetConfig+0xe4>
 80073f4:	231b      	movs	r3, #27
 80073f6:	18fb      	adds	r3, r7, r3
 80073f8:	2200      	movs	r2, #0
 80073fa:	701a      	strb	r2, [r3, #0]
 80073fc:	e058      	b.n	80074b0 <UART_SetConfig+0x178>
 80073fe:	231b      	movs	r3, #27
 8007400:	18fb      	adds	r3, r7, r3
 8007402:	2202      	movs	r2, #2
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	e053      	b.n	80074b0 <UART_SetConfig+0x178>
 8007408:	231b      	movs	r3, #27
 800740a:	18fb      	adds	r3, r7, r3
 800740c:	2204      	movs	r2, #4
 800740e:	701a      	strb	r2, [r3, #0]
 8007410:	e04e      	b.n	80074b0 <UART_SetConfig+0x178>
 8007412:	231b      	movs	r3, #27
 8007414:	18fb      	adds	r3, r7, r3
 8007416:	2208      	movs	r2, #8
 8007418:	701a      	strb	r2, [r3, #0]
 800741a:	e049      	b.n	80074b0 <UART_SetConfig+0x178>
 800741c:	231b      	movs	r3, #27
 800741e:	18fb      	adds	r3, r7, r3
 8007420:	2210      	movs	r2, #16
 8007422:	701a      	strb	r2, [r3, #0]
 8007424:	e044      	b.n	80074b0 <UART_SetConfig+0x178>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a90      	ldr	r2, [pc, #576]	@ (800766c <UART_SetConfig+0x334>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d127      	bne.n	8007480 <UART_SetConfig+0x148>
 8007430:	4b8d      	ldr	r3, [pc, #564]	@ (8007668 <UART_SetConfig+0x330>)
 8007432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007434:	220c      	movs	r2, #12
 8007436:	4013      	ands	r3, r2
 8007438:	2b0c      	cmp	r3, #12
 800743a:	d017      	beq.n	800746c <UART_SetConfig+0x134>
 800743c:	d81b      	bhi.n	8007476 <UART_SetConfig+0x13e>
 800743e:	2b08      	cmp	r3, #8
 8007440:	d00a      	beq.n	8007458 <UART_SetConfig+0x120>
 8007442:	d818      	bhi.n	8007476 <UART_SetConfig+0x13e>
 8007444:	2b00      	cmp	r3, #0
 8007446:	d002      	beq.n	800744e <UART_SetConfig+0x116>
 8007448:	2b04      	cmp	r3, #4
 800744a:	d00a      	beq.n	8007462 <UART_SetConfig+0x12a>
 800744c:	e013      	b.n	8007476 <UART_SetConfig+0x13e>
 800744e:	231b      	movs	r3, #27
 8007450:	18fb      	adds	r3, r7, r3
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	e02b      	b.n	80074b0 <UART_SetConfig+0x178>
 8007458:	231b      	movs	r3, #27
 800745a:	18fb      	adds	r3, r7, r3
 800745c:	2202      	movs	r2, #2
 800745e:	701a      	strb	r2, [r3, #0]
 8007460:	e026      	b.n	80074b0 <UART_SetConfig+0x178>
 8007462:	231b      	movs	r3, #27
 8007464:	18fb      	adds	r3, r7, r3
 8007466:	2204      	movs	r2, #4
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	e021      	b.n	80074b0 <UART_SetConfig+0x178>
 800746c:	231b      	movs	r3, #27
 800746e:	18fb      	adds	r3, r7, r3
 8007470:	2208      	movs	r2, #8
 8007472:	701a      	strb	r2, [r3, #0]
 8007474:	e01c      	b.n	80074b0 <UART_SetConfig+0x178>
 8007476:	231b      	movs	r3, #27
 8007478:	18fb      	adds	r3, r7, r3
 800747a:	2210      	movs	r2, #16
 800747c:	701a      	strb	r2, [r3, #0]
 800747e:	e017      	b.n	80074b0 <UART_SetConfig+0x178>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a7a      	ldr	r2, [pc, #488]	@ (8007670 <UART_SetConfig+0x338>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d104      	bne.n	8007494 <UART_SetConfig+0x15c>
 800748a:	231b      	movs	r3, #27
 800748c:	18fb      	adds	r3, r7, r3
 800748e:	2200      	movs	r2, #0
 8007490:	701a      	strb	r2, [r3, #0]
 8007492:	e00d      	b.n	80074b0 <UART_SetConfig+0x178>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a76      	ldr	r2, [pc, #472]	@ (8007674 <UART_SetConfig+0x33c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d104      	bne.n	80074a8 <UART_SetConfig+0x170>
 800749e:	231b      	movs	r3, #27
 80074a0:	18fb      	adds	r3, r7, r3
 80074a2:	2200      	movs	r2, #0
 80074a4:	701a      	strb	r2, [r3, #0]
 80074a6:	e003      	b.n	80074b0 <UART_SetConfig+0x178>
 80074a8:	231b      	movs	r3, #27
 80074aa:	18fb      	adds	r3, r7, r3
 80074ac:	2210      	movs	r2, #16
 80074ae:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	69da      	ldr	r2, [r3, #28]
 80074b4:	2380      	movs	r3, #128	@ 0x80
 80074b6:	021b      	lsls	r3, r3, #8
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d000      	beq.n	80074be <UART_SetConfig+0x186>
 80074bc:	e065      	b.n	800758a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80074be:	231b      	movs	r3, #27
 80074c0:	18fb      	adds	r3, r7, r3
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d015      	beq.n	80074f4 <UART_SetConfig+0x1bc>
 80074c8:	dc18      	bgt.n	80074fc <UART_SetConfig+0x1c4>
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	d00d      	beq.n	80074ea <UART_SetConfig+0x1b2>
 80074ce:	dc15      	bgt.n	80074fc <UART_SetConfig+0x1c4>
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <UART_SetConfig+0x1a2>
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d005      	beq.n	80074e4 <UART_SetConfig+0x1ac>
 80074d8:	e010      	b.n	80074fc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074da:	f7fe fa83 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 80074de:	0003      	movs	r3, r0
 80074e0:	617b      	str	r3, [r7, #20]
        break;
 80074e2:	e012      	b.n	800750a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074e4:	4b64      	ldr	r3, [pc, #400]	@ (8007678 <UART_SetConfig+0x340>)
 80074e6:	617b      	str	r3, [r7, #20]
        break;
 80074e8:	e00f      	b.n	800750a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074ea:	f7fe f9ef 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 80074ee:	0003      	movs	r3, r0
 80074f0:	617b      	str	r3, [r7, #20]
        break;
 80074f2:	e00a      	b.n	800750a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074f4:	2380      	movs	r3, #128	@ 0x80
 80074f6:	021b      	lsls	r3, r3, #8
 80074f8:	617b      	str	r3, [r7, #20]
        break;
 80074fa:	e006      	b.n	800750a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007500:	231a      	movs	r3, #26
 8007502:	18fb      	adds	r3, r7, r3
 8007504:	2201      	movs	r2, #1
 8007506:	701a      	strb	r2, [r3, #0]
        break;
 8007508:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d100      	bne.n	8007512 <UART_SetConfig+0x1da>
 8007510:	e08d      	b.n	800762e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007516:	4b59      	ldr	r3, [pc, #356]	@ (800767c <UART_SetConfig+0x344>)
 8007518:	0052      	lsls	r2, r2, #1
 800751a:	5ad3      	ldrh	r3, [r2, r3]
 800751c:	0019      	movs	r1, r3
 800751e:	6978      	ldr	r0, [r7, #20]
 8007520:	f7f8 fe00 	bl	8000124 <__udivsi3>
 8007524:	0003      	movs	r3, r0
 8007526:	005a      	lsls	r2, r3, #1
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	085b      	lsrs	r3, r3, #1
 800752e:	18d2      	adds	r2, r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	0019      	movs	r1, r3
 8007536:	0010      	movs	r0, r2
 8007538:	f7f8 fdf4 	bl	8000124 <__udivsi3>
 800753c:	0003      	movs	r3, r0
 800753e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2b0f      	cmp	r3, #15
 8007544:	d91c      	bls.n	8007580 <UART_SetConfig+0x248>
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	2380      	movs	r3, #128	@ 0x80
 800754a:	025b      	lsls	r3, r3, #9
 800754c:	429a      	cmp	r2, r3
 800754e:	d217      	bcs.n	8007580 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	b29a      	uxth	r2, r3
 8007554:	200e      	movs	r0, #14
 8007556:	183b      	adds	r3, r7, r0
 8007558:	210f      	movs	r1, #15
 800755a:	438a      	bics	r2, r1
 800755c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	085b      	lsrs	r3, r3, #1
 8007562:	b29b      	uxth	r3, r3
 8007564:	2207      	movs	r2, #7
 8007566:	4013      	ands	r3, r2
 8007568:	b299      	uxth	r1, r3
 800756a:	183b      	adds	r3, r7, r0
 800756c:	183a      	adds	r2, r7, r0
 800756e:	8812      	ldrh	r2, [r2, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	183a      	adds	r2, r7, r0
 800757a:	8812      	ldrh	r2, [r2, #0]
 800757c:	60da      	str	r2, [r3, #12]
 800757e:	e056      	b.n	800762e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007580:	231a      	movs	r3, #26
 8007582:	18fb      	adds	r3, r7, r3
 8007584:	2201      	movs	r2, #1
 8007586:	701a      	strb	r2, [r3, #0]
 8007588:	e051      	b.n	800762e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800758a:	231b      	movs	r3, #27
 800758c:	18fb      	adds	r3, r7, r3
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b08      	cmp	r3, #8
 8007592:	d015      	beq.n	80075c0 <UART_SetConfig+0x288>
 8007594:	dc18      	bgt.n	80075c8 <UART_SetConfig+0x290>
 8007596:	2b04      	cmp	r3, #4
 8007598:	d00d      	beq.n	80075b6 <UART_SetConfig+0x27e>
 800759a:	dc15      	bgt.n	80075c8 <UART_SetConfig+0x290>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <UART_SetConfig+0x26e>
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d005      	beq.n	80075b0 <UART_SetConfig+0x278>
 80075a4:	e010      	b.n	80075c8 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075a6:	f7fe fa1d 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 80075aa:	0003      	movs	r3, r0
 80075ac:	617b      	str	r3, [r7, #20]
        break;
 80075ae:	e012      	b.n	80075d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075b0:	4b31      	ldr	r3, [pc, #196]	@ (8007678 <UART_SetConfig+0x340>)
 80075b2:	617b      	str	r3, [r7, #20]
        break;
 80075b4:	e00f      	b.n	80075d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075b6:	f7fe f989 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 80075ba:	0003      	movs	r3, r0
 80075bc:	617b      	str	r3, [r7, #20]
        break;
 80075be:	e00a      	b.n	80075d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075c0:	2380      	movs	r3, #128	@ 0x80
 80075c2:	021b      	lsls	r3, r3, #8
 80075c4:	617b      	str	r3, [r7, #20]
        break;
 80075c6:	e006      	b.n	80075d6 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80075c8:	2300      	movs	r3, #0
 80075ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80075cc:	231a      	movs	r3, #26
 80075ce:	18fb      	adds	r3, r7, r3
 80075d0:	2201      	movs	r2, #1
 80075d2:	701a      	strb	r2, [r3, #0]
        break;
 80075d4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d028      	beq.n	800762e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075e0:	4b26      	ldr	r3, [pc, #152]	@ (800767c <UART_SetConfig+0x344>)
 80075e2:	0052      	lsls	r2, r2, #1
 80075e4:	5ad3      	ldrh	r3, [r2, r3]
 80075e6:	0019      	movs	r1, r3
 80075e8:	6978      	ldr	r0, [r7, #20]
 80075ea:	f7f8 fd9b 	bl	8000124 <__udivsi3>
 80075ee:	0003      	movs	r3, r0
 80075f0:	001a      	movs	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	085b      	lsrs	r3, r3, #1
 80075f8:	18d2      	adds	r2, r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	0019      	movs	r1, r3
 8007600:	0010      	movs	r0, r2
 8007602:	f7f8 fd8f 	bl	8000124 <__udivsi3>
 8007606:	0003      	movs	r3, r0
 8007608:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	2b0f      	cmp	r3, #15
 800760e:	d90a      	bls.n	8007626 <UART_SetConfig+0x2ee>
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	2380      	movs	r3, #128	@ 0x80
 8007614:	025b      	lsls	r3, r3, #9
 8007616:	429a      	cmp	r2, r3
 8007618:	d205      	bcs.n	8007626 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	b29a      	uxth	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	60da      	str	r2, [r3, #12]
 8007624:	e003      	b.n	800762e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007626:	231a      	movs	r3, #26
 8007628:	18fb      	adds	r3, r7, r3
 800762a:	2201      	movs	r2, #1
 800762c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	226a      	movs	r2, #106	@ 0x6a
 8007632:	2101      	movs	r1, #1
 8007634:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2268      	movs	r2, #104	@ 0x68
 800763a:	2101      	movs	r1, #1
 800763c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800764a:	231a      	movs	r3, #26
 800764c:	18fb      	adds	r3, r7, r3
 800764e:	781b      	ldrb	r3, [r3, #0]
}
 8007650:	0018      	movs	r0, r3
 8007652:	46bd      	mov	sp, r7
 8007654:	b008      	add	sp, #32
 8007656:	bd80      	pop	{r7, pc}
 8007658:	cfff69f3 	.word	0xcfff69f3
 800765c:	ffffcfff 	.word	0xffffcfff
 8007660:	11fff4ff 	.word	0x11fff4ff
 8007664:	40013800 	.word	0x40013800
 8007668:	40021000 	.word	0x40021000
 800766c:	40004400 	.word	0x40004400
 8007670:	40004800 	.word	0x40004800
 8007674:	40004c00 	.word	0x40004c00
 8007678:	00f42400 	.word	0x00f42400
 800767c:	080096f8 	.word	0x080096f8

08007680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768c:	2208      	movs	r2, #8
 800768e:	4013      	ands	r3, r2
 8007690:	d00b      	beq.n	80076aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	4a4a      	ldr	r2, [pc, #296]	@ (80077c4 <UART_AdvFeatureConfig+0x144>)
 800769a:	4013      	ands	r3, r2
 800769c:	0019      	movs	r1, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ae:	2201      	movs	r2, #1
 80076b0:	4013      	ands	r3, r2
 80076b2:	d00b      	beq.n	80076cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	4a43      	ldr	r2, [pc, #268]	@ (80077c8 <UART_AdvFeatureConfig+0x148>)
 80076bc:	4013      	ands	r3, r2
 80076be:	0019      	movs	r1, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d0:	2202      	movs	r2, #2
 80076d2:	4013      	ands	r3, r2
 80076d4:	d00b      	beq.n	80076ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	4a3b      	ldr	r2, [pc, #236]	@ (80077cc <UART_AdvFeatureConfig+0x14c>)
 80076de:	4013      	ands	r3, r2
 80076e0:	0019      	movs	r1, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f2:	2204      	movs	r2, #4
 80076f4:	4013      	ands	r3, r2
 80076f6:	d00b      	beq.n	8007710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	4a34      	ldr	r2, [pc, #208]	@ (80077d0 <UART_AdvFeatureConfig+0x150>)
 8007700:	4013      	ands	r3, r2
 8007702:	0019      	movs	r1, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007714:	2210      	movs	r2, #16
 8007716:	4013      	ands	r3, r2
 8007718:	d00b      	beq.n	8007732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	4a2c      	ldr	r2, [pc, #176]	@ (80077d4 <UART_AdvFeatureConfig+0x154>)
 8007722:	4013      	ands	r3, r2
 8007724:	0019      	movs	r1, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007736:	2220      	movs	r2, #32
 8007738:	4013      	ands	r3, r2
 800773a:	d00b      	beq.n	8007754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	4a25      	ldr	r2, [pc, #148]	@ (80077d8 <UART_AdvFeatureConfig+0x158>)
 8007744:	4013      	ands	r3, r2
 8007746:	0019      	movs	r1, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	430a      	orrs	r2, r1
 8007752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007758:	2240      	movs	r2, #64	@ 0x40
 800775a:	4013      	ands	r3, r2
 800775c:	d01d      	beq.n	800779a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	4a1d      	ldr	r2, [pc, #116]	@ (80077dc <UART_AdvFeatureConfig+0x15c>)
 8007766:	4013      	ands	r3, r2
 8007768:	0019      	movs	r1, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800777a:	2380      	movs	r3, #128	@ 0x80
 800777c:	035b      	lsls	r3, r3, #13
 800777e:	429a      	cmp	r2, r3
 8007780:	d10b      	bne.n	800779a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	4a15      	ldr	r2, [pc, #84]	@ (80077e0 <UART_AdvFeatureConfig+0x160>)
 800778a:	4013      	ands	r3, r2
 800778c:	0019      	movs	r1, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800779e:	2280      	movs	r2, #128	@ 0x80
 80077a0:	4013      	ands	r3, r2
 80077a2:	d00b      	beq.n	80077bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	4a0e      	ldr	r2, [pc, #56]	@ (80077e4 <UART_AdvFeatureConfig+0x164>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	0019      	movs	r1, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	605a      	str	r2, [r3, #4]
  }
}
 80077bc:	46c0      	nop			@ (mov r8, r8)
 80077be:	46bd      	mov	sp, r7
 80077c0:	b002      	add	sp, #8
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	ffff7fff 	.word	0xffff7fff
 80077c8:	fffdffff 	.word	0xfffdffff
 80077cc:	fffeffff 	.word	0xfffeffff
 80077d0:	fffbffff 	.word	0xfffbffff
 80077d4:	ffffefff 	.word	0xffffefff
 80077d8:	ffffdfff 	.word	0xffffdfff
 80077dc:	ffefffff 	.word	0xffefffff
 80077e0:	ff9fffff 	.word	0xff9fffff
 80077e4:	fff7ffff 	.word	0xfff7ffff

080077e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b092      	sub	sp, #72	@ 0x48
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2290      	movs	r2, #144	@ 0x90
 80077f4:	2100      	movs	r1, #0
 80077f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077f8:	f7fb f9de 	bl	8002bb8 <HAL_GetTick>
 80077fc:	0003      	movs	r3, r0
 80077fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2208      	movs	r2, #8
 8007808:	4013      	ands	r3, r2
 800780a:	2b08      	cmp	r3, #8
 800780c:	d12d      	bne.n	800786a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800780e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007810:	2280      	movs	r2, #128	@ 0x80
 8007812:	0391      	lsls	r1, r2, #14
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	4a47      	ldr	r2, [pc, #284]	@ (8007934 <UART_CheckIdleState+0x14c>)
 8007818:	9200      	str	r2, [sp, #0]
 800781a:	2200      	movs	r2, #0
 800781c:	f000 f88e 	bl	800793c <UART_WaitOnFlagUntilTimeout>
 8007820:	1e03      	subs	r3, r0, #0
 8007822:	d022      	beq.n	800786a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007824:	f3ef 8310 	mrs	r3, PRIMASK
 8007828:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800782a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800782c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800782e:	2301      	movs	r3, #1
 8007830:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007834:	f383 8810 	msr	PRIMASK, r3
}
 8007838:	46c0      	nop			@ (mov r8, r8)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2180      	movs	r1, #128	@ 0x80
 8007846:	438a      	bics	r2, r1
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800784e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007850:	f383 8810 	msr	PRIMASK, r3
}
 8007854:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2288      	movs	r2, #136	@ 0x88
 800785a:	2120      	movs	r1, #32
 800785c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2284      	movs	r2, #132	@ 0x84
 8007862:	2100      	movs	r1, #0
 8007864:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e060      	b.n	800792c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2204      	movs	r2, #4
 8007872:	4013      	ands	r3, r2
 8007874:	2b04      	cmp	r3, #4
 8007876:	d146      	bne.n	8007906 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800787a:	2280      	movs	r2, #128	@ 0x80
 800787c:	03d1      	lsls	r1, r2, #15
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4a2c      	ldr	r2, [pc, #176]	@ (8007934 <UART_CheckIdleState+0x14c>)
 8007882:	9200      	str	r2, [sp, #0]
 8007884:	2200      	movs	r2, #0
 8007886:	f000 f859 	bl	800793c <UART_WaitOnFlagUntilTimeout>
 800788a:	1e03      	subs	r3, r0, #0
 800788c:	d03b      	beq.n	8007906 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800788e:	f3ef 8310 	mrs	r3, PRIMASK
 8007892:	60fb      	str	r3, [r7, #12]
  return(result);
 8007894:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007896:	637b      	str	r3, [r7, #52]	@ 0x34
 8007898:	2301      	movs	r3, #1
 800789a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f383 8810 	msr	PRIMASK, r3
}
 80078a2:	46c0      	nop			@ (mov r8, r8)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4922      	ldr	r1, [pc, #136]	@ (8007938 <UART_CheckIdleState+0x150>)
 80078b0:	400a      	ands	r2, r1
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f383 8810 	msr	PRIMASK, r3
}
 80078be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078c0:	f3ef 8310 	mrs	r3, PRIMASK
 80078c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80078c6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80078ca:	2301      	movs	r3, #1
 80078cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	f383 8810 	msr	PRIMASK, r3
}
 80078d4:	46c0      	nop			@ (mov r8, r8)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2101      	movs	r1, #1
 80078e2:	438a      	bics	r2, r1
 80078e4:	609a      	str	r2, [r3, #8]
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	f383 8810 	msr	PRIMASK, r3
}
 80078f0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	228c      	movs	r2, #140	@ 0x8c
 80078f6:	2120      	movs	r1, #32
 80078f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2284      	movs	r2, #132	@ 0x84
 80078fe:	2100      	movs	r1, #0
 8007900:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e012      	b.n	800792c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2288      	movs	r2, #136	@ 0x88
 800790a:	2120      	movs	r1, #32
 800790c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	228c      	movs	r2, #140	@ 0x8c
 8007912:	2120      	movs	r1, #32
 8007914:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2284      	movs	r2, #132	@ 0x84
 8007926:	2100      	movs	r1, #0
 8007928:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	0018      	movs	r0, r3
 800792e:	46bd      	mov	sp, r7
 8007930:	b010      	add	sp, #64	@ 0x40
 8007932:	bd80      	pop	{r7, pc}
 8007934:	01ffffff 	.word	0x01ffffff
 8007938:	fffffedf 	.word	0xfffffedf

0800793c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	603b      	str	r3, [r7, #0]
 8007948:	1dfb      	adds	r3, r7, #7
 800794a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800794c:	e051      	b.n	80079f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	3301      	adds	r3, #1
 8007952:	d04e      	beq.n	80079f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007954:	f7fb f930 	bl	8002bb8 <HAL_GetTick>
 8007958:	0002      	movs	r2, r0
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	429a      	cmp	r2, r3
 8007962:	d302      	bcc.n	800796a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e051      	b.n	8007a12 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2204      	movs	r2, #4
 8007976:	4013      	ands	r3, r2
 8007978:	d03b      	beq.n	80079f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b80      	cmp	r3, #128	@ 0x80
 800797e:	d038      	beq.n	80079f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b40      	cmp	r3, #64	@ 0x40
 8007984:	d035      	beq.n	80079f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	69db      	ldr	r3, [r3, #28]
 800798c:	2208      	movs	r2, #8
 800798e:	4013      	ands	r3, r2
 8007990:	2b08      	cmp	r3, #8
 8007992:	d111      	bne.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2208      	movs	r2, #8
 800799a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	0018      	movs	r0, r3
 80079a0:	f000 f922 	bl	8007be8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2290      	movs	r2, #144	@ 0x90
 80079a8:	2108      	movs	r1, #8
 80079aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2284      	movs	r2, #132	@ 0x84
 80079b0:	2100      	movs	r1, #0
 80079b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e02c      	b.n	8007a12 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	69da      	ldr	r2, [r3, #28]
 80079be:	2380      	movs	r3, #128	@ 0x80
 80079c0:	011b      	lsls	r3, r3, #4
 80079c2:	401a      	ands	r2, r3
 80079c4:	2380      	movs	r3, #128	@ 0x80
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d112      	bne.n	80079f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2280      	movs	r2, #128	@ 0x80
 80079d2:	0112      	lsls	r2, r2, #4
 80079d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	0018      	movs	r0, r3
 80079da:	f000 f905 	bl	8007be8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2290      	movs	r2, #144	@ 0x90
 80079e2:	2120      	movs	r1, #32
 80079e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2284      	movs	r2, #132	@ 0x84
 80079ea:	2100      	movs	r1, #0
 80079ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e00f      	b.n	8007a12 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	4013      	ands	r3, r2
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	425a      	negs	r2, r3
 8007a02:	4153      	adcs	r3, r2
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	001a      	movs	r2, r3
 8007a08:	1dfb      	adds	r3, r7, #7
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d09e      	beq.n	800794e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	0018      	movs	r0, r3
 8007a14:	46bd      	mov	sp, r7
 8007a16:	b004      	add	sp, #16
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b090      	sub	sp, #64	@ 0x40
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	1dbb      	adds	r3, r7, #6
 8007a28:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	1dba      	adds	r2, r7, #6
 8007a34:	215c      	movs	r1, #92	@ 0x5c
 8007a36:	8812      	ldrh	r2, [r2, #0]
 8007a38:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2290      	movs	r2, #144	@ 0x90
 8007a3e:	2100      	movs	r1, #0
 8007a40:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	228c      	movs	r2, #140	@ 0x8c
 8007a46:	2122      	movs	r1, #34	@ 0x22
 8007a48:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2280      	movs	r2, #128	@ 0x80
 8007a4e:	589b      	ldr	r3, [r3, r2]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d02d      	beq.n	8007ab0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2280      	movs	r2, #128	@ 0x80
 8007a58:	589b      	ldr	r3, [r3, r2]
 8007a5a:	4a40      	ldr	r2, [pc, #256]	@ (8007b5c <UART_Start_Receive_DMA+0x140>)
 8007a5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2280      	movs	r2, #128	@ 0x80
 8007a62:	589b      	ldr	r3, [r3, r2]
 8007a64:	4a3e      	ldr	r2, [pc, #248]	@ (8007b60 <UART_Start_Receive_DMA+0x144>)
 8007a66:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2280      	movs	r2, #128	@ 0x80
 8007a6c:	589b      	ldr	r3, [r3, r2]
 8007a6e:	4a3d      	ldr	r2, [pc, #244]	@ (8007b64 <UART_Start_Receive_DMA+0x148>)
 8007a70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2280      	movs	r2, #128	@ 0x80
 8007a76:	589b      	ldr	r3, [r3, r2]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2280      	movs	r2, #128	@ 0x80
 8007a80:	5898      	ldr	r0, [r3, r2]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3324      	adds	r3, #36	@ 0x24
 8007a88:	0019      	movs	r1, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a8e:	001a      	movs	r2, r3
 8007a90:	1dbb      	adds	r3, r7, #6
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	f7fb fcea 	bl	800346c <HAL_DMA_Start_IT>
 8007a98:	1e03      	subs	r3, r0, #0
 8007a9a:	d009      	beq.n	8007ab0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2290      	movs	r2, #144	@ 0x90
 8007aa0:	2110      	movs	r1, #16
 8007aa2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	228c      	movs	r2, #140	@ 0x8c
 8007aa8:	2120      	movs	r1, #32
 8007aaa:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e050      	b.n	8007b52 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d019      	beq.n	8007aec <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8007abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8007abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac8:	f383 8810 	msr	PRIMASK, r3
}
 8007acc:	46c0      	nop			@ (mov r8, r8)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2180      	movs	r1, #128	@ 0x80
 8007ada:	0049      	lsls	r1, r1, #1
 8007adc:	430a      	orrs	r2, r1
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	f383 8810 	msr	PRIMASK, r3
}
 8007aea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aec:	f3ef 8310 	mrs	r3, PRIMASK
 8007af0:	613b      	str	r3, [r7, #16]
  return(result);
 8007af2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007af6:	2301      	movs	r3, #1
 8007af8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f383 8810 	msr	PRIMASK, r3
}
 8007b00:	46c0      	nop			@ (mov r8, r8)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	609a      	str	r2, [r3, #8]
 8007b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	f383 8810 	msr	PRIMASK, r3
}
 8007b1c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007b22:	61fb      	str	r3, [r7, #28]
  return(result);
 8007b24:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b28:	2301      	movs	r3, #1
 8007b2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	f383 8810 	msr	PRIMASK, r3
}
 8007b32:	46c0      	nop			@ (mov r8, r8)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2140      	movs	r1, #64	@ 0x40
 8007b40:	430a      	orrs	r2, r1
 8007b42:	609a      	str	r2, [r3, #8]
 8007b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b46:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4a:	f383 8810 	msr	PRIMASK, r3
}
 8007b4e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	0018      	movs	r0, r3
 8007b54:	46bd      	mov	sp, r7
 8007b56:	b010      	add	sp, #64	@ 0x40
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	46c0      	nop			@ (mov r8, r8)
 8007b5c:	08007cb5 	.word	0x08007cb5
 8007b60:	08007de5 	.word	0x08007de5
 8007b64:	08007e27 	.word	0x08007e27

08007b68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	@ 0x28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b70:	f3ef 8310 	mrs	r3, PRIMASK
 8007b74:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b76:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f383 8810 	msr	PRIMASK, r3
}
 8007b84:	46c0      	nop			@ (mov r8, r8)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	21c0      	movs	r1, #192	@ 0xc0
 8007b92:	438a      	bics	r2, r1
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f383 8810 	msr	PRIMASK, r3
}
 8007ba0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ba6:	617b      	str	r3, [r7, #20]
  return(result);
 8007ba8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007baa:	623b      	str	r3, [r7, #32]
 8007bac:	2301      	movs	r3, #1
 8007bae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	f383 8810 	msr	PRIMASK, r3
}
 8007bb6:	46c0      	nop			@ (mov r8, r8)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689a      	ldr	r2, [r3, #8]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4908      	ldr	r1, [pc, #32]	@ (8007be4 <UART_EndTxTransfer+0x7c>)
 8007bc4:	400a      	ands	r2, r1
 8007bc6:	609a      	str	r2, [r3, #8]
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f383 8810 	msr	PRIMASK, r3
}
 8007bd2:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2288      	movs	r2, #136	@ 0x88
 8007bd8:	2120      	movs	r1, #32
 8007bda:	5099      	str	r1, [r3, r2]
}
 8007bdc:	46c0      	nop			@ (mov r8, r8)
 8007bde:	46bd      	mov	sp, r7
 8007be0:	b00a      	add	sp, #40	@ 0x28
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	ff7fffff 	.word	0xff7fffff

08007be8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08e      	sub	sp, #56	@ 0x38
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8007bf4:	617b      	str	r3, [r7, #20]
  return(result);
 8007bf6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	f383 8810 	msr	PRIMASK, r3
}
 8007c04:	46c0      	nop			@ (mov r8, r8)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4926      	ldr	r1, [pc, #152]	@ (8007cac <UART_EndRxTransfer+0xc4>)
 8007c12:	400a      	ands	r2, r1
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	f383 8810 	msr	PRIMASK, r3
}
 8007c20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c22:	f3ef 8310 	mrs	r3, PRIMASK
 8007c26:	623b      	str	r3, [r7, #32]
  return(result);
 8007c28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c32:	f383 8810 	msr	PRIMASK, r3
}
 8007c36:	46c0      	nop			@ (mov r8, r8)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	491b      	ldr	r1, [pc, #108]	@ (8007cb0 <UART_EndRxTransfer+0xc8>)
 8007c44:	400a      	ands	r2, r1
 8007c46:	609a      	str	r2, [r3, #8]
 8007c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4e:	f383 8810 	msr	PRIMASK, r3
}
 8007c52:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d118      	bne.n	8007c8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c60:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c66:	2301      	movs	r3, #1
 8007c68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f383 8810 	msr	PRIMASK, r3
}
 8007c70:	46c0      	nop			@ (mov r8, r8)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2110      	movs	r1, #16
 8007c7e:	438a      	bics	r2, r1
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f383 8810 	msr	PRIMASK, r3
}
 8007c8c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	228c      	movs	r2, #140	@ 0x8c
 8007c92:	2120      	movs	r1, #32
 8007c94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007ca2:	46c0      	nop			@ (mov r8, r8)
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	b00e      	add	sp, #56	@ 0x38
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	46c0      	nop			@ (mov r8, r8)
 8007cac:	fffffedf 	.word	0xfffffedf
 8007cb0:	effffffe 	.word	0xeffffffe

08007cb4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b094      	sub	sp, #80	@ 0x50
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	4013      	ands	r3, r2
 8007ccc:	d16f      	bne.n	8007dae <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8007cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cd0:	225e      	movs	r2, #94	@ 0x5e
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8007cda:	61bb      	str	r3, [r7, #24]
  return(result);
 8007cdc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	f383 8810 	msr	PRIMASK, r3
}
 8007cea:	46c0      	nop			@ (mov r8, r8)
 8007cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	493a      	ldr	r1, [pc, #232]	@ (8007de0 <UART_DMAReceiveCplt+0x12c>)
 8007cf8:	400a      	ands	r2, r1
 8007cfa:	601a      	str	r2, [r3, #0]
 8007cfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d00:	6a3b      	ldr	r3, [r7, #32]
 8007d02:	f383 8810 	msr	PRIMASK, r3
}
 8007d06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d08:	f3ef 8310 	mrs	r3, PRIMASK
 8007d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d10:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d12:	2301      	movs	r3, #1
 8007d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d18:	f383 8810 	msr	PRIMASK, r3
}
 8007d1c:	46c0      	nop			@ (mov r8, r8)
 8007d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2101      	movs	r1, #1
 8007d2a:	438a      	bics	r2, r1
 8007d2c:	609a      	str	r2, [r3, #8]
 8007d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d34:	f383 8810 	msr	PRIMASK, r3
}
 8007d38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d42:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d44:	2301      	movs	r3, #1
 8007d46:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4a:	f383 8810 	msr	PRIMASK, r3
}
 8007d4e:	46c0      	nop			@ (mov r8, r8)
 8007d50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689a      	ldr	r2, [r3, #8]
 8007d56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2140      	movs	r1, #64	@ 0x40
 8007d5c:	438a      	bics	r2, r1
 8007d5e:	609a      	str	r2, [r3, #8]
 8007d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d62:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d66:	f383 8810 	msr	PRIMASK, r3
}
 8007d6a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d6e:	228c      	movs	r2, #140	@ 0x8c
 8007d70:	2120      	movs	r1, #32
 8007d72:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d118      	bne.n	8007dae <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8007d80:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d82:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d86:	2301      	movs	r3, #1
 8007d88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f383 8810 	msr	PRIMASK, r3
}
 8007d90:	46c0      	nop			@ (mov r8, r8)
 8007d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2110      	movs	r1, #16
 8007d9e:	438a      	bics	r2, r1
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007da4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f383 8810 	msr	PRIMASK, r3
}
 8007dac:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007db0:	2200      	movs	r2, #0
 8007db2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d108      	bne.n	8007dce <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dbe:	225c      	movs	r2, #92	@ 0x5c
 8007dc0:	5a9a      	ldrh	r2, [r3, r2]
 8007dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dc4:	0011      	movs	r1, r2
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	f7f9 fcb6 	bl	8001738 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007dcc:	e003      	b.n	8007dd6 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8007dce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	f7ff fa99 	bl	8007308 <HAL_UART_RxCpltCallback>
}
 8007dd6:	46c0      	nop			@ (mov r8, r8)
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	b014      	add	sp, #80	@ 0x50
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	46c0      	nop			@ (mov r8, r8)
 8007de0:	fffffeff 	.word	0xfffffeff

08007de4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2201      	movs	r2, #1
 8007df6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d10a      	bne.n	8007e16 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	225c      	movs	r2, #92	@ 0x5c
 8007e04:	5a9b      	ldrh	r3, [r3, r2]
 8007e06:	085b      	lsrs	r3, r3, #1
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	0011      	movs	r1, r2
 8007e0e:	0018      	movs	r0, r3
 8007e10:	f7f9 fc92 	bl	8001738 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e14:	e003      	b.n	8007e1e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f7ff fa7d 	bl	8007318 <HAL_UART_RxHalfCpltCallback>
}
 8007e1e:	46c0      	nop			@ (mov r8, r8)
 8007e20:	46bd      	mov	sp, r7
 8007e22:	b004      	add	sp, #16
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b086      	sub	sp, #24
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e32:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	2288      	movs	r2, #136	@ 0x88
 8007e38:	589b      	ldr	r3, [r3, r2]
 8007e3a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	228c      	movs	r2, #140	@ 0x8c
 8007e40:	589b      	ldr	r3, [r3, r2]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	2280      	movs	r2, #128	@ 0x80
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	2b80      	cmp	r3, #128	@ 0x80
 8007e50:	d10a      	bne.n	8007e68 <UART_DMAError+0x42>
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	2b21      	cmp	r3, #33	@ 0x21
 8007e56:	d107      	bne.n	8007e68 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	2256      	movs	r2, #86	@ 0x56
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	0018      	movs	r0, r3
 8007e64:	f7ff fe80 	bl	8007b68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	2240      	movs	r2, #64	@ 0x40
 8007e70:	4013      	ands	r3, r2
 8007e72:	2b40      	cmp	r3, #64	@ 0x40
 8007e74:	d10a      	bne.n	8007e8c <UART_DMAError+0x66>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2b22      	cmp	r3, #34	@ 0x22
 8007e7a:	d107      	bne.n	8007e8c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	225e      	movs	r2, #94	@ 0x5e
 8007e80:	2100      	movs	r1, #0
 8007e82:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	0018      	movs	r0, r3
 8007e88:	f7ff feae 	bl	8007be8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	2290      	movs	r2, #144	@ 0x90
 8007e90:	589b      	ldr	r3, [r3, r2]
 8007e92:	2210      	movs	r2, #16
 8007e94:	431a      	orrs	r2, r3
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2190      	movs	r1, #144	@ 0x90
 8007e9a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	f7ff fa42 	bl	8007328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ea4:	46c0      	nop			@ (mov r8, r8)
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	b006      	add	sp, #24
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	225e      	movs	r2, #94	@ 0x5e
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2256      	movs	r2, #86	@ 0x56
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	0018      	movs	r0, r3
 8007ece:	f7ff fa2b 	bl	8007328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ed2:	46c0      	nop			@ (mov r8, r8)
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	b004      	add	sp, #16
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b086      	sub	sp, #24
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ee6:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	2301      	movs	r3, #1
 8007eee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f383 8810 	msr	PRIMASK, r3
}
 8007ef6:	46c0      	nop			@ (mov r8, r8)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2140      	movs	r1, #64	@ 0x40
 8007f04:	438a      	bics	r2, r1
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f383 8810 	msr	PRIMASK, r3
}
 8007f12:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2288      	movs	r2, #136	@ 0x88
 8007f18:	2120      	movs	r1, #32
 8007f1a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	0018      	movs	r0, r3
 8007f26:	f7ff f9e7 	bl	80072f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f2a:	46c0      	nop			@ (mov r8, r8)
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	b006      	add	sp, #24
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b082      	sub	sp, #8
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f3a:	46c0      	nop			@ (mov r8, r8)
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	b002      	add	sp, #8
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b082      	sub	sp, #8
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007f4a:	46c0      	nop			@ (mov r8, r8)
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	b002      	add	sp, #8
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f5a:	46c0      	nop			@ (mov r8, r8)
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	b002      	add	sp, #8
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2284      	movs	r2, #132	@ 0x84
 8007f70:	5c9b      	ldrb	r3, [r3, r2]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <HAL_UARTEx_DisableFifoMode+0x16>
 8007f76:	2302      	movs	r3, #2
 8007f78:	e027      	b.n	8007fca <HAL_UARTEx_DisableFifoMode+0x66>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2284      	movs	r2, #132	@ 0x84
 8007f7e:	2101      	movs	r1, #1
 8007f80:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2288      	movs	r2, #136	@ 0x88
 8007f86:	2124      	movs	r1, #36	@ 0x24
 8007f88:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	438a      	bics	r2, r1
 8007fa0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8007fd4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2288      	movs	r2, #136	@ 0x88
 8007fbc:	2120      	movs	r1, #32
 8007fbe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2284      	movs	r2, #132	@ 0x84
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	0018      	movs	r0, r3
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	b004      	add	sp, #16
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	46c0      	nop			@ (mov r8, r8)
 8007fd4:	dfffffff 	.word	0xdfffffff

08007fd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2284      	movs	r2, #132	@ 0x84
 8007fe6:	5c9b      	ldrb	r3, [r3, r2]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d101      	bne.n	8007ff0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fec:	2302      	movs	r3, #2
 8007fee:	e02e      	b.n	800804e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2284      	movs	r2, #132	@ 0x84
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2288      	movs	r2, #136	@ 0x88
 8007ffc:	2124      	movs	r1, #36	@ 0x24
 8007ffe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2101      	movs	r1, #1
 8008014:	438a      	bics	r2, r1
 8008016:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	08d9      	lsrs	r1, r3, #3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	430a      	orrs	r2, r1
 800802a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	0018      	movs	r0, r3
 8008030:	f000 f8bc 	bl	80081ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2288      	movs	r2, #136	@ 0x88
 8008040:	2120      	movs	r1, #32
 8008042:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2284      	movs	r2, #132	@ 0x84
 8008048:	2100      	movs	r1, #0
 800804a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	0018      	movs	r0, r3
 8008050:	46bd      	mov	sp, r7
 8008052:	b004      	add	sp, #16
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2284      	movs	r2, #132	@ 0x84
 8008066:	5c9b      	ldrb	r3, [r3, r2]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d101      	bne.n	8008070 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800806c:	2302      	movs	r3, #2
 800806e:	e02f      	b.n	80080d0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2284      	movs	r2, #132	@ 0x84
 8008074:	2101      	movs	r1, #1
 8008076:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2288      	movs	r2, #136	@ 0x88
 800807c:	2124      	movs	r1, #36	@ 0x24
 800807e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2101      	movs	r1, #1
 8008094:	438a      	bics	r2, r1
 8008096:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	4a0e      	ldr	r2, [pc, #56]	@ (80080d8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80080a0:	4013      	ands	r3, r2
 80080a2:	0019      	movs	r1, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	0018      	movs	r0, r3
 80080b2:	f000 f87b 	bl	80081ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2288      	movs	r2, #136	@ 0x88
 80080c2:	2120      	movs	r1, #32
 80080c4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2284      	movs	r2, #132	@ 0x84
 80080ca:	2100      	movs	r1, #0
 80080cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	0018      	movs	r0, r3
 80080d2:	46bd      	mov	sp, r7
 80080d4:	b004      	add	sp, #16
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	f1ffffff 	.word	0xf1ffffff

080080dc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080dc:	b5b0      	push	{r4, r5, r7, lr}
 80080de:	b08a      	sub	sp, #40	@ 0x28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	1dbb      	adds	r3, r7, #6
 80080e8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	228c      	movs	r2, #140	@ 0x8c
 80080ee:	589b      	ldr	r3, [r3, r2]
 80080f0:	2b20      	cmp	r3, #32
 80080f2:	d156      	bne.n	80081a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80080fa:	1dbb      	adds	r3, r7, #6
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e04e      	b.n	80081a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	2380      	movs	r3, #128	@ 0x80
 800810c:	015b      	lsls	r3, r3, #5
 800810e:	429a      	cmp	r2, r3
 8008110:	d109      	bne.n	8008126 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d105      	bne.n	8008126 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	2201      	movs	r2, #1
 800811e:	4013      	ands	r3, r2
 8008120:	d001      	beq.n	8008126 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e03e      	b.n	80081a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008132:	2527      	movs	r5, #39	@ 0x27
 8008134:	197c      	adds	r4, r7, r5
 8008136:	1dbb      	adds	r3, r7, #6
 8008138:	881a      	ldrh	r2, [r3, #0]
 800813a:	68b9      	ldr	r1, [r7, #8]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	0018      	movs	r0, r3
 8008140:	f7ff fc6c 	bl	8007a1c <UART_Start_Receive_DMA>
 8008144:	0003      	movs	r3, r0
 8008146:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008148:	197b      	adds	r3, r7, r5
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d124      	bne.n	800819a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008154:	2b01      	cmp	r3, #1
 8008156:	d11c      	bne.n	8008192 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2210      	movs	r2, #16
 800815e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008160:	f3ef 8310 	mrs	r3, PRIMASK
 8008164:	617b      	str	r3, [r7, #20]
  return(result);
 8008166:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008168:	623b      	str	r3, [r7, #32]
 800816a:	2301      	movs	r3, #1
 800816c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	f383 8810 	msr	PRIMASK, r3
}
 8008174:	46c0      	nop			@ (mov r8, r8)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2110      	movs	r1, #16
 8008182:	430a      	orrs	r2, r1
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	f383 8810 	msr	PRIMASK, r3
}
 8008190:	e003      	b.n	800819a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008192:	2327      	movs	r3, #39	@ 0x27
 8008194:	18fb      	adds	r3, r7, r3
 8008196:	2201      	movs	r2, #1
 8008198:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800819a:	2327      	movs	r3, #39	@ 0x27
 800819c:	18fb      	adds	r3, r7, r3
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	e000      	b.n	80081a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80081a2:	2302      	movs	r3, #2
  }
}
 80081a4:	0018      	movs	r0, r3
 80081a6:	46bd      	mov	sp, r7
 80081a8:	b00a      	add	sp, #40	@ 0x28
 80081aa:	bdb0      	pop	{r4, r5, r7, pc}

080081ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d108      	bne.n	80081ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	226a      	movs	r2, #106	@ 0x6a
 80081c0:	2101      	movs	r1, #1
 80081c2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2268      	movs	r2, #104	@ 0x68
 80081c8:	2101      	movs	r1, #1
 80081ca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081cc:	e043      	b.n	8008256 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081ce:	260f      	movs	r6, #15
 80081d0:	19bb      	adds	r3, r7, r6
 80081d2:	2208      	movs	r2, #8
 80081d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081d6:	200e      	movs	r0, #14
 80081d8:	183b      	adds	r3, r7, r0
 80081da:	2208      	movs	r2, #8
 80081dc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	0e5b      	lsrs	r3, r3, #25
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	240d      	movs	r4, #13
 80081ea:	193b      	adds	r3, r7, r4
 80081ec:	2107      	movs	r1, #7
 80081ee:	400a      	ands	r2, r1
 80081f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	0f5b      	lsrs	r3, r3, #29
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	250c      	movs	r5, #12
 80081fe:	197b      	adds	r3, r7, r5
 8008200:	2107      	movs	r1, #7
 8008202:	400a      	ands	r2, r1
 8008204:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008206:	183b      	adds	r3, r7, r0
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	197a      	adds	r2, r7, r5
 800820c:	7812      	ldrb	r2, [r2, #0]
 800820e:	4914      	ldr	r1, [pc, #80]	@ (8008260 <UARTEx_SetNbDataToProcess+0xb4>)
 8008210:	5c8a      	ldrb	r2, [r1, r2]
 8008212:	435a      	muls	r2, r3
 8008214:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008216:	197b      	adds	r3, r7, r5
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	4a12      	ldr	r2, [pc, #72]	@ (8008264 <UARTEx_SetNbDataToProcess+0xb8>)
 800821c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800821e:	0019      	movs	r1, r3
 8008220:	f7f8 f80a 	bl	8000238 <__divsi3>
 8008224:	0003      	movs	r3, r0
 8008226:	b299      	uxth	r1, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	226a      	movs	r2, #106	@ 0x6a
 800822c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800822e:	19bb      	adds	r3, r7, r6
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	193a      	adds	r2, r7, r4
 8008234:	7812      	ldrb	r2, [r2, #0]
 8008236:	490a      	ldr	r1, [pc, #40]	@ (8008260 <UARTEx_SetNbDataToProcess+0xb4>)
 8008238:	5c8a      	ldrb	r2, [r1, r2]
 800823a:	435a      	muls	r2, r3
 800823c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800823e:	193b      	adds	r3, r7, r4
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	4a08      	ldr	r2, [pc, #32]	@ (8008264 <UARTEx_SetNbDataToProcess+0xb8>)
 8008244:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008246:	0019      	movs	r1, r3
 8008248:	f7f7 fff6 	bl	8000238 <__divsi3>
 800824c:	0003      	movs	r3, r0
 800824e:	b299      	uxth	r1, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2268      	movs	r2, #104	@ 0x68
 8008254:	5299      	strh	r1, [r3, r2]
}
 8008256:	46c0      	nop			@ (mov r8, r8)
 8008258:	46bd      	mov	sp, r7
 800825a:	b005      	add	sp, #20
 800825c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800825e:	46c0      	nop			@ (mov r8, r8)
 8008260:	08009710 	.word	0x08009710
 8008264:	08009718 	.word	0x08009718

08008268 <_vsiprintf_r>:
 8008268:	b510      	push	{r4, lr}
 800826a:	2400      	movs	r4, #0
 800826c:	b09a      	sub	sp, #104	@ 0x68
 800826e:	9100      	str	r1, [sp, #0]
 8008270:	9104      	str	r1, [sp, #16]
 8008272:	4906      	ldr	r1, [pc, #24]	@ (800828c <_vsiprintf_r+0x24>)
 8008274:	9419      	str	r4, [sp, #100]	@ 0x64
 8008276:	9105      	str	r1, [sp, #20]
 8008278:	9102      	str	r1, [sp, #8]
 800827a:	4905      	ldr	r1, [pc, #20]	@ (8008290 <_vsiprintf_r+0x28>)
 800827c:	9103      	str	r1, [sp, #12]
 800827e:	4669      	mov	r1, sp
 8008280:	f000 f9ae 	bl	80085e0 <_svfiprintf_r>
 8008284:	9b00      	ldr	r3, [sp, #0]
 8008286:	701c      	strb	r4, [r3, #0]
 8008288:	b01a      	add	sp, #104	@ 0x68
 800828a:	bd10      	pop	{r4, pc}
 800828c:	7fffffff 	.word	0x7fffffff
 8008290:	ffff0208 	.word	0xffff0208

08008294 <vsiprintf>:
 8008294:	b510      	push	{r4, lr}
 8008296:	4c04      	ldr	r4, [pc, #16]	@ (80082a8 <vsiprintf+0x14>)
 8008298:	0013      	movs	r3, r2
 800829a:	000a      	movs	r2, r1
 800829c:	0001      	movs	r1, r0
 800829e:	6820      	ldr	r0, [r4, #0]
 80082a0:	f7ff ffe2 	bl	8008268 <_vsiprintf_r>
 80082a4:	bd10      	pop	{r4, pc}
 80082a6:	46c0      	nop			@ (mov r8, r8)
 80082a8:	20000020 	.word	0x20000020

080082ac <memset>:
 80082ac:	0003      	movs	r3, r0
 80082ae:	1882      	adds	r2, r0, r2
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d100      	bne.n	80082b6 <memset+0xa>
 80082b4:	4770      	bx	lr
 80082b6:	7019      	strb	r1, [r3, #0]
 80082b8:	3301      	adds	r3, #1
 80082ba:	e7f9      	b.n	80082b0 <memset+0x4>

080082bc <__errno>:
 80082bc:	4b01      	ldr	r3, [pc, #4]	@ (80082c4 <__errno+0x8>)
 80082be:	6818      	ldr	r0, [r3, #0]
 80082c0:	4770      	bx	lr
 80082c2:	46c0      	nop			@ (mov r8, r8)
 80082c4:	20000020 	.word	0x20000020

080082c8 <__libc_init_array>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	2600      	movs	r6, #0
 80082cc:	4c0c      	ldr	r4, [pc, #48]	@ (8008300 <__libc_init_array+0x38>)
 80082ce:	4d0d      	ldr	r5, [pc, #52]	@ (8008304 <__libc_init_array+0x3c>)
 80082d0:	1b64      	subs	r4, r4, r5
 80082d2:	10a4      	asrs	r4, r4, #2
 80082d4:	42a6      	cmp	r6, r4
 80082d6:	d109      	bne.n	80082ec <__libc_init_array+0x24>
 80082d8:	2600      	movs	r6, #0
 80082da:	f000 fc63 	bl	8008ba4 <_init>
 80082de:	4c0a      	ldr	r4, [pc, #40]	@ (8008308 <__libc_init_array+0x40>)
 80082e0:	4d0a      	ldr	r5, [pc, #40]	@ (800830c <__libc_init_array+0x44>)
 80082e2:	1b64      	subs	r4, r4, r5
 80082e4:	10a4      	asrs	r4, r4, #2
 80082e6:	42a6      	cmp	r6, r4
 80082e8:	d105      	bne.n	80082f6 <__libc_init_array+0x2e>
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	00b3      	lsls	r3, r6, #2
 80082ee:	58eb      	ldr	r3, [r5, r3]
 80082f0:	4798      	blx	r3
 80082f2:	3601      	adds	r6, #1
 80082f4:	e7ee      	b.n	80082d4 <__libc_init_array+0xc>
 80082f6:	00b3      	lsls	r3, r6, #2
 80082f8:	58eb      	ldr	r3, [r5, r3]
 80082fa:	4798      	blx	r3
 80082fc:	3601      	adds	r6, #1
 80082fe:	e7f2      	b.n	80082e6 <__libc_init_array+0x1e>
 8008300:	08009754 	.word	0x08009754
 8008304:	08009754 	.word	0x08009754
 8008308:	08009758 	.word	0x08009758
 800830c:	08009754 	.word	0x08009754

08008310 <__retarget_lock_acquire_recursive>:
 8008310:	4770      	bx	lr

08008312 <__retarget_lock_release_recursive>:
 8008312:	4770      	bx	lr

08008314 <memcpy>:
 8008314:	2300      	movs	r3, #0
 8008316:	b510      	push	{r4, lr}
 8008318:	429a      	cmp	r2, r3
 800831a:	d100      	bne.n	800831e <memcpy+0xa>
 800831c:	bd10      	pop	{r4, pc}
 800831e:	5ccc      	ldrb	r4, [r1, r3]
 8008320:	54c4      	strb	r4, [r0, r3]
 8008322:	3301      	adds	r3, #1
 8008324:	e7f8      	b.n	8008318 <memcpy+0x4>
	...

08008328 <_free_r>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	0005      	movs	r5, r0
 800832c:	1e0c      	subs	r4, r1, #0
 800832e:	d010      	beq.n	8008352 <_free_r+0x2a>
 8008330:	3c04      	subs	r4, #4
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	da00      	bge.n	800833a <_free_r+0x12>
 8008338:	18e4      	adds	r4, r4, r3
 800833a:	0028      	movs	r0, r5
 800833c:	f000 f8e0 	bl	8008500 <__malloc_lock>
 8008340:	4a1d      	ldr	r2, [pc, #116]	@ (80083b8 <_free_r+0x90>)
 8008342:	6813      	ldr	r3, [r2, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d105      	bne.n	8008354 <_free_r+0x2c>
 8008348:	6063      	str	r3, [r4, #4]
 800834a:	6014      	str	r4, [r2, #0]
 800834c:	0028      	movs	r0, r5
 800834e:	f000 f8df 	bl	8008510 <__malloc_unlock>
 8008352:	bd70      	pop	{r4, r5, r6, pc}
 8008354:	42a3      	cmp	r3, r4
 8008356:	d908      	bls.n	800836a <_free_r+0x42>
 8008358:	6820      	ldr	r0, [r4, #0]
 800835a:	1821      	adds	r1, r4, r0
 800835c:	428b      	cmp	r3, r1
 800835e:	d1f3      	bne.n	8008348 <_free_r+0x20>
 8008360:	6819      	ldr	r1, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	1809      	adds	r1, r1, r0
 8008366:	6021      	str	r1, [r4, #0]
 8008368:	e7ee      	b.n	8008348 <_free_r+0x20>
 800836a:	001a      	movs	r2, r3
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <_free_r+0x4e>
 8008372:	42a3      	cmp	r3, r4
 8008374:	d9f9      	bls.n	800836a <_free_r+0x42>
 8008376:	6811      	ldr	r1, [r2, #0]
 8008378:	1850      	adds	r0, r2, r1
 800837a:	42a0      	cmp	r0, r4
 800837c:	d10b      	bne.n	8008396 <_free_r+0x6e>
 800837e:	6820      	ldr	r0, [r4, #0]
 8008380:	1809      	adds	r1, r1, r0
 8008382:	1850      	adds	r0, r2, r1
 8008384:	6011      	str	r1, [r2, #0]
 8008386:	4283      	cmp	r3, r0
 8008388:	d1e0      	bne.n	800834c <_free_r+0x24>
 800838a:	6818      	ldr	r0, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	1841      	adds	r1, r0, r1
 8008390:	6011      	str	r1, [r2, #0]
 8008392:	6053      	str	r3, [r2, #4]
 8008394:	e7da      	b.n	800834c <_free_r+0x24>
 8008396:	42a0      	cmp	r0, r4
 8008398:	d902      	bls.n	80083a0 <_free_r+0x78>
 800839a:	230c      	movs	r3, #12
 800839c:	602b      	str	r3, [r5, #0]
 800839e:	e7d5      	b.n	800834c <_free_r+0x24>
 80083a0:	6820      	ldr	r0, [r4, #0]
 80083a2:	1821      	adds	r1, r4, r0
 80083a4:	428b      	cmp	r3, r1
 80083a6:	d103      	bne.n	80083b0 <_free_r+0x88>
 80083a8:	6819      	ldr	r1, [r3, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	1809      	adds	r1, r1, r0
 80083ae:	6021      	str	r1, [r4, #0]
 80083b0:	6063      	str	r3, [r4, #4]
 80083b2:	6054      	str	r4, [r2, #4]
 80083b4:	e7ca      	b.n	800834c <_free_r+0x24>
 80083b6:	46c0      	nop			@ (mov r8, r8)
 80083b8:	200012b8 	.word	0x200012b8

080083bc <sbrk_aligned>:
 80083bc:	b570      	push	{r4, r5, r6, lr}
 80083be:	4e0f      	ldr	r6, [pc, #60]	@ (80083fc <sbrk_aligned+0x40>)
 80083c0:	000d      	movs	r5, r1
 80083c2:	6831      	ldr	r1, [r6, #0]
 80083c4:	0004      	movs	r4, r0
 80083c6:	2900      	cmp	r1, #0
 80083c8:	d102      	bne.n	80083d0 <sbrk_aligned+0x14>
 80083ca:	f000 fb95 	bl	8008af8 <_sbrk_r>
 80083ce:	6030      	str	r0, [r6, #0]
 80083d0:	0029      	movs	r1, r5
 80083d2:	0020      	movs	r0, r4
 80083d4:	f000 fb90 	bl	8008af8 <_sbrk_r>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d103      	bne.n	80083e4 <sbrk_aligned+0x28>
 80083dc:	2501      	movs	r5, #1
 80083de:	426d      	negs	r5, r5
 80083e0:	0028      	movs	r0, r5
 80083e2:	bd70      	pop	{r4, r5, r6, pc}
 80083e4:	2303      	movs	r3, #3
 80083e6:	1cc5      	adds	r5, r0, #3
 80083e8:	439d      	bics	r5, r3
 80083ea:	42a8      	cmp	r0, r5
 80083ec:	d0f8      	beq.n	80083e0 <sbrk_aligned+0x24>
 80083ee:	1a29      	subs	r1, r5, r0
 80083f0:	0020      	movs	r0, r4
 80083f2:	f000 fb81 	bl	8008af8 <_sbrk_r>
 80083f6:	3001      	adds	r0, #1
 80083f8:	d1f2      	bne.n	80083e0 <sbrk_aligned+0x24>
 80083fa:	e7ef      	b.n	80083dc <sbrk_aligned+0x20>
 80083fc:	200012b4 	.word	0x200012b4

08008400 <_malloc_r>:
 8008400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008402:	2203      	movs	r2, #3
 8008404:	1ccb      	adds	r3, r1, #3
 8008406:	4393      	bics	r3, r2
 8008408:	3308      	adds	r3, #8
 800840a:	0005      	movs	r5, r0
 800840c:	001f      	movs	r7, r3
 800840e:	2b0c      	cmp	r3, #12
 8008410:	d234      	bcs.n	800847c <_malloc_r+0x7c>
 8008412:	270c      	movs	r7, #12
 8008414:	42b9      	cmp	r1, r7
 8008416:	d833      	bhi.n	8008480 <_malloc_r+0x80>
 8008418:	0028      	movs	r0, r5
 800841a:	f000 f871 	bl	8008500 <__malloc_lock>
 800841e:	4e37      	ldr	r6, [pc, #220]	@ (80084fc <_malloc_r+0xfc>)
 8008420:	6833      	ldr	r3, [r6, #0]
 8008422:	001c      	movs	r4, r3
 8008424:	2c00      	cmp	r4, #0
 8008426:	d12f      	bne.n	8008488 <_malloc_r+0x88>
 8008428:	0039      	movs	r1, r7
 800842a:	0028      	movs	r0, r5
 800842c:	f7ff ffc6 	bl	80083bc <sbrk_aligned>
 8008430:	0004      	movs	r4, r0
 8008432:	1c43      	adds	r3, r0, #1
 8008434:	d15f      	bne.n	80084f6 <_malloc_r+0xf6>
 8008436:	6834      	ldr	r4, [r6, #0]
 8008438:	9400      	str	r4, [sp, #0]
 800843a:	9b00      	ldr	r3, [sp, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d14a      	bne.n	80084d6 <_malloc_r+0xd6>
 8008440:	2c00      	cmp	r4, #0
 8008442:	d052      	beq.n	80084ea <_malloc_r+0xea>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	0028      	movs	r0, r5
 8008448:	18e3      	adds	r3, r4, r3
 800844a:	9900      	ldr	r1, [sp, #0]
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	f000 fb53 	bl	8008af8 <_sbrk_r>
 8008452:	9b01      	ldr	r3, [sp, #4]
 8008454:	4283      	cmp	r3, r0
 8008456:	d148      	bne.n	80084ea <_malloc_r+0xea>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	0028      	movs	r0, r5
 800845c:	1aff      	subs	r7, r7, r3
 800845e:	0039      	movs	r1, r7
 8008460:	f7ff ffac 	bl	80083bc <sbrk_aligned>
 8008464:	3001      	adds	r0, #1
 8008466:	d040      	beq.n	80084ea <_malloc_r+0xea>
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	19db      	adds	r3, r3, r7
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	6833      	ldr	r3, [r6, #0]
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	2a00      	cmp	r2, #0
 8008474:	d133      	bne.n	80084de <_malloc_r+0xde>
 8008476:	9b00      	ldr	r3, [sp, #0]
 8008478:	6033      	str	r3, [r6, #0]
 800847a:	e019      	b.n	80084b0 <_malloc_r+0xb0>
 800847c:	2b00      	cmp	r3, #0
 800847e:	dac9      	bge.n	8008414 <_malloc_r+0x14>
 8008480:	230c      	movs	r3, #12
 8008482:	602b      	str	r3, [r5, #0]
 8008484:	2000      	movs	r0, #0
 8008486:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008488:	6821      	ldr	r1, [r4, #0]
 800848a:	1bc9      	subs	r1, r1, r7
 800848c:	d420      	bmi.n	80084d0 <_malloc_r+0xd0>
 800848e:	290b      	cmp	r1, #11
 8008490:	d90a      	bls.n	80084a8 <_malloc_r+0xa8>
 8008492:	19e2      	adds	r2, r4, r7
 8008494:	6027      	str	r7, [r4, #0]
 8008496:	42a3      	cmp	r3, r4
 8008498:	d104      	bne.n	80084a4 <_malloc_r+0xa4>
 800849a:	6032      	str	r2, [r6, #0]
 800849c:	6863      	ldr	r3, [r4, #4]
 800849e:	6011      	str	r1, [r2, #0]
 80084a0:	6053      	str	r3, [r2, #4]
 80084a2:	e005      	b.n	80084b0 <_malloc_r+0xb0>
 80084a4:	605a      	str	r2, [r3, #4]
 80084a6:	e7f9      	b.n	800849c <_malloc_r+0x9c>
 80084a8:	6862      	ldr	r2, [r4, #4]
 80084aa:	42a3      	cmp	r3, r4
 80084ac:	d10e      	bne.n	80084cc <_malloc_r+0xcc>
 80084ae:	6032      	str	r2, [r6, #0]
 80084b0:	0028      	movs	r0, r5
 80084b2:	f000 f82d 	bl	8008510 <__malloc_unlock>
 80084b6:	0020      	movs	r0, r4
 80084b8:	2207      	movs	r2, #7
 80084ba:	300b      	adds	r0, #11
 80084bc:	1d23      	adds	r3, r4, #4
 80084be:	4390      	bics	r0, r2
 80084c0:	1ac2      	subs	r2, r0, r3
 80084c2:	4298      	cmp	r0, r3
 80084c4:	d0df      	beq.n	8008486 <_malloc_r+0x86>
 80084c6:	1a1b      	subs	r3, r3, r0
 80084c8:	50a3      	str	r3, [r4, r2]
 80084ca:	e7dc      	b.n	8008486 <_malloc_r+0x86>
 80084cc:	605a      	str	r2, [r3, #4]
 80084ce:	e7ef      	b.n	80084b0 <_malloc_r+0xb0>
 80084d0:	0023      	movs	r3, r4
 80084d2:	6864      	ldr	r4, [r4, #4]
 80084d4:	e7a6      	b.n	8008424 <_malloc_r+0x24>
 80084d6:	9c00      	ldr	r4, [sp, #0]
 80084d8:	6863      	ldr	r3, [r4, #4]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	e7ad      	b.n	800843a <_malloc_r+0x3a>
 80084de:	001a      	movs	r2, r3
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	42a3      	cmp	r3, r4
 80084e4:	d1fb      	bne.n	80084de <_malloc_r+0xde>
 80084e6:	2300      	movs	r3, #0
 80084e8:	e7da      	b.n	80084a0 <_malloc_r+0xa0>
 80084ea:	230c      	movs	r3, #12
 80084ec:	0028      	movs	r0, r5
 80084ee:	602b      	str	r3, [r5, #0]
 80084f0:	f000 f80e 	bl	8008510 <__malloc_unlock>
 80084f4:	e7c6      	b.n	8008484 <_malloc_r+0x84>
 80084f6:	6007      	str	r7, [r0, #0]
 80084f8:	e7da      	b.n	80084b0 <_malloc_r+0xb0>
 80084fa:	46c0      	nop			@ (mov r8, r8)
 80084fc:	200012b8 	.word	0x200012b8

08008500 <__malloc_lock>:
 8008500:	b510      	push	{r4, lr}
 8008502:	4802      	ldr	r0, [pc, #8]	@ (800850c <__malloc_lock+0xc>)
 8008504:	f7ff ff04 	bl	8008310 <__retarget_lock_acquire_recursive>
 8008508:	bd10      	pop	{r4, pc}
 800850a:	46c0      	nop			@ (mov r8, r8)
 800850c:	200012b0 	.word	0x200012b0

08008510 <__malloc_unlock>:
 8008510:	b510      	push	{r4, lr}
 8008512:	4802      	ldr	r0, [pc, #8]	@ (800851c <__malloc_unlock+0xc>)
 8008514:	f7ff fefd 	bl	8008312 <__retarget_lock_release_recursive>
 8008518:	bd10      	pop	{r4, pc}
 800851a:	46c0      	nop			@ (mov r8, r8)
 800851c:	200012b0 	.word	0x200012b0

08008520 <__ssputs_r>:
 8008520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008522:	688e      	ldr	r6, [r1, #8]
 8008524:	b085      	sub	sp, #20
 8008526:	001f      	movs	r7, r3
 8008528:	000c      	movs	r4, r1
 800852a:	680b      	ldr	r3, [r1, #0]
 800852c:	9002      	str	r0, [sp, #8]
 800852e:	9203      	str	r2, [sp, #12]
 8008530:	42be      	cmp	r6, r7
 8008532:	d830      	bhi.n	8008596 <__ssputs_r+0x76>
 8008534:	210c      	movs	r1, #12
 8008536:	5e62      	ldrsh	r2, [r4, r1]
 8008538:	2190      	movs	r1, #144	@ 0x90
 800853a:	00c9      	lsls	r1, r1, #3
 800853c:	420a      	tst	r2, r1
 800853e:	d028      	beq.n	8008592 <__ssputs_r+0x72>
 8008540:	2003      	movs	r0, #3
 8008542:	6921      	ldr	r1, [r4, #16]
 8008544:	1a5b      	subs	r3, r3, r1
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	6963      	ldr	r3, [r4, #20]
 800854a:	4343      	muls	r3, r0
 800854c:	9801      	ldr	r0, [sp, #4]
 800854e:	0fdd      	lsrs	r5, r3, #31
 8008550:	18ed      	adds	r5, r5, r3
 8008552:	1c7b      	adds	r3, r7, #1
 8008554:	181b      	adds	r3, r3, r0
 8008556:	106d      	asrs	r5, r5, #1
 8008558:	42ab      	cmp	r3, r5
 800855a:	d900      	bls.n	800855e <__ssputs_r+0x3e>
 800855c:	001d      	movs	r5, r3
 800855e:	0552      	lsls	r2, r2, #21
 8008560:	d528      	bpl.n	80085b4 <__ssputs_r+0x94>
 8008562:	0029      	movs	r1, r5
 8008564:	9802      	ldr	r0, [sp, #8]
 8008566:	f7ff ff4b 	bl	8008400 <_malloc_r>
 800856a:	1e06      	subs	r6, r0, #0
 800856c:	d02c      	beq.n	80085c8 <__ssputs_r+0xa8>
 800856e:	9a01      	ldr	r2, [sp, #4]
 8008570:	6921      	ldr	r1, [r4, #16]
 8008572:	f7ff fecf 	bl	8008314 <memcpy>
 8008576:	89a2      	ldrh	r2, [r4, #12]
 8008578:	4b18      	ldr	r3, [pc, #96]	@ (80085dc <__ssputs_r+0xbc>)
 800857a:	401a      	ands	r2, r3
 800857c:	2380      	movs	r3, #128	@ 0x80
 800857e:	4313      	orrs	r3, r2
 8008580:	81a3      	strh	r3, [r4, #12]
 8008582:	9b01      	ldr	r3, [sp, #4]
 8008584:	6126      	str	r6, [r4, #16]
 8008586:	18f6      	adds	r6, r6, r3
 8008588:	6026      	str	r6, [r4, #0]
 800858a:	003e      	movs	r6, r7
 800858c:	6165      	str	r5, [r4, #20]
 800858e:	1aed      	subs	r5, r5, r3
 8008590:	60a5      	str	r5, [r4, #8]
 8008592:	42be      	cmp	r6, r7
 8008594:	d900      	bls.n	8008598 <__ssputs_r+0x78>
 8008596:	003e      	movs	r6, r7
 8008598:	0032      	movs	r2, r6
 800859a:	9903      	ldr	r1, [sp, #12]
 800859c:	6820      	ldr	r0, [r4, #0]
 800859e:	f000 fa99 	bl	8008ad4 <memmove>
 80085a2:	2000      	movs	r0, #0
 80085a4:	68a3      	ldr	r3, [r4, #8]
 80085a6:	1b9b      	subs	r3, r3, r6
 80085a8:	60a3      	str	r3, [r4, #8]
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	199b      	adds	r3, r3, r6
 80085ae:	6023      	str	r3, [r4, #0]
 80085b0:	b005      	add	sp, #20
 80085b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085b4:	002a      	movs	r2, r5
 80085b6:	9802      	ldr	r0, [sp, #8]
 80085b8:	f000 fabb 	bl	8008b32 <_realloc_r>
 80085bc:	1e06      	subs	r6, r0, #0
 80085be:	d1e0      	bne.n	8008582 <__ssputs_r+0x62>
 80085c0:	6921      	ldr	r1, [r4, #16]
 80085c2:	9802      	ldr	r0, [sp, #8]
 80085c4:	f7ff feb0 	bl	8008328 <_free_r>
 80085c8:	230c      	movs	r3, #12
 80085ca:	2001      	movs	r0, #1
 80085cc:	9a02      	ldr	r2, [sp, #8]
 80085ce:	4240      	negs	r0, r0
 80085d0:	6013      	str	r3, [r2, #0]
 80085d2:	89a2      	ldrh	r2, [r4, #12]
 80085d4:	3334      	adds	r3, #52	@ 0x34
 80085d6:	4313      	orrs	r3, r2
 80085d8:	81a3      	strh	r3, [r4, #12]
 80085da:	e7e9      	b.n	80085b0 <__ssputs_r+0x90>
 80085dc:	fffffb7f 	.word	0xfffffb7f

080085e0 <_svfiprintf_r>:
 80085e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085e2:	b0a1      	sub	sp, #132	@ 0x84
 80085e4:	9003      	str	r0, [sp, #12]
 80085e6:	001d      	movs	r5, r3
 80085e8:	898b      	ldrh	r3, [r1, #12]
 80085ea:	000f      	movs	r7, r1
 80085ec:	0016      	movs	r6, r2
 80085ee:	061b      	lsls	r3, r3, #24
 80085f0:	d511      	bpl.n	8008616 <_svfiprintf_r+0x36>
 80085f2:	690b      	ldr	r3, [r1, #16]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10e      	bne.n	8008616 <_svfiprintf_r+0x36>
 80085f8:	2140      	movs	r1, #64	@ 0x40
 80085fa:	f7ff ff01 	bl	8008400 <_malloc_r>
 80085fe:	6038      	str	r0, [r7, #0]
 8008600:	6138      	str	r0, [r7, #16]
 8008602:	2800      	cmp	r0, #0
 8008604:	d105      	bne.n	8008612 <_svfiprintf_r+0x32>
 8008606:	230c      	movs	r3, #12
 8008608:	9a03      	ldr	r2, [sp, #12]
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	2001      	movs	r0, #1
 800860e:	4240      	negs	r0, r0
 8008610:	e0cf      	b.n	80087b2 <_svfiprintf_r+0x1d2>
 8008612:	2340      	movs	r3, #64	@ 0x40
 8008614:	617b      	str	r3, [r7, #20]
 8008616:	2300      	movs	r3, #0
 8008618:	ac08      	add	r4, sp, #32
 800861a:	6163      	str	r3, [r4, #20]
 800861c:	3320      	adds	r3, #32
 800861e:	7663      	strb	r3, [r4, #25]
 8008620:	3310      	adds	r3, #16
 8008622:	76a3      	strb	r3, [r4, #26]
 8008624:	9507      	str	r5, [sp, #28]
 8008626:	0035      	movs	r5, r6
 8008628:	782b      	ldrb	r3, [r5, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <_svfiprintf_r+0x52>
 800862e:	2b25      	cmp	r3, #37	@ 0x25
 8008630:	d148      	bne.n	80086c4 <_svfiprintf_r+0xe4>
 8008632:	1bab      	subs	r3, r5, r6
 8008634:	9305      	str	r3, [sp, #20]
 8008636:	42b5      	cmp	r5, r6
 8008638:	d00b      	beq.n	8008652 <_svfiprintf_r+0x72>
 800863a:	0032      	movs	r2, r6
 800863c:	0039      	movs	r1, r7
 800863e:	9803      	ldr	r0, [sp, #12]
 8008640:	f7ff ff6e 	bl	8008520 <__ssputs_r>
 8008644:	3001      	adds	r0, #1
 8008646:	d100      	bne.n	800864a <_svfiprintf_r+0x6a>
 8008648:	e0ae      	b.n	80087a8 <_svfiprintf_r+0x1c8>
 800864a:	6963      	ldr	r3, [r4, #20]
 800864c:	9a05      	ldr	r2, [sp, #20]
 800864e:	189b      	adds	r3, r3, r2
 8008650:	6163      	str	r3, [r4, #20]
 8008652:	782b      	ldrb	r3, [r5, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d100      	bne.n	800865a <_svfiprintf_r+0x7a>
 8008658:	e0a6      	b.n	80087a8 <_svfiprintf_r+0x1c8>
 800865a:	2201      	movs	r2, #1
 800865c:	2300      	movs	r3, #0
 800865e:	4252      	negs	r2, r2
 8008660:	6062      	str	r2, [r4, #4]
 8008662:	a904      	add	r1, sp, #16
 8008664:	3254      	adds	r2, #84	@ 0x54
 8008666:	1852      	adds	r2, r2, r1
 8008668:	1c6e      	adds	r6, r5, #1
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	60e3      	str	r3, [r4, #12]
 800866e:	60a3      	str	r3, [r4, #8]
 8008670:	7013      	strb	r3, [r2, #0]
 8008672:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008674:	4b54      	ldr	r3, [pc, #336]	@ (80087c8 <_svfiprintf_r+0x1e8>)
 8008676:	2205      	movs	r2, #5
 8008678:	0018      	movs	r0, r3
 800867a:	7831      	ldrb	r1, [r6, #0]
 800867c:	9305      	str	r3, [sp, #20]
 800867e:	f000 fa4d 	bl	8008b1c <memchr>
 8008682:	1c75      	adds	r5, r6, #1
 8008684:	2800      	cmp	r0, #0
 8008686:	d11f      	bne.n	80086c8 <_svfiprintf_r+0xe8>
 8008688:	6822      	ldr	r2, [r4, #0]
 800868a:	06d3      	lsls	r3, r2, #27
 800868c:	d504      	bpl.n	8008698 <_svfiprintf_r+0xb8>
 800868e:	2353      	movs	r3, #83	@ 0x53
 8008690:	a904      	add	r1, sp, #16
 8008692:	185b      	adds	r3, r3, r1
 8008694:	2120      	movs	r1, #32
 8008696:	7019      	strb	r1, [r3, #0]
 8008698:	0713      	lsls	r3, r2, #28
 800869a:	d504      	bpl.n	80086a6 <_svfiprintf_r+0xc6>
 800869c:	2353      	movs	r3, #83	@ 0x53
 800869e:	a904      	add	r1, sp, #16
 80086a0:	185b      	adds	r3, r3, r1
 80086a2:	212b      	movs	r1, #43	@ 0x2b
 80086a4:	7019      	strb	r1, [r3, #0]
 80086a6:	7833      	ldrb	r3, [r6, #0]
 80086a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80086aa:	d016      	beq.n	80086da <_svfiprintf_r+0xfa>
 80086ac:	0035      	movs	r5, r6
 80086ae:	2100      	movs	r1, #0
 80086b0:	200a      	movs	r0, #10
 80086b2:	68e3      	ldr	r3, [r4, #12]
 80086b4:	782a      	ldrb	r2, [r5, #0]
 80086b6:	1c6e      	adds	r6, r5, #1
 80086b8:	3a30      	subs	r2, #48	@ 0x30
 80086ba:	2a09      	cmp	r2, #9
 80086bc:	d950      	bls.n	8008760 <_svfiprintf_r+0x180>
 80086be:	2900      	cmp	r1, #0
 80086c0:	d111      	bne.n	80086e6 <_svfiprintf_r+0x106>
 80086c2:	e017      	b.n	80086f4 <_svfiprintf_r+0x114>
 80086c4:	3501      	adds	r5, #1
 80086c6:	e7af      	b.n	8008628 <_svfiprintf_r+0x48>
 80086c8:	9b05      	ldr	r3, [sp, #20]
 80086ca:	6822      	ldr	r2, [r4, #0]
 80086cc:	1ac0      	subs	r0, r0, r3
 80086ce:	2301      	movs	r3, #1
 80086d0:	4083      	lsls	r3, r0
 80086d2:	4313      	orrs	r3, r2
 80086d4:	002e      	movs	r6, r5
 80086d6:	6023      	str	r3, [r4, #0]
 80086d8:	e7cc      	b.n	8008674 <_svfiprintf_r+0x94>
 80086da:	9b07      	ldr	r3, [sp, #28]
 80086dc:	1d19      	adds	r1, r3, #4
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	9107      	str	r1, [sp, #28]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	db01      	blt.n	80086ea <_svfiprintf_r+0x10a>
 80086e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086e8:	e004      	b.n	80086f4 <_svfiprintf_r+0x114>
 80086ea:	425b      	negs	r3, r3
 80086ec:	60e3      	str	r3, [r4, #12]
 80086ee:	2302      	movs	r3, #2
 80086f0:	4313      	orrs	r3, r2
 80086f2:	6023      	str	r3, [r4, #0]
 80086f4:	782b      	ldrb	r3, [r5, #0]
 80086f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80086f8:	d10c      	bne.n	8008714 <_svfiprintf_r+0x134>
 80086fa:	786b      	ldrb	r3, [r5, #1]
 80086fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80086fe:	d134      	bne.n	800876a <_svfiprintf_r+0x18a>
 8008700:	9b07      	ldr	r3, [sp, #28]
 8008702:	3502      	adds	r5, #2
 8008704:	1d1a      	adds	r2, r3, #4
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	9207      	str	r2, [sp, #28]
 800870a:	2b00      	cmp	r3, #0
 800870c:	da01      	bge.n	8008712 <_svfiprintf_r+0x132>
 800870e:	2301      	movs	r3, #1
 8008710:	425b      	negs	r3, r3
 8008712:	9309      	str	r3, [sp, #36]	@ 0x24
 8008714:	4e2d      	ldr	r6, [pc, #180]	@ (80087cc <_svfiprintf_r+0x1ec>)
 8008716:	2203      	movs	r2, #3
 8008718:	0030      	movs	r0, r6
 800871a:	7829      	ldrb	r1, [r5, #0]
 800871c:	f000 f9fe 	bl	8008b1c <memchr>
 8008720:	2800      	cmp	r0, #0
 8008722:	d006      	beq.n	8008732 <_svfiprintf_r+0x152>
 8008724:	2340      	movs	r3, #64	@ 0x40
 8008726:	1b80      	subs	r0, r0, r6
 8008728:	4083      	lsls	r3, r0
 800872a:	6822      	ldr	r2, [r4, #0]
 800872c:	3501      	adds	r5, #1
 800872e:	4313      	orrs	r3, r2
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	7829      	ldrb	r1, [r5, #0]
 8008734:	2206      	movs	r2, #6
 8008736:	4826      	ldr	r0, [pc, #152]	@ (80087d0 <_svfiprintf_r+0x1f0>)
 8008738:	1c6e      	adds	r6, r5, #1
 800873a:	7621      	strb	r1, [r4, #24]
 800873c:	f000 f9ee 	bl	8008b1c <memchr>
 8008740:	2800      	cmp	r0, #0
 8008742:	d038      	beq.n	80087b6 <_svfiprintf_r+0x1d6>
 8008744:	4b23      	ldr	r3, [pc, #140]	@ (80087d4 <_svfiprintf_r+0x1f4>)
 8008746:	2b00      	cmp	r3, #0
 8008748:	d122      	bne.n	8008790 <_svfiprintf_r+0x1b0>
 800874a:	2207      	movs	r2, #7
 800874c:	9b07      	ldr	r3, [sp, #28]
 800874e:	3307      	adds	r3, #7
 8008750:	4393      	bics	r3, r2
 8008752:	3308      	adds	r3, #8
 8008754:	9307      	str	r3, [sp, #28]
 8008756:	6963      	ldr	r3, [r4, #20]
 8008758:	9a04      	ldr	r2, [sp, #16]
 800875a:	189b      	adds	r3, r3, r2
 800875c:	6163      	str	r3, [r4, #20]
 800875e:	e762      	b.n	8008626 <_svfiprintf_r+0x46>
 8008760:	4343      	muls	r3, r0
 8008762:	0035      	movs	r5, r6
 8008764:	2101      	movs	r1, #1
 8008766:	189b      	adds	r3, r3, r2
 8008768:	e7a4      	b.n	80086b4 <_svfiprintf_r+0xd4>
 800876a:	2300      	movs	r3, #0
 800876c:	200a      	movs	r0, #10
 800876e:	0019      	movs	r1, r3
 8008770:	3501      	adds	r5, #1
 8008772:	6063      	str	r3, [r4, #4]
 8008774:	782a      	ldrb	r2, [r5, #0]
 8008776:	1c6e      	adds	r6, r5, #1
 8008778:	3a30      	subs	r2, #48	@ 0x30
 800877a:	2a09      	cmp	r2, #9
 800877c:	d903      	bls.n	8008786 <_svfiprintf_r+0x1a6>
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0c8      	beq.n	8008714 <_svfiprintf_r+0x134>
 8008782:	9109      	str	r1, [sp, #36]	@ 0x24
 8008784:	e7c6      	b.n	8008714 <_svfiprintf_r+0x134>
 8008786:	4341      	muls	r1, r0
 8008788:	0035      	movs	r5, r6
 800878a:	2301      	movs	r3, #1
 800878c:	1889      	adds	r1, r1, r2
 800878e:	e7f1      	b.n	8008774 <_svfiprintf_r+0x194>
 8008790:	aa07      	add	r2, sp, #28
 8008792:	9200      	str	r2, [sp, #0]
 8008794:	0021      	movs	r1, r4
 8008796:	003a      	movs	r2, r7
 8008798:	4b0f      	ldr	r3, [pc, #60]	@ (80087d8 <_svfiprintf_r+0x1f8>)
 800879a:	9803      	ldr	r0, [sp, #12]
 800879c:	e000      	b.n	80087a0 <_svfiprintf_r+0x1c0>
 800879e:	bf00      	nop
 80087a0:	9004      	str	r0, [sp, #16]
 80087a2:	9b04      	ldr	r3, [sp, #16]
 80087a4:	3301      	adds	r3, #1
 80087a6:	d1d6      	bne.n	8008756 <_svfiprintf_r+0x176>
 80087a8:	89bb      	ldrh	r3, [r7, #12]
 80087aa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80087ac:	065b      	lsls	r3, r3, #25
 80087ae:	d500      	bpl.n	80087b2 <_svfiprintf_r+0x1d2>
 80087b0:	e72c      	b.n	800860c <_svfiprintf_r+0x2c>
 80087b2:	b021      	add	sp, #132	@ 0x84
 80087b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b6:	aa07      	add	r2, sp, #28
 80087b8:	9200      	str	r2, [sp, #0]
 80087ba:	0021      	movs	r1, r4
 80087bc:	003a      	movs	r2, r7
 80087be:	4b06      	ldr	r3, [pc, #24]	@ (80087d8 <_svfiprintf_r+0x1f8>)
 80087c0:	9803      	ldr	r0, [sp, #12]
 80087c2:	f000 f87b 	bl	80088bc <_printf_i>
 80087c6:	e7eb      	b.n	80087a0 <_svfiprintf_r+0x1c0>
 80087c8:	08009720 	.word	0x08009720
 80087cc:	08009726 	.word	0x08009726
 80087d0:	0800972a 	.word	0x0800972a
 80087d4:	00000000 	.word	0x00000000
 80087d8:	08008521 	.word	0x08008521

080087dc <_printf_common>:
 80087dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087de:	0016      	movs	r6, r2
 80087e0:	9301      	str	r3, [sp, #4]
 80087e2:	688a      	ldr	r2, [r1, #8]
 80087e4:	690b      	ldr	r3, [r1, #16]
 80087e6:	000c      	movs	r4, r1
 80087e8:	9000      	str	r0, [sp, #0]
 80087ea:	4293      	cmp	r3, r2
 80087ec:	da00      	bge.n	80087f0 <_printf_common+0x14>
 80087ee:	0013      	movs	r3, r2
 80087f0:	0022      	movs	r2, r4
 80087f2:	6033      	str	r3, [r6, #0]
 80087f4:	3243      	adds	r2, #67	@ 0x43
 80087f6:	7812      	ldrb	r2, [r2, #0]
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	d001      	beq.n	8008800 <_printf_common+0x24>
 80087fc:	3301      	adds	r3, #1
 80087fe:	6033      	str	r3, [r6, #0]
 8008800:	6823      	ldr	r3, [r4, #0]
 8008802:	069b      	lsls	r3, r3, #26
 8008804:	d502      	bpl.n	800880c <_printf_common+0x30>
 8008806:	6833      	ldr	r3, [r6, #0]
 8008808:	3302      	adds	r3, #2
 800880a:	6033      	str	r3, [r6, #0]
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	2306      	movs	r3, #6
 8008810:	0015      	movs	r5, r2
 8008812:	401d      	ands	r5, r3
 8008814:	421a      	tst	r2, r3
 8008816:	d027      	beq.n	8008868 <_printf_common+0x8c>
 8008818:	0023      	movs	r3, r4
 800881a:	3343      	adds	r3, #67	@ 0x43
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	1e5a      	subs	r2, r3, #1
 8008820:	4193      	sbcs	r3, r2
 8008822:	6822      	ldr	r2, [r4, #0]
 8008824:	0692      	lsls	r2, r2, #26
 8008826:	d430      	bmi.n	800888a <_printf_common+0xae>
 8008828:	0022      	movs	r2, r4
 800882a:	9901      	ldr	r1, [sp, #4]
 800882c:	9800      	ldr	r0, [sp, #0]
 800882e:	9d08      	ldr	r5, [sp, #32]
 8008830:	3243      	adds	r2, #67	@ 0x43
 8008832:	47a8      	blx	r5
 8008834:	3001      	adds	r0, #1
 8008836:	d025      	beq.n	8008884 <_printf_common+0xa8>
 8008838:	2206      	movs	r2, #6
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	2500      	movs	r5, #0
 800883e:	4013      	ands	r3, r2
 8008840:	2b04      	cmp	r3, #4
 8008842:	d105      	bne.n	8008850 <_printf_common+0x74>
 8008844:	6833      	ldr	r3, [r6, #0]
 8008846:	68e5      	ldr	r5, [r4, #12]
 8008848:	1aed      	subs	r5, r5, r3
 800884a:	43eb      	mvns	r3, r5
 800884c:	17db      	asrs	r3, r3, #31
 800884e:	401d      	ands	r5, r3
 8008850:	68a3      	ldr	r3, [r4, #8]
 8008852:	6922      	ldr	r2, [r4, #16]
 8008854:	4293      	cmp	r3, r2
 8008856:	dd01      	ble.n	800885c <_printf_common+0x80>
 8008858:	1a9b      	subs	r3, r3, r2
 800885a:	18ed      	adds	r5, r5, r3
 800885c:	2600      	movs	r6, #0
 800885e:	42b5      	cmp	r5, r6
 8008860:	d120      	bne.n	80088a4 <_printf_common+0xc8>
 8008862:	2000      	movs	r0, #0
 8008864:	e010      	b.n	8008888 <_printf_common+0xac>
 8008866:	3501      	adds	r5, #1
 8008868:	68e3      	ldr	r3, [r4, #12]
 800886a:	6832      	ldr	r2, [r6, #0]
 800886c:	1a9b      	subs	r3, r3, r2
 800886e:	42ab      	cmp	r3, r5
 8008870:	ddd2      	ble.n	8008818 <_printf_common+0x3c>
 8008872:	0022      	movs	r2, r4
 8008874:	2301      	movs	r3, #1
 8008876:	9901      	ldr	r1, [sp, #4]
 8008878:	9800      	ldr	r0, [sp, #0]
 800887a:	9f08      	ldr	r7, [sp, #32]
 800887c:	3219      	adds	r2, #25
 800887e:	47b8      	blx	r7
 8008880:	3001      	adds	r0, #1
 8008882:	d1f0      	bne.n	8008866 <_printf_common+0x8a>
 8008884:	2001      	movs	r0, #1
 8008886:	4240      	negs	r0, r0
 8008888:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800888a:	2030      	movs	r0, #48	@ 0x30
 800888c:	18e1      	adds	r1, r4, r3
 800888e:	3143      	adds	r1, #67	@ 0x43
 8008890:	7008      	strb	r0, [r1, #0]
 8008892:	0021      	movs	r1, r4
 8008894:	1c5a      	adds	r2, r3, #1
 8008896:	3145      	adds	r1, #69	@ 0x45
 8008898:	7809      	ldrb	r1, [r1, #0]
 800889a:	18a2      	adds	r2, r4, r2
 800889c:	3243      	adds	r2, #67	@ 0x43
 800889e:	3302      	adds	r3, #2
 80088a0:	7011      	strb	r1, [r2, #0]
 80088a2:	e7c1      	b.n	8008828 <_printf_common+0x4c>
 80088a4:	0022      	movs	r2, r4
 80088a6:	2301      	movs	r3, #1
 80088a8:	9901      	ldr	r1, [sp, #4]
 80088aa:	9800      	ldr	r0, [sp, #0]
 80088ac:	9f08      	ldr	r7, [sp, #32]
 80088ae:	321a      	adds	r2, #26
 80088b0:	47b8      	blx	r7
 80088b2:	3001      	adds	r0, #1
 80088b4:	d0e6      	beq.n	8008884 <_printf_common+0xa8>
 80088b6:	3601      	adds	r6, #1
 80088b8:	e7d1      	b.n	800885e <_printf_common+0x82>
	...

080088bc <_printf_i>:
 80088bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088be:	b08b      	sub	sp, #44	@ 0x2c
 80088c0:	9206      	str	r2, [sp, #24]
 80088c2:	000a      	movs	r2, r1
 80088c4:	3243      	adds	r2, #67	@ 0x43
 80088c6:	9307      	str	r3, [sp, #28]
 80088c8:	9005      	str	r0, [sp, #20]
 80088ca:	9203      	str	r2, [sp, #12]
 80088cc:	7e0a      	ldrb	r2, [r1, #24]
 80088ce:	000c      	movs	r4, r1
 80088d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80088d2:	2a78      	cmp	r2, #120	@ 0x78
 80088d4:	d809      	bhi.n	80088ea <_printf_i+0x2e>
 80088d6:	2a62      	cmp	r2, #98	@ 0x62
 80088d8:	d80b      	bhi.n	80088f2 <_printf_i+0x36>
 80088da:	2a00      	cmp	r2, #0
 80088dc:	d100      	bne.n	80088e0 <_printf_i+0x24>
 80088de:	e0ba      	b.n	8008a56 <_printf_i+0x19a>
 80088e0:	497a      	ldr	r1, [pc, #488]	@ (8008acc <_printf_i+0x210>)
 80088e2:	9104      	str	r1, [sp, #16]
 80088e4:	2a58      	cmp	r2, #88	@ 0x58
 80088e6:	d100      	bne.n	80088ea <_printf_i+0x2e>
 80088e8:	e08e      	b.n	8008a08 <_printf_i+0x14c>
 80088ea:	0025      	movs	r5, r4
 80088ec:	3542      	adds	r5, #66	@ 0x42
 80088ee:	702a      	strb	r2, [r5, #0]
 80088f0:	e022      	b.n	8008938 <_printf_i+0x7c>
 80088f2:	0010      	movs	r0, r2
 80088f4:	3863      	subs	r0, #99	@ 0x63
 80088f6:	2815      	cmp	r0, #21
 80088f8:	d8f7      	bhi.n	80088ea <_printf_i+0x2e>
 80088fa:	f7f7 fc09 	bl	8000110 <__gnu_thumb1_case_shi>
 80088fe:	0016      	.short	0x0016
 8008900:	fff6001f 	.word	0xfff6001f
 8008904:	fff6fff6 	.word	0xfff6fff6
 8008908:	001ffff6 	.word	0x001ffff6
 800890c:	fff6fff6 	.word	0xfff6fff6
 8008910:	fff6fff6 	.word	0xfff6fff6
 8008914:	0036009f 	.word	0x0036009f
 8008918:	fff6007e 	.word	0xfff6007e
 800891c:	00b0fff6 	.word	0x00b0fff6
 8008920:	0036fff6 	.word	0x0036fff6
 8008924:	fff6fff6 	.word	0xfff6fff6
 8008928:	0082      	.short	0x0082
 800892a:	0025      	movs	r5, r4
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	3542      	adds	r5, #66	@ 0x42
 8008930:	1d11      	adds	r1, r2, #4
 8008932:	6019      	str	r1, [r3, #0]
 8008934:	6813      	ldr	r3, [r2, #0]
 8008936:	702b      	strb	r3, [r5, #0]
 8008938:	2301      	movs	r3, #1
 800893a:	e09e      	b.n	8008a7a <_printf_i+0x1be>
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	6809      	ldr	r1, [r1, #0]
 8008940:	1d02      	adds	r2, r0, #4
 8008942:	060d      	lsls	r5, r1, #24
 8008944:	d50b      	bpl.n	800895e <_printf_i+0xa2>
 8008946:	6806      	ldr	r6, [r0, #0]
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	2e00      	cmp	r6, #0
 800894c:	da03      	bge.n	8008956 <_printf_i+0x9a>
 800894e:	232d      	movs	r3, #45	@ 0x2d
 8008950:	9a03      	ldr	r2, [sp, #12]
 8008952:	4276      	negs	r6, r6
 8008954:	7013      	strb	r3, [r2, #0]
 8008956:	4b5d      	ldr	r3, [pc, #372]	@ (8008acc <_printf_i+0x210>)
 8008958:	270a      	movs	r7, #10
 800895a:	9304      	str	r3, [sp, #16]
 800895c:	e018      	b.n	8008990 <_printf_i+0xd4>
 800895e:	6806      	ldr	r6, [r0, #0]
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	0649      	lsls	r1, r1, #25
 8008964:	d5f1      	bpl.n	800894a <_printf_i+0x8e>
 8008966:	b236      	sxth	r6, r6
 8008968:	e7ef      	b.n	800894a <_printf_i+0x8e>
 800896a:	6808      	ldr	r0, [r1, #0]
 800896c:	6819      	ldr	r1, [r3, #0]
 800896e:	c940      	ldmia	r1!, {r6}
 8008970:	0605      	lsls	r5, r0, #24
 8008972:	d402      	bmi.n	800897a <_printf_i+0xbe>
 8008974:	0640      	lsls	r0, r0, #25
 8008976:	d500      	bpl.n	800897a <_printf_i+0xbe>
 8008978:	b2b6      	uxth	r6, r6
 800897a:	6019      	str	r1, [r3, #0]
 800897c:	4b53      	ldr	r3, [pc, #332]	@ (8008acc <_printf_i+0x210>)
 800897e:	270a      	movs	r7, #10
 8008980:	9304      	str	r3, [sp, #16]
 8008982:	2a6f      	cmp	r2, #111	@ 0x6f
 8008984:	d100      	bne.n	8008988 <_printf_i+0xcc>
 8008986:	3f02      	subs	r7, #2
 8008988:	0023      	movs	r3, r4
 800898a:	2200      	movs	r2, #0
 800898c:	3343      	adds	r3, #67	@ 0x43
 800898e:	701a      	strb	r2, [r3, #0]
 8008990:	6863      	ldr	r3, [r4, #4]
 8008992:	60a3      	str	r3, [r4, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	db06      	blt.n	80089a6 <_printf_i+0xea>
 8008998:	2104      	movs	r1, #4
 800899a:	6822      	ldr	r2, [r4, #0]
 800899c:	9d03      	ldr	r5, [sp, #12]
 800899e:	438a      	bics	r2, r1
 80089a0:	6022      	str	r2, [r4, #0]
 80089a2:	4333      	orrs	r3, r6
 80089a4:	d00c      	beq.n	80089c0 <_printf_i+0x104>
 80089a6:	9d03      	ldr	r5, [sp, #12]
 80089a8:	0030      	movs	r0, r6
 80089aa:	0039      	movs	r1, r7
 80089ac:	f7f7 fc40 	bl	8000230 <__aeabi_uidivmod>
 80089b0:	9b04      	ldr	r3, [sp, #16]
 80089b2:	3d01      	subs	r5, #1
 80089b4:	5c5b      	ldrb	r3, [r3, r1]
 80089b6:	702b      	strb	r3, [r5, #0]
 80089b8:	0033      	movs	r3, r6
 80089ba:	0006      	movs	r6, r0
 80089bc:	429f      	cmp	r7, r3
 80089be:	d9f3      	bls.n	80089a8 <_printf_i+0xec>
 80089c0:	2f08      	cmp	r7, #8
 80089c2:	d109      	bne.n	80089d8 <_printf_i+0x11c>
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	07db      	lsls	r3, r3, #31
 80089c8:	d506      	bpl.n	80089d8 <_printf_i+0x11c>
 80089ca:	6862      	ldr	r2, [r4, #4]
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	dc02      	bgt.n	80089d8 <_printf_i+0x11c>
 80089d2:	2330      	movs	r3, #48	@ 0x30
 80089d4:	3d01      	subs	r5, #1
 80089d6:	702b      	strb	r3, [r5, #0]
 80089d8:	9b03      	ldr	r3, [sp, #12]
 80089da:	1b5b      	subs	r3, r3, r5
 80089dc:	6123      	str	r3, [r4, #16]
 80089de:	9b07      	ldr	r3, [sp, #28]
 80089e0:	0021      	movs	r1, r4
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	9805      	ldr	r0, [sp, #20]
 80089e6:	9b06      	ldr	r3, [sp, #24]
 80089e8:	aa09      	add	r2, sp, #36	@ 0x24
 80089ea:	f7ff fef7 	bl	80087dc <_printf_common>
 80089ee:	3001      	adds	r0, #1
 80089f0:	d148      	bne.n	8008a84 <_printf_i+0x1c8>
 80089f2:	2001      	movs	r0, #1
 80089f4:	4240      	negs	r0, r0
 80089f6:	b00b      	add	sp, #44	@ 0x2c
 80089f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089fa:	2220      	movs	r2, #32
 80089fc:	6809      	ldr	r1, [r1, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	6022      	str	r2, [r4, #0]
 8008a02:	2278      	movs	r2, #120	@ 0x78
 8008a04:	4932      	ldr	r1, [pc, #200]	@ (8008ad0 <_printf_i+0x214>)
 8008a06:	9104      	str	r1, [sp, #16]
 8008a08:	0021      	movs	r1, r4
 8008a0a:	3145      	adds	r1, #69	@ 0x45
 8008a0c:	700a      	strb	r2, [r1, #0]
 8008a0e:	6819      	ldr	r1, [r3, #0]
 8008a10:	6822      	ldr	r2, [r4, #0]
 8008a12:	c940      	ldmia	r1!, {r6}
 8008a14:	0610      	lsls	r0, r2, #24
 8008a16:	d402      	bmi.n	8008a1e <_printf_i+0x162>
 8008a18:	0650      	lsls	r0, r2, #25
 8008a1a:	d500      	bpl.n	8008a1e <_printf_i+0x162>
 8008a1c:	b2b6      	uxth	r6, r6
 8008a1e:	6019      	str	r1, [r3, #0]
 8008a20:	07d3      	lsls	r3, r2, #31
 8008a22:	d502      	bpl.n	8008a2a <_printf_i+0x16e>
 8008a24:	2320      	movs	r3, #32
 8008a26:	4313      	orrs	r3, r2
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	2e00      	cmp	r6, #0
 8008a2c:	d001      	beq.n	8008a32 <_printf_i+0x176>
 8008a2e:	2710      	movs	r7, #16
 8008a30:	e7aa      	b.n	8008988 <_printf_i+0xcc>
 8008a32:	2220      	movs	r2, #32
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	4393      	bics	r3, r2
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	e7f8      	b.n	8008a2e <_printf_i+0x172>
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	680d      	ldr	r5, [r1, #0]
 8008a40:	1d10      	adds	r0, r2, #4
 8008a42:	6949      	ldr	r1, [r1, #20]
 8008a44:	6018      	str	r0, [r3, #0]
 8008a46:	6813      	ldr	r3, [r2, #0]
 8008a48:	062e      	lsls	r6, r5, #24
 8008a4a:	d501      	bpl.n	8008a50 <_printf_i+0x194>
 8008a4c:	6019      	str	r1, [r3, #0]
 8008a4e:	e002      	b.n	8008a56 <_printf_i+0x19a>
 8008a50:	066d      	lsls	r5, r5, #25
 8008a52:	d5fb      	bpl.n	8008a4c <_printf_i+0x190>
 8008a54:	8019      	strh	r1, [r3, #0]
 8008a56:	2300      	movs	r3, #0
 8008a58:	9d03      	ldr	r5, [sp, #12]
 8008a5a:	6123      	str	r3, [r4, #16]
 8008a5c:	e7bf      	b.n	80089de <_printf_i+0x122>
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	1d11      	adds	r1, r2, #4
 8008a62:	6019      	str	r1, [r3, #0]
 8008a64:	6815      	ldr	r5, [r2, #0]
 8008a66:	2100      	movs	r1, #0
 8008a68:	0028      	movs	r0, r5
 8008a6a:	6862      	ldr	r2, [r4, #4]
 8008a6c:	f000 f856 	bl	8008b1c <memchr>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d001      	beq.n	8008a78 <_printf_i+0x1bc>
 8008a74:	1b40      	subs	r0, r0, r5
 8008a76:	6060      	str	r0, [r4, #4]
 8008a78:	6863      	ldr	r3, [r4, #4]
 8008a7a:	6123      	str	r3, [r4, #16]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	9a03      	ldr	r2, [sp, #12]
 8008a80:	7013      	strb	r3, [r2, #0]
 8008a82:	e7ac      	b.n	80089de <_printf_i+0x122>
 8008a84:	002a      	movs	r2, r5
 8008a86:	6923      	ldr	r3, [r4, #16]
 8008a88:	9906      	ldr	r1, [sp, #24]
 8008a8a:	9805      	ldr	r0, [sp, #20]
 8008a8c:	9d07      	ldr	r5, [sp, #28]
 8008a8e:	47a8      	blx	r5
 8008a90:	3001      	adds	r0, #1
 8008a92:	d0ae      	beq.n	80089f2 <_printf_i+0x136>
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	079b      	lsls	r3, r3, #30
 8008a98:	d415      	bmi.n	8008ac6 <_printf_i+0x20a>
 8008a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a9c:	68e0      	ldr	r0, [r4, #12]
 8008a9e:	4298      	cmp	r0, r3
 8008aa0:	daa9      	bge.n	80089f6 <_printf_i+0x13a>
 8008aa2:	0018      	movs	r0, r3
 8008aa4:	e7a7      	b.n	80089f6 <_printf_i+0x13a>
 8008aa6:	0022      	movs	r2, r4
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	9906      	ldr	r1, [sp, #24]
 8008aac:	9805      	ldr	r0, [sp, #20]
 8008aae:	9e07      	ldr	r6, [sp, #28]
 8008ab0:	3219      	adds	r2, #25
 8008ab2:	47b0      	blx	r6
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	d09c      	beq.n	80089f2 <_printf_i+0x136>
 8008ab8:	3501      	adds	r5, #1
 8008aba:	68e3      	ldr	r3, [r4, #12]
 8008abc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	dcf0      	bgt.n	8008aa6 <_printf_i+0x1ea>
 8008ac4:	e7e9      	b.n	8008a9a <_printf_i+0x1de>
 8008ac6:	2500      	movs	r5, #0
 8008ac8:	e7f7      	b.n	8008aba <_printf_i+0x1fe>
 8008aca:	46c0      	nop			@ (mov r8, r8)
 8008acc:	08009731 	.word	0x08009731
 8008ad0:	08009742 	.word	0x08009742

08008ad4 <memmove>:
 8008ad4:	b510      	push	{r4, lr}
 8008ad6:	4288      	cmp	r0, r1
 8008ad8:	d902      	bls.n	8008ae0 <memmove+0xc>
 8008ada:	188b      	adds	r3, r1, r2
 8008adc:	4298      	cmp	r0, r3
 8008ade:	d308      	bcc.n	8008af2 <memmove+0x1e>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d007      	beq.n	8008af6 <memmove+0x22>
 8008ae6:	5ccc      	ldrb	r4, [r1, r3]
 8008ae8:	54c4      	strb	r4, [r0, r3]
 8008aea:	3301      	adds	r3, #1
 8008aec:	e7f9      	b.n	8008ae2 <memmove+0xe>
 8008aee:	5c8b      	ldrb	r3, [r1, r2]
 8008af0:	5483      	strb	r3, [r0, r2]
 8008af2:	3a01      	subs	r2, #1
 8008af4:	d2fb      	bcs.n	8008aee <memmove+0x1a>
 8008af6:	bd10      	pop	{r4, pc}

08008af8 <_sbrk_r>:
 8008af8:	2300      	movs	r3, #0
 8008afa:	b570      	push	{r4, r5, r6, lr}
 8008afc:	4d06      	ldr	r5, [pc, #24]	@ (8008b18 <_sbrk_r+0x20>)
 8008afe:	0004      	movs	r4, r0
 8008b00:	0008      	movs	r0, r1
 8008b02:	602b      	str	r3, [r5, #0]
 8008b04:	f7f9 ff4a 	bl	800299c <_sbrk>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d103      	bne.n	8008b14 <_sbrk_r+0x1c>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d000      	beq.n	8008b14 <_sbrk_r+0x1c>
 8008b12:	6023      	str	r3, [r4, #0]
 8008b14:	bd70      	pop	{r4, r5, r6, pc}
 8008b16:	46c0      	nop			@ (mov r8, r8)
 8008b18:	200012ac 	.word	0x200012ac

08008b1c <memchr>:
 8008b1c:	b2c9      	uxtb	r1, r1
 8008b1e:	1882      	adds	r2, r0, r2
 8008b20:	4290      	cmp	r0, r2
 8008b22:	d101      	bne.n	8008b28 <memchr+0xc>
 8008b24:	2000      	movs	r0, #0
 8008b26:	4770      	bx	lr
 8008b28:	7803      	ldrb	r3, [r0, #0]
 8008b2a:	428b      	cmp	r3, r1
 8008b2c:	d0fb      	beq.n	8008b26 <memchr+0xa>
 8008b2e:	3001      	adds	r0, #1
 8008b30:	e7f6      	b.n	8008b20 <memchr+0x4>

08008b32 <_realloc_r>:
 8008b32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b34:	0006      	movs	r6, r0
 8008b36:	000c      	movs	r4, r1
 8008b38:	0015      	movs	r5, r2
 8008b3a:	2900      	cmp	r1, #0
 8008b3c:	d105      	bne.n	8008b4a <_realloc_r+0x18>
 8008b3e:	0011      	movs	r1, r2
 8008b40:	f7ff fc5e 	bl	8008400 <_malloc_r>
 8008b44:	0004      	movs	r4, r0
 8008b46:	0020      	movs	r0, r4
 8008b48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b4a:	2a00      	cmp	r2, #0
 8008b4c:	d103      	bne.n	8008b56 <_realloc_r+0x24>
 8008b4e:	f7ff fbeb 	bl	8008328 <_free_r>
 8008b52:	002c      	movs	r4, r5
 8008b54:	e7f7      	b.n	8008b46 <_realloc_r+0x14>
 8008b56:	f000 f81c 	bl	8008b92 <_malloc_usable_size_r>
 8008b5a:	0007      	movs	r7, r0
 8008b5c:	4285      	cmp	r5, r0
 8008b5e:	d802      	bhi.n	8008b66 <_realloc_r+0x34>
 8008b60:	0843      	lsrs	r3, r0, #1
 8008b62:	42ab      	cmp	r3, r5
 8008b64:	d3ef      	bcc.n	8008b46 <_realloc_r+0x14>
 8008b66:	0029      	movs	r1, r5
 8008b68:	0030      	movs	r0, r6
 8008b6a:	f7ff fc49 	bl	8008400 <_malloc_r>
 8008b6e:	9001      	str	r0, [sp, #4]
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d101      	bne.n	8008b78 <_realloc_r+0x46>
 8008b74:	9c01      	ldr	r4, [sp, #4]
 8008b76:	e7e6      	b.n	8008b46 <_realloc_r+0x14>
 8008b78:	002a      	movs	r2, r5
 8008b7a:	42bd      	cmp	r5, r7
 8008b7c:	d900      	bls.n	8008b80 <_realloc_r+0x4e>
 8008b7e:	003a      	movs	r2, r7
 8008b80:	0021      	movs	r1, r4
 8008b82:	9801      	ldr	r0, [sp, #4]
 8008b84:	f7ff fbc6 	bl	8008314 <memcpy>
 8008b88:	0021      	movs	r1, r4
 8008b8a:	0030      	movs	r0, r6
 8008b8c:	f7ff fbcc 	bl	8008328 <_free_r>
 8008b90:	e7f0      	b.n	8008b74 <_realloc_r+0x42>

08008b92 <_malloc_usable_size_r>:
 8008b92:	1f0b      	subs	r3, r1, #4
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	1f18      	subs	r0, r3, #4
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	da01      	bge.n	8008ba0 <_malloc_usable_size_r+0xe>
 8008b9c:	580b      	ldr	r3, [r1, r0]
 8008b9e:	18c0      	adds	r0, r0, r3
 8008ba0:	4770      	bx	lr
	...

08008ba4 <_init>:
 8008ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba6:	46c0      	nop			@ (mov r8, r8)
 8008ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008baa:	bc08      	pop	{r3}
 8008bac:	469e      	mov	lr, r3
 8008bae:	4770      	bx	lr

08008bb0 <_fini>:
 8008bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb2:	46c0      	nop			@ (mov r8, r8)
 8008bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb6:	bc08      	pop	{r3}
 8008bb8:	469e      	mov	lr, r3
 8008bba:	4770      	bx	lr
 8008bbc:	0000      	movs	r0, r0
	...

08008bc0 <__FLASH_Program_Fast_veneer>:
 8008bc0:	b401      	push	{r0}
 8008bc2:	4802      	ldr	r0, [pc, #8]	@ (8008bcc <__FLASH_Program_Fast_veneer+0xc>)
 8008bc4:	4684      	mov	ip, r0
 8008bc6:	bc01      	pop	{r0}
 8008bc8:	4760      	bx	ip
 8008bca:	bf00      	nop
 8008bcc:	20000071 	.word	0x20000071

Disassembly of section .data:

20000000 <Font_7x10>:
20000000:	00000a07 08008ef0                       ........

20000008 <supported_commands>:
20000008:	54535251 58575655 5c5b5a59              QRSTUVWXYZ[\

20000014 <SystemCoreClock>:
20000014:	00f42400                                .$..

20000018 <uwTickPrio>:
20000018:	00000004                                ....

2000001c <uwTickFreq>:
2000001c:	00000001                                ....

20000020 <_impure_ptr>:
20000020:	20000024                                $.. 

20000024 <_impure_data>:
20000024:	00000000 20001174 200011dc 20001244     ....t.. ... D.. 
	...

20000070 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000070:	b580      	push	{r7, lr}
20000072:	b088      	sub	sp, #32
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
20000078:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000007a:	231f      	movs	r3, #31
2000007c:	18fb      	adds	r3, r7, r3
2000007e:	2200      	movs	r2, #0
20000080:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000086:	683b      	ldr	r3, [r7, #0]
20000088:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000008a:	4b1a      	ldr	r3, [pc, #104]	@ (200000f4 <FLASH_Program_Fast+0x84>)
2000008c:	695a      	ldr	r2, [r3, #20]
2000008e:	4b19      	ldr	r3, [pc, #100]	@ (200000f4 <FLASH_Program_Fast+0x84>)
20000090:	2180      	movs	r1, #128	@ 0x80
20000092:	02c9      	lsls	r1, r1, #11
20000094:	430a      	orrs	r2, r1
20000096:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000098:	f3ef 8310 	mrs	r3, PRIMASK
2000009c:	60fb      	str	r3, [r7, #12]
  return(result);
2000009e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000a2:	b672      	cpsid	i
}
200000a4:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000a6:	e00f      	b.n	200000c8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000a8:	697a      	ldr	r2, [r7, #20]
200000aa:	69bb      	ldr	r3, [r7, #24]
200000ac:	6812      	ldr	r2, [r2, #0]
200000ae:	601a      	str	r2, [r3, #0]
    src += 4U;
200000b0:	697b      	ldr	r3, [r7, #20]
200000b2:	3304      	adds	r3, #4
200000b4:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000b6:	69bb      	ldr	r3, [r7, #24]
200000b8:	3304      	adds	r3, #4
200000ba:	61bb      	str	r3, [r7, #24]
    index++;
200000bc:	211f      	movs	r1, #31
200000be:	187b      	adds	r3, r7, r1
200000c0:	781a      	ldrb	r2, [r3, #0]
200000c2:	187b      	adds	r3, r7, r1
200000c4:	3201      	adds	r2, #1
200000c6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000c8:	231f      	movs	r3, #31
200000ca:	18fb      	adds	r3, r7, r3
200000cc:	781b      	ldrb	r3, [r3, #0]
200000ce:	2b3f      	cmp	r3, #63	@ 0x3f
200000d0:	d9ea      	bls.n	200000a8 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000d2:	46c0      	nop			@ (mov r8, r8)
200000d4:	4b07      	ldr	r3, [pc, #28]	@ (200000f4 <FLASH_Program_Fast+0x84>)
200000d6:	691a      	ldr	r2, [r3, #16]
200000d8:	2380      	movs	r3, #128	@ 0x80
200000da:	025b      	lsls	r3, r3, #9
200000dc:	4013      	ands	r3, r2
200000de:	d1f9      	bne.n	200000d4 <FLASH_Program_Fast+0x64>
200000e0:	693b      	ldr	r3, [r7, #16]
200000e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000e4:	68bb      	ldr	r3, [r7, #8]
200000e6:	f383 8810 	msr	PRIMASK, r3
}
200000ea:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000ec:	46c0      	nop			@ (mov r8, r8)
200000ee:	46bd      	mov	sp, r7
200000f0:	b008      	add	sp, #32
200000f2:	bd80      	pop	{r7, pc}
200000f4:	40022000 	.word	0x40022000
